--Oracle C Kernel function. Most data is copied from http://orafun.info/
return {
    abspath1_xdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    abspath1xdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    abspath_xdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    abspathxdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    ad1="SYS.ANYDATA.CONVERTNUMBER(DBMS_ANYDATA_LIB)",
    ad10="SYS.ANYDATA.CONVERTOBJECT(DBMS_ANYDATA_LIB)",
    ad11="SYS.ANYDATA.CONVERTREF(DBMS_ANYDATA_LIB)",
    ad12="SYS.ANYDATA.CONVERTCOLLECTION(DBMS_ANYDATA_LIB)",
    ad13="SYS.ANYDATA.BEGINCREATE(DBMS_ANYDATA_LIB)",
    ad14="SYS.ANYDATA.PIECEWISE(DBMS_ANYDATA_LIB)",
    ad15="SYS.ANYDATA.SETNUMBER(DBMS_ANYDATA_LIB)",
    ad16="SYS.ANYDATA.SETDATE(DBMS_ANYDATA_LIB)",
    ad17="SYS.ANYDATA.SETCHAR(DBMS_ANYDATA_LIB)",
    ad18="SYS.ANYDATA.SETVARCHAR(DBMS_ANYDATA_LIB)",
    ad19="SYS.ANYDATA.SETVARCHAR2(DBMS_ANYDATA_LIB)",
    ad2="SYS.ANYDATA.CONVERTDATE(DBMS_ANYDATA_LIB)",
    ad20="SYS.ANYDATA.SETRAW(DBMS_ANYDATA_LIB)",
    ad21="SYS.ANYDATA.SETBLOB(DBMS_ANYDATA_LIB)",
    ad22="SYS.ANYDATA.SETCLOB(DBMS_ANYDATA_LIB)",
    ad23="SYS.ANYDATA.SETBFILE(DBMS_ANYDATA_LIB)",
    ad24="SYS.ANYDATA.SETOBJECT(DBMS_ANYDATA_LIB)",
    ad25="SYS.ANYDATA.SETREF(DBMS_ANYDATA_LIB)",
    ad26="SYS.ANYDATA.SETCOLLECTION(DBMS_ANYDATA_LIB)",
    ad27="SYS.ANYDATA.ENDCREATE(DBMS_ANYDATA_LIB)",
    ad28="SYS.ANYDATA.GETTYPENAME(DBMS_ANYDATA_LIB)",
    ad29="SYS.ANYDATA.GETTYPE(DBMS_ANYDATA_LIB)",
    ad3="SYS.ANYDATA.CONVERTCHAR(DBMS_ANYDATA_LIB)",
    ad30="SYS.ANYDATA.GETNUMBER(DBMS_ANYDATA_LIB)",
    ad31="SYS.ANYDATA.GETDATE(DBMS_ANYDATA_LIB)",
    ad32="SYS.ANYDATA.GETCHAR(DBMS_ANYDATA_LIB)",
    ad33="SYS.ANYDATA.GETVARCHAR(DBMS_ANYDATA_LIB)",
    ad34="SYS.ANYDATA.GETVARCHAR2(DBMS_ANYDATA_LIB)",
    ad35="SYS.ANYDATA.GETRAW(DBMS_ANYDATA_LIB)",
    ad36="SYS.ANYDATA.GETBLOB(DBMS_ANYDATA_LIB)",
    ad37="SYS.ANYDATA.GETCLOB(DBMS_ANYDATA_LIB)",
    ad38="SYS.ANYDATA.GETBFILE(DBMS_ANYDATA_LIB)",
    ad39="SYS.ANYDATA.GETOBJECT(DBMS_ANYDATA_LIB)",
    ad4="SYS.ANYDATA.CONVERTVARCHAR(DBMS_ANYDATA_LIB)",
    ad40="SYS.ANYDATA.GETREF(DBMS_ANYDATA_LIB)",
    ad41="SYS.ANYDATA.GETCOLLECTION(DBMS_ANYDATA_LIB)",
    ad42="SYS.ANYDATA.CONVERTOBJECT(DBMS_ANYDATA_LIB)",
    ad43="SYS.ANYDATA.SETOBJECT(DBMS_ANYDATA_LIB)",
    ad44="SYS.ANYDATA.GETOBJECT(DBMS_ANYDATA_LIB)",
    ad45="SYS.ANYDATA.CONVERTTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad46="SYS.ANYDATA.CONVERTTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad47="SYS.ANYDATA.CONVERTTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad48="SYS.ANYDATA.CONVERTINTERVALYM(DBMS_ANYDATA_LIB)",
    ad49="SYS.ANYDATA.CONVERTINTERVALDS(DBMS_ANYDATA_LIB)",
    ad5="SYS.ANYDATA.CONVERTVARCHAR2(DBMS_ANYDATA_LIB)",
    ad50="SYS.ANYDATA.CONVERTNCHAR(DBMS_ANYDATA_LIB)",
    ad51="SYS.ANYDATA.CONVERTNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad52="SYS.ANYDATA.CONVERTNCLOB(DBMS_ANYDATA_LIB)",
    ad53="SYS.ANYDATA.SETTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad54="SYS.ANYDATA.SETTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad55="SYS.ANYDATA.SETTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad56="SYS.ANYDATA.SETINTERVALYM(DBMS_ANYDATA_LIB)",
    ad57="SYS.ANYDATA.SETINTERVALDS(DBMS_ANYDATA_LIB)",
    ad58="SYS.ANYDATA.SETNCHAR(DBMS_ANYDATA_LIB)",
    ad59="SYS.ANYDATA.SETNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad6="SYS.ANYDATA.CONVERTRAW(DBMS_ANYDATA_LIB)",
    ad60="SYS.ANYDATA.SETNCLOB(DBMS_ANYDATA_LIB)",
    ad61="SYS.ANYDATA.GETTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad62="SYS.ANYDATA.GETTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad63="SYS.ANYDATA.GETTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad64="SYS.ANYDATA.GETINTERVALYM(DBMS_ANYDATA_LIB)",
    ad65="SYS.ANYDATA.GETINTERVALDS(DBMS_ANYDATA_LIB)",
    ad66="SYS.ANYDATA.GETNCHAR(DBMS_ANYDATA_LIB)",
    ad67="SYS.ANYDATA.GETNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad68="SYS.ANYDATA.GETNCLOB(DBMS_ANYDATA_LIB)",
    ad69="SYS.ANYDATA.ACCESSNUMBER(DBMS_ANYDATA_LIB)",
    ad7="SYS.ANYDATA.CONVERTBLOB(DBMS_ANYDATA_LIB)",
    ad70="SYS.ANYDATA.ACCESSDATE(DBMS_ANYDATA_LIB)",
    ad71="SYS.ANYDATA.ACCESSCHAR(DBMS_ANYDATA_LIB)",
    ad72="SYS.ANYDATA.ACCESSVARCHAR(DBMS_ANYDATA_LIB)",
    ad73="SYS.ANYDATA.ACCESSVARCHAR2(DBMS_ANYDATA_LIB)",
    ad74="SYS.ANYDATA.ACCESSRAW(DBMS_ANYDATA_LIB)",
    ad75="SYS.ANYDATA.ACCESSBLOB(DBMS_ANYDATA_LIB)",
    ad76="SYS.ANYDATA.ACCESSCLOB(DBMS_ANYDATA_LIB)",
    ad77="SYS.ANYDATA.ACCESSBFILE(DBMS_ANYDATA_LIB)",
    ad78="SYS.ANYDATA.ACCESSTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad79="SYS.ANYDATA.ACCESSTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad8="SYS.ANYDATA.CONVERTCLOB(DBMS_ANYDATA_LIB)",
    ad80="SYS.ANYDATA.ACCESSTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad81="SYS.ANYDATA.ACCESSINTERVALYM(DBMS_ANYDATA_LIB)",
    ad82="SYS.ANYDATA.ACCESSINTERVALDS(DBMS_ANYDATA_LIB)",
    ad83="SYS.ANYDATA.ACCESSNCHAR(DBMS_ANYDATA_LIB)",
    ad84="SYS.ANYDATA.ACCESSNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad85="SYS.ANYDATA.ACCESSNCLOB(DBMS_ANYDATA_LIB)",
    ad86="SYS.SYS$RAWTOANY.sys$rawtoany(DBMS_ANYDATA_LIB)",
    ad87="SYS.ANYDATA.CONVERTBDOUBLE(DBMS_ANYDATA_LIB)",
    ad88="SYS.ANYDATA.CONVERTUROWID(DBMS_ANYDATA_LIB)",
    ad89="SYS.ANYDATA.SETBFLOAT(DBMS_ANYDATA_LIB)",
    ad9="SYS.ANYDATA.CONVERTBFILE(DBMS_ANYDATA_LIB)",
    ad90="SYS.ANYDATA.SETBDOUBLE(DBMS_ANYDATA_LIB)",
    ad91="SYS.ANYDATA.GETBFLOAT(DBMS_ANYDATA_LIB)",
    ad92="SYS.ANYDATA.GETBDOUBLE(DBMS_ANYDATA_LIB)",
    ad93="SYS.ANYDATA.ACCESSBFLOAT(DBMS_ANYDATA_LIB)",
    ad94="SYS.ANYDATA.ACCESSBDOUBLE(DBMS_ANYDATA_LIB)",
    ad95="SYS.ANYDATA.ACCESSUROWID(DBMS_ANYDATA_LIB)",
    ad96="SYS.ANYDATA.CONVERTBFLOAT(DBMS_ANYDATA_LIB)",
    adbdrv="alter database driver",
    add_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addBlob_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addBlobArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addBoolean_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addBooleanArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addClob_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addClobArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addDate_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addDateArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addNull_Arr="SYS.JDOM_T.append_Null(DBMS_JDOM_LIB)",
    addNullArr="SYS.JDOM_T.append_Null(DBMS_JDOM_LIB)",
    addNumber_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addNumberArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addString_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addStringArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addTStamp_Arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addTStampArr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    AggWrap="SYS.AGGXMLIMP.ODCIAggregateInitialize(xmltype_lib)",
    ain="alter index",
    ainPDrop="alter index drop an index partition",
    allpath1_xdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC(XDB.PATH_VIEW_LIB)",
    allpath1xdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC(XDB.PATH_VIEW_LIB)",
    allpath_xdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC_INT(XDB.PATH_VIEW_LIB)",
    allpathxdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC_INT(XDB.PATH_VIEW_LIB)",
    alter_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.ALTER_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    alterrwequivalence="SYS.DBMS_ADVANCED_REWRITE.ALTER_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    anydata2str="CTXSYS.DRVDML.MDATAANYDATA2STR(DR$LIB)",
    aop="audit options",
    apa="SQL Access Path Analysis",
    apacb="SQL Access Path Analysis connect by",
    apadrv="SQL Access Path Analysis drive access path selection for a sql command",
    apaIMC="SQL Access Path Analysis in-memory column store",
    apakkoqb="SQL Access Path Analysis drive access path analysis for every query block",
    apaqbd="SQL Access Path Analysis drive access path analysis for every query block",
    apaStmtAddXplAnnotations="SQL Access Path Analysis add explain annotations",
    appendChildXML="SYS.XMLTYPE.APPENDCHILDXML(XMLTYPE_LIB)",
    applying_crossedition_trigger="SYS.DBMS_STANDARD.applying_crossedition_trigger(C)",
    applyingcrosseditiontrigger="SYS.DBMS_STANDARD.applying_crossedition_trigger(C)",
    aq_internal_exeStmt="SYS.DBMS_AQADM_SYSCALLS.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_INV.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_VAR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQJMS_INTERNAL.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQ_IMPORT_INTERNAL_DR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)",
    aqinternalexeStmt="SYS.DBMS_AQADM_SYSCALLS.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_INV.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_VAR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQJMS_INTERNAL.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQ_IMPORT_INTERNAL_DR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)",
    as1="SYS.ANYDATASET.BEGINCREATE(DBMS_ANYDATASET_LIB)",
    as10="SYS.ANYDATASET.SETBLOB(DBMS_ANYDATASET_LIB)",
    as11="SYS.ANYDATASET.SETCLOB(DBMS_ANYDATASET_LIB)",
    as12="SYS.ANYDATASET.SETBFILE(DBMS_ANYDATASET_LIB)",
    as13="SYS.ANYDATASET.SETOBJECT(DBMS_ANYDATASET_LIB)",
    as14="SYS.ANYDATASET.SETREF(DBMS_ANYDATASET_LIB)",
    as15="SYS.ANYDATASET.SETCOLLECTION(DBMS_ANYDATASET_LIB)",
    as16="SYS.ANYDATASET.ENDCREATE(DBMS_ANYDATASET_LIB)",
    as17="SYS.ANYDATASET.GETTYPENAME(DBMS_ANYDATASET_LIB)",
    as18="SYS.ANYDATASET.GETTYPE(DBMS_ANYDATASET_LIB)",
    as19="SYS.ANYDATASET.GETNUMBER(DBMS_ANYDATASET_LIB)",
    as2="SYS.ANYDATASET.ADDINSTANCE(DBMS_ANYDATASET_LIB)",
    as20="SYS.ANYDATASET.GETDATE(DBMS_ANYDATASET_LIB)",
    as21="SYS.ANYDATASET.GETCHAR(DBMS_ANYDATASET_LIB)",
    as22="SYS.ANYDATASET.GETVARCHAR(DBMS_ANYDATASET_LIB)",
    as23="SYS.ANYDATASET.GETVARCHAR2(DBMS_ANYDATASET_LIB)",
    as24="SYS.ANYDATASET.GETRAW(DBMS_ANYDATASET_LIB)",
    as25="SYS.ANYDATASET.GETBLOB(DBMS_ANYDATASET_LIB)",
    as26="SYS.ANYDATASET.GETCLOB(DBMS_ANYDATASET_LIB)",
    as27="SYS.ANYDATASET.GETBFILE(DBMS_ANYDATASET_LIB)",
    as28="SYS.ANYDATASET.GETOBJECT(DBMS_ANYDATASET_LIB)",
    as29="SYS.ANYDATASET.GETREF(DBMS_ANYDATASET_LIB)",
    as3="SYS.ANYDATASET.PIECEWISE(DBMS_ANYDATASET_LIB)",
    as30="SYS.ANYDATASET.GETCOLLECTION(DBMS_ANYDATASET_LIB)",
    as31="SYS.ANYDATASET.GETCOUNT(DBMS_ANYDATASET_LIB)",
    as32="SYS.ANYDATASET.GETINSTANCE(DBMS_ANYDATASET_LIB)",
    as33="SYS.ANYDATASET.SETOBJECT(DBMS_ANYDATASET_LIB)",
    as34="SYS.ANYDATASET.GETOBJECT(DBMS_ANYDATASET_LIB)",
    as35="SYS.ANYDATASET.SETTIMESTAMP(DBMS_ANYDATASET_LIB)",
    as36="SYS.ANYDATASET.SETTIMESTAMPTZ(DBMS_ANYDATASET_LIB)",
    as37="SYS.ANYDATASET.SETTIMESTAMPLTZ(DBMS_ANYDATASET_LIB)",
    as38="SYS.ANYDATASET.SETINTERVALYM(DBMS_ANYDATASET_LIB)",
    as39="SYS.ANYDATASET.SETINTERVALDS(DBMS_ANYDATASET_LIB)",
    as4="SYS.ANYDATASET.SETNUMBER(DBMS_ANYDATASET_LIB)",
    as40="SYS.ANYDATASET.SETNCHAR(DBMS_ANYDATASET_LIB)",
    as41="SYS.ANYDATASET.SETNVARCHAR2(DBMS_ANYDATASET_LIB)",
    as42="SYS.ANYDATASET.SETNCLOB(DBMS_ANYDATASET_LIB)",
    as43="SYS.ANYDATASET.GETTIMESTAMP(DBMS_ANYDATASET_LIB)",
    as44="SYS.ANYDATASET.GETTIMESTAMPTZ(DBMS_ANYDATASET_LIB)",
    as45="SYS.ANYDATASET.GETTIMESTAMPLTZ(DBMS_ANYDATASET_LIB)",
    as46="SYS.ANYDATASET.GETINTERVALYM(DBMS_ANYDATASET_LIB)",
    as47="SYS.ANYDATASET.GETINTERVALDS(DBMS_ANYDATASET_LIB)",
    as48="SYS.ANYDATASET.GETNCHAR(DBMS_ANYDATASET_LIB)",
    as49="SYS.ANYDATASET.GETNVARCHAR2(DBMS_ANYDATASET_LIB)",
    as5="SYS.ANYDATASET.SETDATE(DBMS_ANYDATASET_LIB)",
    as50="SYS.ANYDATASET.GETNCLOB(DBMS_ANYDATASET_LIB)",
    as51="SYS.ANYDATASET.SETBFLOAT(DBMS_ANYDATASET_LIB)",
    as52="SYS.ANYDATASET.SETBDOUBLE(DBMS_ANYDATASET_LIB)",
    as53="SYS.ANYDATASET.SETUROWID(DBMS_ANYDATASET_LIB)",
    as54="SYS.ANYDATASET.GETBFLOAT(DBMS_ANYDATASET_LIB)",
    as55="SYS.ANYDATASET.GETBDOUBLE(DBMS_ANYDATASET_LIB)",
    as56="SYS.ANYDATASET.GETUROWID(DBMS_ANYDATASET_LIB)",
    as6="SYS.ANYDATASET.SETCHAR(DBMS_ANYDATASET_LIB)",
    as7="SYS.ANYDATASET.SETVARCHAR(DBMS_ANYDATASET_LIB)",
    as8="SYS.ANYDATASET.SETVARCHAR2(DBMS_ANYDATASET_LIB)",
    as9="SYS.ANYDATASET.SETRAW(DBMS_ANYDATASET_LIB)",
    at1="SYS.ANYTYPE.BEGINCREATE(DBMS_ANYTYPE_LIB)",
    at2="SYS.ANYTYPE.SETINFO(DBMS_ANYTYPE_LIB)",
    at3="SYS.ANYTYPE.ADDATTR(DBMS_ANYTYPE_LIB)",
    at4="SYS.ANYTYPE.ENDCREATE(DBMS_ANYTYPE_LIB)",
    at5="SYS.ANYTYPE.GETPERSISTENT(DBMS_ANYTYPE_LIB)",
    at6="SYS.ANYTYPE.GETINFO(DBMS_ANYTYPE_LIB)",
    at7="SYS.ANYTYPE.GETATTRELEMINFO(DBMS_ANYTYPE_LIB)",
    at8="SYS.GETANYTYPEFROMPERSISTENT.GetAnyTypeFromPersistent(DBMS_ANYTYPE_LIB)",
    atb="alter table",
    atbdrv="alter table driver",
    atbedml="alter table enable dml locks",
    aud="audit",
    audbeg="audit begin",
    auddel="audit delete",
    auddft="audit default function",
    audend="audit end (commit) transaction",
    audfro="audit top level objects",
    audins="audit insert audit record",
    audtar="audit audit create/alter/drop tablespace,rollback segment and alter system",
    aus="audit statement",
    ausdrv="audit statement driver",
    bam="PLSQL_KG_Interface",
    begin_discrete_transaction="SYS.DBMS_TRANSACTION.begin_discrete_transactio(C)",
    begindiscretetransaction="SYS.DBMS_TRANSACTION.begin_discrete_transactio(C)",
    bind_variable="SYS.DBMS_SQL.bind_variable(c)",
    bind_variable_pkg="SYS.DBMS_SQL.bind_variable_pkg(c)/SYS.DBMS_SYS_SQL.BIND_VARIABLE_PKG(C)",
    bindvariable="SYS.DBMS_SQL.bind_variable(c)",
    bindvariablepkg="SYS.DBMS_SQL.bind_variable_pkg(c)/SYS.DBMS_SYS_SQL.BIND_VARIABLE_PKG(C)",
    bintrfileconvert="SYS.DBMS_SERVER_TRACE.CONVERT_BINARY_TRACE_FILE(DBMS_SERVER_TRACE_LIB)",
    BZ2="bzip2",
    BZ2_decompress="bzip2 decompress",
    c_domattr_getexpandedname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getlocalname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getnamespace="XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    c_domattr_getownerelement="XDB.DBMS_XMLDOM.XMLD_GETOWNERELEMENT(DBMS_XMLDOM_LIB)",
    c_domattr_getqualifiedname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getspecified="XDB.DBMS_XMLDOM.XMLD_GETSPECIFIED(DBMS_XMLDOM_LIB)",
    c_domattr_getvalue="XDB.DBMS_XMLDOM.XMLD_GETVALUE(DBMS_XMLDOM_LIB)",
    c_domattr_isnull="XDB.DBMS_XMLDOM.XMLD_ATTR_ISNULL(DBMS_XMLDOM_LIB)",
    c_domattr_makenode="XDB.DBMS_XMLDOM.XMLD_ATTR_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domattr_setvalue="XDB.DBMS_XMLDOM.XMLD_SETVALUE(DBMS_XMLDOM_LIB)",
    c_domcdata_appenddata="XDB.DBMS_XMLDOM.XMLD_APPENDDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_deletedata="XDB.DBMS_XMLDOM.XMLD_DELETEDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_getdata="XDB.DBMS_XMLDOM.XMLD_CDATA_GETDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_getlength="XDB.DBMS_XMLDOM.XMLD_CDATA_GETLENGTH(DBMS_XMLDOM_LIB)",
    c_domcdata_insertdata="XDB.DBMS_XMLDOM.XMLD_INSERTDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_isnull="XDB.DBMS_XMLDOM.XMLD_CDATA_ISNULL(DBMS_XMLDOM_LIB)",
    c_domcdata_makenode="XDB.DBMS_XMLDOM.XMLD_CDATA_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domcdata_replacedata="XDB.DBMS_XMLDOM.XMLD_REPLACEDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_setdata="XDB.DBMS_XMLDOM.XMLD_CDATA_SETDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_substringdata="XDB.DBMS_XMLDOM.XMLD_SUBSTRINGDATA(DBMS_XMLDOM_LIB)",
    c_domcdatasection_isnull="XDB.DBMS_XMLDOM.XMLD_CDATASECTION_ISNULL(DBMS_XMLDOM_LIB)",
    c_domcdatasection_makenode="XDB.DBMS_XMLDOM.XMLD_CDATASECTION_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domcomment_isnull="XDB.DBMS_XMLDOM.XMLD_COMMENT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domcomment_makenode="XDB.DBMS_XMLDOM.XMLD_COMMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domdoc_adoptnode="XDB.DBMS_XMLDOM.XMLD_ADOPTNODE(DBMS_XMLDOM_LIB)",
    c_domdoc_create="XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createattribute="XDB.DBMS_XMLDOM.XMLD_CREATEATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domdoc_createcdatasection="XDB.DBMS_XMLDOM.XMLD_CREATECDATASECTION(DBMS_XMLDOM_LIB)",
    c_domdoc_createcomment="XDB.DBMS_XMLDOM.XMLD_CREATECOMMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createdocfragment="XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createelement="XDB.DBMS_XMLDOM.XMLD_CREATEELEMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createentityref="XDB.DBMS_XMLDOM.XMLD_CREATEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    c_domdoc_createfromclob="XDB.DBMS_XMLDOM.XMLD_NEWDOCUMENTFROMCLOB(DBMS_XMLDOM_LIB)",
    c_domdoc_createfromxmltype="XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENTFROMXMLTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_createpi="XDB.DBMS_XMLDOM.XMLD_CREATEPI(DBMS_XMLDOM_LIB)",
    c_domdoc_createtextnode="XDB.DBMS_XMLDOM.XMLD_CREATETEXTNODE(DBMS_XMLDOM_LIB)",
    c_domdoc_getcset="XDB.DBMS_XMLDOM.XMLD_GETCSET(DBMS_XMLDOM_LIB)",
    c_domdoc_getdoctype="XDB.DBMS_XMLDOM.XMLD_GETDOCTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_getdocumentelement="XDB.DBMS_XMLDOM.XMLD_GETDOCUMENTELEMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_getelementsbytagname="XDB.DBMS_XMLDOM.XMLD_DOC_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    c_domdoc_getimplementation="XDB.DBMS_XMLDOM.XMLD_GETIMPLEMENTATION(DBMS_XMLDOM_LIB)",
    c_domdoc_getstdaln="XDB.DBMS_XMLDOM.XMLD_GETSTDALN(DBMS_XMLDOM_LIB)",
    c_domdoc_getversion="XDB.DBMS_XMLDOM.XMLD_GETVERSION(DBMS_XMLDOM_LIB)",
    c_domdoc_getxmltype="XDB.DBMS_XMLDOM.XMLD_GETXMLTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_importnode="XDB.DBMS_XMLDOM.XMLD_IMPORTNODE(DBMS_XMLDOM_LIB)",
    c_domdoc_isnull="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domdoc_makenode="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domdoc_remove="XDB.DBMS_XMLDOM.XMLD_FREEDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_setcset="XDB.DBMS_XMLDOM.XMLD_SETCSET(DBMS_XMLDOM_LIB)",
    c_domdoc_setdoctype="XDB.DBMS_XMLDOM.XMLD_SETDOCTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_setstdaln="XDB.DBMS_XMLDOM.XMLD_SETSTANDALONE(DBMS_XMLDOM_LIB)",
    c_domdoc_setversion="XDB.DBMS_XMLDOM.XMLD_SETVERSION(DBMS_XMLDOM_LIB)",
    c_domdoc_writetobuffer="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    c_domdoc_writetoclob="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    c_domdocfrag_isnull="XDB.DBMS_XMLDOM.XMLD_DOCFRAG_ISNULL(DBMS_XMLDOM_LIB)",
    c_domdocfrag_makenode="XDB.DBMS_XMLDOM.XMLD_DOCFRAG_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domdocfrag_writetobuffer="XDB.DBMS_XMLDOM.XMLD_DOCFRAG_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    c_domdoctype_freedoctype="XDB.DBMS_XMLDOM.XMLD_FREEDOCTYPE(DBMS_XMLDOM_LIB)",
    c_domdoctype_getentities="XDB.DBMS_XMLDOM.XMLD_GETENTITIES(DBMS_XMLDOM_LIB)",
    c_domdoctype_getname="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETNAME(DBMS_XMLDOM_LIB)",
    c_domdoctype_getnotations="XDB.DBMS_XMLDOM.XMLD_GETNOTATIONS(DBMS_XMLDOM_LIB)",
    c_domdoctype_getpublicid="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETPUBLICID(DBMS_XMLDOM_LIB)",
    c_domdoctype_getsystemid="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    c_domdoctype_isnull="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_ISNULL(DBMS_XMLDOM_LIB)",
    c_domdoctype_makenode="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domelement_freeelement="XDB.DBMS_XMLDOM.XMLD_FREEELEMENT(DBMS_XMLDOM_LIB)",
    c_domelement_getattribute="XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_getattributenode="XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    c_domelement_getchldbytagname="XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getchldbytagns="XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    c_domelement_getelbytagname="XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getelbytagnamens="XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    c_domelement_getexpandedname="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getlocalname="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getnamespace="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    c_domelement_getqualifiedname="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    c_domelement_gettagname="XDB.DBMS_XMLDOM.XMLD_GETTAGNAME(DBMS_XMLDOM_LIB)",
    c_domelement_hasattribute="XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_isnull="XDB.DBMS_XMLDOM.XMLD_ELEMENT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domelement_makenode="XDB.DBMS_XMLDOM.XMLD_ELEMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domelement_normalize="XDB.DBMS_XMLDOM.XMLD_ELEMENT_NORMALIZE(DBMS_XMLDOM_LIB)",
    c_domelement_removeattribute="XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_removeattrnode="XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    c_domelement_resolvensprefix="XDB.DBMS_XMLDOM.XMLD_RESOLVENAMESPACEPREFIX(DBMS_XMLDOM_LIB)",
    c_domelement_setattribute="XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_setattributenode="XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    c_domentity_getnotationname="XDB.DBMS_XMLDOM.XMLD_GETNOTATIONNAME(DBMS_XMLDOM_LIB)",
    c_domentity_getpublicid="XDB.DBMS_XMLDOM.XMLD_ENTITY_GETPUBLICID(DBMS_XMLDOM_LIB)",
    c_domentity_getsystemid="XDB.DBMS_XMLDOM.XMLD_ENTITY_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    c_domentity_isnull="XDB.DBMS_XMLDOM.XMLD_ENTITY_ISNULL(DBMS_XMLDOM_LIB)",
    c_domentity_makenode="XDB.DBMS_XMLDOM.XMLD_ENTITY_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domentityref_isnull="XDB.DBMS_XMLDOM.XMLD_ENTITYREF_ISNULL(DBMS_XMLDOM_LIB)",
    c_domentityref_makenode="XDB.DBMS_XMLDOM.XMLD_ENTITYREF_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domimpl_createdocument="XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domimpl_hasfeature="XDB.DBMS_XMLDOM.XMLD_HASFEATURE(DBMS_XMLDOM_LIB)",
    c_domnnm_getlength="XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_GETLENGTH(DBMS_XMLDOM_LIB)",
    c_domnnm_getnameditem="XDB.DBMS_XMLDOM.XMLD_GETNAMEDITEM(DBMS_XMLDOM_LIB)",
    c_domnnm_isnull="XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnnm_item="XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ITEM(DBMS_XMLDOM_LIB)",
    c_domnnm_removenameditem="XDB.DBMS_XMLDOM.XMLD_REMOVENAMEDITEM(DBMS_XMLDOM_LIB)",
    c_domnnm_setnameditem="XDB.DBMS_XMLDOM.XMLD_SETNAMEDITEM(DBMS_XMLDOM_LIB)",
    c_domnode_appendchild="XDB.DBMS_XMLDOM.XMLD_APPENDCHILD(DBMS_XMLDOM_LIB)",
    c_domnode_bisavailable="XDB.DBMS_XMLDOM.BINARYINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    c_domnode_cisavailable="XDB.DBMS_XMLDOM.CHARACTERINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    c_domnode_clonenode="XDB.DBMS_XMLDOM.XMLD_CLONENODE(DBMS_XMLDOM_LIB)",
    c_domnode_closestream="XDB.DBMS_XMLDOM.CLOSESTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlbis="XDB.DBMS_XMLDOM.CREATEXMLBINARYINPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlbos="XDB.DBMS_XMLDOM.CREATEXMLBINARYOUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlcis="XDB.DBMS_XMLDOM.CREATEXMLCHARACTERINPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlcos="XDB.DBMS_XMLDOM.CREATEXMLCHARACTEROUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_flushstream="XDB.DBMS_XMLDOM.FLUSHSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_freenode="XDB.DBMS_XMLDOM.XMLD_FREENODE(DBMS_XMLDOM_LIB)",
    c_domnode_getattributes="XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTES(DBMS_XMLDOM_LIB)",
    c_domnode_getchildnodes="XDB.DBMS_XMLDOM.XMLD_GETCHILDNODES(DBMS_XMLDOM_LIB)",
    c_domnode_getexpandedname="XDB.DBMS_XMLDOM.XMLD_NODE_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    c_domnode_getfirstchild="XDB.DBMS_XMLDOM.XMLD_GETFIRSTCHILD(DBMS_XMLDOM_LIB)",
    c_domnode_getlastchild="XDB.DBMS_XMLDOM.XMLD_GETLASTCHILD(DBMS_XMLDOM_LIB)",
    c_domnode_getlocalname="XDB.DBMS_XMLDOM.XMLD_NODE_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    c_domnode_getnamespace="XDB.DBMS_XMLDOM.XMLD_NODE_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    c_domnode_getnextsibling="XDB.DBMS_XMLDOM.XMLD_GETNEXTSIBLING(DBMS_XMLDOM_LIB)",
    c_domnode_getnodefromfragment="XDB.DBMS_XMLDOM.XMLD_GETNODEFROMFRAGMENT(DBMS_XMLDOM_LIB)",
    c_domnode_getnodename="XDB.DBMS_XMLDOM.XMLD_GETNODENAME(DBMS_XMLDOM_LIB)",
    c_domnode_getnodetype="XDB.DBMS_XMLDOM.XMLD_GETNODETYPE(DBMS_XMLDOM_LIB)",
    c_domnode_getnodevalue="XDB.DBMS_XMLDOM.XMLD_GETNODEVALUE(DBMS_XMLDOM_LIB)",
    c_domnode_getownerdocument="XDB.DBMS_XMLDOM.XMLD_GETOWNERDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domnode_getparentnode="XDB.DBMS_XMLDOM.XMLD_GETPARENTNODE(DBMS_XMLDOM_LIB)",
    c_domnode_getprefix="XDB.DBMS_XMLDOM.XMLD_GETPREFIX(DBMS_XMLDOM_LIB)",
    c_domnode_getprevioussibling="XDB.DBMS_XMLDOM.XMLD_GETPREVIOUSSIBLING(DBMS_XMLDOM_LIB)",
    c_domnode_getpushasbinstream="XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASBINSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_getpushascharstream="XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASCHARSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_getschemanode="XDB.DBMS_XMLDOM.XMLD_GETSCHEMANODE(DBMS_XMLDOM_LIB)",
    c_domnode_hasattributes="XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTES(DBMS_XMLDOM_LIB)",
    c_domnode_haschildnodes="XDB.DBMS_XMLDOM.XMLD_HASCHILDNODES(DBMS_XMLDOM_LIB)",
    c_domnode_insertbefore="XDB.DBMS_XMLDOM.XMLD_INSERTBEFORE(DBMS_XMLDOM_LIB)",
    c_domnode_isnull="XDB.DBMS_XMLDOM.XMLD_NODE_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnode_makeattr="XDB.DBMS_XMLDOM.XMLD_MAKEATTR(DBMS_XMLDOM_LIB)",
    c_domnode_makecdatasection="XDB.DBMS_XMLDOM.XMLD_MAKECDATASECTION(DBMS_XMLDOM_LIB)",
    c_domnode_makechardata="XDB.DBMS_XMLDOM.XMLD_MAKECHARACTERDATA(DBMS_XMLDOM_LIB)",
    c_domnode_makecomment="XDB.DBMS_XMLDOM.XMLD_MAKECOMMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makedocfrag="XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makedoctype="XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTTYPE(DBMS_XMLDOM_LIB)",
    c_domnode_makedocument="XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makeelement="XDB.DBMS_XMLDOM.XMLD_MAKEELEMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makeentity="XDB.DBMS_XMLDOM.XMLD_MAKEENTITY(DBMS_XMLDOM_LIB)",
    c_domnode_makeentityref="XDB.DBMS_XMLDOM.XMLD_MAKEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    c_domnode_makenotation="XDB.DBMS_XMLDOM.XMLD_MAKENOTATION(DBMS_XMLDOM_LIB)",
    c_domnode_makepi="XDB.DBMS_XMLDOM.XMLD_MAKEPROCESSINGINSTRUCTION(DBMS_XMLDOM_LIB)",
    c_domnode_maketext="XDB.DBMS_XMLDOM.XMLD_MAKETEXT(DBMS_XMLDOM_LIB)",
    c_domnode_readbytesfrombis="XDB.DBMS_XMLDOM.READBYTESFROMBIS(DBMS_XMLDOM_LIB)",
    c_domnode_readbytesfrombis1="XDB.DBMS_XMLDOM.READBYTESFROMBIS1(DBMS_XMLDOM_LIB)",
    c_domnode_readcharsfromcis="XDB.DBMS_XMLDOM.READCHARSFROMCIS(DBMS_XMLDOM_LIB)",
    c_domnode_removechild="XDB.DBMS_XMLDOM.XMLD_REMOVECHILD(DBMS_XMLDOM_LIB)",
    c_domnode_replacechild="XDB.DBMS_XMLDOM.XMLD_REPLACECHILD(DBMS_XMLDOM_LIB)",
    c_domnode_setdeferredbfile="XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBFILE(DBMS_XMLDOM_LIB)",
    c_domnode_setdeferredblob="XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBLOB(DBMS_XMLDOM_LIB)",
    c_domnode_setdeferredclob="XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDCLOB(DBMS_XMLDOM_LIB)",
    c_domnode_setnodevalue="XDB.DBMS_XMLDOM.XMLD_SETNODEVALUE(DBMS_XMLDOM_LIB)",
    c_domnode_setprefix="XDB.DBMS_XMLDOM.XMLD_SETPREFIX(DBMS_XMLDOM_LIB)",
    c_domnode_setpullasbinstream="XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASBINSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_setpullascharstream="XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASCHARSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_usebinarystream="XDB.DBMS_XMLDOM.XMLD_USEBINSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_writebytestobos="XDB.DBMS_XMLDOM.WRITEBYTESTOBOS(DBMS_XMLDOM_LIB)",
    c_domnode_writecharstocos="XDB.DBMS_XMLDOM.WRITECHARSTOCOS(DBMS_XMLDOM_LIB)",
    c_domnode_writetobuffer="XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    c_domnode_writetoclob="XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    c_domnodel_freenodelist="XDB.DBMS_XMLDOM.XMLD_FREENODELIST(DBMS_XMLDOM_LIB)",
    c_domnodel_getlength="XDB.DBMS_XMLDOM.XMLD_NODELIST_GETLENGTH(DBMS_XMLDOM_LIB)",
    c_domnodel_isnull="XDB.DBMS_XMLDOM.XMLD_NODELIST_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnodel_item="XDB.DBMS_XMLDOM.XMLD_NODELIST_ITEM(DBMS_XMLDOM_LIB)",
    c_domnotation_getpublicid="XDB.DBMS_XMLDOM.XMLD_NOTATION_GETPUBLICID(DBMS_XMLDOM_LIB)",
    c_domnotation_getsystemid="XDB.DBMS_XMLDOM.XMLD_NOTATION_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    c_domnotation_isnull="XDB.DBMS_XMLDOM.XMLD_NOTATION_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnotation_makenode="XDB.DBMS_XMLDOM.XMLD_NOTATION_MAKENODE(DBMS_XMLDOM_LIB)",
    c_dompi_getdata="XDB.DBMS_XMLDOM.XMLD_PI_GETDATA(DBMS_XMLDOM_LIB)",
    c_dompi_gettarget="XDB.DBMS_XMLDOM.XMLD_GETTARGET(DBMS_XMLDOM_LIB)",
    c_dompi_isnull="XDB.DBMS_XMLDOM.XMLD_PI_ISNULL(DBMS_XMLDOM_LIB)",
    c_dompi_makenode="XDB.DBMS_XMLDOM.XMLD_PI_MAKENODE(DBMS_XMLDOM_LIB)",
    c_dompi_setdata="XDB.DBMS_XMLDOM.XMLD_PI_SETDATA(DBMS_XMLDOM_LIB)",
    c_domstr_isnull="XDB.DBMS_XMLDOM.XMLD_STR_ISNULL(DBMS_XMLDOM_LIB)",
    c_domtext_isnull="XDB.DBMS_XMLDOM.XMLD_TEXT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domtext_makenode="XDB.DBMS_XMLDOM.XMLD_TEXT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domtext_splittext="XDB.DBMS_XMLDOM.XMLD_SPLITTEXT(DBMS_XMLDOM_LIB)",
    c_getbomoffset="XDB.DBMS_CLOBUTIL.GETBOMOFFSET(XDB.DBMS_XSLPROCESSOR_LIB)",
    c_getoracharsetname="XDB.DBMS_XMLDOM.XMLD_GETORACLECHARSET(DBMS_XMLDOM_LIB)",
    c_newparser="XDB.DBMS_XMLPARSER.XMLP_NEWPARSER(XDB.DBMS_XMLPARSER_LIB)",
    c_newprocessor="XDB.DBMS_XSLPROCESSOR.XSLP_NEWPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    c_newstylesheetfromdoc="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMDOC(DBMS_XSLPROCESSOR_LIB)",
    c_newstylesheetfromstring="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMSTR(DBMS_XSLPROCESSOR_LIB)",
    c_parser_freeparser="XDB.DBMS_XMLPARSER.XMLP_FREEPARSER(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getbasedir="XDB.DBMS_XMLPARSER.XMLP_GETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getdoctype="XDB.DBMS_XMLPARSER.XMLP_GETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getdocument="XDB.DBMS_XMLPARSER.XMLP_GETDOCUMENT(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_geterrorlog="XDB.DBMS_XMLPARSER.XMLP_GETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getvalidationmode="XDB.DBMS_XMLPARSER.XMLP_GETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parsebuffer="XDB.DBMS_XMLPARSER.XMLP_PARSEBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parseclob="XDB.DBMS_XMLPARSER.XMLP_PARSECLOB(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parsedtdbuffer="XDB.DBMS_XMLPARSER.XMLP_PARSEDTDBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parsedtdclob="XDB.DBMS_XMLPARSER.XMLP_PARSEDTDCLOB(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setbasedir="XDB.DBMS_XMLPARSER.XMLP_SETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setdoctype="XDB.DBMS_XMLPARSER.XMLP_SETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_seterrorlog="XDB.DBMS_XMLPARSER.XMLP_SETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setpreservewsp="XDB.DBMS_XMLPARSER.XMLP_SETPRESERVEWHITESPACE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setvalidationmode="XDB.DBMS_XMLPARSER.XMLP_SETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_showwarnings="XDB.DBMS_XMLPARSER.XMLP_SHOWWARNINGS(XDB.DBMS_XMLPARSER_LIB)",
    c_processor_free="XDB.DBMS_XSLPROCESSOR.XSLP_FREEPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxslclob="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLCLOB(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc2buf="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2BUF(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc2clob="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOB(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc2clobxslout="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOBXSLOUT(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldocf2buf="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2BUF(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldocf2clob="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2CLOB(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldocfrag="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCFRAG(DBMS_XSLPROCESSOR_LIB)",
    c_processor_seterrorlog="XDB.DBMS_XSLPROCESSOR.XSLP_SETERRORLOG(DBMS_XSLPROCESSOR_LIB)",
    c_processor_showwarnings="XDB.DBMS_XSLPROCESSOR.XSLP_SHOWWARNINGS(DBMS_XSLPROCESSOR_LIB)",
    c_rmbomandwrite="XDB.DBMS_XSLPROCESSOR.RMBOMANDWRITE(XDB.DBMS_XSLPROCESSOR_LIB)",
    c_selectnodes="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTNODES(DBMS_XSLPROCESSOR_LIB)",
    c_selectsinglenode="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTSINGLENODE(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_free="XDB.DBMS_XSLPROCESSOR.XSLP_FREESTYLESHEET(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_removeparam="XDB.DBMS_XSLPROCESSOR.XSLP_REMOVEPARAM(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_resetparams="XDB.DBMS_XSLPROCESSOR.XSLP_RESETPARAMS(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_setparam="XDB.DBMS_XSLPROCESSOR.XSLP_SETPARAM(DBMS_XSLPROCESSOR_LIB)",
    c_transformnode="XDB.DBMS_XSLPROCESSOR.XSLP_TRANSFORMNODE(DBMS_XSLPROCESSOR_LIB)",
    c_valueof="XDB.DBMS_XSLPROCESSOR.XSLP_VALUEOF(DBMS_XSLPROCESSOR_LIB)",
    catclose="CTXSYS.CATINDEXMETHODS.ODCIGetInterfaces(dr$lib)",
    catsearch="CTXSYS.CTX_CATSEARCH.catsearch(dr$lib)",
    catsearch_clob="CTXSYS.CTX_CATSEARCH.catsearch(dr$lib)",
    catsearchclob="CTXSYS.CTX_CATSEARCH.catsearch(dr$lib)",
    cdb="create database",
    cdbdrv="create database driver",
    cdomattrgetexpandedname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetlocalname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetnamespace="XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    cdomattrgetownerelement="XDB.DBMS_XMLDOM.XMLD_GETOWNERELEMENT(DBMS_XMLDOM_LIB)",
    cdomattrgetqualifiedname="XDB.DBMS_XMLDOM.XMLD_ATTR_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetspecified="XDB.DBMS_XMLDOM.XMLD_GETSPECIFIED(DBMS_XMLDOM_LIB)",
    cdomattrgetvalue="XDB.DBMS_XMLDOM.XMLD_GETVALUE(DBMS_XMLDOM_LIB)",
    cdomattrisnull="XDB.DBMS_XMLDOM.XMLD_ATTR_ISNULL(DBMS_XMLDOM_LIB)",
    cdomattrmakenode="XDB.DBMS_XMLDOM.XMLD_ATTR_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomattrsetvalue="XDB.DBMS_XMLDOM.XMLD_SETVALUE(DBMS_XMLDOM_LIB)",
    cdomcdataappenddata="XDB.DBMS_XMLDOM.XMLD_APPENDDATA(DBMS_XMLDOM_LIB)",
    cdomcdatadeletedata="XDB.DBMS_XMLDOM.XMLD_DELETEDATA(DBMS_XMLDOM_LIB)",
    cdomcdatagetdata="XDB.DBMS_XMLDOM.XMLD_CDATA_GETDATA(DBMS_XMLDOM_LIB)",
    cdomcdatagetlength="XDB.DBMS_XMLDOM.XMLD_CDATA_GETLENGTH(DBMS_XMLDOM_LIB)",
    cdomcdatainsertdata="XDB.DBMS_XMLDOM.XMLD_INSERTDATA(DBMS_XMLDOM_LIB)",
    cdomcdataisnull="XDB.DBMS_XMLDOM.XMLD_CDATA_ISNULL(DBMS_XMLDOM_LIB)",
    cdomcdatamakenode="XDB.DBMS_XMLDOM.XMLD_CDATA_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomcdatareplacedata="XDB.DBMS_XMLDOM.XMLD_REPLACEDATA(DBMS_XMLDOM_LIB)",
    cdomcdatasectionisnull="XDB.DBMS_XMLDOM.XMLD_CDATASECTION_ISNULL(DBMS_XMLDOM_LIB)",
    cdomcdatasectionmakenode="XDB.DBMS_XMLDOM.XMLD_CDATASECTION_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomcdatasetdata="XDB.DBMS_XMLDOM.XMLD_CDATA_SETDATA(DBMS_XMLDOM_LIB)",
    cdomcdatasubstringdata="XDB.DBMS_XMLDOM.XMLD_SUBSTRINGDATA(DBMS_XMLDOM_LIB)",
    cdomcommentisnull="XDB.DBMS_XMLDOM.XMLD_COMMENT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomcommentmakenode="XDB.DBMS_XMLDOM.XMLD_COMMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocadoptnode="XDB.DBMS_XMLDOM.XMLD_ADOPTNODE(DBMS_XMLDOM_LIB)",
    cdomdoccreate="XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreateattribute="XDB.DBMS_XMLDOM.XMLD_CREATEATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomdoccreatecdatasection="XDB.DBMS_XMLDOM.XMLD_CREATECDATASECTION(DBMS_XMLDOM_LIB)",
    cdomdoccreatecomment="XDB.DBMS_XMLDOM.XMLD_CREATECOMMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreatedocfragment="XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreateelement="XDB.DBMS_XMLDOM.XMLD_CREATEELEMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreateentityref="XDB.DBMS_XMLDOM.XMLD_CREATEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    cdomdoccreatefromclob="XDB.DBMS_XMLDOM.XMLD_NEWDOCUMENTFROMCLOB(DBMS_XMLDOM_LIB)",
    cdomdoccreatefromxmltype="XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENTFROMXMLTYPE(DBMS_XMLDOM_LIB)",
    cdomdoccreatepi="XDB.DBMS_XMLDOM.XMLD_CREATEPI(DBMS_XMLDOM_LIB)",
    cdomdoccreatetextnode="XDB.DBMS_XMLDOM.XMLD_CREATETEXTNODE(DBMS_XMLDOM_LIB)",
    cdomdocfragisnull="XDB.DBMS_XMLDOM.XMLD_DOCFRAG_ISNULL(DBMS_XMLDOM_LIB)",
    cdomdocfragmakenode="XDB.DBMS_XMLDOM.XMLD_DOCFRAG_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocfragwritetobuffer="XDB.DBMS_XMLDOM.XMLD_DOCFRAG_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    cdomdocgetcset="XDB.DBMS_XMLDOM.XMLD_GETCSET(DBMS_XMLDOM_LIB)",
    cdomdocgetdoctype="XDB.DBMS_XMLDOM.XMLD_GETDOCTYPE(DBMS_XMLDOM_LIB)",
    cdomdocgetdocumentelement="XDB.DBMS_XMLDOM.XMLD_GETDOCUMENTELEMENT(DBMS_XMLDOM_LIB)",
    cdomdocgetelementsbytagname="XDB.DBMS_XMLDOM.XMLD_DOC_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    cdomdocgetimplementation="XDB.DBMS_XMLDOM.XMLD_GETIMPLEMENTATION(DBMS_XMLDOM_LIB)",
    cdomdocgetstdaln="XDB.DBMS_XMLDOM.XMLD_GETSTDALN(DBMS_XMLDOM_LIB)",
    cdomdocgetversion="XDB.DBMS_XMLDOM.XMLD_GETVERSION(DBMS_XMLDOM_LIB)",
    cdomdocgetxmltype="XDB.DBMS_XMLDOM.XMLD_GETXMLTYPE(DBMS_XMLDOM_LIB)",
    cdomdocimportnode="XDB.DBMS_XMLDOM.XMLD_IMPORTNODE(DBMS_XMLDOM_LIB)",
    cdomdocisnull="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomdocmakenode="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocremove="XDB.DBMS_XMLDOM.XMLD_FREEDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomdocsetcset="XDB.DBMS_XMLDOM.XMLD_SETCSET(DBMS_XMLDOM_LIB)",
    cdomdocsetdoctype="XDB.DBMS_XMLDOM.XMLD_SETDOCTYPE(DBMS_XMLDOM_LIB)",
    cdomdocsetstdaln="XDB.DBMS_XMLDOM.XMLD_SETSTANDALONE(DBMS_XMLDOM_LIB)",
    cdomdocsetversion="XDB.DBMS_XMLDOM.XMLD_SETVERSION(DBMS_XMLDOM_LIB)",
    cdomdoctypefreedoctype="XDB.DBMS_XMLDOM.XMLD_FREEDOCTYPE(DBMS_XMLDOM_LIB)",
    cdomdoctypegetentities="XDB.DBMS_XMLDOM.XMLD_GETENTITIES(DBMS_XMLDOM_LIB)",
    cdomdoctypegetname="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETNAME(DBMS_XMLDOM_LIB)",
    cdomdoctypegetnotations="XDB.DBMS_XMLDOM.XMLD_GETNOTATIONS(DBMS_XMLDOM_LIB)",
    cdomdoctypegetpublicid="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETPUBLICID(DBMS_XMLDOM_LIB)",
    cdomdoctypegetsystemid="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    cdomdoctypeisnull="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_ISNULL(DBMS_XMLDOM_LIB)",
    cdomdoctypemakenode="XDB.DBMS_XMLDOM.XMLD_DOCTYPE_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocwritetobuffer="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    cdomdocwritetoclob="XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    cdomelementfreeelement="XDB.DBMS_XMLDOM.XMLD_FREEELEMENT(DBMS_XMLDOM_LIB)",
    cdomelementgetattribute="XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementgetattributenode="XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    cdomelementgetchldbytagname="XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetchldbytagns="XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    cdomelementgetelbytagname="XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetelbytagnamens="XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    cdomelementgetexpandedname="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetlocalname="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetnamespace="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    cdomelementgetqualifiedname="XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    cdomelementgettagname="XDB.DBMS_XMLDOM.XMLD_GETTAGNAME(DBMS_XMLDOM_LIB)",
    cdomelementhasattribute="XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementisnull="XDB.DBMS_XMLDOM.XMLD_ELEMENT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomelementmakenode="XDB.DBMS_XMLDOM.XMLD_ELEMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomelementnormalize="XDB.DBMS_XMLDOM.XMLD_ELEMENT_NORMALIZE(DBMS_XMLDOM_LIB)",
    cdomelementremoveattribute="XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementremoveattrnode="XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    cdomelementresolvensprefix="XDB.DBMS_XMLDOM.XMLD_RESOLVENAMESPACEPREFIX(DBMS_XMLDOM_LIB)",
    cdomelementsetattribute="XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementsetattributenode="XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    cdomentitygetnotationname="XDB.DBMS_XMLDOM.XMLD_GETNOTATIONNAME(DBMS_XMLDOM_LIB)",
    cdomentitygetpublicid="XDB.DBMS_XMLDOM.XMLD_ENTITY_GETPUBLICID(DBMS_XMLDOM_LIB)",
    cdomentitygetsystemid="XDB.DBMS_XMLDOM.XMLD_ENTITY_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    cdomentityisnull="XDB.DBMS_XMLDOM.XMLD_ENTITY_ISNULL(DBMS_XMLDOM_LIB)",
    cdomentitymakenode="XDB.DBMS_XMLDOM.XMLD_ENTITY_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomentityrefisnull="XDB.DBMS_XMLDOM.XMLD_ENTITYREF_ISNULL(DBMS_XMLDOM_LIB)",
    cdomentityrefmakenode="XDB.DBMS_XMLDOM.XMLD_ENTITYREF_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomimplcreatedocument="XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomimplhasfeature="XDB.DBMS_XMLDOM.XMLD_HASFEATURE(DBMS_XMLDOM_LIB)",
    cdomnnmgetlength="XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_GETLENGTH(DBMS_XMLDOM_LIB)",
    cdomnnmgetnameditem="XDB.DBMS_XMLDOM.XMLD_GETNAMEDITEM(DBMS_XMLDOM_LIB)",
    cdomnnmisnull="XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnnmitem="XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ITEM(DBMS_XMLDOM_LIB)",
    cdomnnmremovenameditem="XDB.DBMS_XMLDOM.XMLD_REMOVENAMEDITEM(DBMS_XMLDOM_LIB)",
    cdomnnmsetnameditem="XDB.DBMS_XMLDOM.XMLD_SETNAMEDITEM(DBMS_XMLDOM_LIB)",
    cdomnodeappendchild="XDB.DBMS_XMLDOM.XMLD_APPENDCHILD(DBMS_XMLDOM_LIB)",
    cdomnodebisavailable="XDB.DBMS_XMLDOM.BINARYINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    cdomnodecisavailable="XDB.DBMS_XMLDOM.CHARACTERINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    cdomnodeclonenode="XDB.DBMS_XMLDOM.XMLD_CLONENODE(DBMS_XMLDOM_LIB)",
    cdomnodeclosestream="XDB.DBMS_XMLDOM.CLOSESTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlbis="XDB.DBMS_XMLDOM.CREATEXMLBINARYINPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlbos="XDB.DBMS_XMLDOM.CREATEXMLBINARYOUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlcis="XDB.DBMS_XMLDOM.CREATEXMLCHARACTERINPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlcos="XDB.DBMS_XMLDOM.CREATEXMLCHARACTEROUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodeflushstream="XDB.DBMS_XMLDOM.FLUSHSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodefreenode="XDB.DBMS_XMLDOM.XMLD_FREENODE(DBMS_XMLDOM_LIB)",
    cdomnodegetattributes="XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTES(DBMS_XMLDOM_LIB)",
    cdomnodegetchildnodes="XDB.DBMS_XMLDOM.XMLD_GETCHILDNODES(DBMS_XMLDOM_LIB)",
    cdomnodegetexpandedname="XDB.DBMS_XMLDOM.XMLD_NODE_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    cdomnodegetfirstchild="XDB.DBMS_XMLDOM.XMLD_GETFIRSTCHILD(DBMS_XMLDOM_LIB)",
    cdomnodegetlastchild="XDB.DBMS_XMLDOM.XMLD_GETLASTCHILD(DBMS_XMLDOM_LIB)",
    cdomnodegetlocalname="XDB.DBMS_XMLDOM.XMLD_NODE_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    cdomnodegetnamespace="XDB.DBMS_XMLDOM.XMLD_NODE_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    cdomnodegetnextsibling="XDB.DBMS_XMLDOM.XMLD_GETNEXTSIBLING(DBMS_XMLDOM_LIB)",
    cdomnodegetnodefromfragment="XDB.DBMS_XMLDOM.XMLD_GETNODEFROMFRAGMENT(DBMS_XMLDOM_LIB)",
    cdomnodegetnodename="XDB.DBMS_XMLDOM.XMLD_GETNODENAME(DBMS_XMLDOM_LIB)",
    cdomnodegetnodetype="XDB.DBMS_XMLDOM.XMLD_GETNODETYPE(DBMS_XMLDOM_LIB)",
    cdomnodegetnodevalue="XDB.DBMS_XMLDOM.XMLD_GETNODEVALUE(DBMS_XMLDOM_LIB)",
    cdomnodegetownerdocument="XDB.DBMS_XMLDOM.XMLD_GETOWNERDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomnodegetparentnode="XDB.DBMS_XMLDOM.XMLD_GETPARENTNODE(DBMS_XMLDOM_LIB)",
    cdomnodegetprefix="XDB.DBMS_XMLDOM.XMLD_GETPREFIX(DBMS_XMLDOM_LIB)",
    cdomnodegetprevioussibling="XDB.DBMS_XMLDOM.XMLD_GETPREVIOUSSIBLING(DBMS_XMLDOM_LIB)",
    cdomnodegetpushasbinstream="XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASBINSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodegetpushascharstream="XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASCHARSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodegetschemanode="XDB.DBMS_XMLDOM.XMLD_GETSCHEMANODE(DBMS_XMLDOM_LIB)",
    cdomnodehasattributes="XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTES(DBMS_XMLDOM_LIB)",
    cdomnodehaschildnodes="XDB.DBMS_XMLDOM.XMLD_HASCHILDNODES(DBMS_XMLDOM_LIB)",
    cdomnodeinsertbefore="XDB.DBMS_XMLDOM.XMLD_INSERTBEFORE(DBMS_XMLDOM_LIB)",
    cdomnodeisnull="XDB.DBMS_XMLDOM.XMLD_NODE_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnodelfreenodelist="XDB.DBMS_XMLDOM.XMLD_FREENODELIST(DBMS_XMLDOM_LIB)",
    cdomnodelgetlength="XDB.DBMS_XMLDOM.XMLD_NODELIST_GETLENGTH(DBMS_XMLDOM_LIB)",
    cdomnodelisnull="XDB.DBMS_XMLDOM.XMLD_NODELIST_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnodelitem="XDB.DBMS_XMLDOM.XMLD_NODELIST_ITEM(DBMS_XMLDOM_LIB)",
    cdomnodemakeattr="XDB.DBMS_XMLDOM.XMLD_MAKEATTR(DBMS_XMLDOM_LIB)",
    cdomnodemakecdatasection="XDB.DBMS_XMLDOM.XMLD_MAKECDATASECTION(DBMS_XMLDOM_LIB)",
    cdomnodemakechardata="XDB.DBMS_XMLDOM.XMLD_MAKECHARACTERDATA(DBMS_XMLDOM_LIB)",
    cdomnodemakecomment="XDB.DBMS_XMLDOM.XMLD_MAKECOMMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakedocfrag="XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakedoctype="XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTTYPE(DBMS_XMLDOM_LIB)",
    cdomnodemakedocument="XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakeelement="XDB.DBMS_XMLDOM.XMLD_MAKEELEMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakeentity="XDB.DBMS_XMLDOM.XMLD_MAKEENTITY(DBMS_XMLDOM_LIB)",
    cdomnodemakeentityref="XDB.DBMS_XMLDOM.XMLD_MAKEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    cdomnodemakenotation="XDB.DBMS_XMLDOM.XMLD_MAKENOTATION(DBMS_XMLDOM_LIB)",
    cdomnodemakepi="XDB.DBMS_XMLDOM.XMLD_MAKEPROCESSINGINSTRUCTION(DBMS_XMLDOM_LIB)",
    cdomnodemaketext="XDB.DBMS_XMLDOM.XMLD_MAKETEXT(DBMS_XMLDOM_LIB)",
    cdomnodereadbytesfrombis="XDB.DBMS_XMLDOM.READBYTESFROMBIS(DBMS_XMLDOM_LIB)",
    cdomnodereadbytesfrombis1="XDB.DBMS_XMLDOM.READBYTESFROMBIS1(DBMS_XMLDOM_LIB)",
    cdomnodereadcharsfromcis="XDB.DBMS_XMLDOM.READCHARSFROMCIS(DBMS_XMLDOM_LIB)",
    cdomnoderemovechild="XDB.DBMS_XMLDOM.XMLD_REMOVECHILD(DBMS_XMLDOM_LIB)",
    cdomnodereplacechild="XDB.DBMS_XMLDOM.XMLD_REPLACECHILD(DBMS_XMLDOM_LIB)",
    cdomnodesetdeferredbfile="XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBFILE(DBMS_XMLDOM_LIB)",
    cdomnodesetdeferredblob="XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBLOB(DBMS_XMLDOM_LIB)",
    cdomnodesetdeferredclob="XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDCLOB(DBMS_XMLDOM_LIB)",
    cdomnodesetnodevalue="XDB.DBMS_XMLDOM.XMLD_SETNODEVALUE(DBMS_XMLDOM_LIB)",
    cdomnodesetprefix="XDB.DBMS_XMLDOM.XMLD_SETPREFIX(DBMS_XMLDOM_LIB)",
    cdomnodesetpullasbinstream="XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASBINSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodesetpullascharstream="XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASCHARSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodeusebinarystream="XDB.DBMS_XMLDOM.XMLD_USEBINSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodewritebytestobos="XDB.DBMS_XMLDOM.WRITEBYTESTOBOS(DBMS_XMLDOM_LIB)",
    cdomnodewritecharstocos="XDB.DBMS_XMLDOM.WRITECHARSTOCOS(DBMS_XMLDOM_LIB)",
    cdomnodewritetobuffer="XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    cdomnodewritetoclob="XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    cdomnotationgetpublicid="XDB.DBMS_XMLDOM.XMLD_NOTATION_GETPUBLICID(DBMS_XMLDOM_LIB)",
    cdomnotationgetsystemid="XDB.DBMS_XMLDOM.XMLD_NOTATION_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    cdomnotationisnull="XDB.DBMS_XMLDOM.XMLD_NOTATION_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnotationmakenode="XDB.DBMS_XMLDOM.XMLD_NOTATION_MAKENODE(DBMS_XMLDOM_LIB)",
    cdompigetdata="XDB.DBMS_XMLDOM.XMLD_PI_GETDATA(DBMS_XMLDOM_LIB)",
    cdompigettarget="XDB.DBMS_XMLDOM.XMLD_GETTARGET(DBMS_XMLDOM_LIB)",
    cdompiisnull="XDB.DBMS_XMLDOM.XMLD_PI_ISNULL(DBMS_XMLDOM_LIB)",
    cdompimakenode="XDB.DBMS_XMLDOM.XMLD_PI_MAKENODE(DBMS_XMLDOM_LIB)",
    cdompisetdata="XDB.DBMS_XMLDOM.XMLD_PI_SETDATA(DBMS_XMLDOM_LIB)",
    cdomstrisnull="XDB.DBMS_XMLDOM.XMLD_STR_ISNULL(DBMS_XMLDOM_LIB)",
    cdomtextisnull="XDB.DBMS_XMLDOM.XMLD_TEXT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomtextmakenode="XDB.DBMS_XMLDOM.XMLD_TEXT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomtextsplittext="XDB.DBMS_XMLDOM.XMLD_SPLITTEXT(DBMS_XMLDOM_LIB)",
    cgetbomoffset="XDB.DBMS_CLOBUTIL.GETBOMOFFSET(XDB.DBMS_XSLPROCESSOR_LIB)",
    cgetoracharsetname="XDB.DBMS_XMLDOM.XMLD_GETORACLECHARSET(DBMS_XMLDOM_LIB)",
    check_dep="XDB.DBMS_XMLSCHEMA_INT.CHECKUSERDEPENDENTS(XMLSCHEMA_LIB)",
    check_endian="MDSYS.SDO_UTIL.CHECK_ENDIAN(ORDMD_UTL_LIBS)",
    check_privilege_aclid_i="SYS.DBMS_NETWORK_ACL_ADMIN.CHECK_PRIVILEGE_ACLID_I(C)",
    checkdep="XDB.DBMS_XMLSCHEMA_INT.CHECKUSERDEPENDENTS(XMLSCHEMA_LIB)",
    checkendian="MDSYS.SDO_UTIL.CHECK_ENDIAN(ORDMD_UTL_LIBS)",
    checkprivilegeaclidi="SYS.DBMS_NETWORK_ACL_ADMIN.CHECK_PRIVILEGE_ACLID_I(C)",
    clone="SYS.JDOM_T.clone(DBMS_JDOM_LIB)",
    close="SYS.SODA_CURSOR_T.CLOSE(DBMS_SODACUR_LIB)",
    close_xdbhi="XDB.XDBHI_IM.ODCIGETINTERFACES(XDB.RESOURCE_VIEW_LIB)",
    closexdbhi="XDB.XDBHI_IM.ODCIGETINTERFACES(XDB.RESOURCE_VIEW_LIB)",
    cls="clusterware integration",
    cnewparser="XDB.DBMS_XMLPARSER.XMLP_NEWPARSER(XDB.DBMS_XMLPARSER_LIB)",
    cnewprocessor="XDB.DBMS_XSLPROCESSOR.XSLP_NEWPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    cnewstylesheetfromdoc="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMDOC(DBMS_XSLPROCESSOR_LIB)",
    cnewstylesheetfromstring="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMSTR(DBMS_XSLPROCESSOR_LIB)",
    cnsbxml="XDB.DBMS_XMLSCHEMA_INT.CREATENSBXML(XMLSCHEMA_LIB)",
    CollectMerge="SYS.SYS_NT_COLLECT_IMP.ODCIAggregateInitialize(collection_lib)",
    column_value="SYS.DBMS_SQL.column_value(c)",
    columnvalue="SYS.DBMS_SQL.column_value(c)",
    commit="SYS.DBMS_STANDARD.commi(C)/SYS.DBMS_TRANSACTION.commi(C)",
    commit_cm="SYS.DBMS_STANDARD.commit_cm(C)",
    commitcm="SYS.DBMS_STANDARD.commit_cm(C)",
    compile_schema="XDB.DBMS_XMLSCHEMA_INT.COMPILESCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COMPILESCHEMA(DBMSXSCHLSB_LIB)",
    compileschema="XDB.DBMS_XMLSCHEMA_INT.COMPILESCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COMPILESCHEMA(DBMSXSCHLSB_LIB)",
    cons_XML_adt="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_XML_anydata="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_XML_blob="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_XML_clob="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_XML_refcursor="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_XML_varchar2="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consXMLadt="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consXMLanydata="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consXMLblob="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consXMLclob="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consXMLrefcursor="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consXMLvarchar2="SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    contains="CTXSYS.CTX_CONTAINS.Textcontains(dr$lib)/CTXSYS.CTX_XPCONTAINS.xpcontains(dr$lib)/CTXSYS.DRISCORE.TextScore(dr$lib)",
    contains_clob="CTXSYS.CTX_CONTAINS.Textcontains(dr$lib)/CTXSYS.DRISCORE.TextScore(dr$lib)",
    contains_host="SYS.DBMS_NETWORK_ACL_UTILITY.does(C)",
    containsclob="CTXSYS.CTX_CONTAINS.Textcontains(dr$lib)/CTXSYS.DRISCORE.TextScore(dr$lib)",
    containshost="SYS.DBMS_NETWORK_ACL_UTILITY.does(C)",
    content_schema_is="XDB.CONTENTSCHEMAIS.contentSchemaIs(XDB.RESOURCE_VIEW_LIB)",
    contentschemais="XDB.CONTENTSCHEMAIS.contentSchemaIs(XDB.RESOURCE_VIEW_LIB)",
    convert_from_raw_icd="SYS.DBMS_STATS.CONVERT_FROM_RAW_ICD(C)",
    convertfromrawicd="SYS.DBMS_STATS.CONVERT_FROM_RAW_ICD(C)",
    converttodate="XDB.DBMS_XMLSCHEMA.CONVERTTODATE(XMLSCHEMA_LIB)",
    converttots="XDB.DBMS_XMLSCHEMA.CONVERTTOTS(XMLSCHEMA_LIB)",
    converttotstz="XDB.DBMS_XMLSCHEMA.CONVERTTOTSWITHTZ(XMLSCHEMA_LIB)",
    copy_evol_schema="XDB.DBMS_XMLSCHEMA_INT.COPYEVOLVE(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COPYEVOLVE(DBMSXSCHLSB_LIB)",
    copy_pre11gR2_metadata="MDSYS.SDO_UTIL.COPY_PRE11GR2_METADATA(ORDMD_UTL_LIBS)",
    copyevolschema="XDB.DBMS_XMLSCHEMA_INT.COPYEVOLVE(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COPYEVOLVE(DBMSXSCHLSB_LIB)",
    copyfrombuf="SYS.DBMS_PIPE.COPYFROMBUF(C)",
    copyfrombufbinary="SYS.DBMS_PIPE.COPYFROMBUFBINARY(C)",
    copyfrombufrowid="SYS.DBMS_PIPE.COPYFROMBUFROWID(C)",
    copyintobuf="SYS.DBMS_PIPE.COPYINTOBUF(C)",
    copyintobufbinary="SYS.DBMS_PIPE.COPYINTOBUFBINARY(C)",
    copyintobufrowid="SYS.DBMS_PIPE.COPYINTOBUFROWID(C)",
    copypre11gR2metadata="MDSYS.SDO_UTIL.COPY_PRE11GR2_METADATA(ORDMD_UTL_LIBS)",
    count="SYS.PLITBLM.count(c)/SYS.SODA_OPERATION_T.COUNT(DBMS_SODAOPR_LIB)",
    cparserfreeparser="XDB.DBMS_XMLPARSER.XMLP_FREEPARSER(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetbasedir="XDB.DBMS_XMLPARSER.XMLP_GETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetdoctype="XDB.DBMS_XMLPARSER.XMLP_GETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetdocument="XDB.DBMS_XMLPARSER.XMLP_GETDOCUMENT(XDB.DBMS_XMLPARSER_LIB)",
    cparsergeterrorlog="XDB.DBMS_XMLPARSER.XMLP_GETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetvalidationmode="XDB.DBMS_XMLPARSER.XMLP_GETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    cparserparsebuffer="XDB.DBMS_XMLPARSER.XMLP_PARSEBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    cparserparseclob="XDB.DBMS_XMLPARSER.XMLP_PARSECLOB(XDB.DBMS_XMLPARSER_LIB)",
    cparserparsedtdbuffer="XDB.DBMS_XMLPARSER.XMLP_PARSEDTDBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    cparserparsedtdclob="XDB.DBMS_XMLPARSER.XMLP_PARSEDTDCLOB(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetbasedir="XDB.DBMS_XMLPARSER.XMLP_SETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetdoctype="XDB.DBMS_XMLPARSER.XMLP_SETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    cparserseterrorlog="XDB.DBMS_XMLPARSER.XMLP_SETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetpreservewsp="XDB.DBMS_XMLPARSER.XMLP_SETPRESERVEWHITESPACE(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetvalidationmode="XDB.DBMS_XMLPARSER.XMLP_SETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    cparsershowwarnings="XDB.DBMS_XMLPARSER.XMLP_SHOWWARNINGS(XDB.DBMS_XMLPARSER_LIB)",
    cprocessorfree="XDB.DBMS_XSLPROCESSOR.XSLP_FREEPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxslclob="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLCLOB(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc2buf="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2BUF(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc2clob="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOB(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc2clobxslout="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOBXSLOUT(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldocf2buf="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2BUF(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldocf2clob="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2CLOB(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldocfrag="XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCFRAG(DBMS_XSLPROCESSOR_LIB)",
    cprocessorseterrorlog="XDB.DBMS_XSLPROCESSOR.XSLP_SETERRORLOG(DBMS_XSLPROCESSOR_LIB)",
    cprocessorshowwarnings="XDB.DBMS_XSLPROCESSOR.XSLP_SHOWWARNINGS(DBMS_XSLPROCESSOR_LIB)",
    cpu_estimate="SYS.DBMS_ODCI.ESTIMATE_CPU_UNITS(ODCI_EXTOPT_LIB)",
    cpuestimate="SYS.DBMS_ODCI.ESTIMATE_CPU_UNITS(ODCI_EXTOPT_LIB)",
    create_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.CREATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    createArr="SYS.JDOM_T.create_Arr(DBMS_JDOM_LIB)",
    createNonSchemaBasedXML="SYS.XMLTYPE.CREATENONSCHEMABASEDXML(XMLTYPE_LIB)",
    createObj="SYS.JDOM_T.create_Obj(DBMS_JDOM_LIB)",
    createpipe="SYS.DBMS_PIPE.CREATEPIPE(C)",
    createrwequivalence="SYS.DBMS_ADVANCED_REWRITE.CREATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    createSchemaBasedXML="SYS.XMLTYPE.CREATESCHEMABASEDXML(XMLTYPE_LIB)",
    createTemplate="MDSYS.SDO_GEOR_INT.CREATETEMPLATE(ORDMD_GEOR_LIBS)",
    createXML_adt="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXML_anydata="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXML_binary="SYS.XMLTYPE.CREATEXMLFROMBINARY(XMLTYPE_LIB)",
    createXML_blob="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXML_clob="SYS.XMLTYPE.toObject(XMLTYPE_LIB)/SYS.XMLTYPE.createXML(XMLTYPE_LIB)",
    createXML_clob2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXML_refcursor="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXML_varchar2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXML_varchar22="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLadt="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLanydata="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLbinary="SYS.XMLTYPE.CREATEXMLFROMBINARY(XMLTYPE_LIB)",
    createXMLblob="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLclob="SYS.XMLTYPE.toObject(XMLTYPE_LIB)/SYS.XMLTYPE.createXML(XMLTYPE_LIB)",
    createXMLclob2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLrefcursor="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLvarchar2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createXMLvarchar22="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    crmbomandwrite="XDB.DBMS_XSLPROCESSOR.RMBOMANDWRITE(XDB.DBMS_XSLPROCESSOR_LIB)",
    cselectnodes="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTNODES(DBMS_XSLPROCESSOR_LIB)",
    cselectsinglenode="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTSINGLENODE(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetfree="XDB.DBMS_XSLPROCESSOR.XSLP_FREESTYLESHEET(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetremoveparam="XDB.DBMS_XSLPROCESSOR.XSLP_REMOVEPARAM(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetresetparams="XDB.DBMS_XSLPROCESSOR.XSLP_RESETPARAMS(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetsetparam="XDB.DBMS_XSLPROCESSOR.XSLP_SETPARAM(DBMS_XSLPROCESSOR_LIB)",
    csy="create synonym",
    ctc="create table or cluster",
    ctccgi_cleanup_global_index="SYS.DBMS_PART.EXEC_ALTER_INDEX_COALESCE(DBMS_PART_LIB)",
    ctccgicleanupglobalindex="SYS.DBMS_PART.EXEC_ALTER_INDEX_COALESCE(DBMS_PART_LIB)",
    ctccom_cleanup_online_move="SYS.DBMS_PART.CLEANUP_ONLINE_OP_INTERNAL(DBMS_PART_LIB)",
    ctccomcleanuponlinemove="SYS.DBMS_PART.CLEANUP_ONLINE_OP_INTERNAL(DBMS_PART_LIB)",
    ctcdrv="create table or cluster driver",
    ctransformnode="XDB.DBMS_XSLPROCESSOR.XSLP_TRANSFORMNODE(DBMS_XSLPROCESSOR_LIB)",
    cur="cursor manipulation",
    curdmp="cursor manipulation dump",
    cvalueof="XDB.DBMS_XSLPROCESSOR.XSLP_VALUEOF(DBMS_XSLPROCESSOR_LIB)",
    cvw="create view",
    cvwdrv="create view driver",
    cvwgcd="create view get column definition",
    cvwgcpr="create view get table/view name, owner id given object id",
    dbg="debug and diagnostics",
    dbga="debug and diagnostics Unified Tracing Service",
    dbgc="debug and diagnostics diagnostic framework",
    dbgd="debug and diagnostics generic debug API",
    dbgdaRunAction="diagnostic events ??",
    dbgdChkEventIntv="debug and diagnostics generic debug API check events set for value to activate debug",
    dbgdCopyEventNode="debug and diagnostics generic debug API transfers event information from PGA to SGA and back",
    dbgdLinkEvent="debug and diagnostics generic debug API link event information into the list",
    dbgdRunActions="diagnostic events ??",
    dbgdSetEvents="debug and diagnostics generic debug API set event",
    dbgdUnLinkEvent="debug and diagnostics generic debug API unlink event information from the list",
    dbge="debug and diagnostics diagnostic data extractor",
    dbgeEndDDEInvocation="debug and diagnostics diagnostic data extractor Explicitly end a DDE invocation",
    dbgeEndDDEInvocationImpl="debug and diagnostics diagnostic data extractor Explicitly end a DDE invocation (internal)",
    dbgeExecuteForError="diagnostic data extractor ??",
    dbgefgHtElValidate="diagnostic data extractor ??",
    dbgePostErrorKGE="debug and diagnostics diagnostic data extractor Post the error for DDE invocation from KGE",
    dbgexExplicitEndInc="debug and diagnostics diagnostic data extractor explicitly end a split error processing",
    dbgexPhaseII="debug and diagnostics diagnostic data extractor phase 2",
    dbgexProcessError="debug and diagnostics diagnostic data extractor process error",
    dbgf="debug and diagnostics diagnostic inter library compile-time service",
    dbgpd="debug and diagnostics IPS package and diagnostics",
    dbgr="debug and diagnostics automatic diagnostic repository",
    dbgre="debug and diagnostics automatic diagnostic repository export/import services",
    dbgrf="debug and diagnostics automatic diagnostic repository directory and file services",
    dbgri="debug and diagnostics automatic diagnostic repository incident metadata services",
    dbgrl="debug and diagnostics automatic diagnostic repository diagnostic arb alert log",
    dbgrlr="debug and diagnostics automatic diagnostic repository diagnostic arb alert log diagnostic arb alert log",
    dbgrm="debug and diagnostics automatic diagnostic repository meta-data repository",
    dbgt="debug and diagnostics Unified tracing service, generic trace API",
    dbgtCtrl_intEvalCtrlEvent="debug and diagnostics Unified tracing service, generic trace API control internal evaluate control event",
    dbgtCtrl_intEvalTraceFilters="debug and diagnostics Unified tracing service, generic trace API control internal evaluate trace filters",
    dbgtf="debug and diagnostics Unified tracing service, generic trace API directory and file services",
    dbgtn="debug and diagnostics Unified tracing service, generic trace API UTS viewer toolkit",
    dbgtp="debug and diagnostics Unified tracing service, generic trace API UTS viewer toolkit",
    dbgv="debug and diagnostics diagnostic viewer toolkit",
    dbgvci="debug and diagnostics diagnostic viewer toolkit for command line",
    dbgvf="debug and diagnostics diagnostic viewer toolkit for traces and files",
    dbgvl="debug and diagnostics diagnostic viewer toolkit parser",
    dbgvm="debug and diagnostics diagnostic viewer toolkit for ams metadata",
    dbgvp="debug and diagnostics diagnostic viewer toolkit parser",
    dbgxtk="debug and diagnostics xml toolkit",
    dbk="debug and diagnostics",
    dbkd="debug and diagnostics kernel debug",
    dbkdChkEventRdbmsErr="debug and diagnostics kernel debug check event of RDBMS error",
    dbke="debug and diagnostics RDBMS diagnostic data extractor",
    dbked="debug and diagnostics RDBMS diagnostic data extractor Dumper",
    dbkedDefDump="debug and diagnostics RDBMS diagnostic data extractor Dumper do DDE default dump",
    dbkePostKGE_kgsf="debug and diagnostics RDBMS diagnostic data extractor Post KGE error for KGSF",
    dbkgc="debug and diagnostics generic configuration",
    dbkh="debug and diagnostics health monitor",
    dbkhicd_create_offl_dict="SYS.DBMS_HM.DBKHICD_CREATE_OFFL_DIC(C)",
    dbkhicd_create_schema="SYS.DBMS_HM.DBKHICD_CREATE_SCHEM(C)",
    dbkhicd_drop_schema="SYS.DBMS_HM.DBKHICD_DROP_SCHEMA(C)",
    dbkhicd_get_run_report="SYS.DBMS_HM.DBKHICD_GET_RUN_REPORT(C)",
    dbkhicd_istraceenabled="SYS.DBMS_HM.DBKHICD_ISTRACEENABLED(C)",
    dbkhicd_run_check="SYS.DBMS_HM.DBKHICD_RUN_CHECK(C)",
    dbkhicd_run_dde_action="SYS.DBMS_HM.DBKHICD_RUN_DDE_ACTION(C)",
    dbkhicd_writetotrace="SYS.DBMS_HM.DBKHICD_WRITETOTRACE(C)",
    dbkhicdcreateoffldict="SYS.DBMS_HM.DBKHICD_CREATE_OFFL_DIC(C)",
    dbkhicdcreateschema="SYS.DBMS_HM.DBKHICD_CREATE_SCHEM(C)",
    dbkhicddropschema="SYS.DBMS_HM.DBKHICD_DROP_SCHEMA(C)",
    dbkhicdgetrunreport="SYS.DBMS_HM.DBKHICD_GET_RUN_REPORT(C)",
    dbkhicdistraceenabled="SYS.DBMS_HM.DBKHICD_ISTRACEENABLED(C)",
    dbkhicdruncheck="SYS.DBMS_HM.DBKHICD_RUN_CHECK(C)",
    dbkhicdrunddeaction="SYS.DBMS_HM.DBKHICD_RUN_DDE_ACTION(C)",
    dbkhicdwritetotrace="SYS.DBMS_HM.DBKHICD_WRITETOTRACE(C)",
    dbkiicd_addline="SYS.DBMS_IR.DBKIICD_ADDLINE(C)",
    dbkiicd_addtofailureset="SYS.DBMS_IR.DBKIICD_ADDTOFAILURESET(C)",
    dbkiicd_advisedone="SYS.DBMS_IR.DBKIICD_ADVISEDONE(C)",
    dbkiicd_beginfailureset="SYS.DBMS_IR.DBKIICD_BEGINFAILURESET(C)",
    dbkiicd_cancelfailureset="SYS.DBMS_IR.DBKIICD_CANCELFAILURESET(C)",
    dbkiicd_changepriority="SYS.DBMS_IR.DBKIICD_CHANGEPRIORITY(C)",
    dbkiicd_cleanupadvise="SYS.DBMS_IR.DBKIICD_CLEANUPADVISE(C)",
    dbkiicd_closefailure="SYS.DBMS_IR.DBKIICD_CLOSEFAILURE(C)",
    dbkiicd_closescriptfile="SYS.DBMS_IR.DBKIICD_CLOSESCRIPTFILE(C)",
    dbkiicd_completefailureset="SYS.DBMS_IR.DBKIICD_COMPLETEFAILURESET(C)",
    dbkiicd_completerepairoption="SYS.DBMS_IR.DBKIICD_COMPLETEREPAIROPTION(C)",
    dbkiicd_consolidaterepair="SYS.DBMS_IR.DBKIICD_CONSOLIDATEREPAIR(C)",
    dbkiicd_controlfilecheck="SYS.DBMS_IR.DBKIICD_CONTROLFILECHECK(C)",
    dbkiicd_createscriptfile="SYS.DBMS_IR.DBKIICD_CREATESCRIPTFILE(C)",
    dbkiicd_createworkingrepairset="SYS.DBMS_IR.DBKIICD_CREATEWORKINGREPAIRSET(C)",
    dbkiicd_getfeasandimpact="SYS.DBMS_IR.DBKIICD_GETFEASANDIMPACT(C)",
    dbkiicd_getfile="SYS.DBMS_IR.DBKIICD_GETFILE(C)",
    dbkiicd_getline="SYS.DBMS_IR.DBKIICD_GETLINE(C)",
    dbkiicd_getrepairadvice="SYS.DBMS_IR.DBKIICD_GETREPAIRADVICE(C)",
    dbkiicd_istraceenabled="SYS.DBMS_IR.DBKIICD_ISTRACEENABLED(C)",
    dbkiicd_openscriptfile="SYS.DBMS_IR.DBKIICD_OPENSCRIPTFILE(C)",
    dbkiicd_reeval="SYS.DBMS_IR.DBKIICD_REEVAL(C)",
    dbkiicd_startrepairoption="SYS.DBMS_IR.DBKIICD_STARTREPAIROPTION(C)",
    dbkiicd_updatefeasandimpact="SYS.DBMS_IR.DBKIICD_UPDATEFEASANDIMPACT(C)",
    dbkiicd_updaterepairoption="SYS.DBMS_IR.DBKIICD_UPDATEREPAIROPTION(C)",
    dbkiicd_writetotrace="SYS.DBMS_IR.DBKIICD_WRITETOTRACE(C)",
    dbkiicdaddline="SYS.DBMS_IR.DBKIICD_ADDLINE(C)",
    dbkiicdaddtofailureset="SYS.DBMS_IR.DBKIICD_ADDTOFAILURESET(C)",
    dbkiicdadvisedone="SYS.DBMS_IR.DBKIICD_ADVISEDONE(C)",
    dbkiicdbeginfailureset="SYS.DBMS_IR.DBKIICD_BEGINFAILURESET(C)",
    dbkiicdcancelfailureset="SYS.DBMS_IR.DBKIICD_CANCELFAILURESET(C)",
    dbkiicdchangepriority="SYS.DBMS_IR.DBKIICD_CHANGEPRIORITY(C)",
    dbkiicdcleanupadvise="SYS.DBMS_IR.DBKIICD_CLEANUPADVISE(C)",
    dbkiicdclosefailure="SYS.DBMS_IR.DBKIICD_CLOSEFAILURE(C)",
    dbkiicdclosescriptfile="SYS.DBMS_IR.DBKIICD_CLOSESCRIPTFILE(C)",
    dbkiicdcompletefailureset="SYS.DBMS_IR.DBKIICD_COMPLETEFAILURESET(C)",
    dbkiicdcompleterepairoption="SYS.DBMS_IR.DBKIICD_COMPLETEREPAIROPTION(C)",
    dbkiicdconsolidaterepair="SYS.DBMS_IR.DBKIICD_CONSOLIDATEREPAIR(C)",
    dbkiicdcontrolfilecheck="SYS.DBMS_IR.DBKIICD_CONTROLFILECHECK(C)",
    dbkiicdcreatescriptfile="SYS.DBMS_IR.DBKIICD_CREATESCRIPTFILE(C)",
    dbkiicdcreateworkingrepairset="SYS.DBMS_IR.DBKIICD_CREATEWORKINGREPAIRSET(C)",
    dbkiicdgetfeasandimpact="SYS.DBMS_IR.DBKIICD_GETFEASANDIMPACT(C)",
    dbkiicdgetfile="SYS.DBMS_IR.DBKIICD_GETFILE(C)",
    dbkiicdgetline="SYS.DBMS_IR.DBKIICD_GETLINE(C)",
    dbkiicdgetrepairadvice="SYS.DBMS_IR.DBKIICD_GETREPAIRADVICE(C)",
    dbkiicdistraceenabled="SYS.DBMS_IR.DBKIICD_ISTRACEENABLED(C)",
    dbkiicdopenscriptfile="SYS.DBMS_IR.DBKIICD_OPENSCRIPTFILE(C)",
    dbkiicdreeval="SYS.DBMS_IR.DBKIICD_REEVAL(C)",
    dbkiicdstartrepairoption="SYS.DBMS_IR.DBKIICD_STARTREPAIROPTION(C)",
    dbkiicdupdatefeasandimpact="SYS.DBMS_IR.DBKIICD_UPDATEFEASANDIMPACT(C)",
    dbkiicdupdaterepairoption="SYS.DBMS_IR.DBKIICD_UPDATEREPAIROPTION(C)",
    dbkiicdwritetotrace="SYS.DBMS_IR.DBKIICD_WRITETOTRACE(C)",
    dbkpls_get_location="debug and diagnostics DBMS_ADR_INTERNAL.GET_LOCATION",
    dbkpls_home_reserve_incids="debug and diagnostics DBMS_ADR_INTERNAL.RESERVE_INCIDS",
    dbkpls_incident_add_metadata="debug and diagnostics DBMS_ADR_INTERNAL.INCIDENT_ADD_METADATA",
    dbkpls_incident_create="debug and diagnostics DBMS_ADR_INTERNAL.INCIDENT_CREATE",
    dbkpls_run_purge="debug and diagnostics DBMS_ADR_INTERNAL.RUN_PURGE",
    dbkpls_set_tracefile_id="debug and diagnostics DBMS_ADR_INTERNAL.SET_TRACEFILE_IDENTIFIER",
    dbkpls_setup_client_home="debug and diagnostics DBMS_ADR_INTERNAL.CREATE_ADR_HOME",
    dbkpls_write_log="debug and diagnostics DBMS_ADR_INTERNAL.WRITE_LOG",
    dbkpls_write_trace="debug and diagnostics DBMS_ADR_INTERNAL.WRITE_TRACE",
    dbkr="debug and diagnostics RDBMS ADR",
    dbkripcs_cleanout_schema="SYS.DBMS_ADR.CLEANOUT_SCHEMA(DBMS_ADR_LIB)",
    dbkripcscleanoutschema="SYS.DBMS_ADR.CLEANOUT_SCHEMA(DBMS_ADR_LIB)",
    dbkripds_downgrade_schema="SYS.DBMS_ADR.DOWNGRADE_SCHEMA(DBMS_ADR_LIB)",
    dbkripdsdowngradeschema="SYS.DBMS_ADR.DOWNGRADE_SCHEMA(DBMS_ADR_LIB)",
    dbkripms_migrate_schema="SYS.DBMS_ADR.MIGRATE_SCHEMA(DBMS_ADR_LIB)",
    dbkripmsmigrateschema="SYS.DBMS_ADR.MIGRATE_SCHEMA(DBMS_ADR_LIB)",
    dbkriprs_recover_schema="SYS.DBMS_ADR.RECOVER_SCHEMA(DBMS_ADR_LIB)",
    dbkriprsrecoverschema="SYS.DBMS_ADR.RECOVER_SCHEMA(DBMS_ADR_LIB)",
    dbkt="debug and diagnostics RDBMS UTS tracefile",
    dbms_json_addvcfreq="XDB.DBMS_JSON_INT.ADDVC(DBMS_JSON_LIB)",
    dbms_json_checkpriv="XDB.DBMS_JSON_INT.CHECKPRIVILEGE(DBMS_JSON_LIB)",
    dbms_json_createviewonpath="XDB.DBMS_JSON_INT.CREATEVIEWONPATH(DBMS_JSON_LIB)",
    dbms_json_dropvc="XDB.DBMS_JSON_INT.DROPVC(DBMS_JSON_LIB)",
    dbms_json_gendataguide="XDB.DBMS_JSON_INT.GENDATAGUIDE(DBMS_JSON_LIB)",
    dbms_json_getdataguide="XDB.DBMS_JSON_INT.GETDATAGUIDE(DBMS_JSON_LIB)",
    dbms_json_prepjsoncolinmemory="XDB.DBMS_JSON_INT.PJCOLINM(DBMS_JSON_LIB)",
    dbms_json_rename="XDB.DBMS_JSON_INT.RENAME(DBMS_JSON_LIB)",
    dbmscsx_decode_inv_tokens="XDB.DBMS_CSX_INT.DECODEINVALIDTOKENS(DBMS_XDB_LIB)",
    dbmscsx_fix_inv_tokens="XDB.DBMS_CSX_INT.FIXINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsx_genttmap="XDB.DBMS_CSX_INT.GENTTMAPPING(DBMS_XDB_LIB)",
    dbmscsx_get_all_tokens="XDB.DBMS_CSX_INT.GETALLTOKENS(DBMS_XDB_LIB)",
    dbmscsx_get_inv_nmid="XDB.DBMS_CSX_INT.GETINVALIDNAMESPACEIDS(DBMS_XDB_LIB)",
    dbmscsx_get_inv_qnid="XDB.DBMS_CSX_INT.GETINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsx_get_tableguid="XDB.DBMS_CSX_INT2.GETTABLEGUID(DBMS_XDB_LIB)",
    dbmscsx_getvocab="XDB.DBMS_CSX_INT.GETVOCABULARY(DBMS_XDB_LIB)",
    dbmscsx_getvocab_notxn1="XDB.DBMS_CSX_INT.GETVOCABULARYNOTXN(DBMS_XDB_LIB)",
    dbmscsx_getvocab_notxn2="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKENNOTXN(DBMS_XDB_LIB)",
    dbmscsx_getvocabfromtoken="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKEN(DBMS_XDB_LIB)",
    dbmscsx_impmergetoktabs="XDB.DBMS_CSX_INT.IMPORTMERGETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsx_locktm="XDB.DBMS_CSX_INT.LOCKTOKENMANAGER(DBMS_XDB_LIB)",
    dbmscsx_popkdso="XDB.DBMS_CSX_INT.POPULATEKDSOFROMGUID(DBMS_XDB_LIB)",
    dbmscsx_regtoknm="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsx_regtokqn="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsx_toktabs="XDB.DBMS_CSX_INT.CREATETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsx_tovalid="XDB.DBMS_CSX_INT.TOVALIDATE(DBMS_XDB_LIB)",
    dbmscsx_ttset="XDB.DBMS_CSX_INT.POPULATETOKENTABLESET(DBMS_XDB_LIB)",
    dbmscsx_updttset="XDB.DBMS_CSX_INT.UPDATEMASTERTABLE_INTERNAL(DBMS_XDB_LIB)",
    dbmscsxdecodeinvtokens="XDB.DBMS_CSX_INT.DECODEINVALIDTOKENS(DBMS_XDB_LIB)",
    dbmscsxfixinvtokens="XDB.DBMS_CSX_INT.FIXINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsxgenttmap="XDB.DBMS_CSX_INT.GENTTMAPPING(DBMS_XDB_LIB)",
    dbmscsxgetalltokens="XDB.DBMS_CSX_INT.GETALLTOKENS(DBMS_XDB_LIB)",
    dbmscsxgetinvnmid="XDB.DBMS_CSX_INT.GETINVALIDNAMESPACEIDS(DBMS_XDB_LIB)",
    dbmscsxgetinvqnid="XDB.DBMS_CSX_INT.GETINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsxgettableguid="XDB.DBMS_CSX_INT2.GETTABLEGUID(DBMS_XDB_LIB)",
    dbmscsxgetvocab="XDB.DBMS_CSX_INT.GETVOCABULARY(DBMS_XDB_LIB)",
    dbmscsxgetvocabfromtoken="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKEN(DBMS_XDB_LIB)",
    dbmscsxgetvocabnotxn1="XDB.DBMS_CSX_INT.GETVOCABULARYNOTXN(DBMS_XDB_LIB)",
    dbmscsxgetvocabnotxn2="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKENNOTXN(DBMS_XDB_LIB)",
    dbmscsximpmergetoktabs="XDB.DBMS_CSX_INT.IMPORTMERGETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsxlocktm="XDB.DBMS_CSX_INT.LOCKTOKENMANAGER(DBMS_XDB_LIB)",
    dbmscsxpopkdso="XDB.DBMS_CSX_INT.POPULATEKDSOFROMGUID(DBMS_XDB_LIB)",
    dbmscsxregtoknm="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsxregtokqn="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsxtoktabs="XDB.DBMS_CSX_INT.CREATETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsxtovalid="XDB.DBMS_CSX_INT.TOVALIDATE(DBMS_XDB_LIB)",
    dbmscsxttset="XDB.DBMS_CSX_INT.POPULATETOKENTABLESET(DBMS_XDB_LIB)",
    dbmscsxupdttset="XDB.DBMS_CSX_INT.UPDATEMASTERTABLE_INTERNAL(DBMS_XDB_LIB)",
    dbmsjsonaddvcfreq="XDB.DBMS_JSON_INT.ADDVC(DBMS_JSON_LIB)",
    dbmsjsoncheckpriv="XDB.DBMS_JSON_INT.CHECKPRIVILEGE(DBMS_JSON_LIB)",
    dbmsjsoncreateviewonpath="XDB.DBMS_JSON_INT.CREATEVIEWONPATH(DBMS_JSON_LIB)",
    dbmsjsondropvc="XDB.DBMS_JSON_INT.DROPVC(DBMS_JSON_LIB)",
    dbmsjsongendataguide="XDB.DBMS_JSON_INT.GENDATAGUIDE(DBMS_JSON_LIB)",
    dbmsjsongetdataguide="XDB.DBMS_JSON_INT.GETDATAGUIDE(DBMS_JSON_LIB)",
    dbmsjsonprepjsoncolinmemory="XDB.DBMS_JSON_INT.PJCOLINM(DBMS_JSON_LIB)",
    dbmsjsonrename="XDB.DBMS_JSON_INT.RENAME(DBMS_JSON_LIB)",
    dbmsxdb9201pdmigtbl="XDB.DBMS_XDBUTIL_INT.DOMIGRATEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_9201pdmigtbl="XDB.DBMS_XDBUTIL_INT.DOMIGRATEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_acl_check="XDB.DBMS_XDB.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_add_to_root_info="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO(DBMS_XDB_LIB)",
    dbmsxdb_add_to_root_info2="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO2(DBMS_XDB_LIB)",
    dbmsxdb_addtoken="XDB.DBMS_XDB.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdb_append_resmetadata="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_append_resmetadata_ref="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_cfg_get="XDB.DBMS_XDB.CFG_GET(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_GET(DBMS_XDB_LIB)",
    dbmsxdb_cfg_refresh="XDB.DBMS_XDB.CFG_REFRESH(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_REFRESH(DBMS_XDB_LIB)",
    dbmsxdb_cfg_update="XDB.DBMS_XDB.CFG_UPDATE(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_UPDATE(DBMS_XDB_LIB)",
    dbmsxdb_changeowner="XDB.DBMS_XDB.CHANGEOWNER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEOWNER(DBMS_XDB_LIB)",
    dbmsxdb_changepriv="XDB.DBMS_XDB.CHANGEPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_checkpriv="XDB.DBMS_XDB.CHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_cleansga="XDB.DBMS_XDBUTIL_INT.CLEANSGAFORUPGRADE(DBMS_XDB_LIB)",
    dbmsxdb_cleanupnfsclients="XDB.DBMS_XDBUTIL_INT.CLEANUP_EXPIRED_NFSCLIENTS(DBMS_XDB_LIB)",
    dbmsxdb_clear_http_digests="XDB.DBMS_XDB_CONFIG.QMPXCLEARHTTPDIGESTS(DBMS_XDB_LIB)",
    dbmsxdb_clearprintmode="XDB.DBMS_XDB_PRINT.CLEARPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdb_create="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfolder="XDB.DBMS_XDB.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromblob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromclob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromref="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromxml="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createoidpath="XDB.DBMS_XDB.CREATEOIDPATH(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEOIDPATH(DBMS_XDB_LIB)",
    dbmsxdb_crtsysvirfldr="XDB.DBMS_XDBUTIL_INT.CREATESYSTEMVIRTUALFOLDER(DBMS_XDB_LIB)",
    dbmsxdb_delete="XDB.DBMS_XDB.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_delete_resmetadata="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_delete_resmetadata2="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_deltoken="XDB.DBMS_XDB.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdb_dumpnfsstats="XDB.DBMS_XDBNFS.DUMP_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdb_exists="XDB.DBMS_XDB.EXISTSRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.EXISTSRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_fixacl="XDB.DBMS_XDBUTIL_INT.FIXACL(DBMS_XDB_LIB)",
    dbmsxdb_fixacl_downgrade="XDB.DBMS_XDBUTIL_INT.FIXACL_DOWNGRADE(DBMS_XDB_LIB)",
    dbmsxdb_flushsession="XDB.DBMS_XDBUTIL_INT.FLUSHSESSION0(DBMS_XDB_LIB)",
    dbmsxdb_get_set_global_port="XDB.DBMS_XDB_CONFIG.QMPXGETORSETGLOBALPORT(DBMS_XDB_LIB)",
    dbmsxdb_getacldoc="XDB.DBMS_XDB.GETACLDOCUMENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETACLDOCUMENT(DBMS_XDB_LIB)",
    dbmsxdb_getcontentblob="XDB.DBMS_XDB.GETCONTENTBLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTBLOB(DBMS_XDB_LIB)",
    dbmsxdb_getcontentclob="XDB.DBMS_XDB.GETCONTENTCLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTCLOB(DBMS_XDB_LIB)",
    dbmsxdb_getcontentxmlref="XDB.DBMS_XDB.GETCONTENTXMLREF(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLREF(DBMS_XDB_LIB)",
    dbmsxdb_getcontentxmltype="XDB.DBMS_XDB.GETCONTENTXMLTYPE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLTYPE(DBMS_XDB_LIB)",
    dbmsxdb_gethttpheader="XDB.DBMS_XDB.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)",
    dbmsxdb_getlocktoken="XDB.DBMS_XDB.GETLOCKTOKEN(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKEN(DBMS_XDB_LIB)",
    dbmsxdb_getnewoid="XDB.DBMS_XDBUTIL_INT.GETNEWOID(DBMS_XDB_LIB)",
    dbmsxdb_getnmsp="XDB.DBMS_XDBUTIL_INT.GETNAMESPACE(DBMS_XDB_LIB)",
    dbmsxdb_getpriv="XDB.DBMS_XDB.GETPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_getresoid="XDB.DBMS_XDB.GETRESOID(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETRESOID(DBMS_XDB_LIB)",
    dbmsxdb_getresource="XDB.DBMS_XDB.XDB_GETRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.XDB_GETRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_gettabletablespace="XDB.DBMS_XDBUTIL_INT.GET_TABLESPACE_TAB(DBMS_XDB_LIB)",
    dbmsxdb_gettoklist="XDB.DBMS_XDB.GETLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdb_hasblobcontent="XDB.DBMS_XDB.HASBLOBCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASBLOBCONTENT(DBMS_XDB_LIB)",
    dbmsxdb_hascharcontent="XDB.DBMS_XDB.HASCHARCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASCHARCONTENT(DBMS_XDB_LIB)",
    dbmsxdb_hasxmlcontent="XDB.DBMS_XDB.HASXMLCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLCONTENT(DBMS_XDB_LIB)",
    dbmsxdb_hasxmlreference="XDB.DBMS_XDB.HASXMLREFERENCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLREFERENCE(DBMS_XDB_LIB)",
    dbmsxdb_imp_final="XDB.DBMS_XDBUTIL_INT.INSTANCE_CALLOUT_IMP_FINAL_SYS(DBMS_XDB_LIB)",
    dbmsxdb_impcleanupxsch="XDB.DBMS_XDBUTIL_INT.IMP_CLEANUP_XML_SCHEMA_DEPS(DBMS_XDB_LIB)",
    dbmsxdb_isfolder="XDB.DBMS_XDB.ISFOLDER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ISFOLDER(DBMS_XDB_LIB)",
    dbmsxdb_link="XDB.DBMS_XDB.LINK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LINK(DBMS_XDB_LIB)",
    dbmsxdb_lock="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_lockdiscovery="XDB.DBMS_XDB.LOCKDISCOVERY(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKDISCOVERY(DBMS_XDB_LIB)",
    dbmsxdb_lockwithtimeout="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_lockxdb_movetbs="XDB.DBMS_XDB.LOCKXDB(DBMS_XDB_LIB)",
    dbmsxdb_lookup_schema_oid="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAOID(DBMS_XDB_LIB)",
    dbmsxdb_lookup_schema_url="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAURL(DBMS_XDB_LIB)",
    dbmsxdb_numtohex="XDB.DBMS_CSX_INT.NUMTOHEX(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX(DBMS_XDB_LIB)",
    dbmsxdb_numtohex2="XDB.DBMS_CSX_INT.NUMTOHEX2(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX2(DBMS_XDB_LIB)",
    dbmsxdb_processlinks="XDB.DBMS_XDB.PROCESSLINKS(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PROCESSLINKS(DBMS_XDB_LIB)",
    dbmsxdb_purge_resmetadata="XDB.DBMS_XDB.PURGERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PURGERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_rebuild_hindex="XDB.DBMS_XDB_ADMIN.REBUILD_HINDEX(DBMS_XDB_LIB)",
    dbmsxdb_refreshcontentsize="XDB.DBMS_XDB.REFRESHCONTENTSIZE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHCONTENTSIZE(DBMS_XDB_LIB)",
    dbmsxdb_refreshlock="XDB.DBMS_XDB.REFRESHLOCK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHLOCK(DBMS_XDB_LIB)",
    dbmsxdb_reload_rootschema="XDB.DBMS_XDB_ADMIN.RELOADROOTSCHEMA(DBMS_XDB_LIB)",
    dbmsxdb_rename="XDB.DBMS_XDB.RENAMERESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.RENAMERESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_resetnfsstats="XDB.DBMS_XDBNFS.RESET_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdb_set_realm="XDB.DBMS_XDB_CONFIG.SET_REALM(DBMS_XDB_LIB)",
    dbmsxdb_setacl="XDB.DBMS_XDB.SETACL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.SETACL(DBMS_XDB_LIB)",
    dbmsxdb_setlinkparents="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTS(DBMS_XDB_LIB)",
    dbmsxdb_setlinkparentsnew="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdb_setprintmode="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdb_setprintmode1="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdb_sync_resource="XDB.DBMS_XDBNFS.SYNCRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_touchresource="XDB.DBMS_XDB.TOUCHRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.TOUCHRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_unlock="XDB.DBMS_XDB.UNLOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UNLOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_update_resmd_qname="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_update_resmd_qname_ref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_update_resmetadata="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_update_resmetadata_ref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_updatexsch="XDB.DBMS_XDBUTIL_INT.UPDATE_XML_SCHEMA_DEPS0(DBMS_XDB_LIB)",
    dbmsxdb_used_port="XDB.DBMS_XDB_CONFIG.USEDPORT(DBMS_XDB_LIB)",
    dbmsxdb_usesetlinkparentsnew="XDB.DBMS_XDBUTIL_INT.USESETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdb_validate_port="XDB.DBMS_XDB.VALIDATE_PORT(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.VALIDATE_PORT(DBMS_XDB_LIB)",
    dbmsxdb_xmlschgetdeplvl="XDB.DBMS_XDBUTIL_INT.XMLSCHEMADEPENDENCYLEVEL(DBMS_XDB_LIB)",
    dbmsxdba_clrepxmlindex="XDB.DBMS_XDB_ADMIN.CLEARREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdba_createnoncekey="XDB.DBMS_XDB_ADMIN.CREATENONCEKEY(DBMS_XDB_LIB)",
    dbmsxdba_crrepxmlindex="XDB.DBMS_XDB_ADMIN.CREATEREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdba_drrepxmlindex="XDB.DBMS_XDB_ADMIN.DROPREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdba_xmlindexaddpath="XDB.DBMS_XDB_ADMIN.XMLINDEXADDPATH(DBMS_XDB_LIB)",
    dbmsxdba_xmlindexremovepath="XDB.DBMS_XDB_ADMIN.XMLINDEXREMOVEPATH(DBMS_XDB_LIB)",
    dbmsxdbaclcheck="XDB.DBMS_XDB.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbaclrepxmlindex="XDB.DBMS_XDB_ADMIN.CLEARREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdbacreatenoncekey="XDB.DBMS_XDB_ADMIN.CREATENONCEKEY(DBMS_XDB_LIB)",
    dbmsxdbacrrepxmlindex="XDB.DBMS_XDB_ADMIN.CREATEREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdbaddtoken="XDB.DBMS_XDB.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdbaddtorootinfo="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO(DBMS_XDB_LIB)",
    dbmsxdbaddtorootinfo2="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO2(DBMS_XDB_LIB)",
    dbmsxdbadrrepxmlindex="XDB.DBMS_XDB_ADMIN.DROPREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdbappendresmetadata="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbappendresmetadataref="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbaxmlindexaddpath="XDB.DBMS_XDB_ADMIN.XMLINDEXADDPATH(DBMS_XDB_LIB)",
    dbmsxdbaxmlindexremovepath="XDB.DBMS_XDB_ADMIN.XMLINDEXREMOVEPATH(DBMS_XDB_LIB)",
    dbmsxdbcfgget="XDB.DBMS_XDB.CFG_GET(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_GET(DBMS_XDB_LIB)",
    dbmsxdbcfgrefresh="XDB.DBMS_XDB.CFG_REFRESH(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_REFRESH(DBMS_XDB_LIB)",
    dbmsxdbcfgupdate="XDB.DBMS_XDB.CFG_UPDATE(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_UPDATE(DBMS_XDB_LIB)",
    dbmsxdbchangeowner="XDB.DBMS_XDB.CHANGEOWNER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEOWNER(DBMS_XDB_LIB)",
    dbmsxdbchangepriv="XDB.DBMS_XDB.CHANGEPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbcheckpriv="XDB.DBMS_XDB.CHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbcleansga="XDB.DBMS_XDBUTIL_INT.CLEANSGAFORUPGRADE(DBMS_XDB_LIB)",
    dbmsxdbcleanupnfsclients="XDB.DBMS_XDBUTIL_INT.CLEANUP_EXPIRED_NFSCLIENTS(DBMS_XDB_LIB)",
    dbmsxdbclearhttpdigests="XDB.DBMS_XDB_CONFIG.QMPXCLEARHTTPDIGESTS(DBMS_XDB_LIB)",
    dbmsxdbclearprintmode="XDB.DBMS_XDB_PRINT.CLEARPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdbcreate="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefolder="XDB.DBMS_XDB.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromblob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromclob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromref="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromxml="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreateoidpath="XDB.DBMS_XDB.CREATEOIDPATH(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEOIDPATH(DBMS_XDB_LIB)",
    dbmsxdbcrtsysvirfldr="XDB.DBMS_XDBUTIL_INT.CREATESYSTEMVIRTUALFOLDER(DBMS_XDB_LIB)",
    dbmsxdbdelete="XDB.DBMS_XDB.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbdeleteresmetadata="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbdeleteresmetadata2="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbdeltoken="XDB.DBMS_XDB.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdbdumpnfsstats="XDB.DBMS_XDBNFS.DUMP_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdbexists="XDB.DBMS_XDB.EXISTSRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.EXISTSRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbfixacl="XDB.DBMS_XDBUTIL_INT.FIXACL(DBMS_XDB_LIB)",
    dbmsxdbfixacldowngrade="XDB.DBMS_XDBUTIL_INT.FIXACL_DOWNGRADE(DBMS_XDB_LIB)",
    dbmsxdbflushsession="XDB.DBMS_XDBUTIL_INT.FLUSHSESSION0(DBMS_XDB_LIB)",
    dbmsxdbgetacldoc="XDB.DBMS_XDB.GETACLDOCUMENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETACLDOCUMENT(DBMS_XDB_LIB)",
    dbmsxdbgetcontentblob="XDB.DBMS_XDB.GETCONTENTBLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTBLOB(DBMS_XDB_LIB)",
    dbmsxdbgetcontentclob="XDB.DBMS_XDB.GETCONTENTCLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTCLOB(DBMS_XDB_LIB)",
    dbmsxdbgetcontentxmlref="XDB.DBMS_XDB.GETCONTENTXMLREF(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLREF(DBMS_XDB_LIB)",
    dbmsxdbgetcontentxmltype="XDB.DBMS_XDB.GETCONTENTXMLTYPE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLTYPE(DBMS_XDB_LIB)",
    dbmsxdbgethttpheader="XDB.DBMS_XDB.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)",
    dbmsxdbgetlocktoken="XDB.DBMS_XDB.GETLOCKTOKEN(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKEN(DBMS_XDB_LIB)",
    dbmsxdbgetnewoid="XDB.DBMS_XDBUTIL_INT.GETNEWOID(DBMS_XDB_LIB)",
    dbmsxdbgetnmsp="XDB.DBMS_XDBUTIL_INT.GETNAMESPACE(DBMS_XDB_LIB)",
    dbmsxdbgetpriv="XDB.DBMS_XDB.GETPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbgetresoid="XDB.DBMS_XDB.GETRESOID(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETRESOID(DBMS_XDB_LIB)",
    dbmsxdbgetresource="XDB.DBMS_XDB.XDB_GETRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.XDB_GETRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbgetsetglobalport="XDB.DBMS_XDB_CONFIG.QMPXGETORSETGLOBALPORT(DBMS_XDB_LIB)",
    dbmsxdbgettabletablespace="XDB.DBMS_XDBUTIL_INT.GET_TABLESPACE_TAB(DBMS_XDB_LIB)",
    dbmsxdbgettoklist="XDB.DBMS_XDB.GETLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdbhasblobcontent="XDB.DBMS_XDB.HASBLOBCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASBLOBCONTENT(DBMS_XDB_LIB)",
    dbmsxdbhascharcontent="XDB.DBMS_XDB.HASCHARCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASCHARCONTENT(DBMS_XDB_LIB)",
    dbmsxdbhasxmlcontent="XDB.DBMS_XDB.HASXMLCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLCONTENT(DBMS_XDB_LIB)",
    dbmsxdbhasxmlreference="XDB.DBMS_XDB.HASXMLREFERENCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLREFERENCE(DBMS_XDB_LIB)",
    dbmsxdbimpcleanupxsch="XDB.DBMS_XDBUTIL_INT.IMP_CLEANUP_XML_SCHEMA_DEPS(DBMS_XDB_LIB)",
    dbmsxdbimpfinal="XDB.DBMS_XDBUTIL_INT.INSTANCE_CALLOUT_IMP_FINAL_SYS(DBMS_XDB_LIB)",
    dbmsxdbisfolder="XDB.DBMS_XDB.ISFOLDER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ISFOLDER(DBMS_XDB_LIB)",
    dbmsxdblink="XDB.DBMS_XDB.LINK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LINK(DBMS_XDB_LIB)",
    dbmsxdblock="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdblockdiscovery="XDB.DBMS_XDB.LOCKDISCOVERY(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKDISCOVERY(DBMS_XDB_LIB)",
    dbmsxdblockwithtimeout="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdblockxdbmovetbs="XDB.DBMS_XDB.LOCKXDB(DBMS_XDB_LIB)",
    dbmsxdblookupschemaoid="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAOID(DBMS_XDB_LIB)",
    dbmsxdblookupschemaurl="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAURL(DBMS_XDB_LIB)",
    dbmsxdbnumtohex="XDB.DBMS_CSX_INT.NUMTOHEX(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX(DBMS_XDB_LIB)",
    dbmsxdbnumtohex2="XDB.DBMS_CSX_INT.NUMTOHEX2(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX2(DBMS_XDB_LIB)",
    dbmsxdbprocesslinks="XDB.DBMS_XDB.PROCESSLINKS(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PROCESSLINKS(DBMS_XDB_LIB)",
    dbmsxdbpurgeresmetadata="XDB.DBMS_XDB.PURGERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PURGERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbrebuildhindex="XDB.DBMS_XDB_ADMIN.REBUILD_HINDEX(DBMS_XDB_LIB)",
    dbmsxdbrefreshcontentsize="XDB.DBMS_XDB.REFRESHCONTENTSIZE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHCONTENTSIZE(DBMS_XDB_LIB)",
    dbmsxdbrefreshlock="XDB.DBMS_XDB.REFRESHLOCK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHLOCK(DBMS_XDB_LIB)",
    dbmsxdbreloadrootschema="XDB.DBMS_XDB_ADMIN.RELOADROOTSCHEMA(DBMS_XDB_LIB)",
    dbmsxdbrename="XDB.DBMS_XDB.RENAMERESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.RENAMERESOURCE(DBMS_XDB_LIB)",
    dbmsxdbrepos_create_repos="XDB.DBMS_XDBREPOS.CREATEREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_drop_repos="XDB.DBMS_XDBREPOS.DROPREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_mount_repos="XDB.DBMS_XDBREPOS.MOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_set_repos="XDB.DBMS_XDBREPOS.SETCURRENTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_unmount_repos="XDB.DBMS_XDBREPOS.UNMOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposcreaterepos="XDB.DBMS_XDBREPOS.CREATEREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposdroprepos="XDB.DBMS_XDBREPOS.DROPREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposmountrepos="XDB.DBMS_XDBREPOS.MOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepossetrepos="XDB.DBMS_XDBREPOS.SETCURRENTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposunmountrepos="XDB.DBMS_XDBREPOS.UNMOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbresetnfsstats="XDB.DBMS_XDBNFS.RESET_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdbsetacl="XDB.DBMS_XDB.SETACL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.SETACL(DBMS_XDB_LIB)",
    dbmsxdbsetlinkparents="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTS(DBMS_XDB_LIB)",
    dbmsxdbsetlinkparentsnew="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdbsetprintmode="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdbsetprintmode1="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdbsetrealm="XDB.DBMS_XDB_CONFIG.SET_REALM(DBMS_XDB_LIB)",
    dbmsxdbsyncresource="XDB.DBMS_XDBNFS.SYNCRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbtouchresource="XDB.DBMS_XDB.TOUCHRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.TOUCHRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbunlock="XDB.DBMS_XDB.UNLOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UNLOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbupdateresmdqname="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdateresmdqnameref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdateresmetadata="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdateresmetadataref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdatexsch="XDB.DBMS_XDBUTIL_INT.UPDATE_XML_SCHEMA_DEPS0(DBMS_XDB_LIB)",
    dbmsxdbusedport="XDB.DBMS_XDB_CONFIG.USEDPORT(DBMS_XDB_LIB)",
    dbmsxdbusesetlinkparentsnew="XDB.DBMS_XDBUTIL_INT.USESETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdbvalidateport="XDB.DBMS_XDB.VALIDATE_PORT(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.VALIDATE_PORT(DBMS_XDB_LIB)",
    dbmsxdbxmlschgetdeplvl="XDB.DBMS_XDBUTIL_INT.XMLSCHEMADEPENDENCYLEVEL(DBMS_XDB_LIB)",
    dbmsxdbz_init_rescfg="XDB.DBMS_XDBZ0.INITXDBRESCONFIG(DBMS_XDBZ_LIB)",
    dbmsxdbz_setdeltatrigflag="XDB.DBMS_XDBZ0.SET_DELTA_TRIGFLAG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbz_setmodflg="XDB.DBMS_XDBZ0.SETMODFLG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbz_updtbldepflags="XDB.DBMS_XDBZ0.UPDATE_TABLE_DEPENDANT_FLAGS(DBMS_XDBZ_LIB)",
    dbmsxdbzinitrescfg="XDB.DBMS_XDBZ0.INITXDBRESCONFIG(DBMS_XDBZ_LIB)",
    dbmsxdbzsetdeltatrigflag="XDB.DBMS_XDBZ0.SET_DELTA_TRIGFLAG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbzsetmodflg="XDB.DBMS_XDBZ0.SETMODFLG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbzupdtbldepflags="XDB.DBMS_XDBZ0.UPDATE_TABLE_DEPENDANT_FLAGS(DBMS_XDBZ_LIB)",
    dbmsxevent_clearhlist="XDB.DBMS_XEVENT.CLEARINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getappdata="XDB.DBMS_XEVENT.GETAPPLICATIONDATA(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getchdoid="XDB.DBMS_XEVENT.GETCHDOIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getcurrentuser="XDB.DBMS_XEVENT.GETUSERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getdavowner="XDB.DBMS_XEVENT.GETDAVOWNERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getevent="XDB.DBMS_XEVENT.GETEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getfirsthdlr="XDB.DBMS_XEVENT.GETFIRSTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_gethdlrlist="XDB.DBMS_XEVENT.GETHDLRLISTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getinterface="XDB.DBMS_XEVENT.GETINTFINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlang="XDB.DBMS_XEVENT.GETLANGINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlink="XDB.DBMS_XEVENT.GETLINKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlinkname="XDB.DBMS_XEVENT.GETLINKNMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlock="XDB.DBMS_XEVENT.GETLOCKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getnexthdlr="XDB.DBMS_XEVENT.GETNEXTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getoldresource="XDB.DBMS_XEVENT.GETORESINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getoutstream="XDB.DBMS_XEVENT.GETOUTSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparameter="XDB.DBMS_XEVENT.GETPARMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparent="XDB.DBMS_XEVENT.GETPARENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparname="XDB.DBMS_XEVENT.GETPARNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparoid="XDB.DBMS_XEVENT.GETPAROIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparpath="XDB.DBMS_XEVENT.GETPARENTPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getpath="XDB.DBMS_XEVENT.GETPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getpathname="XDB.DBMS_XEVENT.GETPATHNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getresource="XDB.DBMS_XEVENT.GETRESOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getschema="XDB.DBMS_XEVENT.GETSCHEMAINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getsource="XDB.DBMS_XEVENT.GETSOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getxdbevent="XDB.DBMS_XEVENT.GETXDBEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_removehdlr="XDB.DBMS_XEVENT.REMOVEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_setrenderpath="XDB.DBMS_XEVENT.SETRENDERPATH(DBMS_XDBEVENT_LIB)",
    dbmsxevent_setrenderstream="XDB.DBMS_XEVENT.SETRENDERSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxeventclearhlist="XDB.DBMS_XEVENT.CLEARINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetappdata="XDB.DBMS_XEVENT.GETAPPLICATIONDATA(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetchdoid="XDB.DBMS_XEVENT.GETCHDOIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetcurrentuser="XDB.DBMS_XEVENT.GETUSERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetdavowner="XDB.DBMS_XEVENT.GETDAVOWNERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetevent="XDB.DBMS_XEVENT.GETEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetfirsthdlr="XDB.DBMS_XEVENT.GETFIRSTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgethdlrlist="XDB.DBMS_XEVENT.GETHDLRLISTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetinterface="XDB.DBMS_XEVENT.GETINTFINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlang="XDB.DBMS_XEVENT.GETLANGINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlink="XDB.DBMS_XEVENT.GETLINKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlinkname="XDB.DBMS_XEVENT.GETLINKNMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlock="XDB.DBMS_XEVENT.GETLOCKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetnexthdlr="XDB.DBMS_XEVENT.GETNEXTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetoldresource="XDB.DBMS_XEVENT.GETORESINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetoutstream="XDB.DBMS_XEVENT.GETOUTSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparameter="XDB.DBMS_XEVENT.GETPARMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparent="XDB.DBMS_XEVENT.GETPARENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparname="XDB.DBMS_XEVENT.GETPARNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparoid="XDB.DBMS_XEVENT.GETPAROIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparpath="XDB.DBMS_XEVENT.GETPARENTPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetpath="XDB.DBMS_XEVENT.GETPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetpathname="XDB.DBMS_XEVENT.GETPATHNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetresource="XDB.DBMS_XEVENT.GETRESOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetschema="XDB.DBMS_XEVENT.GETSCHEMAINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetsource="XDB.DBMS_XEVENT.GETSOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetxdbevent="XDB.DBMS_XEVENT.GETXDBEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventremovehdlr="XDB.DBMS_XEVENT.REMOVEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventsetrenderpath="XDB.DBMS_XEVENT.SETRENDERPATH(DBMS_XDBEVENT_LIB)",
    dbmsxeventsetrenderstream="XDB.DBMS_XEVENT.SETRENDERSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxlsb_deleteresource="XDB.DBMS_XLSB.DELETERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_delnamelocks="XDB.DBMS_XLSB.DELNAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsb_hpccflush="XDB.DBMS_XLSB.HPCCFLUSH(DBMSXLSB_LIB)",
    dbmsxlsb_insert2htable="XDB.DBMS_XLSB.INSERTTOHTABLE(DBMSXLSB_LIB)",
    dbmsxlsb_insert2usrhtab="XDB.DBMS_XLSB.INSERTTOUSERHTAB(DBMSXLSB_LIB)",
    dbmsxlsb_insertresource="XDB.DBMS_XLSB.INSERTRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_insertresourcenxob="XDB.DBMS_XLSB.INSERTRESOURCENXOB(DBMSXLSB_LIB)/XDB.DBMS_XLSB.INSERTRESOURCENXOBCLOB(DBMSXLSB_LIB)",
    dbmsxlsb_insertresourceref="XDB.DBMS_XLSB.INSERTRESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsb_linkresource="XDB.DBMS_XLSB.LINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_saveacl="XDB.DBMS_XLSB.SAVEACL(DBMSXLSB_LIB)",
    dbmsxlsb_setrefcount="XDB.DBMS_XLSB.SETREFCOUNT(DBMSXLSB_LIB)",
    dbmsxlsb_touchoid="XDB.DBMS_XLSB.TOUCHOID(DBMSXLSB_LIB)",
    dbmsxlsb_unlinkresource="XDB.DBMS_XLSB.UNLINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_updatecontentxob="XDB.DBMS_XLSB.UPDATECONTENTXOB(DBMSXLSB_LIB)",
    dbmsxlsb_updatelocks="XDB.DBMS_XLSB.UPDATELOCKS(DBMSXLSB_LIB)",
    dbmsxlsb_updatenamelocks="XDB.DBMS_XLSB.UPDATENAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsb_updateresource="XDB.DBMS_XLSB.UPDATERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_updateresourceref="XDB.DBMS_XLSB.UPDATERESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsb_updaterootinfo="XDB.DBMS_XLSB.UPDATEROOTINFO(DBMSXLSB_LIB)",
    dbmsxlsbdeleteresource="XDB.DBMS_XLSB.DELETERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbdelnamelocks="XDB.DBMS_XLSB.DELNAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsbhpccflush="XDB.DBMS_XLSB.HPCCFLUSH(DBMSXLSB_LIB)",
    dbmsxlsbinsert2htable="XDB.DBMS_XLSB.INSERTTOHTABLE(DBMSXLSB_LIB)",
    dbmsxlsbinsert2usrhtab="XDB.DBMS_XLSB.INSERTTOUSERHTAB(DBMSXLSB_LIB)",
    dbmsxlsbinsertresource="XDB.DBMS_XLSB.INSERTRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbinsertresourcenxob="XDB.DBMS_XLSB.INSERTRESOURCENXOB(DBMSXLSB_LIB)/XDB.DBMS_XLSB.INSERTRESOURCENXOBCLOB(DBMSXLSB_LIB)",
    dbmsxlsbinsertresourceref="XDB.DBMS_XLSB.INSERTRESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsblinkresource="XDB.DBMS_XLSB.LINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbsaveacl="XDB.DBMS_XLSB.SAVEACL(DBMSXLSB_LIB)",
    dbmsxlsbsetrefcount="XDB.DBMS_XLSB.SETREFCOUNT(DBMSXLSB_LIB)",
    dbmsxlsbtouchoid="XDB.DBMS_XLSB.TOUCHOID(DBMSXLSB_LIB)",
    dbmsxlsbunlinkresource="XDB.DBMS_XLSB.UNLINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbupdatecontentxob="XDB.DBMS_XLSB.UPDATECONTENTXOB(DBMSXLSB_LIB)",
    dbmsxlsbupdatelocks="XDB.DBMS_XLSB.UPDATELOCKS(DBMSXLSB_LIB)",
    dbmsxlsbupdatenamelocks="XDB.DBMS_XLSB.UPDATENAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsbupdateresource="XDB.DBMS_XLSB.UPDATERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbupdateresourceref="XDB.DBMS_XLSB.UPDATERESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsbupdaterootinfo="XDB.DBMS_XLSB.UPDATEROOTINFO(DBMSXLSB_LIB)",
    dbmsxrc_addresconfig="XDB.DBMS_RESCONFIG.ADDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_appendresconfig="XDB.DBMS_RESCONFIG.APPENDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_deleteresconfig="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_deleteresconfigwopt="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_getlisteners="XDB.DBMS_RESCONFIG.GETLISTENERS(DBMS_RC_LIB)",
    dbmsxrc_getresconfig="XDB.DBMS_RESCONFIG.GETRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_repos_addresconfig="XDB.DBMS_RESCONFIG.ADDREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_repos_deleteresconfig="XDB.DBMS_RESCONFIG.DELETEREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_repos_getresconfig="XDB.DBMS_RESCONFIG.GETREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcaddresconfig="XDB.DBMS_RESCONFIG.ADDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcappendresconfig="XDB.DBMS_RESCONFIG.APPENDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcdeleteresconfig="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrcdeleteresconfigwopt="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrcgetlisteners="XDB.DBMS_RESCONFIG.GETLISTENERS(DBMS_RC_LIB)",
    dbmsxrcgetresconfig="XDB.DBMS_RESCONFIG.GETRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcreposaddresconfig="XDB.DBMS_RESCONFIG.ADDREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcreposdeleteresconfig="XDB.DBMS_RESCONFIG.DELETEREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcreposgetresconfig="XDB.DBMS_RESCONFIG.GETREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxres_freeresource="XDB.DBMS_XDBRESOURCE.XDB_FREERESOURCE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getacl="XDB.DBMS_XDBRESOURCE.XDB_GETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getacldocfromres="XDB.DBMS_XDBRESOURCE.XDB_GETACLDOCFROMRES(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getauthor="XDB.DBMS_XDBRESOURCE.XDB_GETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcharset="XDB.DBMS_XDBRESOURCE.XDB_GETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcomment="XDB.DBMS_XDBRESOURCE.XDB_GETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentblob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTBLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentclob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTCLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentref="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTREF(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontenttype="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTVARCHAR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentxml="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTXML(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcreationdate="XDB.DBMS_XDBRESOURCE.XDB_GETCREATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcreator="XDB.DBMS_XDBRESOURCE.XDB_GETCREATOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcustommeta="XDB.DBMS_XDBRESOURCE.XDB_GETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getdisplayname="XDB.DBMS_XDBRESOURCE.XDB_GETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getlanguage="XDB.DBMS_XDBRESOURCE.XDB_GETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getlastmodifier="XDB.DBMS_XDBRESOURCE.XDB_GETLASTMODIFIER(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getmodificationdate="XDB.DBMS_XDBRESOURCE.XDB_GETMODIFICATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getowner="XDB.DBMS_XDBRESOURCE.XDB_GETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getrefcount="XDB.DBMS_XDBRESOURCE.XDB_GETREFCOUNT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getversionid="XDB.DBMS_XDBRESOURCE.XDB_GETVERSIONID(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasaclchanged="XDB.DBMS_XDBRESOURCE.XDB_HASACLCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasauthorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASAUTHORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_haschanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascharsetchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHARACTERSETCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascmchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCUSTOMMETACHG(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascommentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCOMMENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascontentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascontypechanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTTYPECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascreationdatechg="XDB.DBMS_XDBRESOURCE.XDB_HASCREATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascreatorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCREATORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasdispnamechanged="XDB.DBMS_XDBRESOURCE.XDB_HASDISPLAYNAMECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_haslanguagechanged="XDB.DBMS_XDBRESOURCE.XDB_HASLANGUAGECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_haslastmodchanged="XDB.DBMS_XDBRESOURCE.XDB_HASLASTMODIFIERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasmodifdatechanged="XDB.DBMS_XDBRESOURCE.XDB_HASMODIFICATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasownerchanged="XDB.DBMS_XDBRESOURCE.XDB_HASOWNERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasrefcountchanged="XDB.DBMS_XDBRESOURCE.XDB_HASREFCOUNTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasversionidchanged="XDB.DBMS_XDBRESOURCE.XDB_HASVERSIONIDCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_isfolder="XDB.DBMS_XDBRESOURCE.XDB_ISFOLDER(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_makedocument="XDB.DBMS_XDBRESOURCE.XDB_MAKEDOCUMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_save="XDB.DBMS_XDBRESOURCE.XDB_SAVE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setaclres="XDB.DBMS_XDBRESOURCE.XDB_SETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setauthor="XDB.DBMS_XDBRESOURCE.XDB_SETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcharset="XDB.DBMS_XDBRESOURCE.XDB_SETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcomment="XDB.DBMS_XDBRESOURCE.XDB_SETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentblob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentclob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontenttype="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentxml="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentxref="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcustommeta="XDB.DBMS_XDBRESOURCE.XDB_SETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setdisplayname="XDB.DBMS_XDBRESOURCE.XDB_SETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setlanguage="XDB.DBMS_XDBRESOURCE.XDB_SETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setowner="XDB.DBMS_XDBRESOURCE.XDB_SETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresfreeresource="XDB.DBMS_XDBRESOURCE.XDB_FREERESOURCE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetacl="XDB.DBMS_XDBRESOURCE.XDB_GETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetacldocfromres="XDB.DBMS_XDBRESOURCE.XDB_GETACLDOCFROMRES(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetauthor="XDB.DBMS_XDBRESOURCE.XDB_GETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcharset="XDB.DBMS_XDBRESOURCE.XDB_GETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcomment="XDB.DBMS_XDBRESOURCE.XDB_GETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentblob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTBLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentclob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTCLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentref="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTREF(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontenttype="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTVARCHAR(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentxml="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTXML(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcreationdate="XDB.DBMS_XDBRESOURCE.XDB_GETCREATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcreator="XDB.DBMS_XDBRESOURCE.XDB_GETCREATOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcustommeta="XDB.DBMS_XDBRESOURCE.XDB_GETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetdisplayname="XDB.DBMS_XDBRESOURCE.XDB_GETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetlanguage="XDB.DBMS_XDBRESOURCE.XDB_GETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetlastmodifier="XDB.DBMS_XDBRESOURCE.XDB_GETLASTMODIFIER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetmodificationdate="XDB.DBMS_XDBRESOURCE.XDB_GETMODIFICATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetowner="XDB.DBMS_XDBRESOURCE.XDB_GETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetrefcount="XDB.DBMS_XDBRESOURCE.XDB_GETREFCOUNT(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetversionid="XDB.DBMS_XDBRESOURCE.XDB_GETVERSIONID(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasaclchanged="XDB.DBMS_XDBRESOURCE.XDB_HASACLCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasauthorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASAUTHORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshaschanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascharsetchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHARACTERSETCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascmchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCUSTOMMETACHG(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascommentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCOMMENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascontentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascontypechanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTTYPECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascreationdatechg="XDB.DBMS_XDBRESOURCE.XDB_HASCREATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascreatorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCREATORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasdispnamechanged="XDB.DBMS_XDBRESOURCE.XDB_HASDISPLAYNAMECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshaslanguagechanged="XDB.DBMS_XDBRESOURCE.XDB_HASLANGUAGECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshaslastmodchanged="XDB.DBMS_XDBRESOURCE.XDB_HASLASTMODIFIERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasmodifdatechanged="XDB.DBMS_XDBRESOURCE.XDB_HASMODIFICATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasownerchanged="XDB.DBMS_XDBRESOURCE.XDB_HASOWNERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasrefcountchanged="XDB.DBMS_XDBRESOURCE.XDB_HASREFCOUNTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasversionidchanged="XDB.DBMS_XDBRESOURCE.XDB_HASVERSIONIDCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxresisfolder="XDB.DBMS_XDBRESOURCE.XDB_ISFOLDER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresmakedocument="XDB.DBMS_XDBRESOURCE.XDB_MAKEDOCUMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressave="XDB.DBMS_XDBRESOURCE.XDB_SAVE(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetaclres="XDB.DBMS_XDBRESOURCE.XDB_SETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetauthor="XDB.DBMS_XDBRESOURCE.XDB_SETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcharset="XDB.DBMS_XDBRESOURCE.XDB_SETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcomment="XDB.DBMS_XDBRESOURCE.XDB_SETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentblob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentclob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontenttype="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentxml="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentxref="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcustommeta="XDB.DBMS_XDBRESOURCE.XDB_SETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetdisplayname="XDB.DBMS_XDBRESOURCE.XDB_SETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetlanguage="XDB.DBMS_XDBRESOURCE.XDB_SETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetowner="XDB.DBMS_XDBRESOURCE.XDB_SETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxtr_disabletranslation="XDB.DBMS_XMLTRANSLATIONS.DISABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtr_enabletranslation="XDB.DBMS_XMLTRANSLATIONS.ENABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtr_extractxliffdoc="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_extractxliffres="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_getbasedocument="XDB.DBMS_XMLTRANSLATIONS.GETBASEDOCUMENT(DBMS_XDBTRANS_LIB)",
    dbmsxtr_mergexliffdoc="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_mergexliffres="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_setsourcelang="XDB.DBMS_XMLTRANSLATIONS.SETSOURCELANG(DBMS_XDBTRANS_LIB)",
    dbmsxtr_translatexml="XDB.DBMS_XMLTRANSLATIONS.TRANSLATEXML(DBMS_XDBTRANS_LIB)",
    dbmsxtr_updatetranslation="XDB.DBMS_XMLTRANSLATIONS.UPDATETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtrdisabletranslation="XDB.DBMS_XMLTRANSLATIONS.DISABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtrenabletranslation="XDB.DBMS_XMLTRANSLATIONS.ENABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtrextractxliffdoc="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrextractxliffres="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrgetbasedocument="XDB.DBMS_XMLTRANSLATIONS.GETBASEDOCUMENT(DBMS_XDBTRANS_LIB)",
    dbmsxtrmergexliffdoc="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrmergexliffres="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrsetsourcelang="XDB.DBMS_XMLTRANSLATIONS.SETSOURCELANG(DBMS_XDBTRANS_LIB)",
    dbmsxtrtranslatexml="XDB.DBMS_XMLTRANSLATIONS.TRANSLATEXML(DBMS_XDBTRANS_LIB)",
    dbmsxtrupdatetranslation="XDB.DBMS_XMLTRANSLATIONS.UPDATETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbs="database",
    dbsclose="database close",
    dbsgnmchg="database global name change",
    dbslrn="database log/db files rename",
    debug_message_aux="SYS.PBREAK.DEBUG_MESSAGE_AUX(C)",
    debugmessageaux="SYS.PBREAK.DEBUG_MESSAGE_AUX(C)",
    define_column="SYS.DBMS_SQL.define_column(c)",
    definecolumn="SYS.DBMS_SQL.define_column(c)",
    del="delete",
    delete="SYS.PLITBLM.delete(c)",
    delete_schema="XDB.DBMS_XMLSCHEMA_INT.DELETESCHEMA(XMLSCHEMA_LIB)",
    delete_sdo_geom_metadata="MDSYS.MDPRVT_GMD.DELETE_GEOM_METADATA_INT(ORDMD_GMD_LIBS)",
    delete_xdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_del(xdb.PATH_VIEW_LIB)",
    delete_xdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_DEL(XDB.RESOURCE_VIEW_LIB)",
    deleteschema="XDB.DBMS_XMLSCHEMA_INT.DELETESCHEMA(XMLSCHEMA_LIB)",
    deletesdogeommetadata="MDSYS.MDPRVT_GMD.DELETE_GEOM_METADATA_INT(ORDMD_GMD_LIBS)",
    deletexdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_del(xdb.PATH_VIEW_LIB)",
    deletexdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_DEL(XDB.RESOURCE_VIEW_LIB)",
    deleteXML="SYS.XMLTYPE.DELETEXML(XMLTYPE_LIB)",
    deleting="SYS.DBMS_STANDARD.deleting(C)",
    delexe="delete execute",
    delrow="delete row procedure used by KXRD to delete or lock a row",
    depth1_xdbhi="XDB.XDB_ANCOP.DEPTH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    depth1xdbhi="XDB.XDB_ANCOP.DEPTH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    depth_xdbhi="XDB.XDB_ANCOP.DEPTH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    depthxdbhi="XDB.XDB_ANCOP.DEPTH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    describe="SYS.WPIUTL.describe(C)",
    dg_getdgname="SYS.DG$GETFLATDG.dg$getDgName(JSON_LIB)/SYS.DG$GETFLATDG.dg$getFlatDg(JSON_LIB)",
    dggetdgname="SYS.DG$GETFLATDG.dg$getDgName(JSON_LIB)/SYS.DG$GETFLATDG.dg$getFlatDg(JSON_LIB)",
    dgliaio="SYS.DBMS_INTERNAL_LOGSTDBY.APPLY_IS_OFF(DBMS_LOGSTDBY_LIB)",
    dglias="SYS.DBMS_LOGSTDBY.IS_APPLY_SERVER(DBMS_LOGSTDBY_LIB)",
    dglibld="SYS.DBMS_INTERNAL_LOGSTDBY.BUILD(DBMS_LOGSTDBY_LIB)",
    dglicdscn="SYS.DBMS_INTERNAL_LOGSTDBY.CAPTURE_SCN(DBMS_LOGSTDBY_LIB)",
    dglicfs="SYS.DBMS_INTERNAL_LOGSTDBY.CREATE_FUTURE_SESSION(DBMS_LOGSTDBY_LIB)",
    dgliclin="SYS.DBMS_INTERNAL_LOGSTDBY.CLEAR_LOGICAL_INSTANTIATION(DBMS_LOGSTDBY_LIB)",
    dglidfs="SYS.DBMS_INTERNAL_LOGSTDBY.DESTROY_FUTURE_SESSION(DBMS_LOGSTDBY_LIB)",
    dglidil="SYS.DBMS_LOGSTDBY.DB_IS_LOGSTDBY(DBMS_LOGSTDBY_LIB)",
    dglidlfp="SYS.DBMS_INTERNAL_LOGSTDBY.PURGE_LOGS(DBMS_LOGSTDBY_LIB)",
    dglidlr="SYS.DBMS_INTERNAL_LOGSTDBY.DISABLE_LOGICAL_REPLICATION(DBMS_LOGSTDBY_LIB)",
    dglidxd="SYS.DBMS_INTERNAL_LOGSTDBY.DUMP_XDAT(DBMS_LOGSTDBY_LIB)",
    dgliechgvec="SYS.DBMS_INTERNAL_LOGSTDBY.EDS_EVAL_CHANGE_VECTOR(DBMS_LOGSTDBY_LIB)",
    dglielr="SYS.DBMS_INTERNAL_LOGSTDBY.ENABLE_LOGICAL_REPLICATION(DBMS_LOGSTDBY_LIB)",
    dglieuc="SYS.DBMS_INTERNAL_LOGSTDBY.EDS_USER_CURSOR(DBMS_LOGSTDBY_LIB)",
    dglifgbs="SYS.DBMS_INTERNAL_LOGSTDBY.FAL_REQ_BY_SEQ(DBMS_LOGSTDBY_LIB)",
    dglifsrl="SYS.DBMS_INTERNAL_LOGSTDBY.FLUSH_SRLS(DBMS_LOGSTDBY_LIB)",
    dgligbchk="SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_CHK(DBMS_LOGSTDBY_LIB)",
    dgligboff="SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_OFF(DBMS_LOGSTDBY_LIB)",
    dgligboffi="SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_OFF(DBMS_LOGSTDBY_LIB)",
    dgligbon="SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_ON(DBMS_LOGSTDBY_LIB)",
    dgligboni="SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_ON(DBMS_LOGSTDBY_LIB)",
    dgligchk="SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_CHECK(DBMS_LOGSTDBY_LIB)",
    dgligss="SYS.DBMS_INTERNAL_LOGSTDBY.GET_SAFE_SCN(DBMS_LOGSTDBY_LIB)",
    dglilm="SYS.DBMS_INTERNAL_LOGSTDBY.LOCK_LSBY_META(DBMS_LOGSTDBY_LIB)",
    dglilmc="SYS.DBMS_INTERNAL_LOGSTDBY.LOCK_LSBY_CON(DBMS_LOGSTDBY_LIB)",
    dglilmd="SYS.DBMS_INTERNAL_LOGSTDBY.LOCK_LSBY_META(DBMS_LOGSTDBY_LIB)",
    dglirl="SYS.DBMS_INTERNAL_LOGSTDBY.REPAIR_LSBY_INTERNAL(DBMS_LOGSTDBY_LIB)",
    dglisd_nowait="SYS.DBMS_INTERNAL_LOGSTDBY.APPLY_STOP_NOWAIT(DBMS_LOGSTDBY_LIB)",
    dglisdnowait="SYS.DBMS_INTERNAL_LOGSTDBY.APPLY_STOP_NOWAIT(DBMS_LOGSTDBY_LIB)",
    dglisgnr="SYS.DBMS_INTERNAL_LOGSTDBY.SET_GUARD_NOT_READY(DBMS_LOGSTDBY_LIB)",
    dglislin="SYS.DBMS_INTERNAL_LOGSTDBY.SET_LOGICAL_INSTANTIATION(DBMS_LOGSTDBY_LIB)",
    dgliudo="SYS.DBMS_INTERNAL_LOGSTDBY.UPDATE_DYNAMIC_LSBY_OPTION(DBMS_LOGSTDBY_LIB)",
    dgliulm="SYS.DBMS_INTERNAL_LOGSTDBY.UNLOCK_LSBY_META(DBMS_LOGSTDBY_LIB)",
    dgliulmc="SYS.DBMS_INTERNAL_LOGSTDBY.UNLOCK_LSBY_CON(DBMS_LOGSTDBY_LIB)",
    dglius="SYS.DBMS_INTERNAL_LOGSTDBY.SEQUENCE_UPDATE(DBMS_LOGSTDBY_LIB)",
    dglr_build_main="SYS.DBMS_ROLLING.BUILD_PLAN(DBMS_ROLLING_LIB)",
    dglr_destroy_main="SYS.DBMS_ROLLING.DESTROY_PLAN(DBMS_ROLLING_LIB)",
    dglr_finish_main="SYS.DBMS_ROLLING.FINISH_PLAN(DBMS_ROLLING_LIB)",
    dglr_init_main="SYS.DBMS_ROLLING.INIT_PLAN(DBMS_ROLLING_LIB)",
    dglr_is_idx_unsupported="SYS.DBMS_INTERNAL_ROLLING.IS_IDX_UNSUPPORTED(DBMS_ROLLING_LIB)",
    dglr_rollback_main="SYS.DBMS_ROLLING.ROLLBACK_PLAN(DBMS_ROLLING_LIB)",
    dglr_set_main="SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglr_set_main_ns="SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglr_set_upg_flags="SYS.DBMS_INTERNAL_ROLLING.SET_UPGRADE_FLAGS(DBMS_ROLLING_LIB)",
    dglr_start_main="SYS.DBMS_ROLLING.START_PLAN(DBMS_ROLLING_LIB)",
    dglr_switch_main="SYS.DBMS_ROLLING.SWITCHOVER(DBMS_ROLLING_LIB)",
    dglrbuildmain="SYS.DBMS_ROLLING.BUILD_PLAN(DBMS_ROLLING_LIB)",
    dglrdestroymain="SYS.DBMS_ROLLING.DESTROY_PLAN(DBMS_ROLLING_LIB)",
    dglrfinishmain="SYS.DBMS_ROLLING.FINISH_PLAN(DBMS_ROLLING_LIB)",
    dglrinitmain="SYS.DBMS_ROLLING.INIT_PLAN(DBMS_ROLLING_LIB)",
    dglrisidxunsupported="SYS.DBMS_INTERNAL_ROLLING.IS_IDX_UNSUPPORTED(DBMS_ROLLING_LIB)",
    dglrrollbackmain="SYS.DBMS_ROLLING.ROLLBACK_PLAN(DBMS_ROLLING_LIB)",
    dglrsetmain="SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglrsetmainns="SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglrsetupgflags="SYS.DBMS_INTERNAL_ROLLING.SET_UPGRADE_FLAGS(DBMS_ROLLING_LIB)",
    dglrstartmain="SYS.DBMS_ROLLING.START_PLAN(DBMS_ROLLING_LIB)",
    dglrswitchmain="SYS.DBMS_ROLLING.SWITCHOVER(DBMS_ROLLING_LIB)",
    di="PLSQL diana",
    directory_has_symlink_icd="SYS.DBMS_UTILITY.DIRECTORY_HAS_SYMLINK_ICD(C)",
    directoryhassymlinkicd="SYS.DBMS_UTILITY.DIRECTORY_HAS_SYMLINK_ICD(C)",
    dispatch="CTXSYS.DRIDISP.TRUSTED_CALLOUT(DR$LIB)/CTXSYS.DRIDISP.TRUSTED_CALLOUT2(DR$LIB)/CTXSYS.DRVDISP.TRUSTED_CALLOUT(DR$LIB)",
    dist_txn_sync_icd="SYS.DBMS_SYSTEM.DIST_TXN_SYNC_ICD(C)",
    disttxnsyncicd="SYS.DBMS_SYSTEM.DIST_TXN_SYNC_ICD(C)",
    diu_attribute_use_statistics="SYS.DIUTIL.diu_attribute_use_statistics(c)",
    diu_node_use_statistics="SYS.DIUTIL.diu_node_use_statistics(c)",
    diuattributeusestatistics="SYS.DIUTIL.diu_attribute_use_statistics(c)",
    diugdn="SYS.DIUTIL.diugdn(c)",
    diunodeusestatistics="SYS.DIUTIL.diu_node_use_statistics(c)",
    diustx="SYS.DIUTIL.diustx(c)",
    dixdrv="PLSQL apps ??",
    dltrig_update="XDB.XDB_DLTRIG_PKG.DLTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    dltrigupdate="XDB.XDB_DLTRIG_PKG.DLTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    dm_feat="SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dm_kgladt="SYS.DBMS_DATA_MINING.KGL_ALTER_ADD_TABLE_LIB(SYS.DMUTIL_LIB)",
    dm_kglcre="SYS.DMP_SEC.KGL_CREATE_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_CREATE_LIB(SYS.DMUTIL_LIB)",
    dm_kgldrp="SYS.DBMS_DATA_MINING.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.ODM_UTIL.KGL_DROP_LIB(SYS.DMUTIL_LIB)",
    dm_kglrmt="SYS.DBMS_DATA_MINING.KGL_ALTER_REM_TABLE_LIB(SYS.DMUTIL_LIB)",
    dm_kglrnm="SYS.DBMS_DATA_MINING.KGL_ALTER_RENAME_LIB(SYS.DMUTIL_LIB)",
    dmfeat="SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dmkgladt="SYS.DBMS_DATA_MINING.KGL_ALTER_ADD_TABLE_LIB(SYS.DMUTIL_LIB)",
    dmkglcre="SYS.DMP_SEC.KGL_CREATE_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_CREATE_LIB(SYS.DMUTIL_LIB)",
    dmkgldrp="SYS.DBMS_DATA_MINING.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.ODM_UTIL.KGL_DROP_LIB(SYS.DMUTIL_LIB)",
    dmkglrmt="SYS.DBMS_DATA_MINING.KGL_ALTER_REM_TABLE_LIB(SYS.DMUTIL_LIB)",
    dmkglrnm="SYS.DBMS_DATA_MINING.KGL_ALTER_RENAME_LIB(SYS.DMUTIL_LIB)",
    dmutil="DBMS_DATA_MINING utilities",
    dmutil_check_schema="SYS.DMP_SEC.CHECK_SCHEMA(SYS.DMUTIL_LIB)",
    dmutil_ecol="SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_COL_LIB(DMUTIL_LIB)",
    dmutil_emrg="SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_MERGE_LIB(DMUTIL_LIB)",
    dmutil_ExpSerMod="SYS.DBMS_DATA_MINING.EXPORT_SERMODEL_CALLOUT(SYS.DMUTIL_LIB)",
    dmutil_feat="SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dmutil_ImpSerMod="SYS.DBMS_DATA_MINING.IMPORT_SERMODEL(SYS.DMUTIL_LIB)",
    dmutil_mare="SYS.DBMS_DATA_MINING.KGL_ALTER_REXP_LIB(DMUTIL_LIB)",
    dmutil_txttokens_bfile="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutil_txttokens_blob="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutil_txttokens_clob="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutil_txttokens_str="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutilcheckschema="SYS.DMP_SEC.CHECK_SCHEMA(SYS.DMUTIL_LIB)",
    dmutilecol="SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_COL_LIB(DMUTIL_LIB)",
    dmutilemrg="SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_MERGE_LIB(DMUTIL_LIB)",
    dmutilExpSerMod="SYS.DBMS_DATA_MINING.EXPORT_SERMODEL_CALLOUT(SYS.DMUTIL_LIB)",
    dmutilfeat="SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dmutilImpSerMod="SYS.DBMS_DATA_MINING.IMPORT_SERMODEL(SYS.DMUTIL_LIB)",
    dmutilmare="SYS.DBMS_DATA_MINING.KGL_ALTER_REXP_LIB(DMUTIL_LIB)",
    dmutiltxttokensbfile="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutiltxttokensblob="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutiltxttokensclob="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutiltxttokensstr="SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    do_print_backtrace="SYS.PBREAK.DO_PRINT_BACKTRACE(C)",
    doprintbacktrace="SYS.PBREAK.DO_PRINT_BACKTRACE(C)",
    dr="text",
    dre="text index",
    drepprep="text index perform the document indexing",
    drex="text index query",
    drg="text index",
    drl="text index",
    drn="text index",
    drop_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.DROP_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    droprwequivalence="SYS.DBMS_ADVANCED_REWRITE.DROP_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    drp="text query",
    drs="text index",
    drw="text query",
    dry="text query",
    dsy="drop synonym",
    dtb="drop table",
    dtbdrp="drop table ??",
    dtbdrv="drop table ??",
    dteerr="date error handler",
    DXS_ClearKeyCols="SYS.DBMS_XMLSTORE.CLEARKEYCOLUMNLIST(DBMS_XMLGEN_LIB)",
    DXS_ClearUpdCols="SYS.DBMS_XMLSTORE.CLEARUPDATECOLUMNLIST(DBMS_XMLGEN_LIB)",
    DXS_Close="SYS.DBMS_XMLSTORE.CLOSECONTEXT(DBMS_XMLGEN_LIB)",
    DXS_DeleteC="SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    DXS_DeleteV="SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    DXS_GetCtx="SYS.DBMS_XMLSTORE.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    DXS_InsertC="SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    DXS_InsertV="SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    DXS_SetKeyCol="SYS.DBMS_XMLSTORE.SETKEYCOLUMN(DBMS_XMLGEN_LIB)",
    DXS_SetPreserveWS="SYS.DBMS_XMLSTORE.SETPRESERVEWHITESPACE(DBMS_XMLGEN_LIB)",
    DXS_SetRowTagName="SYS.DBMS_XMLSTORE.SETROWTAG(DBMS_XMLGEN_LIB)",
    DXS_SetUpdCol="SYS.DBMS_XMLSTORE.SETUPDATECOLUMN(DBMS_XMLGEN_LIB)",
    DXS_UpdateC="SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    DXS_UpdateV="SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    DXSClearKeyCols="SYS.DBMS_XMLSTORE.CLEARKEYCOLUMNLIST(DBMS_XMLGEN_LIB)",
    DXSClearUpdCols="SYS.DBMS_XMLSTORE.CLEARUPDATECOLUMNLIST(DBMS_XMLGEN_LIB)",
    DXSClose="SYS.DBMS_XMLSTORE.CLOSECONTEXT(DBMS_XMLGEN_LIB)",
    DXSDeleteC="SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    DXSDeleteV="SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    DXSGetCtx="SYS.DBMS_XMLSTORE.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    DXSInsertC="SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    DXSInsertV="SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    DXSSetKeyCol="SYS.DBMS_XMLSTORE.SETKEYCOLUMN(DBMS_XMLGEN_LIB)",
    DXSSetPreserveWS="SYS.DBMS_XMLSTORE.SETPRESERVEWHITESPACE(DBMS_XMLGEN_LIB)",
    DXSSetRowTagName="SYS.DBMS_XMLSTORE.SETROWTAG(DBMS_XMLGEN_LIB)",
    DXSSetUpdCol="SYS.DBMS_XMLSTORE.SETUPDATECOLUMN(DBMS_XMLGEN_LIB)",
    DXSUpdateC="SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    DXSUpdateV="SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    edit_distance="SYS.UTL_MATCH.edit_distance(c)",
    edit_distance_similarity="SYS.UTL_MATCH.edit_distance_similarity(c)",
    editdistance="SYS.UTL_MATCH.edit_distance(c)",
    editdistancesimilarity="SYS.UTL_MATCH.edit_distance_similarity(c)",
    equal_func_xdbhi="XDB.XDB_FUNCIMPL.EQUAL_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    equalfuncxdbhi="XDB.XDB_FUNCIMPL.EQUAL_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    equals_host="SYS.DBMS_NETWORK_ACL_UTILITY.can(C)",
    equalshost="SYS.DBMS_NETWORK_ACL_UTILITY.can(C)",
    err="error recovery",
    erroep="error recovery oracle error position",
    eva="evaluate",
    evacst="evaluate cast",
    evadid="evaluate date: internal date to date format",
    evadis="evaluate date: internal date to string",
    evadsd="evaluate date string to date",
    evaopn2="evaluate operand",
    evapls="evaluate plsql function",
    evareo="evaluate relational operator. Compare two operands of relational expression. After compare, branch on operator type and return true or false.",
    evaval="evaluate val",
    evaxl="evaluate vector translate",
    exec_ilm_action_icd="SYS.PRVT_ILM.EXEC_ILM_ACTION_ICD(C)",
    execilmactionicd="SYS.PRVT_ILM.EXEC_ILM_ACTION_ICD(C)",
    execute_sql="SYS.DBMS_DDL.EXECUTE_SQL(C)/SYS.DBMS_SESSION.EXECUTE_SQL(C)/SYS.DBMS_TRANSACTION.EXECUTE_SQL(C)",
    executesql="SYS.DBMS_DDL.EXECUTE_SQL(C)/SYS.DBMS_SESSION.EXECUTE_SQL(C)/SYS.DBMS_TRANSACTION.EXECUTE_SQL(C)",
    exists="SYS.PLITBLM.exists(c)",
    existsNode_varchar2="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    existsNode_varchar22="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    existsNodevarchar2="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    existsNodevarchar22="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    expcop="evaluate callback operator list",
    expeal="evaluate its argument AND list. It returns true if argument is true, false if argument is false, and unknown if argument is unkown.",
    expepr="evaluate the argument predicate. It returns the result of the evaluation. If the operators ODFFNEARG flas is set (currently only for OPTLNN), dont evaluate the operands.",
    ext2int_name="XDB.XDB$EXTNAME2INTNAME.xdb$ExtName2IntName(XMLSCHEMA_LIB)",
    ext2intname="XDB.XDB$EXTNAME2INTNAME.xdb$ExtName2IntName(XMLSCHEMA_LIB)",
    extend="SYS.PLITBLM.extend(c)",
    extract_varchar2="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    extract_varchar22="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    extractvarchar2="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    extractvarchar22="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    filter="SYS.SODA_OPERATION_T.FILTER(DBMS_SODAOPR_LIB)",
    first="SYS.PLITBLM.first(c)",
    format_error_backtrace="SYS.DBMS_UTILITY.format_error_backtrace(C)",
    format_error_stack="SYS.DBMS_UTILITY.format_error_stack(C)",
    formaterrorbacktrace="SYS.DBMS_UTILITY.format_error_backtrace(C)",
    formaterrorstack="SYS.DBMS_UTILITY.format_error_stack(C)",
    fplib="filter projection library (exadata smartscan)",
    from_geojson_c="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    from_geojson_v="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    fromgeojsonc="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    fromgeojsonv="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    generate_checksum="SYS.DBMS_ADVANCED_REWRITE.GENERATE_CHECKSUM(DBMS_RWEQUIV_LIB)",
    generate_objid="SYS.DBMS_DDL_INTERNAL.GENERATE_OBJID(C)",
    generate_schema="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMA(XMLSCHEMA_LIB)",
    generate_schemas="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMAS(XMLSCHEMA_LIB)",
    generatechecksum="SYS.DBMS_ADVANCED_REWRITE.GENERATE_CHECKSUM(DBMS_RWEQUIV_LIB)",
    generateobjid="SYS.DBMS_DDL_INTERNAL.GENERATE_OBJID(C)",
    generateschema="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMA(XMLSCHEMA_LIB)",
    generateschemas="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMAS(XMLSCHEMA_LIB)",
    georAppend="MDSYS.SDO_GEOR_INT.APPEND(ORDMD_GEOR_LIBS)",
    georCalcComprRatio="MDSYS.SDO_GEOR_INT.CALCCOMPRESSIONRATIO(ORDMD_GEOR_LIBS)",
    georCalcNominalSize="MDSYS.SDO_GEOR_INT.CALCRASTERNOMINALSIZE(ORDMD_GEOR_LIBS)",
    georCalcOptimizedBlockSize="MDSYS.SDO_GEOR_INT.CALCOPTIMIZEDBLOCKSIZE(ORDMD_GEOR_LIBS)",
    georCalcStorageSize="MDSYS.SDO_GEOR_INT.CALCRASTERSTORAGESIZE(ORDMD_GEOR_LIBS)",
    georChangeCellValue="MDSYS.SDO_GEOR_INT.CHANGECELLVALUE(ORDMD_GEOR_LIBS)",
    georChangeCellValues="MDSYS.SDO_GEOR_INT.CHANGECELLVALUES(ORDMD_GEOR_LIBS)",
    georChangeCellValues1="MDSYS.SDO_GEOR_INT.CHANGECELLVALUES(ORDMD_GEOR_LIBS)",
    georChangeFormat="MDSYS.SDO_GEOR_INT.CHANGEFORMAT(ORDMD_GEOR_LIBS)",
    georChangeFormatCopy="MDSYS.SDO_GEOR_INT.CHANGEFORMATCOPY(ORDMD_GEOR_LIBS)",
    georClassify="MDSYS.SDO_GEOR_INT.CLASSIFY(ORDMD_GEOR_LIBS)",
    georClassifyP="MDSYS.SDO_GEOR_INT.CLASSIFYP(ORDMD_GEOR_LIBS)",
    georCompressJP2="MDSYS.SDO_GEOR_INT.COMPRESSJP2(ORDMD_GEOR_LIBS)",
    georConvertCellCoord="MDSYS.SDO_GEOR_INT.CONVERTCELLCOORDINATE(ORDMD_GEOR_LIBS)",
    georConvertResolutions="MDSYS.SDO_GEOR_INT.CONVERTRESOLUTIONS(ORDMD_GEOR_LIBS)",
    georDecompressJP2="MDSYS.SDO_GEOR_INT.DECOMPRESSJP2(ORDMD_GEOR_LIBS)",
    georDeleteGrtMetaData="MDSYS.SDO_GEOR_DEF.DELETEGRTMETAENTRY(ORDMD_GEOR_LIBS)",
    georDeletePyramid="MDSYS.SDO_GEOR_INT.DELETEPYRAMID(ORDMD_GEOR_LIBS)",
    georDeleteRdtMetaData="MDSYS.SDO_GEOR_DEF.DELETERDTMETAENTRY(ORDMD_GEOR_LIBS)",
    georDeleteUserData="MDSYS.SDO_GEOR_DEF.DELETEUSERDATA(ORDMD_GEOR_LIBS)",
    georDodge="MDSYS.SDO_GEOR_IP.DODGE0(ORDMD_GEOR_LIBS)",
    georDodge1="MDSYS.SDO_GEOR_INT.DODGE1(ORDMD_GEOR_LIBS)",
    georDodgeP1="MDSYS.SDO_GEOR_INT.DODGEP1(ORDMD_GEOR_LIBS)",
    georDodgePP1="MDSYS.SDO_GEOR_INT.DODGEPP1(ORDMD_GEOR_LIBS)",
    georEmptyBlocks="MDSYS.SDO_GEOR_INT.EMPTYBLOCKS(ORDMD_GEOR_LIBS)",
    georEqualize="MDSYS.SDO_GEOR_INT.EQUALIZE0(ORDMD_GEOR_LIBS)",
    georEqualizeBlob="MDSYS.SDO_GEOR_INT.EQUALIZE0_BLOB(ORDMD_GEOR_LIBS)",
    georEqualizeP0="MDSYS.SDO_GEOR_INT.EQUALIZEP0(ORDMD_GEOR_LIBS)",
    georEvaluate="MDSYS.SDO_GEOR_INT.EVALUATE(ORDMD_GEOR_LIBS)",
    georEvaluate1="MDSYS.SDO_GEOR_INT.EVALUATE(ORDMD_GEOR_LIBS)",
    georEvaluates="MDSYS.SDO_GEOR_INT.EVALUATES(ORDMD_GEOR_LIBS)",
    georEvaluates1="MDSYS.SDO_GEOR_INT.EVALUATES(ORDMD_GEOR_LIBS)",
    georFilter="MDSYS.SDO_GEOR_INT.FILTER0(ORDMD_GEOR_LIBS)",
    georFilterBlob="MDSYS.SDO_GEOR_INT.FILTER0_BLOB(ORDMD_GEOR_LIBS)",
    georFilterP0="MDSYS.SDO_GEOR_INT.FILTERP0(ORDMD_GEOR_LIBS)",
    georFindCells="MDSYS.SDO_GEOR_INT.FINDCELLS(ORDMD_GEOR_LIBS)",
    georFindCellsPUnit="MDSYS.SDO_GEOR_INT.FINDCELLSPUNIT(ORDMD_GEOR_LIBS)",
    georGenBlockMBR="MDSYS.SDO_GEOR_INT.GENERATEBLOCKMBR(ORDMD_GEOR_LIBS)",
    georGeneratePyramid="MDSYS.SDO_GEOR_INT.GENERATEPYRAMID0(ORDMD_GEOR_LIBS)",
    georGeneratePyramidP0="MDSYS.SDO_GEOR_INT.GENERATEPYRAMIDP0(ORDMD_GEOR_LIBS)",
    georGeneratePyramidPP="MDSYS.SDO_GEOR_INT.GENERATEPYRAMIDPP(ORDMD_GEOR_LIBS)",
    georGenerateStatistics="MDSYS.SDO_GEOR_INT.GENERATESTATISTICS(ORDMD_GEOR_LIBS)",
    georGenerateStatistics1P="MDSYS.SDO_GEOR_INT.GENERATESTATISTICS1P(ORDMD_GEOR_LIBS)",
    georGenerateStatisticsMax="MDSYS.SDO_GEOR_INT.GENERATESTATISTICSMAX(ORDMD_GEOR_LIBS)",
    georGenerateStatisticsMedian="MDSYS.SDO_GEOR_INT.GENERATESTATISTICSMEDIAN(ORDMD_GEOR_LIBS)",
    georGenerateStatisticsP="MDSYS.SDO_GEOR_INT.GENERATESTATISTICSP(ORDMD_GEOR_LIBS)",
    georGenSpatialExtent="MDSYS.SDO_GEOR_INT.GENERATESPATIALEXTENT(ORDMD_GEOR_LIBS)",
    georGenSpatialExtent1="MDSYS.SDO_GEOR_INT.GENERATESPATIALEXTENT(ORDMD_GEOR_LIBS)",
    georGeoreference="MDSYS.SDO_GEOR_INT.GEOREFERENCE(ORDMD_GEOR_LIBS)",
    georGetBitmapMask="MDSYS.SDO_GEOR_INT.GETBITMAPMASK(ORDMD_GEOR_LIBS)",
    georGetCellCoord2="MDSYS.SDO_GEOR_INT.GETCELLCOORDINATE2(ORDMD_GEOR_LIBS)",
    georGetCellCoordinate="MDSYS.SDO_GEOR_INT.GETCELLCOORDINATE(ORDMD_GEOR_LIBS)",
    georGetCellValue1="MDSYS.SDO_GEOR_INT.GETCELLVALUE(ORDMD_GEOR_LIBS)",
    georGetCellValue2="MDSYS.SDO_GEOR_INT.GETCELLVALUE(ORDMD_GEOR_LIBS)",
    georGetCellValue3="MDSYS.SDO_GEOR_INT.GETCELLVALUES(ORDMD_GEOR_LIBS)",
    georGetCellValue4="MDSYS.SDO_GEOR_INT.GETCELLVALUES(ORDMD_GEOR_LIBS)",
    georGetJP2TileSize="MDSYS.SDO_GEOR_INT.GETJP2TILESIZE(ORDMD_GEOR_LIBS)",
    georGetModelCoord2="MDSYS.SDO_GEOR_INT.GETMODELCOORDINATE(ORDMD_GEOR_LIBS)",
    georGetModelCoordinate="MDSYS.SDO_GEOR_INT.GETMODELCOORDINATE(ORDMD_GEOR_LIBS)",
    georGetMosaicResolutions="MDSYS.SDO_GEOR_INT.GETMOSAICRESOLUTIONS(ORDMD_GEOR_LIBS)",
    georGetMosaicStatistics="MDSYS.SDO_GEOR_INT.GETMOSAICSTATISTICS(ORDMD_GEOR_LIBS)",
    georGetMosaicSubset="MDSYS.SDO_GEOR_INT.GETMOSAICSUBSET0(ORDMD_GEOR_LIBS)",
    georGetRasterBlockLocator="MDSYS.SDO_GEOR_INT.GETRASTERBLOCKLOCATOR(ORDMD_GEOR_LIBS)",
    georGetRasterBlockLocator1="MDSYS.SDO_GEOR_INT.GETRASTERBLOCKLOCATOR(ORDMD_GEOR_LIBS)",
    georGetRasterizedGeometry="MDSYS.SDO_GEOR_INT.GETRASTERIZEDGEOMETRY(ORDMD_GEOR_LIBS)",
    georGetRasterRange="MDSYS.SDO_GEOR_INT.GETRASTERRANGE(ORDMD_GEOR_LIBS)",
    georGetRasterSubset="MDSYS.SDO_GEOR_INT.GETRASTERSUBSET(ORDMD_GEOR_LIBS)",
    georHasBitmapMask="MDSYS.SDO_GEOR_INT.HASBITMAPMASK(ORDMD_GEOR_LIBS)",
    georHistogramMatch="MDSYS.SDO_GEOR_INT.HISTOGRAMMATCH0(ORDMD_GEOR_LIBS)",
    georHistogramMatch1="MDSYS.SDO_GEOR_INT.HISTOGRAMMATCH1(ORDMD_GEOR_LIBS)",
    georHistogramMatchP0="MDSYS.SDO_GEOR_INT.HISTOGRAMMATCHP0(ORDMD_GEOR_LIBS)",
    georHistogramMatchP1="MDSYS.SDO_GEOR_INT.HISTOGRAMMATCHP1(ORDMD_GEOR_LIBS)",
    georIsOverlap="MDSYS.SDO_GEOR_INT.ISOVERLAP(ORDMD_GEOR_LIBS)",
    georIsValidEntry2="MDSYS.SDO_GEOR_DEF.ISVALIDENTRY2(ORDMD_GEOR_LIBS)",
    georMask="MDSYS.SDO_GEOR_INT.MASK(ORDMD_GEOR_LIBS)",
    georMathOp="MDSYS.SDO_GEOR_INT.MATHOP(ORDMD_GEOR_LIBS)",
    georMathOpP="MDSYS.SDO_GEOR_INT.MATHOPP(ORDMD_GEOR_LIBS)",
    georMosaicFillGap="MDSYS.SDO_GEOR_INT.MOSAICFILLGAP(ORDMD_GEOR_LIBS)",
    georMosaick="MDSYS.SDO_GEOR_INT.MOSAICK0(ORDMD_GEOR_LIBS)",
    georMosaicSubset="MDSYS.SDO_GEOR_INT.MOSAICSUBSET0(ORDMD_GEOR_LIBS)",
    georMosaicSubsetP0="MDSYS.SDO_GEOR_INT.MOSAICSUBSETP0(ORDMD_GEOR_LIBS)",
    georMosaicSubsetPP="MDSYS.SDO_GEOR_INT.MOSAICSUBSETPREPARE(ORDMD_GEOR_LIBS)",
    georNormalize="MDSYS.SDO_GEOR_INT.NORMALIZE0(ORDMD_GEOR_LIBS)",
    georNormalize1="MDSYS.SDO_GEOR_INT.NORMALIZE1(ORDMD_GEOR_LIBS)",
    georNormalizeBlob="MDSYS.SDO_GEOR_INT.NORMALIZE0_BLOB(ORDMD_GEOR_LIBS)",
    georNormalizeP0="MDSYS.SDO_GEOR_INT.NORMALIZEP0(ORDMD_GEOR_LIBS)",
    georNormalizeP1="MDSYS.SDO_GEOR_INT.NORMALIZEP1(ORDMD_GEOR_LIBS)",
    georPieceWiseStretch="MDSYS.SDO_GEOR_INT.PIECEWISESTRETCH0(ORDMD_GEOR_LIBS)",
    georPieceWiseStretchBlob="MDSYS.SDO_GEOR_INT.PIECEWISESTRETCH0_BLOB(ORDMD_GEOR_LIBS)",
    georPiecewiseStretchP0="MDSYS.SDO_GEOR_INT.PIECEWISESTRETCHP0(ORDMD_GEOR_LIBS)",
    georPopulateRDT="MDSYS.SDO_GEOR_INT.POPULATERDT(ORDMD_GEOR_LIBS)",
    georPrepareRDT1="MDSYS.SDO_GEOR_INT.PREPARERDT1(ORDMD_GEOR_LIBS)",
    georPrepareRDTW="MDSYS.SDO_GEOR_INT.PREPARERDT(ORDMD_GEOR_LIBS)",
    georRasterDiff="MDSYS.SDO_GEOR_INT.RASTERDIFF(ORDMD_GEOR_LIBS)",
    georRasterDiffP="MDSYS.SDO_GEOR_INT.RASTERDIFFP(ORDMD_GEOR_LIBS)",
    georRasterizePolygon="MDSYS.SDO_GEOR_INT.RASTERIZEPOLYGON(ORDMD_GEOR_LIBS)",
    georRasterMathOp="MDSYS.SDO_GEOR_INT.RASTERMATHOP(ORDMD_GEOR_LIBS)",
    georRasterMathOpP="MDSYS.SDO_GEOR_INT.RASTERMATHOPP(ORDMD_GEOR_LIBS)",
    georRasterOver="MDSYS.SDO_GEOR_INT.RASTEROVER(ORDMD_GEOR_LIBS)",
    georRasterOverP="MDSYS.SDO_GEOR_INT.RASTEROVERP(ORDMD_GEOR_LIBS)",
    georRasterUpdate="MDSYS.SDO_GEOR_INT.RASTERUPDATE(ORDMD_GEOR_LIBS)",
    georRasterUpdateP="MDSYS.SDO_GEOR_INT.RASTERUPDATEP(ORDMD_GEOR_LIBS)",
    georRectify="MDSYS.SDO_GEOR_INT.RECTIFY(ORDMD_GEOR_LIBS)",
    georRectifyBlob="MDSYS.SDO_GEOR_INT.RECTIFY(ORDMD_GEOR_LIBS)",
    georRectifyParallel="MDSYS.SDO_GEOR_INT.RECTIFYPARALLEL(ORDMD_GEOR_LIBS)",
    georReproject="MDSYS.SDO_GEOR_INT.REPROJECT(ORDMD_GEOR_LIBS)",
    georReprojectToLOB="MDSYS.SDO_GEOR_INT.REPROJECT(ORDMD_GEOR_LIBS)",
    georScale="MDSYS.SDO_GEOR_INT.SCALE(ORDMD_GEOR_LIBS)",
    georScaleCopy="MDSYS.SDO_GEOR_INT.SCALECOPY(ORDMD_GEOR_LIBS)",
    georSetBitmapMask="MDSYS.SDO_GEOR_INT.SETBITMAPMASK(ORDMD_GEOR_LIBS)",
    georSetULTCoordinate="MDSYS.SDO_GEOR_INT.SETULTCOORDINATE(ORDMD_GEOR_LIBS)",
    georStack="MDSYS.SDO_GEOR_INT.STACK(ORDMD_GEOR_LIBS)",
    georStackP="MDSYS.SDO_GEOR_INT.STACKP(ORDMD_GEOR_LIBS)",
    georStretch="MDSYS.SDO_GEOR_INT.STRETCH0(ORDMD_GEOR_LIBS)",
    georStretchBlob="MDSYS.SDO_GEOR_INT.STRETCH0_BLOB(ORDMD_GEOR_LIBS)",
    georStretchP0="MDSYS.SDO_GEOR_INT.STRETCHP0(ORDMD_GEOR_LIBS)",
    georSubset="MDSYS.SDO_GEOR_INT.SUBSET(ORDMD_GEOR_LIBS)",
    georVal="MDSYS.SDO_GEOR_INT.VALIDATE_GEORASTER(ORDMD_GEOR_LIBS)",
    georValidateBlockMBR="MDSYS.SDO_GEOR_INT.VALIDATEBLOCKMBR(ORDMD_GEOR_LIBS)",
    georValidateForMosaicSubset="MDSYS.SDO_GEOR_INT.VALIDATEFORMOSAICSUBSET0(ORDMD_GEOR_LIBS)",
    georxAddNODATA="MDSYS.SDO_GEORX.ADDNODATA(ORDMD_GEORX_LIBS)",
    georxAppendSourceInfo="MDSYS.SDO_GEORX.APPENDSOURCEINFO(ORDMD_GEORX_LIBS)",
    georxCreateBlank="MDSYS.SDO_GEORX.CREATEBLANK(ORDMD_GEORX_LIBS)",
    georxDeleteGCP="MDSYS.SDO_GEORX.DELETEGCP(ORDMD_GEORX_LIBS)",
    georxDeleteNODATA="MDSYS.SDO_GEORX.DELETENODATA(ORDMD_GEORX_LIBS)",
    georxGenerateSpatialRes="MDSYS.SDO_GEORX.GENERATESPATIALRES(ORDMD_GEORX_LIBS)",
    georxGeoreference="MDSYS.SDO_GEORX.GEOREFERENCE(ORDMD_GEORX_LIBS)",
    georxGetAllNODATA="MDSYS.SDO_GEORX.GETNODATA(ORDMD_GEORX_LIBS)",
    georxGetBandDimSize="MDSYS.SDO_GEORX.GETBANDDIMSIZE(ORDMD_GEORX_LIBS)",
    georxGetBeginDateTime="MDSYS.SDO_GEORX.GETBEGINDATETIME(ORDMD_GEORX_LIBS)",
    georxGetBinFuncData="MDSYS.SDO_GEORX.GETBINFUNCTION(ORDMD_GEORX_LIBS)",
    georxGetBinTable="MDSYS.SDO_GEORX.GETBINTABLE(ORDMD_GEORX_LIBS)",
    georxGetBinType="MDSYS.SDO_GEORX.GETBINTYPE(ORDMD_GEORX_LIBS)",
    georxGetBlankCellValue="MDSYS.SDO_GEORX.GETBLANKCELLVALUE(ORDMD_GEORX_LIBS)",
    georxGetBlockingType="MDSYS.SDO_GEORX.GETBLOCKINGTYPE(ORDMD_GEORX_LIBS)",
    georxGetBlockSize="MDSYS.SDO_GEORX.GETBLOCKSIZE(ORDMD_GEORX_LIBS)",
    georxGetCellDepth="MDSYS.SDO_GEORX.GETCELLDEPTH(ORDMD_GEORX_LIBS)",
    georxGetCellDepthText="MDSYS.SDO_GEORX.GETCELLDEPTHTEXT(ORDMD_GEORX_LIBS)",
    georxGetColorMap="MDSYS.SDO_GEORX.GETCOLORMAP(ORDMD_GEORX_LIBS)",
    georxGetColorMapTable="MDSYS.SDO_GEORX.GETCOLORMAPTABLE(ORDMD_GEORX_LIBS)",
    georxGetCompressionType="MDSYS.SDO_GEORX.GETCOMPRESSIONTYPE(ORDMD_GEORX_LIBS)",
    georxGetDefaultAlpha="MDSYS.SDO_GEORX.GETDEFAULTALPHA(ORDMD_GEORX_LIBS)",
    georxGetDefaultBlue="MDSYS.SDO_GEORX.GETDEFAULTBLUE(ORDMD_GEORX_LIBS)",
    georxGetDefaultColorLayer="MDSYS.SDO_GEORX.GETDEFAULTCOLORLAYER(ORDMD_GEORX_LIBS)",
    georxGetDefaultGreen="MDSYS.SDO_GEORX.GETDEFAULTGREEN(ORDMD_GEORX_LIBS)",
    georxGetDefaultPyramidLevel="MDSYS.SDO_GEORX.GETDEFAULTPYRAMIDLEVEL(ORDMD_GEORX_LIBS)",
    georxGetDefaultRed="MDSYS.SDO_GEORX.GETDEFAULTRED(ORDMD_GEORX_LIBS)",
    georxGetEndDateTime="MDSYS.SDO_GEORX.GETENDDATETIME(ORDMD_GEORX_LIBS)",
    georxGetGCP="MDSYS.SDO_GEORX.GETGCP_INT(ORDMD_GEORX_LIBS)",
    georxGetGCPGeorefModel="MDSYS.SDO_GEORX.GETGCPGEOREFMODEL(ORDMD_GEORX_LIBS)",
    georxGetGrayScale="MDSYS.SDO_GEORX.GETGRAYSCALE(ORDMD_GEORX_LIBS)",
    georxGetGrayScaleTable="MDSYS.SDO_GEORX.GETGRAYSCALETABLE(ORDMD_GEORX_LIBS)",
    georxGetHistogram="MDSYS.SDO_GEORX.GETHISTOGRAM(ORDMD_GEORX_LIBS)",
    georxGetHistogramTable="MDSYS.SDO_GEORX.GETHISTOGRAMTABLE(ORDMD_GEORX_LIBS)",
    georxGetID="MDSYS.SDO_GEORX.GETID(ORDMD_GEORX_LIBS)",
    georxGetInterleaving="MDSYS.SDO_GEORX.GETINTERLEAVING(ORDMD_GEORX_LIBS)",
    georxGetLayerID="MDSYS.SDO_GEORX.GETLAYERID(ORDMD_GEORX_LIBS)",
    georxGetLayerOrdinate="MDSYS.SDO_GEORX.GETLAYERORDINATE(ORDMD_GEORX_LIBS)",
    georxGetMajorVersion="MDSYS.SDO_GEORX.GETMAJORVERSION(ORDMD_GEORX_LIBS)",
    georxGetMinorVersion="MDSYS.SDO_GEORX.GETMINORVERSION(ORDMD_GEORX_LIBS)",
    georxGetModelSRID="MDSYS.SDO_GEORX.GETMODELSRID(ORDMD_GEORX_LIBS)",
    georxGetNODATA="MDSYS.SDO_GEORX.GETNODATA(ORDMD_GEORX_LIBS)",
    georxGetPyramidMaxLevel="MDSYS.SDO_GEORX.GETPYRAMIDMAXLEVEL(ORDMD_GEORX_LIBS)",
    georxGetPyramidType="MDSYS.SDO_GEORX.GETPYRAMIDTYPE(ORDMD_GEORX_LIBS)",
    georxGetScaling="MDSYS.SDO_GEORX.GETSCALING(ORDMD_GEORX_LIBS)",
    georxGetSourceInfo="MDSYS.SDO_GEORX.GETSOURCEINFO(ORDMD_GEORX_LIBS)",
    georxGetSpatialDimSizes="MDSYS.SDO_GEORX.GETSPATIALDIMSIZES(ORDMD_GEORX_LIBS)",
    georxGetSpatialResolutions="MDSYS.SDO_GEORX.GETSPATIALRESOLUTIONS(ORDMD_GEORX_LIBS)",
    georxGetSpectralResolution="MDSYS.SDO_GEORX.GETSPECTRALRESOLUTION(ORDMD_GEORX_LIBS)",
    georxGetSpectralUnit="MDSYS.SDO_GEORX.GETSPECTRALUNIT(ORDMD_GEORX_LIBS)",
    georxGetSRS="MDSYS.SDO_GEORX.GETSRS(ORDMD_GEORX_LIBS)",
    georxGetStatistics="MDSYS.SDO_GEORX.GETSTATISTICS(ORDMD_GEORX_LIBS)",
    georxGetTotalLayerNumber="MDSYS.SDO_GEORX.GETTOTALLAYERNUMBER(ORDMD_GEORX_LIBS)",
    georxGetULTCoordinate="MDSYS.SDO_GEORX.GETULTCOORDINATE(ORDMD_GEORX_LIBS)",
    georxGetVAT="MDSYS.SDO_GEORX.GETVAT(ORDMD_GEORX_LIBS)",
    georxHasGrayScale="MDSYS.SDO_GEORX.HASGRAYSCALE(ORDMD_GEORX_LIBS)",
    georxHasPseudoColor="MDSYS.SDO_GEORX.HASPSEUDOCOLOR(ORDMD_GEORX_LIBS)",
    georxIsBlank="MDSYS.SDO_GEORX.ISBLANK(ORDMD_GEORX_LIBS)",
    georxIsOrthoRectified="MDSYS.SDO_GEORX.ISORTHORECTIFIED(ORDMD_GEORX_LIBS)",
    georxIsRectified="MDSYS.SDO_GEORX.ISRECTIFIED(ORDMD_GEORX_LIBS)",
    georxIsSpatialReferenced="MDSYS.SDO_GEORX.ISSPATIALREFERENCED(ORDMD_GEORX_LIBS)",
    georxSchemaValidate="MDSYS.SDO_GEORX.SCHEMAVALIDATE(ORDMD_GEORX_LIBS)",
    georxSetBeginDateTime="MDSYS.SDO_GEORX.SETBEGINDATETIME(ORDMD_GEORX_LIBS)",
    georxSetBinFuncData="MDSYS.SDO_GEORX.SETBINFUNCTION(ORDMD_GEORX_LIBS)",
    georxSetBinTable="MDSYS.SDO_GEORX.SETBINTABLE(ORDMD_GEORX_LIBS)",
    georxSetBlankCellValue="MDSYS.SDO_GEORX.SETBLANKCELLVALUE(ORDMD_GEORX_LIBS)",
    georxSetColorMap="MDSYS.SDO_GEORX.SETCOLORMAP(ORDMD_GEORX_LIBS)",
    georxSetColorMapTable="MDSYS.SDO_GEORX.SETCOLORMAPTABLE(ORDMD_GEORX_LIBS)",
    georxSetControlPoint="MDSYS.SDO_GEORX.SETCONTROLPOINT(ORDMD_GEORX_LIBS)",
    georxSetDefaultAlpha="MDSYS.SDO_GEORX.SETDEFAULTALPHA(ORDMD_GEORX_LIBS)",
    georxSetDefaultBlue="MDSYS.SDO_GEORX.SETDEFAULTBLUE(ORDMD_GEORX_LIBS)",
    georxSetDefaultColorLayer="MDSYS.SDO_GEORX.SETDEFAULTCOLORLAYER(ORDMD_GEORX_LIBS)",
    georxSetDefaultGreen="MDSYS.SDO_GEORX.SETDEFAULTGREEN(ORDMD_GEORX_LIBS)",
    georxSetDefaultPyramidLevel="MDSYS.SDO_GEORX.SETDEFAULTPYRAMIDLEVEL(ORDMD_GEORX_LIBS)",
    georxSetDefaultRed="MDSYS.SDO_GEORX.SETDEFAULTRED(ORDMD_GEORX_LIBS)",
    georxSetEndDateTime="MDSYS.SDO_GEORX.SETENDDATETIME(ORDMD_GEORX_LIBS)",
    georxSetGCP="MDSYS.SDO_GEORX.SETGCP(ORDMD_GEORX_LIBS)",
    georxSetGCPGeorefModel="MDSYS.SDO_GEORX.SETGCPGEOREFMODEL(ORDMD_GEORX_LIBS)",
    georxSetGrayScale="MDSYS.SDO_GEORX.SETGRAYSCALE(ORDMD_GEORX_LIBS)",
    georxSetGrayScaleTable="MDSYS.SDO_GEORX.SETGRAYSCALETABLE(ORDMD_GEORX_LIBS)",
    georxSetHistogramTable="MDSYS.SDO_GEORX.SETHISTOGRAMTABLE(ORDMD_GEORX_LIBS)",
    georxSetID="MDSYS.SDO_GEORX.SETID(ORDMD_GEORX_LIBS)",
    georxSetLayerID="MDSYS.SDO_GEORX.SETLAYERID(ORDMD_GEORX_LIBS)",
    georxSetLayerOrdinate="MDSYS.SDO_GEORX.SETLAYERORDINATE(ORDMD_GEORX_LIBS)",
    georxSetModelCoordLoc="MDSYS.SDO_GEORX.SETMODELCOORDLOCATION(ORDMD_GEORX_LIBS)",
    georxSetModelSRID="MDSYS.SDO_GEORX.SETMODELSRID(ORDMD_GEORX_LIBS)",
    georxSetNODATAMask="MDSYS.SDO_GEORX.SETNODATAMASK(ORDMD_GEORX_LIBS)",
    georxSetOrthoRectified="MDSYS.SDO_GEORX.SETORTHORECTIFIED(ORDMD_GEORX_LIBS)",
    georxSetRasterType="MDSYS.SDO_GEORX.SETRASTERTYPE(ORDMD_GEORX_LIBS)",
    georxSetRectified="MDSYS.SDO_GEORX.SETRECTIFIED(ORDMD_GEORX_LIBS)",
    georxSetScaling="MDSYS.SDO_GEORX.SETSCALING(ORDMD_GEORX_LIBS)",
    georxSetSourceInfo="MDSYS.SDO_GEORX.SETSOURCEINFO(ORDMD_GEORX_LIBS)",
    georxSetSpatialReferenced="MDSYS.SDO_GEORX.SETSPATIALREFERENCED(ORDMD_GEORX_LIBS)",
    georxSetSpatialResolutions="MDSYS.SDO_GEORX.SETSPATIALRESOLUTIONS(ORDMD_GEORX_LIBS)",
    georxSetSpectralResolution="MDSYS.SDO_GEORX.SETSPECTRALRESOLUTION(ORDMD_GEORX_LIBS)",
    georxSetSpectralUnit="MDSYS.SDO_GEORX.SETSPECTRALUNIT(ORDMD_GEORX_LIBS)",
    georxSetSRS="MDSYS.SDO_GEORX.SETSRS(ORDMD_GEORX_LIBS)",
    georxSetStatistics="MDSYS.SDO_GEORX.SETSTATISTICS(ORDMD_GEORX_LIBS)",
    georxSetStatistics2="MDSYS.SDO_GEORX.SETSTATISTICS(ORDMD_GEORX_LIBS)",
    georxSetVAT="MDSYS.SDO_GEORX.SETVAT(ORDMD_GEORX_LIBS)",
    georxSetVersion="MDSYS.SDO_GEORX.SETVERSION(ORDMD_GEORX_LIBS)",
    Get="SYS.DBMS_RESULT_CACHE_API.Get(C)",
    get_Arr="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    Get_Col="SYS.DBMS_TF.Get_Col(c)",
    get_endianness="SYS.DBMS_UTILITY.get_endianness(C)",
    get_env_icd="SYS.DBMS_SYSTEM.GET_ENV_ICD(C)",
    get_mdsys_event="MDSYS.GETMDSYSEVENT.GetMdsysEvent(ORDMD_UTL_LIBS)",
    get_obh_icd="SYS.DBMS_SYSTEM.GET_OBH_ICD(C)",
    get_Obj="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    get_oldvsn_hashcode="SYS.GET_OLDVERSION_HASHCODE.get_oldversion_hashcode(UTL_OBJECTS_LIB)",
    get_oldvsn_hashcode2="SYS.GET_OLDVERSION_HASHCODE2.get_oldversion_hashcode2(UTL_OBJECTS_LIB)",
    get_pickled_ns="XDB.DBMS_XDBUTIL_INT.GETPICKLEDNSTEMP(XDB.XMLSCHEMA_LIB)",
    get_tidl_frame="SYS.PBREAK.GET_TIDL_FRAME(C)",
    getArr="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    getBlob_Arr="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getBlob_Obj="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getBlobArr="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getBlobObj="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getBlobVal="SYS.XMLTYPE.GETBLOBVAL(XMLTYPE_LIB)",
    getBlobVal_flag="SYS.XMLTYPE.GETBLOBVAL(XMLTYPE_LIB)",
    getBlobValflag="SYS.XMLTYPE.GETBLOBVAL(XMLTYPE_LIB)",
    getBoolean_Arr="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getBoolean_Obj="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getBooleanArr="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getBooleanObj="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    GetC="SYS.DBMS_RESULT_CACHE_API.GetC(C)",
    getchildnodes="XDB.DBMS_XMLDOM_ICD.GETCHILDNODES(C)",
    getClob_Arr="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getClob_Obj="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getClobArr="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getClobObj="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getClobVal="SYS.XMLTYPE.GETCLOBVAL(XMLTYPE_LIB)",
    getClobVal_flag="SYS.XMLTYPE.GETCLOBVAL(XMLTYPE_LIB)",
    getClobValflag="SYS.XMLTYPE.GETCLOBVAL(XMLTYPE_LIB)",
    GetCol="SYS.DBMS_TF.Get_Col(c)",
    getCursor="SYS.SODA_OPERATION_T.GET_CURSOR(DBMS_SODAOPR_LIB)",
    getDate_Arr="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getDate_Obj="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getDateArr="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getDateObj="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getendianness="SYS.DBMS_UTILITY.get_endianness(C)",
    getenv="SYS.PRVT_ILM.GETENV(C)",
    getenvicd="SYS.DBMS_SYSTEM.GET_ENV_ICD(C)",
    getfirstchild="XDB.DBMS_XMLDOM_ICD.GETFIRSTCHILD(C)",
    getKeys_Obj="SYS.JDOM_T.get_Keys(DBMS_JDOM_LIB)",
    getKeysObj="SYS.JDOM_T.get_Keys(DBMS_JDOM_LIB)",
    getmdsysevent="MDSYS.GETMDSYSEVENT.GetMdsysEvent(ORDMD_UTL_LIBS)",
    getNamespace="SYS.XMLTYPE.GETNAMESPACE(XMLTYPE_LIB)",
    getnodevalue="XDB.DBMS_XMLDOM_ICD.GETNODEVALUE(C)",
    getNumber_Arr="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getNumber_Obj="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getNumberArr="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getNumberObj="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getNumberVal="SYS.XMLTYPE.GETNUMBERVAL(XMLTYPE_LIB)",
    getobhicd="SYS.DBMS_SYSTEM.GET_OBH_ICD(C)",
    getObj="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    getoldvsnhashcode="SYS.GET_OLDVERSION_HASHCODE.get_oldversion_hashcode(UTL_OBJECTS_LIB)",
    getoldvsnhashcode2="SYS.GET_OLDVERSION_HASHCODE2.get_oldversion_hashcode2(UTL_OBJECTS_LIB)",
    getOne="SYS.SODA_OPERATION_T.GET_ONE(DBMS_SODAOPR_LIB)",
    getpickledns="XDB.DBMS_XDBUTIL_INT.GETPICKLEDNSTEMP(XDB.XMLSCHEMA_LIB)",
    getpid="get process id",
    getRootElement="SYS.XMLTYPE.GETROOTELEMENT(XMLTYPE_LIB)",
    getSchemaId="SYS.XMLTYPE.GETSCHEMAID(XMLTYPE_LIB)",
    getSchemaURL="SYS.XMLTYPE.GETSCHEMAURL(XMLTYPE_LIB)",
    getsectick="SYS.PRVT_ILM.GETSECTICK(C)",
    getSize="SYS.JDOM_T.get_Size(DBMS_JDOM_LIB)",
    getString_Arr="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getString_Obj="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getStringArr="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getStringObj="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getStringVal="SYS.XMLTYPE.GETSTRINGVAL(XMLTYPE_LIB)",
    getStringVal_flag="SYS.XMLTYPE.GETSTRINGVAL(XMLTYPE_LIB)",
    getStringValflag="SYS.XMLTYPE.GETSTRINGVAL(XMLTYPE_LIB)",
    gettagname="XDB.DBMS_XMLDOM_ICD.GETTAGNAME(C)",
    gettidlframe="SYS.PBREAK.GET_TIDL_FRAME(C)",
    getTStamp_Arr="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    getTStamp_Obj="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    getTStampArr="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    getTStampObj="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    getType_Arr="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    getType_Obj="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    getTypeArr="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    gettypefrombuf="SYS.DBMS_PIPE.GETTYPEFROMBUF(C)",
    getTypeObj="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    gipc="grid inter process calls",
    gra="grant/revoke",
    gradrv="grant/revoke driver",
    gslcsq_add_s="SYS.DBMS_LDAP_API_FFI.LDAP_ADD_S(DBMS_LDAP_API_LIB)",
    gslcsq_authenticate_user="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER(DBMS_LDAP_API_LIB)",
    gslcsq_authenticate_user_ext="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER_EXT(DBMS_LDAP_API_LIB)",
    gslcsq_ber_free="SYS.DBMS_LDAP_API_FFI.BER_FREE(DBMS_LDAP_API_LIB)",
    gslcsq_bind_s="SYS.DBMS_LDAP_API_FFI.LDAP_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsq_check_grp_membership="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsq_check_user_scription="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_USER_SCRIPTION(DBMS_LDAP_API_LIB)",
    gslcsq_compare_s="SYS.DBMS_LDAP_API_FFI.LDAP_COMPARE_S(DBMS_LDAP_API_LIB)",
    gslcsq_count_entries="SYS.DBMS_LDAP_API_FFI.LDAP_COUNT_ENTRIES(DBMS_LDAP_API_LIB)",
    gslcsq_create_grp_handle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_GRP_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_create_mod_array="SYS.DBMS_LDAP_API_FFI.CREATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_create_mod_pset="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsq_create_srv_handle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SRV_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_create_sub_handle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SUB_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_create_user_handle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_USER_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_delete_s="SYS.DBMS_LDAP_API_FFI.LDAP_DELETE_S(DBMS_LDAP_API_LIB)",
    gslcsq_err2string="SYS.DBMS_LDAP_API_FFI.LDAP_ERR2STRING(DBMS_LDAP_API_LIB)",
    gslcsq_explode_dn="SYS.DBMS_LDAP_API_FFI.LDAP_EXPLODE_DN(DBMS_LDAP_API_LIB)",
    gslcsq_first_attr="SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsq_first_entry="SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsq_free_handle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_free_mod_array="SYS.DBMS_LDAP_API_FFI.FREE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_free_mod_pset="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsq_free_pset_coll="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_PSET_COLL(DBMS_LDAP_API_LIB)",
    gslcsq_get_avail_srvs="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_AVAIL_SRVS(DBMS_LDAP_API_LIB)",
    gslcsq_get_dbcharset_name="SYS.DBMS_LDAP_API_FFI.LDAP_GET_DBCHARSET_NAME(DBMS_LDAP_API_LIB)",
    gslcsq_get_dn="SYS.DBMS_LDAP_API_FFI.LDAP_GET_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_grp_dn="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_grp_membership="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsq_get_grp_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_names="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_NAMES(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_values="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_values_blob="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_values_len="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsq_get_scribed_srvs="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_SRVS(DBMS_LDAP_API_LIB)",
    gslcsq_get_scribed_users="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_USERS(DBMS_LDAP_API_LIB)",
    gslcsq_get_session_info="SYS.DBMS_LDAP_API_FFI.LDAP_GET_SESSION_INFO(DBMS_LDAP_API_LIB)",
    gslcsq_get_sub_dn="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_sub_ext_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_sub_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_tracelvl="SYS.DBMS_LDAP_API_FFI.LDAP_GET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_dn="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_ext_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_props_and_auth="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS_AUTH(DBMS_LDAP_API_LIB)",
    gslcsq_get_values="SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES(DBMS_LDAP_API_LIB)",
    gslcsq_get_values_blob="SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsq_get_values_len="SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsq_init="SYS.DBMS_LDAP_API_FFI.LDAP_INIT(DBMS_LDAP_API_LIB)",
    gslcsq_locate_sub_for_user="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_LOCATE_SUB_FOR_USER(DBMS_LDAP_API_LIB)",
    gslcsq_memfree="SYS.DBMS_LDAP_API_FFI.LDAP_MEMFREE(DBMS_LDAP_API_LIB)",
    gslcsq_modify_s="SYS.DBMS_LDAP_API_FFI.LDAP_MODIFY_S(DBMS_LDAP_API_LIB)",
    gslcsq_modrdn2_s="SYS.DBMS_LDAP_API_FFI.LDAP_MODRDN2_S(DBMS_LDAP_API_LIB)",
    gslcsq_msgfree="SYS.DBMS_LDAP_API_FFI.LDAP_MSGFREE(DBMS_LDAP_API_LIB)",
    gslcsq_next_attr="SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsq_next_entry="SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsq_norm_dn_with_case="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_NORM_DN_WITH_CASE(DBMS_LDAP_API_LIB)",
    gslcsq_open_ssl="SYS.DBMS_LDAP_API_FFI.LDAP_OPEN_SSL(DBMS_LDAP_API_LIB)",
    gslcsq_populate_mod_array="SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_populate_mod_array_blob="SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_populate_mod_pset="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_POPULATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsq_rename_s="SYS.DBMS_LDAP_API_FFI.LDAP_RENAME_S(DBMS_LDAP_API_LIB)",
    gslcsq_scribe_user="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsq_search_s="SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_S(DBMS_LDAP_API_LIB)",
    gslcsq_search_st="SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_ST(DBMS_LDAP_API_LIB)",
    gslcsq_set_grp_handle_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_GRP_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_set_tracelvl="SYS.DBMS_LDAP_API_FFI.LDAP_SET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsq_set_user_handle_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_set_user_props="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_simple_bind_s="SYS.DBMS_LDAP_API_FFI.LDAP_SIMPLE_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsq_unbind_s="SYS.DBMS_LDAP_API_FFI.LDAP_UNBIND_S(DBMS_LDAP_API_LIB)",
    gslcsq_unscribe_user="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_UNSCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsq_value_free_blob="SYS.DBMS_LDAP_API_FFI.VALUE_FREE_BLOB(DBMS_LDAP_API_LIB)",
    gslcsqadds="SYS.DBMS_LDAP_API_FFI.LDAP_ADD_S(DBMS_LDAP_API_LIB)",
    gslcsqauthenticateuser="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER(DBMS_LDAP_API_LIB)",
    gslcsqauthenticateuserext="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER_EXT(DBMS_LDAP_API_LIB)",
    gslcsqberfree="SYS.DBMS_LDAP_API_FFI.BER_FREE(DBMS_LDAP_API_LIB)",
    gslcsqbinds="SYS.DBMS_LDAP_API_FFI.LDAP_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsqcheckgrpmembership="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsqcheckuserscription="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_USER_SCRIPTION(DBMS_LDAP_API_LIB)",
    gslcsqcompares="SYS.DBMS_LDAP_API_FFI.LDAP_COMPARE_S(DBMS_LDAP_API_LIB)",
    gslcsqcountentries="SYS.DBMS_LDAP_API_FFI.LDAP_COUNT_ENTRIES(DBMS_LDAP_API_LIB)",
    gslcsqcreategrphandle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_GRP_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqcreatemodarray="SYS.DBMS_LDAP_API_FFI.CREATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqcreatemodpset="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsqcreatesrvhandle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SRV_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqcreatesubhandle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SUB_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqcreateuserhandle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_USER_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqdeletes="SYS.DBMS_LDAP_API_FFI.LDAP_DELETE_S(DBMS_LDAP_API_LIB)",
    gslcsqerr2string="SYS.DBMS_LDAP_API_FFI.LDAP_ERR2STRING(DBMS_LDAP_API_LIB)",
    gslcsqexplodedn="SYS.DBMS_LDAP_API_FFI.LDAP_EXPLODE_DN(DBMS_LDAP_API_LIB)",
    gslcsqfirstattr="SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsqfirstentry="SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsqfreehandle="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqfreemodarray="SYS.DBMS_LDAP_API_FFI.FREE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqfreemodpset="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsqfreepsetcoll="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_PSET_COLL(DBMS_LDAP_API_LIB)",
    gslcsqgetavailsrvs="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_AVAIL_SRVS(DBMS_LDAP_API_LIB)",
    gslcsqgetdbcharsetname="SYS.DBMS_LDAP_API_FFI.LDAP_GET_DBCHARSET_NAME(DBMS_LDAP_API_LIB)",
    gslcsqgetdn="SYS.DBMS_LDAP_API_FFI.LDAP_GET_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetgrpdn="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetgrpmembership="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsqgetgrpprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetpropnames="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_NAMES(DBMS_LDAP_API_LIB)",
    gslcsqgetpropvalues="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES(DBMS_LDAP_API_LIB)",
    gslcsqgetpropvaluesblob="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsqgetpropvalueslen="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsqgetscribedsrvs="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_SRVS(DBMS_LDAP_API_LIB)",
    gslcsqgetscribedusers="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_USERS(DBMS_LDAP_API_LIB)",
    gslcsqgetsessioninfo="SYS.DBMS_LDAP_API_FFI.LDAP_GET_SESSION_INFO(DBMS_LDAP_API_LIB)",
    gslcsqgetsubdn="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetsubextprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetsubprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgettracelvl="SYS.DBMS_LDAP_API_FFI.LDAP_GET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsqgetuserdn="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetuserextprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetuserprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetuserpropsandauth="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS_AUTH(DBMS_LDAP_API_LIB)",
    gslcsqgetvalues="SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES(DBMS_LDAP_API_LIB)",
    gslcsqgetvaluesblob="SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsqgetvalueslen="SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsqinit="SYS.DBMS_LDAP_API_FFI.LDAP_INIT(DBMS_LDAP_API_LIB)",
    gslcsqlocatesubforuser="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_LOCATE_SUB_FOR_USER(DBMS_LDAP_API_LIB)",
    gslcsqmemfree="SYS.DBMS_LDAP_API_FFI.LDAP_MEMFREE(DBMS_LDAP_API_LIB)",
    gslcsqmodifys="SYS.DBMS_LDAP_API_FFI.LDAP_MODIFY_S(DBMS_LDAP_API_LIB)",
    gslcsqmodrdn2s="SYS.DBMS_LDAP_API_FFI.LDAP_MODRDN2_S(DBMS_LDAP_API_LIB)",
    gslcsqmsgfree="SYS.DBMS_LDAP_API_FFI.LDAP_MSGFREE(DBMS_LDAP_API_LIB)",
    gslcsqnextattr="SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsqnextentry="SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsqnormdnwithcase="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_NORM_DN_WITH_CASE(DBMS_LDAP_API_LIB)",
    gslcsqopenssl="SYS.DBMS_LDAP_API_FFI.LDAP_OPEN_SSL(DBMS_LDAP_API_LIB)",
    gslcsqpopulatemodarray="SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqpopulatemodarrayblob="SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqpopulatemodpset="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_POPULATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsqrenames="SYS.DBMS_LDAP_API_FFI.LDAP_RENAME_S(DBMS_LDAP_API_LIB)",
    gslcsqscribeuser="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsqsearchs="SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_S(DBMS_LDAP_API_LIB)",
    gslcsqsearchst="SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_ST(DBMS_LDAP_API_LIB)",
    gslcsqsetgrphandleprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_GRP_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqsettracelvl="SYS.DBMS_LDAP_API_FFI.LDAP_SET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsqsetuserhandleprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqsetuserprops="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqsimplebinds="SYS.DBMS_LDAP_API_FFI.LDAP_SIMPLE_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsqunbinds="SYS.DBMS_LDAP_API_FFI.LDAP_UNBIND_S(DBMS_LDAP_API_LIB)",
    gslcsqunscribeuser="SYS.DBMS_LDAP_API_FFI.ORA_LDAP_UNSCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsqvaluefreeblob="SYS.DBMS_LDAP_API_FFI.VALUE_FREE_BLOB(DBMS_LDAP_API_LIB)",
    gwm="global service manager (GSM)",
    gwm_backup_level0="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMBACKUP0(DBMS_GSM_DBADMIN_LIB)",
    gwm_backup_level1="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.BACKUPLEVEL1(DBMS_GSM_DBADMIN_LIB)",
    gwm_call_schagent="SYS.DBMS_GSM_FIX.GWM_CALL_SCHAGENT(C)/SYS.DBMS_GSM_FIXED.GWM_CALL_SCHAGENT(C)",
    gwm_call_srvctl="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CALLSRVCTL(DBMS_GSM_DBADMIN_LIB)",
    gwm_cat_redo_marker="GSMADMIN_INTERNAL.DBMS_GSM_CLOUDADMIN.GWM_CAT_REDO_MARKER(DBMS_GSM_UTILITY_LIB)",
    gwm_db_info="SYS.DBMS_GSM_FIX.GWM_DB_INFO(C)/SYS.DBMS_GSM_FIXED.GWM_DB_INFO(C)",
    gwm_db_version_pls="SYS.DBMS_GSM_FIX.GWM_DB_VERSION_PLS(C)",
    gwm_factoring="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMFACTOR(DBMS_GSM_COMMON_LIB)",
    gwm_generate_part_name="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_PARTITION_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwm_generate_ts_name="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_TABLESPACE_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_chunkid="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKIDLOCAL(DBMS_GSM_UTILITY_LIB)",
    gwm_get_chunkidfk="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKID(DBMS_GSM_UTILITY_LIB)",
    gwm_get_chunkuid="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEID(DBMS_GSM_UTILITY_LIB)",
    gwm_get_chunkuid_text="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwm_get_crs_info="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETCRSINFOINT(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_db_param_num="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.EXECUTEDDL)(DBMS_GSM_COMMON_LIB)/GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERNUM(DBMS_GSM_COMMON_LIB)",
    gwm_get_db_param_str="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERSTR(DBMS_GSM_COMMON_LIB)",
    gwm_get_rac_status="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETRACSTATUSINT(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_sharding_mode="GSMADMIN_INTERNAL.GETSHARDINGMODE.getShardingMode(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_ssid_text="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSHARDSPACEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwm_getmsg="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETMSG(DBMS_GSM_COMMON_LIB)",
    gwm_init="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMINIT(DBMS_GSM_DBADMIN_LIB)",
    gwm_is_shardop_enabled="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GWM_IS_SHARDOP_ENABLED(DBMS_GSM_UTILITY_LIB)",
    gwm_isNonOracleCloud="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISNONORACLECLOUD(DBMS_GSM_COMMON_LIB)",
    gwm_isSQLTracing="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gwm_isSVClagging="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.ISSVCLAGGING(DBMS_GSM_DBADMIN_LIB)",
    gwm_isUETenabled="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISUETENABLED(DBMS_GSM_COMMON_LIB)",
    gwm_move_chunk="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.MOVECHUNKINT(DBMS_GSM_DBADMIN_LIB)",
    gwm_reset_db_param="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.RESETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwm_restore_test="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.RESTORETEST(DBMS_GSM_DBADMIN_LIB)",
    gwm_RSA_encoder="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.RSAENCODER(DBMS_GSM_UTILITY_LIB)",
    gwm_service_change="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SERVICECHANGE(DBMS_GSM_COMMON_LIB)",
    gwm_set_db_mvparam="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwm_set_db_param="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwm_set_donum_recurse="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETDORECURSE(DBMS_GSM_DBADMIN_LIB)",
    gwm_set_inmove="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETINMOVE(DBMS_GSM_DBADMIN_LIB)",
    gwm_set_stop_flag="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSERVICESTOPFLAG(DBMS_GSM_DBADMIN_LIB)",
    gwm_subnet="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMSUBNET(DBMS_GSM_COMMON_LIB)",
    gwm_trace_output="SYS.DBMS_GSM_FIX.GWM_TRACE_OUTPUT(C)/SYS.DBMS_GSM_FIXED.GWM_TRACE_OUTPUT(C)",
    gwm_uet_action="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ACTIONUET(DBMS_GSM_COMMON_LIB)",
    gwm_uet_verify="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.VERIFYUET(DBMS_GSM_COMMON_LIB)",
    gwm_validate_db="SYS.DBMS_GSM_FIX.GWM_VALIDATE_DB(C)/SYS.DBMS_GSM_FIXED.GWM_VALIDATE_DB(C)",
    gwm_writeToGWMTracing="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.WRITETOGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gwmbackuplevel0="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMBACKUP0(DBMS_GSM_DBADMIN_LIB)",
    gwmbackuplevel1="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.BACKUPLEVEL1(DBMS_GSM_DBADMIN_LIB)",
    gwmcallschagent="SYS.DBMS_GSM_FIX.GWM_CALL_SCHAGENT(C)/SYS.DBMS_GSM_FIXED.GWM_CALL_SCHAGENT(C)",
    gwmcallsrvctl="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CALLSRVCTL(DBMS_GSM_DBADMIN_LIB)",
    gwmcatredomarker="GSMADMIN_INTERNAL.DBMS_GSM_CLOUDADMIN.GWM_CAT_REDO_MARKER(DBMS_GSM_UTILITY_LIB)",
    gwmdbinfo="SYS.DBMS_GSM_FIX.GWM_DB_INFO(C)/SYS.DBMS_GSM_FIXED.GWM_DB_INFO(C)",
    gwmdbversionpls="SYS.DBMS_GSM_FIX.GWM_DB_VERSION_PLS(C)",
    gwmfactoring="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMFACTOR(DBMS_GSM_COMMON_LIB)",
    gwmgeneratepartname="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_PARTITION_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwmgeneratetsname="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_TABLESPACE_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwmgetchunkid="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKIDLOCAL(DBMS_GSM_UTILITY_LIB)",
    gwmgetchunkidfk="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKID(DBMS_GSM_UTILITY_LIB)",
    gwmgetchunkuid="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEID(DBMS_GSM_UTILITY_LIB)",
    gwmgetchunkuidtext="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwmgetcrsinfo="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETCRSINFOINT(DBMS_GSM_DBADMIN_LIB)",
    gwmgetdbparamnum="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.EXECUTEDDL)(DBMS_GSM_COMMON_LIB)/GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERNUM(DBMS_GSM_COMMON_LIB)",
    gwmgetdbparamstr="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERSTR(DBMS_GSM_COMMON_LIB)",
    gwmgetmsg="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETMSG(DBMS_GSM_COMMON_LIB)",
    gwmgetracstatus="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETRACSTATUSINT(DBMS_GSM_DBADMIN_LIB)",
    gwmgetshardingmode="GSMADMIN_INTERNAL.GETSHARDINGMODE.getShardingMode(DBMS_GSM_DBADMIN_LIB)",
    gwmgetssidtext="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSHARDSPACEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwminit="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMINIT(DBMS_GSM_DBADMIN_LIB)",
    gwmisNonOracleCloud="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISNONORACLECLOUD(DBMS_GSM_COMMON_LIB)",
    gwmisshardopenabled="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GWM_IS_SHARDOP_ENABLED(DBMS_GSM_UTILITY_LIB)",
    gwmisSQLTracing="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gwmisSVClagging="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.ISSVCLAGGING(DBMS_GSM_DBADMIN_LIB)",
    gwmisUETenabled="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISUETENABLED(DBMS_GSM_COMMON_LIB)",
    gwmmovechunk="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.MOVECHUNKINT(DBMS_GSM_DBADMIN_LIB)",
    gwmresetdbparam="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.RESETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwmrestoretest="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.RESTORETEST(DBMS_GSM_DBADMIN_LIB)",
    gwmRSAencoder="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.RSAENCODER(DBMS_GSM_UTILITY_LIB)",
    gwmservicechange="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SERVICECHANGE(DBMS_GSM_COMMON_LIB)",
    gwmsetdbmvparam="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwmsetdbparam="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwmsetdonumrecurse="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETDORECURSE(DBMS_GSM_DBADMIN_LIB)",
    gwmsetinmove="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETINMOVE(DBMS_GSM_DBADMIN_LIB)",
    gwmsetstopflag="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSERVICESTOPFLAG(DBMS_GSM_DBADMIN_LIB)",
    gwmsubnet="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMSUBNET(DBMS_GSM_COMMON_LIB)",
    gwmtraceoutput="SYS.DBMS_GSM_FIX.GWM_TRACE_OUTPUT(C)/SYS.DBMS_GSM_FIXED.GWM_TRACE_OUTPUT(C)",
    gwmuetaction="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ACTIONUET(DBMS_GSM_COMMON_LIB)",
    gwmuetverify="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.VERIFYUET(DBMS_GSM_COMMON_LIB)",
    gwmvalidatedb="SYS.DBMS_GSM_FIX.GWM_VALIDATE_DB(C)/SYS.DBMS_GSM_FIXED.GWM_VALIDATE_DB(C)",
    gwmwriteToGWMTracing="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.WRITETOGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gws_chunklowhi="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.CHUNKLOWHIGH(DBMS_GSM_COMMON_LIB)",
    gws_shard_split_hint="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSHARDSPLITHINT(DBMS_GSM_DBADMIN_LIB)",
    gwschunklowhi="GSMADMIN_INTERNAL.DBMS_GSM_COMMON.CHUNKLOWHIGH(DBMS_GSM_COMMON_LIB)",
    gwsrt_chunk_ctl="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CONTROLCHUNK(DBMS_GSM_DBADMIN_LIB)",
    gwsrt_get_shard_key_b="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYBININT(DBMS_GSM_UTILITY_LIB)",
    gwsrt_get_shard_key_t="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwsrt_set_key_plsql="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.SETSESSIONKEY(DBMS_GSM_UTILITY_LIB)",
    gwsrtchunkctl="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CONTROLCHUNK(DBMS_GSM_DBADMIN_LIB)",
    gwsrtgetshardkeyb="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYBININT(DBMS_GSM_UTILITY_LIB)",
    gwsrtgetshardkeyt="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwsrtsetkeyplsql="GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.SETSESSIONKEY(DBMS_GSM_UTILITY_LIB)",
    gwsshardsplithint="GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSHARDSPLITHINT(DBMS_GSM_DBADMIN_LIB)",
    has_docid="XDB.DBMS_XMLSCHEMA_INT.HASDOCID(XMLSCHEMA_LIB)",
    hasdocid="XDB.DBMS_XMLSCHEMA_INT.HASDOCID(XMLSCHEMA_LIB)",
    hasKey_Obj="SYS.JDOM_T.has_Key(DBMS_JDOM_LIB)",
    hasKeyObj="SYS.JDOM_T.has_Key(DBMS_JDOM_LIB)",
    hasNext="SYS.SODA_CURSOR_T.HAS_NEXT(DBMS_SODACUR_LIB)",
    hcsHierarchyGetCubeMVSqlPCo="SYS.DBMS_HIERARCHY.EXEC_GET_MV_SQL_FOR_AV_CACHE(DBMS_HCS_LIB)",
    hcsHierarchyValidateCubePCo="SYS.DBMS_HIERARCHY.EXECUTE_VALIDATE_ANALYTIC_VIEW(DBMS_HCS_LIB)",
    hcsHierarchyValidateHierPCo="SYS.DBMS_HIERARCHY.EXECUTE_VALIDATE_HIER(DBMS_HCS_LIB)",
    hcsOdboClosePCo="DBMS_MDX_ODBO.CLOSE_CALLOUT",
    hcsOdboConvertFormatStringPCo="SYS.DBMS_MDX_ODBO.EXECUTE_CONVERT_FMT_STR(DBMS_HCS_LIB)",
    hcsOdboExecutePCo="DBMS_MDX_ODBO.EXECUTE_CALLOUT",
    hcsOdboGetAxisDataPCo="DBMS_MDX_ODBO.GET_AXIS_DATA_CALLOUT",
    hcsOdboGetCellDataPCo="DBMS_MDX_ODBO.GET_CELL_DATA_CALLOUT",
    hcsOdboGetKeywordsPCo="SYS.DBMS_MDX_ODBO.GET_MDX_KEYWORD_NAMES_CALLOUT(DBMS_HCS_LIB)",
    hcsOdboGetMbrRowsetPCo="DBMS_MDX_ODBO.GET_MEMBERS_ROWSET",
    hcsOdboGetPropertyValuesPCo="SYS.DBMS_MDX_ODBO.GET_MDX_PROP_VALUES_CALLOUT(DBMS_HCS_LIB)",
    hcsOdboGetXFunctionsPCo="SYS.DBMS_MDX_ODBO.GET_MDX_FUNCTION_NAMES_CALLOUT(DBMS_HCS_LIB)",
    hcsOdboLogCloseSchemaRowsetPCo="DBMS_MDX_ODBO.LOG_CLOSE_SCHEMA_ROWSET",
    hcsOdboLogSchemaRowsetPCo="DBMS_MDX_ODBO.LOG_SCHEMA_ROWSET",
    hcsOdboMdxComponentIdPCo="SYS.DBMS_MDX_ODBO.EXECUTE_MDX_COMPONENT_ID(DBMS_HCS_LIB)",
    hep="PLSQL_KG_Interface",
    hsh="PLSQL_KG_Interface",
    icd_bind="SYS.DBMS_SQL.ICD_BIND(C)",
    icd_bind_array="SYS.DBMS_SQL.ICD_BIND_ARRAY(C)",
    icd_bind_c="SYS.DBMS_SQL.ICD_BIND_C(C)/SYS.DBMS_SYS_SQL.ICD_BIND_C(C)",
    icd_bind_dt="SYS.DBMS_SQL.ICD_BIND_DT(C)",
    icd_bind_i="SYS.DBMS_SQL.ICD_BIND_I(C)/SYS.DBMS_SYS_SQL.ICD_BIND_I(C)",
    icd_bind_int="SYS.DBMS_SQL.ICD_BIND_INT(C)/SYS.DBMS_SYS_SQL.ICD_BIND_INT(C)",
    icd_bind_m="SYS.DBMS_SQL.ICD_BIND_M(C)/SYS.DBMS_SYS_SQL.ICD_BIND_M(C)",
    icd_bind_r="SYS.DBMS_SQL.ICD_BIND_R(C)/SYS.DBMS_SYS_SQL.ICD_BIND_R(C)",
    icd_bind_u="SYS.DBMS_SQL.ICD_BIND_U(C)/SYS.DBMS_SYS_SQL.ICD_BIND_U(C)",
    icd_close="SYS.DBMS_SQL.ICD_CLOSE(C)/SYS.DBMS_SYS_SQL.ICD_CLOSE(C)",
    icd_dba="SYS.DBMS_UTILITY.ICD_DBA(C)",
    icd_dba_block="SYS.DBMS_UTILITY.ICD_DBA_BLOCK(C)",
    icd_dba_file="SYS.DBMS_UTILITY.ICD_DBA_FILE(C)",
    icd_dbcomp="SYS.DBMS_DBCOMP.ICD_DBCOMP(C)",
    icd_dbv2="SYS.DBMS_DBVERIFY.ICD_DBV2(C)",
    icd_define="SYS.DBMS_SQL.ICD_DEFINE(C)",
    icd_define_array="SYS.DBMS_SQL.ICD_DEFINE_ARRAY(C)",
    icd_define_c="SYS.DBMS_SQL.ICD_DEFINE_C(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_C(C)",
    icd_define_dt="SYS.DBMS_SQL.ICD_DEFINE_DT(C)",
    icd_define_i="SYS.DBMS_SQL.ICD_DEFINE_I(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_I(C)",
    icd_define_int="SYS.DBMS_SQL.ICD_DEFINE_INT(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_INT(C)",
    icd_define_l="SYS.DBMS_SQL.ICD_DEFINE_L(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_L(C)",
    icd_define_m="SYS.DBMS_SQL.ICD_DEFINE_M(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_M(C)",
    icd_define_r="SYS.DBMS_SQL.ICD_DEFINE_R(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_R(C)",
    icd_define_u="SYS.DBMS_SQL.ICD_DEFINE_U(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_U(C)",
    icd_describe_column="SYS.DBMS_SQL.ICD_DESCRIBE_COLUMN(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_COLUMN(C)",
    icd_describe_initial="SYS.DBMS_SQL.ICD_DESCRIBE_INITIAL(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_INITIAL(C)",
    icd_dump="SYS.DBMS_SQL.ICD_DUMP(C)/SYS.DBMS_SYS_SQL.ICD_DUMP(C)",
    icd_execute="SYS.DBMS_SQL.ICD_EXECUTE(C)/SYS.DBMS_SYS_SQL.ICD_EXECUTE(C)",
    icd_expand_sql_text="SYS.DBMS_SQL2.ICD_EXPAND_SQL_TEXT(C)",
    icd_fetch="SYS.DBMS_SQL.ICD_FETCH(C)/SYS.DBMS_SYS_SQL.ICD_FETCH(C)",
    icd_get_c="SYS.DBMS_SQL.ICD_GET_C(C)",
    icd_get_c_c="SYS.DBMS_SQL.ICD_GET_C_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_C(C)",
    icd_get_c_dt="SYS.DBMS_SQL.ICD_GET_C_DT(C)",
    icd_get_c_i="SYS.DBMS_SQL.ICD_GET_C_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_I(C)",
    icd_get_c_int="SYS.DBMS_SQL.ICD_GET_C_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_INT(C)",
    icd_get_c_l="SYS.DBMS_SQL.ICD_GET_C_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_L(C)",
    icd_get_c_m="SYS.DBMS_SQL.ICD_GET_C_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_M(C)",
    icd_get_c_r="SYS.DBMS_SQL.ICD_GET_C_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_R(C)",
    icd_get_c_u="SYS.DBMS_SQL.ICD_GET_C_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_U(C)",
    icd_get_cpu_time="SYS.DBMS_UTILITY.ICD_GET_CPU_TIME(C)",
    icd_get_e="SYS.DBMS_SQL.ICD_GET_E(C)/SYS.DBMS_SYS_SQL.ICD_GET_E(C)",
    icd_get_l="SYS.DBMS_SQL.ICD_GET_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_L(C)",
    icd_get_next_result="SYS.DBMS_SQL.ICD_GET_NEXT_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_GET_NEXT_RESULT(C)",
    icd_get_rpi_cursor="SYS.DBMS_SQL.ICD_GET_RPI_CURSOR(C)/SYS.DBMS_SYS_SQL.ICD_GET_RPI_CURSOR(C)",
    icd_get_time="SYS.DBMS_UTILITY.ICD_GET_TIME(C)",
    icd_get_v="SYS.DBMS_SQL.ICD_GET_V(C)",
    icd_get_v_c="SYS.DBMS_SQL.ICD_GET_V_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_C(C)",
    icd_get_v_dt="SYS.DBMS_SQL.ICD_GET_V_DT(C)",
    icd_get_v_i="SYS.DBMS_SQL.ICD_GET_V_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_I(C)",
    icd_get_v_int="SYS.DBMS_SQL.ICD_GET_V_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_INT(C)",
    icd_get_v_m="SYS.DBMS_SQL.ICD_GET_V_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_M(C)",
    icd_get_v_r="SYS.DBMS_SQL.ICD_GET_V_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_R(C)",
    icd_get_v_u="SYS.DBMS_SQL.ICD_GET_V_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_U(C)",
    icd_getsqlhash="SYS.DBMS_UTILITY.ICD_GETSQLHASH(C)",
    icd_hash="SYS.DBMS_UTILITY.ICD_HASH(C)",
    icd_init_cur_tab="SYS.DBMS_SQL.ICD_INIT_CUR_TA(C)/SYS.DBMS_SYS_SQL.ICD_INIT_CUR_TA(C)",
    icd_is_open="SYS.DBMS_SQL.ICD_IS_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_IS_OPEN(C)",
    icd_lct="SYS.DBMS_SQL.ICD_LCT(C)/SYS.DBMS_SYS_SQL.ICD_LCT(C)",
    icd_lep="SYS.DBMS_SQL.ICD_LEP(C)/SYS.DBMS_SYS_SQL.ICD_LEP(C)",
    icd_lrc="SYS.DBMS_SQL.ICD_LRC(C)/SYS.DBMS_SYS_SQL.ICD_LRC(C)",
    icd_lri="SYS.DBMS_SQL.ICD_LRI(C)/SYS.DBMS_SYS_SQL.ICD_LRI(C)",
    icd_name_res="SYS.DBMS_UTILITY.ICD_NAME_RES(C)",
    icd_name_tokenize="SYS.DBMS_UTILITY.ICD_NAME_TOKENIZE(C)",
    icd_open="SYS.DBMS_SQL.ICD_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_OPEN(C)",
    icd_parse="SYS.DBMS_SQL.ICD_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE(C)",
    icd_parse_array_init="SYS.DBMS_SQL.ICD_PARSE_ARRAY_INIT(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_INIT(C)",
    icd_parse_array_parse="SYS.DBMS_SQL.ICD_PARSE_ARRAY_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_PARSE(C)",
    icd_parse_array_send="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND(C)",
    icd_parse_array_send_lf="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)",
    icd_parseclb="SYS.DBMS_SQL.ICD_PARSECLB(C)/SYS.DBMS_SYS_SQL.ICD_PARSECLB(C)",
    icd_read_action="SYS.DBMS_APPLICATION_INFO.ICD_READ_ACTION(C)",
    icd_read_info="SYS.DBMS_APPLICATION_INFO.ICD_READ_INFO(C)",
    icd_read_module="SYS.DBMS_APPLICATION_INFO.ICD_READ_MODULE(C)",
    icd_return_result="SYS.DBMS_SQL.ICD_RETURN_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_RETURN_RESULT(C)",
    icd_set_action="SYS.DBMS_APPLICATION_INFO.ICD_SET_ACTION(C)",
    icd_set_client_info="SYS.DBMS_APPLICATION_INFO.ICD_SET_CLIENT_INFO(C)",
    icd_set_module="SYS.DBMS_APPLICATION_INFO.ICD_SET_MODULE(C)",
    icd_set_session_longops="SYS.DBMS_APPLICATION_INFO.ICD_SET_SESSION_LONGOPS(C)",
    icd_to_cursor_number="SYS.DBMS_SQL.ICD_TO_CURSOR_NUMBER(C)/SYS.DBMS_SYS_SQL.ICD_TO_CURSOR_NUMBER(C)",
    icd_to_refcursor="SYS.DBMS_SQL.ICD_TO_REFCURSOR(C)/SYS.DBMS_SYS_SQL.ICD_TO_REFCURSOR(C)",
    icdbind="SYS.DBMS_SQL.ICD_BIND(C)",
    icdbindarray="SYS.DBMS_SQL.ICD_BIND_ARRAY(C)",
    icdbindc="SYS.DBMS_SQL.ICD_BIND_C(C)/SYS.DBMS_SYS_SQL.ICD_BIND_C(C)",
    icdbinddt="SYS.DBMS_SQL.ICD_BIND_DT(C)",
    icdbindi="SYS.DBMS_SQL.ICD_BIND_I(C)/SYS.DBMS_SYS_SQL.ICD_BIND_I(C)",
    icdbindint="SYS.DBMS_SQL.ICD_BIND_INT(C)/SYS.DBMS_SYS_SQL.ICD_BIND_INT(C)",
    icdbindm="SYS.DBMS_SQL.ICD_BIND_M(C)/SYS.DBMS_SYS_SQL.ICD_BIND_M(C)",
    icdbindr="SYS.DBMS_SQL.ICD_BIND_R(C)/SYS.DBMS_SYS_SQL.ICD_BIND_R(C)",
    icdbindu="SYS.DBMS_SQL.ICD_BIND_U(C)/SYS.DBMS_SYS_SQL.ICD_BIND_U(C)",
    icdclose="SYS.DBMS_SQL.ICD_CLOSE(C)/SYS.DBMS_SYS_SQL.ICD_CLOSE(C)",
    icddba="SYS.DBMS_UTILITY.ICD_DBA(C)",
    icddbablock="SYS.DBMS_UTILITY.ICD_DBA_BLOCK(C)",
    icddbafile="SYS.DBMS_UTILITY.ICD_DBA_FILE(C)",
    icddbcomp="SYS.DBMS_DBCOMP.ICD_DBCOMP(C)",
    icddbv2="SYS.DBMS_DBVERIFY.ICD_DBV2(C)",
    icddefine="SYS.DBMS_SQL.ICD_DEFINE(C)",
    icddefinearray="SYS.DBMS_SQL.ICD_DEFINE_ARRAY(C)",
    icddefinec="SYS.DBMS_SQL.ICD_DEFINE_C(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_C(C)",
    icddefinedt="SYS.DBMS_SQL.ICD_DEFINE_DT(C)",
    icddefinei="SYS.DBMS_SQL.ICD_DEFINE_I(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_I(C)",
    icddefineint="SYS.DBMS_SQL.ICD_DEFINE_INT(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_INT(C)",
    icddefinel="SYS.DBMS_SQL.ICD_DEFINE_L(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_L(C)",
    icddefinem="SYS.DBMS_SQL.ICD_DEFINE_M(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_M(C)",
    icddefiner="SYS.DBMS_SQL.ICD_DEFINE_R(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_R(C)",
    icddefineu="SYS.DBMS_SQL.ICD_DEFINE_U(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_U(C)",
    icddescribecolumn="SYS.DBMS_SQL.ICD_DESCRIBE_COLUMN(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_COLUMN(C)",
    icddescribeinitial="SYS.DBMS_SQL.ICD_DESCRIBE_INITIAL(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_INITIAL(C)",
    icddump="SYS.DBMS_SQL.ICD_DUMP(C)/SYS.DBMS_SYS_SQL.ICD_DUMP(C)",
    icdexecute="SYS.DBMS_SQL.ICD_EXECUTE(C)/SYS.DBMS_SYS_SQL.ICD_EXECUTE(C)",
    icdexpandsqltext="SYS.DBMS_SQL2.ICD_EXPAND_SQL_TEXT(C)",
    icdfetch="SYS.DBMS_SQL.ICD_FETCH(C)/SYS.DBMS_SYS_SQL.ICD_FETCH(C)",
    icdgetc="SYS.DBMS_SQL.ICD_GET_C(C)",
    icdgetcc="SYS.DBMS_SQL.ICD_GET_C_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_C(C)",
    icdgetcdt="SYS.DBMS_SQL.ICD_GET_C_DT(C)",
    icdgetci="SYS.DBMS_SQL.ICD_GET_C_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_I(C)",
    icdgetcint="SYS.DBMS_SQL.ICD_GET_C_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_INT(C)",
    icdgetcl="SYS.DBMS_SQL.ICD_GET_C_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_L(C)",
    icdgetcm="SYS.DBMS_SQL.ICD_GET_C_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_M(C)",
    icdgetcputime="SYS.DBMS_UTILITY.ICD_GET_CPU_TIME(C)",
    icdgetcr="SYS.DBMS_SQL.ICD_GET_C_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_R(C)",
    icdgetcu="SYS.DBMS_SQL.ICD_GET_C_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_U(C)",
    icdgete="SYS.DBMS_SQL.ICD_GET_E(C)/SYS.DBMS_SYS_SQL.ICD_GET_E(C)",
    icdgetl="SYS.DBMS_SQL.ICD_GET_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_L(C)",
    icdgetnextresult="SYS.DBMS_SQL.ICD_GET_NEXT_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_GET_NEXT_RESULT(C)",
    icdgetrpicursor="SYS.DBMS_SQL.ICD_GET_RPI_CURSOR(C)/SYS.DBMS_SYS_SQL.ICD_GET_RPI_CURSOR(C)",
    icdgetsqlhash="SYS.DBMS_UTILITY.ICD_GETSQLHASH(C)",
    icdgettime="SYS.DBMS_UTILITY.ICD_GET_TIME(C)",
    icdgetv="SYS.DBMS_SQL.ICD_GET_V(C)",
    icdgetvc="SYS.DBMS_SQL.ICD_GET_V_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_C(C)",
    icdgetvdt="SYS.DBMS_SQL.ICD_GET_V_DT(C)",
    icdgetvi="SYS.DBMS_SQL.ICD_GET_V_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_I(C)",
    icdgetvint="SYS.DBMS_SQL.ICD_GET_V_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_INT(C)",
    icdgetvm="SYS.DBMS_SQL.ICD_GET_V_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_M(C)",
    icdgetvr="SYS.DBMS_SQL.ICD_GET_V_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_R(C)",
    icdgetvu="SYS.DBMS_SQL.ICD_GET_V_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_U(C)",
    icdhash="SYS.DBMS_UTILITY.ICD_HASH(C)",
    icdinitcurtab="SYS.DBMS_SQL.ICD_INIT_CUR_TA(C)/SYS.DBMS_SYS_SQL.ICD_INIT_CUR_TA(C)",
    icdisopen="SYS.DBMS_SQL.ICD_IS_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_IS_OPEN(C)",
    icdlct="SYS.DBMS_SQL.ICD_LCT(C)/SYS.DBMS_SYS_SQL.ICD_LCT(C)",
    icdlep="SYS.DBMS_SQL.ICD_LEP(C)/SYS.DBMS_SYS_SQL.ICD_LEP(C)",
    icdlrc="SYS.DBMS_SQL.ICD_LRC(C)/SYS.DBMS_SYS_SQL.ICD_LRC(C)",
    icdlri="SYS.DBMS_SQL.ICD_LRI(C)/SYS.DBMS_SYS_SQL.ICD_LRI(C)",
    icdnameres="SYS.DBMS_UTILITY.ICD_NAME_RES(C)",
    icdnametokenize="SYS.DBMS_UTILITY.ICD_NAME_TOKENIZE(C)",
    icdopen="SYS.DBMS_SQL.ICD_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_OPEN(C)",
    icdparse="SYS.DBMS_SQL.ICD_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE(C)",
    icdparsearrayinit="SYS.DBMS_SQL.ICD_PARSE_ARRAY_INIT(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_INIT(C)",
    icdparsearrayparse="SYS.DBMS_SQL.ICD_PARSE_ARRAY_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_PARSE(C)",
    icdparsearraysend="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND(C)",
    icdparsearraysendlf="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)",
    icdparseclb="SYS.DBMS_SQL.ICD_PARSECLB(C)/SYS.DBMS_SYS_SQL.ICD_PARSECLB(C)",
    icdreadaction="SYS.DBMS_APPLICATION_INFO.ICD_READ_ACTION(C)",
    icdreadinfo="SYS.DBMS_APPLICATION_INFO.ICD_READ_INFO(C)",
    icdreadmodule="SYS.DBMS_APPLICATION_INFO.ICD_READ_MODULE(C)",
    icdreturnresult="SYS.DBMS_SQL.ICD_RETURN_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_RETURN_RESULT(C)",
    icdsetaction="SYS.DBMS_APPLICATION_INFO.ICD_SET_ACTION(C)",
    icdsetclientinfo="SYS.DBMS_APPLICATION_INFO.ICD_SET_CLIENT_INFO(C)",
    icdsetmodule="SYS.DBMS_APPLICATION_INFO.ICD_SET_MODULE(C)",
    icdsetsessionlongops="SYS.DBMS_APPLICATION_INFO.ICD_SET_SESSION_LONGOPS(C)",
    icdtocursornumber="SYS.DBMS_SQL.ICD_TO_CURSOR_NUMBER(C)/SYS.DBMS_SYS_SQL.ICD_TO_CURSOR_NUMBER(C)",
    icdtorefcursor="SYS.DBMS_SQL.ICD_TO_REFCURSOR(C)/SYS.DBMS_SYS_SQL.ICD_TO_REFCURSOR(C)",
    inplace_evol_schema="XDB.DBMS_XMLSCHEMA_INT.INPLACEEVOLVE(XMLSCHEMA_LIB)",
    inplaceevolschema="XDB.DBMS_XMLSCHEMA_INT.INPLACEEVOLVE(XMLSCHEMA_LIB)",
    ins="insert",
    inscovexe="insert ??",
    insdlexe="insert direct load execute",
    insdrv="insert ??",
    insert="CTXSYS.DRVDDL.ContextOldInsert(dr$lib)/CTXSYS.RULEINDEXMETHODS.TRUSTED_INSERT(DR$LIB)/CTXSYS.XPATHINDEXMETHODS.TRUSTED_INSERT(DR$LIB)",
    insert_xdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_ins(xdb.PATH_VIEW_LIB)",
    insert_xdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_INS(XDB.RESOURCE_VIEW_LIB)",
    inserting="SYS.DBMS_STANDARD.inserting(C)",
    insertxdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_ins(xdb.PATH_VIEW_LIB)",
    insertxdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_INS(XDB.RESOURCE_VIEW_LIB)",
    insertXMLBefore="SYS.XMLTYPE.INSERTXMLBEFORE(XMLTYPE_LIB)",
    insexe="insert execute",
    insidx="insert Insert indexed keys into the indexes after each row is inserted into the table",
    insini="insert initialisation",
    insrow="insert Fetch a row for insertion. This is called back by multirow insert",
    invalidate_acl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_ACL(C)",
    invalidate_wallet_acl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_WALLET_ACL(C)",
    invalidateacl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_ACL(C)",
    invalidatewalletacl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_WALLET_ACL(C)",
    ipc="inter process calls",
    ipclw="inter process calls lightweight (exafusion)",
    ipcor="inter process calls on wire",
    ipp="internal probe processor capabilities(?)",
    is_parallel="SYS.DBMS_UTILITY.IS_PARALLEL(C)",
    isArray="SYS.JDOM_T.is_Array(DBMS_JDOM_LIB)",
    isBoolean="SYS.JDOM_T.is_Boolean(DBMS_JDOM_LIB)",
    iscs_is_oracle_cloud="is this oracle cloud?",
    isDate="SYS.JDOM_T.is_Date(DBMS_JDOM_LIB)",
    isFalse="SYS.JDOM_T.is_False(DBMS_JDOM_LIB)",
    isFragment="SYS.XMLTYPE.ISFRAGMENT(XMLTYPE_LIB)",
    isNull="SYS.JDOM_T.is_Null(DBMS_JDOM_LIB)",
    isNumber="SYS.JDOM_T.is_Number(DBMS_JDOM_LIB)",
    isObject="SYS.JDOM_T.is_Object(DBMS_JDOM_LIB)",
    isparallel="SYS.DBMS_UTILITY.IS_PARALLEL(C)",
    isScalar="SYS.JDOM_T.is_Scalar(DBMS_JDOM_LIB)",
    isSchemaBased="SYS.XMLTYPE.ISSCHEMABASED(XMLTYPE_LIB)",
    isSchemaValid="SYS.XMLTYPE.ISSCHEMAVALID(XMLTYPE_LIB)",
    isSchemaValidated="SYS.XMLTYPE.ISSCHEMAVALIDATED(XMLTYPE_LIB)",
    isString="SYS.JDOM_T.is_String(DBMS_JDOM_LIB)",
    isTrue="SYS.JDOM_T.is_True(DBMS_JDOM_LIB)",
    isTStamp="SYS.JDOM_T.is_Timestamp(DBMS_JDOM_LIB)",
    item="XDB.DBMS_XMLDOM_ICD.ITEM(C)",
    jaro_winkler="SYS.UTL_MATCH.jaro_winkler(c)",
    jaro_winkler_similarity="SYS.UTL_MATCH.jaro_winkler_similarity(c)",
    jarowinkler="SYS.UTL_MATCH.jaro_winkler(c)",
    jarowinklersimilarity="SYS.UTL_MATCH.jaro_winkler_similarity(c)",
    joe="java runtime environment(?)",
    jom="java",
    jon="java",
    jox="java jit compiler",
    joxas="java jit compiler dbms_xa",
    joxas_commit="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_COMMIT XA_COMMIT",
    joxas_end="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_END XA_END",
    joxas_forget="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_FORGET XA_FORGET",
    joxas_getlastoer="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_GETLASTOER XA_GETLASTOER",
    joxas_prepare="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_PREPARE XA_PREPARE",
    joxas_rollback="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_ROLLBACK XA_ROLLBACK",
    joxas_settimeout="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_SETTMO XA_SETTIMEOUT",
    joxas_start="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_START XA_START",
    joxas_xa_commit="SYS.DBMS_XA.INTERNAL_JOXAS_COMMIT(DBMS_XA_LIB)",
    joxas_xa_end="SYS.DBMS_XA.INTERNAL_JOXAS_END(DBMS_XA_LIB)",
    joxas_xa_forget="SYS.DBMS_XA.INTERNAL_JOXAS_FORGET(DBMS_XA_LIB)",
    joxas_xa_getlastoer="SYS.DBMS_XA.INTERNAL_JOXAS_GETLASTOER(DBMS_XA_LIB)",
    joxas_xa_prepare="SYS.DBMS_XA.INTERNAL_JOXAS_PREPARE(DBMS_XA_LIB)",
    joxas_xa_rollback="SYS.DBMS_XA.INTERNAL_JOXAS_ROLLBACK(DBMS_XA_LIB)",
    joxas_xa_settimeout="SYS.DBMS_XA.INTERNAL_JOXAS_SETTMO(DBMS_XA_LIB)",
    joxas_xa_start="SYS.DBMS_XA.INTERNAL_JOXAS_START(DBMS_XA_LIB)",
    joxasxacommit="SYS.DBMS_XA.INTERNAL_JOXAS_COMMIT(DBMS_XA_LIB)",
    joxasxaend="SYS.DBMS_XA.INTERNAL_JOXAS_END(DBMS_XA_LIB)",
    joxasxaforget="SYS.DBMS_XA.INTERNAL_JOXAS_FORGET(DBMS_XA_LIB)",
    joxasxagetlastoer="SYS.DBMS_XA.INTERNAL_JOXAS_GETLASTOER(DBMS_XA_LIB)",
    joxasxaprepare="SYS.DBMS_XA.INTERNAL_JOXAS_PREPARE(DBMS_XA_LIB)",
    joxasxarollback="SYS.DBMS_XA.INTERNAL_JOXAS_ROLLBACK(DBMS_XA_LIB)",
    joxasxasettimeout="SYS.DBMS_XA.INTERNAL_JOXAS_SETTMO(DBMS_XA_LIB)",
    joxasxastart="SYS.DBMS_XA.INTERNAL_JOXAS_START(DBMS_XA_LIB)",
    joxcsys="java jit compiler create or replace java system",
    js="job scheduing",
    jsaAddAgentCert="job scheduing DBMS_ISCHED.ADD_AGENT_CERT",
    jsaAddEvtQSub="job scheduing DBMS_ISCHED.ADD_EVENT_QUEUE_SUBSCRIBER",
    jsaAddGroupMember="job scheduing DBMS_ISCHED.ADD_GROUP_MEMBER",
    jsaAddMemberWgr="job scheduing DBMS_ISCHED.ADD_WINDOW_GROUP_MEMBER",
    jsaAlterChn="job scheduing DBMS_ISCHED.ALTER_CHAIN",
    jsaAlterStepChn="job scheduing DBMS_ISCHED.ALTER_CHAIN_STEP",
    jsaAssArgJob="job scheduing DBMS_ISCHED.SET_JOB_ARGUMENT_VALUE",
    jsaAuditSysPriv="job scheduing DBMS_ISCHED.AUDIT_SYS_PRIV",
    jsaCheckObjectPrivs="job scheduing DBMS_ISCHED_UTL.CHECK_OBJECT_PRIVS",
    jsaCheckPurge="job scheduing DBMS_ISCHED.CHECK_PURGE",
    jsaCloseWin="job scheduing DBMS_ISCHED.CLOSE_WINDOW",
    jsaCompleteJobRun="job scheduing DBMS_ISCHED.COMPLETE_JOB_RUN",
    jsaCopyJob="job scheduing DBMS_ISCHED.COPY_JOB",
    jsaCreateAgentDestination="job scheduing DBMS_ISCHED.CREATE_AGENT_DESTINATION",
    jsaCreateCls="job scheduing DBMS_ISCHED.CREATE_JOB_CLASS",
    jsaCreateDatabaseDestination="job scheduing DBMS_ISCHED.CREATE_DATABASE_DESTINATION",
    jsaCreateFileWatch="job scheduing DBMS_ISCHED.CREATE_FILE_WATCH",
    jsaCreateGroup="job scheduing DBMS_ISCHED.CREATE_GROUP",
    jsaCreateJob="job scheduing DBMS_ISCHED.CREATE_JOB",
    jsaCreateJobStep="job scheduing DBMS_ISCHED.CREATE_JOB DBMS_ISCHED.CREATE_CHAIN_STEP",
    jsaCreatePrg="job scheduing DBMS_ISCHED.CREATE_PROGRAM",
    jsaCreateResource="job scheduing DBMS_ISCHED.CREATE_RESOURCE",
    jsaCreateSch="job scheduing DBMS_ISCHED.CREATE_SCHEDULE",
    jsaCreateWalletDir="job scheduing DBMS_ISCHED.CREATE_WALLET_DIR_CALLOUT",
    jsaCreateWin="job scheduing DBMS_ISCHED.CREATE_WINDOW",
    jsaDisable="job scheduing DBMS_ISCHED.DISABLE",
    jsaDropAgentDestination="job scheduing DBMS_ISCHED.DROP_AGENT_DESTINATION",
    jsaDropArgJob="job scheduing DBMS_ISCHED.RESET_JOB_ARGUMENT_VALUE",
    jsaDropArgPrg="job scheduing DBMS_ISCHED.DROP_PROGRAM_ARGUMENT",
    jsaDropCls="job scheduing DBMS_ISCHED.DROP_JOB_CLASS",
    jsaDropDatabaseDestination="job scheduing DBMS_ISCHED.DROP_DATABASE_DESTINATION",
    jsaDropFileWatch="job scheduing DBMS_ISCHED.DROP_FILE_WATCHER",
    jsaDropGlobalAttrib="job scheduing DBMS_ISCHED.DROP_SCHEDULER_ATTRIBUTE",
    jsaDropGroup="job scheduing DBMS_ISCHED.DROP_GROUP",
    jsaDropJob="job scheduing DBMS_ISCHED.DROP_JOB",
    jsaDropPrg="job scheduing DBMS_ISCHED.DROP_PROGRAM",
    jsaDropResource="job scheduing DBMS_ISCHED.DROP_RESOURCE",
    jsaDropSch="job scheduing DBMS_ISCHED.DROP_SCHEDULE",
    jsaDropWgr="job scheduing DBMS_ISCHED.DROP_WINDOW_GROUP",
    jsaDropWin="job scheduing DBMS_ISCHED.DROP_WINDOW",
    jsaEnable="job scheduing DBMS_ISCHED.ENABLE",
    jsaEnqEndChainJob="job scheduing DBMS_ISCHED.ENQ_END_CHAIN_JOB",
    jsaFileTransfer="job scheduing DBMS_ISCHED.FILE_TRANSFER",
    jsaGenAgentPassSalt="job scheduing DBMS_ISCHED.GEN_AGENT_PASS_SALT",
    jsaGetAgentPassVer="job scheduing DBMS_ISCHED.GET_AGENT_PASS_VERIFIER",
    jsaGetBoolAttrib="job scheduing DBMS_ISCHED.GET_BOOL_ATTRIBUTE",
    jsaGetCharAttrib="job scheduing DBMS_ISCHED.GET_CHAR_ATTRIBUTE",
    jsaGetCredPass="job scheduing DBMS_ISCHED.GET_CREDENTIAL_PASSWORD",
    jsaGetDateAttrib="job scheduing DBMS_ISCHED.GET_DATE_ATTRIBUTE",
    jsaGetGlobalAttrib="job scheduing DBMS_ISCHED.GET_SCHEDULER_ATTRIBUTE",
    jsaGetIntAttrib="job scheduing DBMS_ISCHED.GET_INT_ATTRIBUTE",
    jsaGetInterAttrib="job scheduing DBMS_ISCHED.GET_INTERVAL_ATTRIBUTE",
    jsaGetTns="job scheduing DBMS_ISCHED.GET_TNS_NVPAIR",
    jsaNotifyServiceMetricsUpdate="job scheduing DBMS_ISCHED.NTFY_SVC_METRICS_UPDT",
    jsaObfCredPass="job scheduing DBMS_ISCHED.OBFUSCATE_CREDENTIAL_PASSWORD",
    jsaOpenWin="job scheduing DBMS_ISCHED.OPEN_WINDOW",
    jsaRaiseError="job scheduing DBMS_ISCHED.RAISE_ORACLE_ERROR",
    jsaRegArgPrg="job scheduing DBMS_ISCHED.DEFINE_PROGRAM_ARGUMENT",
    jsaRegisterCallback="job scheduing DBMS_ISCHED.REGISTER_CALLBACK",
    jsaRemEvtQSub="job scheduing DBMS_ISCHED.REMOVE_EVENT_QUEUE_SUBSCRIBER",
    jsaRemoveGroupMember="job scheduing DBMS_ISCHED.REMOVE_GROUP_MEMBER",
    jsaRemoveMemberWgr="job scheduing DBMS_ISCHED.REMOVE_WINDOW_GROUP_MEMBER",
    jsaRunJob="job scheduing DBMS_ISCHED.RUN_JOB",
    jsaSetAgentPass="job scheduing DBMS_ISCHED.SET_AGENT_REGISTRATION",
    jsaSetBoolAttrib="job scheduing DBMS_ISCHED.SET_BOOL_ATTRIBUTE",
    jsaSetCharAttrib="job scheduing DBMS_ISCHED.SET_CHAR_ATTRIBUTE",
    jsaSetDateAttrib="job scheduing DBMS_ISCHED.SET_DATE_ATTRIBUTE",
    jsaSetGlobalAttrib="job scheduing DBMS_ISCHED.SET_SCHEDULER_ATTRIBUTE",
    jsaSetIntAttrib="job scheduing DBMS_ISCHED.SET_INT_ATTRIBUTE",
    jsaSetInterAttrib="job scheduing DBMS_ISCHED.SET_INTERVAL_ATTRIBUTE",
    jsaSetListAttrib="job scheduing DBMS_ISCHED.SET_LIST_ATTRIBUTE",
    jsaSetResourceConstraint="job scheduing DBMS_ISCHED.SET_RESOURCE_CONSTRAINT",
    jsaStopJob="job scheduing DBMS_ISCHED.STOP_JOB",
    jsaTime="job scheduing DBMS_ISCHED.STIME",
    jsaTranslateJssuErrorCode="job scheduing DBMS_IJOB.TRANSLATE_JSSU_ERROR_CODE",
    jsaValidateLocalCred="job scheduing DBMS_ISCHED.CHECK_LOCAL_CREDENTIAL",
    jsbaBatchJobOps="job scheduing DBMS_ISCHED.BATCH_JOB_OPS",
    jsbaCreateJobs="job scheduing DBMS_ISCHED.CREATE_JOBS",
    jsbaSetJobAttribs="job scheduing DBMS_ISCHED.SET_JOB_ATTRIBUTES",
    jsbaShowErrors="job scheduing DBMS_ISCHED.SHOW_ERRORS",
    jskeCheckAQCbkPrivs="job scheduing DBMS_ISCHED.CHECK_AQ_CBK_PRIVS",
    jskeCheckReqPrivs="job scheduing DBMS_ISCHED.CHECK_REQUEST_PRIVS",
    jskeEventCondFilter="job scheduing DBMS_ISCHED.EVENT_COND_FILTER",
    jskeFileWatchFilter="job scheduing DBMS_ISCHED.FILE_WATCH_FILTER",
    jskeGetLastFWRun="job scheduing DBMS_ISCHED.GET_LAST_RUN_TIME",
    jskeGetSchLimMsgid="job scheduing DBMS_ISCHED.RAISE_SCHLIM_EVT",
    jskeRecResendReq="job scheduing DBMS_ISCHED.RECORD_RESENT_REQUEST",
    jskeSetEvtMsgArg="job scheduing DBMS_ISCHED.SET_EVTMSG_ARG",
    jskeSetLastFWRun="job scheduing DBMS_ISCHED.SET_LAST_RUN_TIME",
    JsonDgAggWrap="SYS.JSONHDGIMP.ODCIAggregateInitialize(json_lib)/SYS.JSONDGIMP.ODCIAggregateInitialize(json_lib)/SYS.SYSDGAGGIMP.ODCIAggregateInitialize(json_lib)/SYS.SYSHIERDGAGGIMP.ODCIAggregateInitialize(json_lib)",
    jsxsExecPrePostApply="job scheduing DBMS_ISCHED.EXEC_JOB_RUN_LSA",
    jsxsGetSysTimeZoneName="job scheduing DBMS_ISCHED.GET_SYS_TIME_ZONE_NAME",
    jzn="json",
    k="kernel",
    k2="kernel distributed execution",
    k2c="kernel distributed execution kernel to kernel",
    k2d="kernel distributed execution global unique database id",
    k2g="kernel distributed execution global transction id",
    k2gcrt="kernel distributed execution global transction id create a distributed transaction",
    k2gihash="kernel distributed execution global transction id calculate a hash value from a global transaction id",
    k2glpr="kernel distributed execution global transction id print local tran id",
    k2gt="kernel distributed execution global transction id commit global transaction",
    k2i="kernel distributed execution indoubt table interface",
    k2l="kernel distributed execution log records and log interface",
    k2labo="kernel distributed execution log records and log interface abort session: first abort aborts tx",
    k2lcom="kernel distributed execution log records and log interface commit session, first commit commits tx",
    k2lpre="kernel distributed execution log records and log interface prepare: enter prepared state for session, if last session, prepare tx",
    k2r="kernel distributed execution multiple RPC",
    k2rbeg="kernel distributed execution multiple RPC RPC for begin transaction",
    k2s="kernel distributed execution server",
    k2send="kernel distributed execution server server end transaction - 2PC state machine",
    k2serv="kernel distributed execution server service a transaction manager RPC",
    k2sfor="kernel distributed execution server forget current session of current transaction",
    k2udio="kernel distributed execution message unmarshalling",
    k2v="kernel distributed execution recovery",
    ka="kernel access",
    kad="kernel access objects anydata/images",
    kaf="kernel access fetch",
    kapiDDLExecute="SYS.DBMS_AUTO_INDEX_INTERNAL.DDL_EXECUTE_CALLOUT(DBMS_AUTO_INDEX_LIB)",
    kapiEnabled="SYS.DBMS_AUTO_INDEX_INTERNAL.AUTO_INDEX_ENABLED_CALLOUT(DBMS_AUTO_INDEX_LIB)",
    kapiSimulateTaskTimeout="SYS.DBMS_AUTO_INDEX_INTERNAL.SIMULATE_TASK_TIMEOUT(DBMS_AUTO_INDEX_LIB)",
    kapsEnabled="SYS.DBMS_STATS_INTERNAL.AUTO_STATS_ENABLED_CALLOUT(DBMS_STATS_LIB)",
    kapspmEnabled="SYS.DBMS_SPM_INTERNAL.AUTO_SPM_ENABLED_CALLOUT(DBMS_SPM_LIB)",
    kau="kernel access perform inserts, updates, deletes modifying indexes on tables",
    kaudel="kernel access perform inserts, updates, deletes modifying indexes on tables delete row from table and modify indexes (?)",
    kauupd="kernel access perform inserts, updates, deletes modifying indexes on tables update table and modify indexes",
    kauxsin="kernel access perform inserts, updates, deletes modifying indexes on tables insert a key into x index segment(s) only",
    kb="kernel backup",
    kbc="kernel backup backup appliance containers",
    kbrs="kernel backup backup appliance",
    kc="kernel cache",
    kcb="kernel cache buffers",
    kcb_sync_last_change="kernel cache buffers call kcrf_commit_force to sync redo",
    kcbapl="kernel cache buffers apply (changes to buffer; kcoapl executes changes)",
    kcbb="kernel cache buffers databasewriter",
    kcbbacq="kernel cache buffers databasewriter active checkpoint queue",
    kcbbdrv="kernel cache buffers databasewriter central write driver",
    kcbblwr="kernel cache buffers databasewriter create redo records for list of blocks written (media recovery marker)",
    kcbbwlru="kernel cache buffers databasewriter write buffers from one of the LRU write lists",
    kcbbxsv="kernel cache buffers databasewriter take single buffer and check if we have to return to LRU",
    kcbcbo="kernel cache buffers call begin object checkpoint (?)",
    kcbchg="kernel cache buffers change a block",
    kcbchg1="kernel cache buffers change a block change a block",
    kcbchk="kernel cache buffers ??",
    kcbchk_ctx="kernel cache buffers check context, execute check functions",
    kcbdbh="kernel cache buffers dump one buffer",
    kcbdnb="kernel cache buffers dump n buffers",
    kcbema="kernel cache buffers exam and maybe apply",
    kcbgcur="kernel cache buffers get current read",
    kcbget="kernel cache buffers get buffer (retry scan performed earlier by kcbgtcr)",
    kcbgtcr="kernel cache buffers get consistent read",
    kcbh="kernel cache buffers header",
    kcbhfix_tail="kernel cache buffers header update tail (low-order two bytes of the scn+block type+block sequence number)",
    kcbhlchk="kernel cache buffers header logical check",
    kcbhsbs_ub8="kernel cache buffers header write SCN base and wrap in buffer header",
    kcbhxor="kernel cache buffers header xor buffer contents",
    kcbhxoro="kernel cache buffers header xor buffer contents operation",
    kcbi_="kernel cache buffers shared IO pool",
    kcbi_get_rsv_bh="kernel cache buffers shared IO pool get reserved buffer header",
    kcbi_issue_io="kernel cache buffers shared IO pool issue IO",
    kcbi_issue_write="kernel cache buffers shared IO pool issue write",
    kcbibr="kernel cache buffers invalidate range of blocks",
    kcbifc="kernel cache buffers full database caching mode (?)",
    kcbipnns="kernel cache buffers is (buffer) pinned (no statistics)",
    kcbism="kernel cache buffers is medium (selection of read strategy)",
    kcbispnd="kernel cache buffers is (buffer) pinned (is buffer pinned stat is incremented)",
    kcbivlo="kernel cache buffers is very large object (selection of read strategy)",
    kcbk="kernel cache buffers checkpoint queue manipulation",
    kcbk_prefetch_track="kernel cache buffers checkpoint queue manipulation db_block_prefetch administration",
    kcbklbc="kernel cache buffers checkpoint queue manipulation link buffer into ckpt queue",
    kcbkllrba="kernel cache buffers checkpoint queue manipulation find lowest low RBA on checkpoint queues",
    kcbl="kernel cache buffers (loader) direct io routines",
    kcblci="kernel cache buffers (loader) direct io routines check input",
    kcblgt="kernel cache buffers (loader) direct io routines get buffer",
    kcblibr="kernel cache buffers (loader) direct io routines locally invalidate block range or object",
    kcblin="kernel cache buffers (loader) direct io routines operations for redo-less write interface",
    kcblio="kernel cache buffers direct io routines ??",
    kcblnb="kernel cache buffers (loader) direct io routines load new buffer",
    kcblnb_dscn="kernel cache buffers (loader) direct io routines load new buffer load new buffer",
    kcblrd="kernel cache buffers (loader) direct io routines initiate read ahead",
    kcblrl="kernel cache buffers (loader) direct io routines load release buffer",
    kcblrr="kernel cache buffers direct io routines ??",
    kcblrs="kernel cache buffers (loader) direct io routines read submit",
    kcblsy="kernel cache buffers (loader) direct io routines load sync IO",
    kcbnlc="kernel cache buffers analyze cleanout",
    kcbo="kernel cache buffers object queue",
    kcbo_ckpt_obj="kernel cache buffers object queue fast object checkpoint",
    kcbpioq="kernel cache buffers physical IO queueing (batched in planline)",
    kcbpioqAddIO="kernel cache buffers physical IO queueing (batched in planline) add IO to batched IO",
    kcbpioqcInit="kernel cache buffers physical IO queueing (batched in planline) initialize memory area in pga",
    kcbpioqInit="kernel cache buffers physical IO queueing (batched in planline) initialize memory area in shared pool",
    kcbpioqRegisterClient="kernel cache buffers physical IO queueing (batched in planline) create memory area in shared pool main function",
    kcbpioqWillWaitForIO="kernel cache buffers physical IO queueing (batched in planline) save IO for batching",
    kcbpsod="kernel cache buffers ??",
    kcbr_apply_pending="kernel cache buffers apply changed pending read completion",
    kcbr_media_apply="kernel cache buffers apply change vector for media recovery",
    kcbrbr="kernel cache buffers reuse block range: called by space management",
    kcbrbuf="kernel cache buffers get a recovery buffer",
    kcbrls="kernel cache buffers release pin",
    kcbs="kernel cache buffers simulator",
    kcbsacc="kernel cache buffers simulator access",
    kcbshlc="kernel cache buffers simulator ??",
    kcbsod="kernel cache buffers simulator ??",
    kcbtema="kernel cache buffers thread recovery examine and maybe apply",
    kcbtse="kernel cache buffers tablespace encryption",
    kcbtse_encdec_tbsblk="kernel cache buffers tablespace encryption block encrypt",
    kcbtse_get_tbskey="kernel cache buffers tablespace encryption get tablespace key, decrypt the key if needed",
    kcbtsn="kernel cache buffers get tablespace number",
    kcbv="kernel cache buffers vlm (very large memory)",
    kcbw="kernel cache buffers working set management",
    kcbz="kernel cache buffers subroutines for kcb",
    kcbz_encdec_tbsblk="kernel cache buffers subroutines for kcb tablespace block encrypt",
    kcbz_fp_cr="kernel cache buffers subroutines for kcb fast pin consistent read",
    kcbz_fp_shr="kernel cache buffers subroutines for kcb fast pin shared mode",
    kcbz_fr_buf="kernel cache buffers subroutines for kcb free buffer",
    kcbz_free_table_scan_read_buffer="kernel cache buffers subroutines for kcb free buffered multiblock read buffer",
    kcbz_table_scan_read="kernel cache buffers subroutines for kcb buffered multiblock read main loop",
    kcbzar="kernel cache buffers subroutines for kcb release buffer",
    kcbzcb="kernel cache buffers subroutines for kcb create/maybe clone buffer",
    kcbzdh="kernel cache buffers subroutines for kcb dump buffer routine",
    kcbzfb="kernel cache buffers subroutines for kcb format block",
    kcbzfs="kernel cache buffers subroutines for kcb free state object (buffer handle/kcbbf)",
    kcbzgb="kernel cache buffers subroutines for kcb get cr/read/rec (space for) buffer with dba/class; set buffer state to reading",
    kcbzgm="kernel cache buffers subroutines for kcb get (space for) multiblock buffer",
    kcbzgs="kernel cache buffers subroutines for kcb get state object (buffer handle/kcbbf)",
    kcbzgsf="kernel cache buffers subroutines for kcb get state object (buffer handle/kcbbf) fast",
    kcbzgws="kernel cache buffers subroutines for kcb get write list",
    kcbzib="kernel cache buffers subroutines for kcb input buffer (reads a block from disk into a buffer)",
    kcbzibmlt="kernel cache buffers subroutines for kcb input buffer (reads a block from disk into a buffer) for multiblock read",
    kcbzpb="kernel cache buffers subroutines for kcb prepare block for write. calls kcbhpwb to prepare block for write",
    kcbztek_trace_blk="kernel cache buffers subroutines for kcb tablespace encryption check(?)",
    kcbzvb="kernel cache buffers subroutines for kcb verify buffer",
    kcbzwb="kernel cache buffers subroutines for kcb wait buffer (buffer busy wait)",
    kcbzwc="kernel cache buffers subroutines for kcb wait (write) complete",
    kcbzwcw="kernel cache buffers subroutines for kcb wait (write) complete wait",
    kcc="kernel cache controlfile",
    kcc_tac_callback="kernel cache controlfile timed-out actions callback routine (could signal waiting too long)",
    kccbcf="kernel cache controlfile begin controlfile update",
    kccbcx="kernel cache controlfile begin control transaction",
    kccccf="kernel cache controlfile close control files",
    kccchb="kernel cache controlfile cache header block",
    kccchm="kernel cache controlfile cache header block",
    kcccmt="kernel cache controlfile commit changes",
    kccecx="kernel cache controlfile end controlfile transaction",
    kccexpd="kernel cache controlfile expand controlfile section for rectype",
    kccgft="kernel cache controlfile get for fixed table",
    kccida="kernel cache controlfile ??",
    kccidf="kernel cache controlfile identify all copies of the controlfile. sends a message to the dbwr",
    kcckfr="kernel cache controlfile deallocate controlfile cache using kernel memory free routine",
    kccocx="kernel cache controlfile open control transaction",
    kccpcp="kernel cache controlfile prepare(?) checkpoint progress records",
    kccrhd="kernel cache controlfile read header",
    kccwbp="kernel cache controlfile write block physically",
    kccxfe="kernel cache controlfile fixed table callback: database file entries",
    kcf="kernel cache file management",
    kcfaioe="kernel cache file management aio error. checks if aio is possible.",
    kcfbsy="kernel cache file management background synchronisation of SGA and controlfile",
    kcfcaf="kernel cache file management close all files",
    kcfccfl="kernel cache file management create control file logfile exam",
    kcfcdb="kernel cache file management create and mount the database",
    kcfcld="kernel cache file management close database",
    kcfcmb="kernel cache file management create/mount database subroutines",
    kcfcsy="kernel cache file management cross instance sync",
    kcfida="kernel cache file management identify file action",
    kcfis="kernel cache file management intelligent storage",
    kcfis_tablespace_is_on_sage="kernel cache file management intelligent storage test if tablespace is on exadata",
    kcfl="kernel cache file management loader",
    kcflci="kernel cache file management loader check status of IO",
    kcflwi="kernel cache file management loader wait for IO",
    kcfmdb="kernel cache file management mount database",
    kcfmrc="kernel cache file management get multiblock read count(?)",
    kcfopd="kernel cache file management open/close database code",
    kcfrbd="kernel cache file management read buffers from disk",
    kcfris="kernel cache file management release instance state queue",
    kcfrms="kernel cache file management DBMS_SYSTEM.KCFRMS_ICD KCFRMS",
    kcfrms_icd="SYS.DBMS_SYSTEM.KCFRMS_IC(C)",
    kcfrmsicd="SYS.DBMS_SYSTEM.KCFRMS_IC(C)",
    kcfwatwr="kernel cache file management wait for write IOs to finish (dbwr)",
    kcht="kernel cache hash table",
    kci="kernel cache oracle text",
    KciCtxAggWrap="SYS.CTXAGGIMP.ODCIAggregateInitialize(kci_ctxagg_lib)",
    kck="kernel cache compatibility",
    kcl="kernel cache lock manager/buffer cache",
    kcl_dissolve_affinity="SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_AFFINITY(C)",
    kcl_dissolve_readmostly="SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_READMOSTLY(C)",
    kcl_grab_affinity="SYS.DBMS_CACHEUTIL.KCL_GRAB_AFFINITY(C)",
    kcl_grab_readmostly="SYS.DBMS_CACHEUTIL.KCL_GRAB_READMOSTLY(C)",
    kcl_obj_downconvert="SYS.DBMS_CACHEUTIL.KCL_OBJ_DOWNCONVERT(C)",
    kclalc="kernel cache lock manager/buffer cache allocate and initialize lock context",
    kclbla="kernel cache lock manager/buffer cache release processing?",
    kclcfusion="kernel cache lock manager/buffer cache claim fusion lock",
    kclclaim="kernel cache lock manager/buffer cache claim a recovery lock",
    kclcls="kernel cache lock manager/buffer cache check lock status",
    kclcrrf="kernel cache lock manager ??",
    kclcsfusion="kernel cache lock manager/buffer cache start fusion recovery request",
    kclcvb="kernel cache lock manager/buffer cache convert lock background: send message(s) to background to convert lock",
    kcldissolveaffinity="SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_AFFINITY(C)",
    kcldissolvereadmostly="SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_READMOSTLY(C)",
    kcldmp="kernel cache lock manager ??",
    kclebs="kernel cache lock manager/buffer cache escalate buffer state. this routine attempts to make a shared current.",
    kclgclk="kernel cache lock manager/buffer cache global cache lock",
    kclgrabaffinity="SYS.DBMS_CACHEUTIL.KCL_GRAB_AFFINITY(C)",
    kclgrabreadmostly="SYS.DBMS_CACHEUTIL.KCL_GRAB_READMOSTLY(C)",
    kclobjdownconvert="SYS.DBMS_CACHEUTIL.KCL_OBJ_DOWNCONVERT(C)",
    kclpto="kernel cache lock manager/buffer cache background timeout action",
    kclrdone="kernel cache lock manager/buffer cache recovery is done so cleanup buffer",
    kclscrs="kernel cache lock manager/buffer cache setup consistent reads",
    kclwcrs="kernel cache lock manager/buffer cache wait for consistent reads",
    kclxle="kernel cache lock manager ??",
    kcm="kernel cache miscellaneous",
    kcm_DisableAutoRollover="SYS.DBMS_SCN.DISABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcm_EnableAutoRollover="SYS.DBMS_SCN.ENABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcm_GetCurrentSCNParams="SYS.DBMS_SCN.GETCURRENTSCNPARAMS(DBMS_SCN_LIB)",
    kcm_GetSCNAutoRolloverParams="SYS.DBMS_SCN.GETSCNAUTOROLLOVERPARAMS(DBMS_SCN_LIB)",
    kcm_GetSCNParamsByCompat="SYS.DBMS_SCN.GETSCNPARAMSBYCOMPAT(DBMS_SCN_LIB)",
    kcmadj="kernel cache miscellaneous adjust scn",
    kcmclscn="kernel cache miscellaneous check lamport scn",
    kcmcvc="kernel cache miscellaneous create virtual circuit",
    kcmDisableAutoRollover="SYS.DBMS_SCN.DISABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcmdsc="kernel cache miscellaneous dfs: set/get/inc lock value scn and mess with backup scn if needed",
    kcmEnableAutoRollover="SYS.DBMS_SCN.ENABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcmGetCurrentSCNParams="SYS.DBMS_SCN.GETCURRENTSCNPARAMS(DBMS_SCN_LIB)",
    kcmGetSCNAutoRolloverParams="SYS.DBMS_SCN.GETSCNAUTOROLLOVERPARAMS(DBMS_SCN_LIB)",
    kcmGetSCNParamsByCompat="SYS.DBMS_SCN.GETSCNPARAMSBYCOMPAT(DBMS_SCN_LIB)",
    kcmgtsf="kernel cache miscellaneous get timestamp full",
    kcmtdif="kernel cache miscellaneous time difference",
    kcn="kernel cache nologging(?)",
    kco="kernel cache operation",
    kco_blkchk="kernel cache operation main block check function",
    kcoadd="kernel cache operation add change vector to kcocv array",
    kcoadv_hdr="kernel cache operation advance SCN in buffer header",
    kcoapl="kernel cache operation apply (changes to buffer)",
    kcoapl_validate="kernel cache operation apply (changes to buffer) validate applied changes",
    kconew="kernel cache operation create (new) array (kcocv) of change vectors",
    kcopcv="kernel cache operation prepare change vector/redo entry generation and retrieval",
    kcosze="kernel cache operation calculate undo record size",
    kcoubk="kernel cache operation undo callback",
    kcp_check_tts_char_set_compat="SYS.DBMS_PLUGTS.KCP_CHECK_TTS_CHAR_SET_COMPAT(DBMS_PLUGTS_LIB)",
    kcp_getafndbid="SYS.DBMS_TTS.GET_AFN_DBID(DBMS_TTS_LIB)",
    kcp_getafndbidxendian="SYS.DBMS_TTS.GET_AFN_DBIDXENDIAN(DBMS_TTS_LIB)",
    kcp_reclaim_segment="SYS.DBMS_PLUGTS.KCP_PLG_RECLAIM_SEGMENT(DBMS_PLUGTS_LIB)",
    kcp_tse_get_protected_tse_key="SYS.DBMS_TTS.GET_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcp_tse_put_protected_tse_key="SYS.DBMS_TTS.PUT_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcpacomp="SYS.DBMS_PLUGTS.KCP_ACOMP(DBMS_PLUGTS_LIB)",
    kcpaldfts="SYS.DBMS_PLUGTS.KCP_ALDFTS(DBMS_PLUGTS_LIB)",
    kcpbexp="SYS.DBMS_PLUGTS.KCP_BEXP(DBMS_PLUGTS_LIB)",
    kcpcheckttscharsetcompat="SYS.DBMS_PLUGTS.KCP_CHECK_TTS_CHAR_SET_COMPAT(DBMS_PLUGTS_LIB)",
    kcpcheckxmlsch="kernel cache DBMS_EXTENDED_TTS_CHECKS.KCP_CHECKXMLSCHEMA",
    kcpchkchar="SYS.DBMS_PLUGTS.KCP_CHKCHAR(DBMS_PLUGTS_LIB)",
    kcpchkxPlatform="SYS.DBMS_PLUGTS.KCP_CHKXPLATFORM(DBMS_PLUGTS_LIB)",
    kcpcmt="SYS.DBMS_PLUGTS.KCP_CMT(DBMS_PLUGTS_LIB)",
    kcpcsxevent="SYS.DBMS_EXTENDED_TTS_CHECKS.KCP_CHECKCSXEVENT(DBMS_EXTENDED_TTS_CHECKS_LIB)",
    kcpcxmlsch="SYS.DBMS_EXTENDED_TTS_CHECKS.KCP_CHECKXMLSCHEMA(DBMS_EXTENDED_TTS_CHECKS_LIB)",
    kcpgetafndbid="SYS.DBMS_TTS.GET_AFN_DBID(DBMS_TTS_LIB)",
    kcpgetafndbidxendian="SYS.DBMS_TTS.GET_AFN_DBIDXENDIAN(DBMS_TTS_LIB)",
    kcpgetchar="SYS.DBMS_PLUGTS.KCP_GETCHAR(DBMS_PLUGTS_LIB)",
    kcpgetcomp="SYS.DBMS_PLUGTS.KCP_GETCOMP(DBMS_PLUGTS_LIB)",
    kcpgetfh="SYS.DBMS_PLUGTS.KCP_GETFH(DBMS_PLUGTS_LIB)",
    kcpinit="SYS.DBMS_PLUGTS.KCP_INIT(DBMS_PLUGTS_LIB)",
    kcpnewts="SYS.DBMS_PLUGTS.KCP_NEWTS(DBMS_PLUGTS_LIB)",
    kcppd="SYS.DBMS_PLUGTSP.KCP_PD(DBMS_PLUGTS_LIB)",
    kcpplgdf="SYS.DBMS_PLUGTS.KCP_PLGDF(DBMS_PLUGTS_LIB)",
    kcpplobp="SYS.DBMS_PLUGTSP.KCP_PLOBP(DBMS_PLUGTS_LIB)",
    kcpptmd="SYS.DBMS_PLUGTSP.KCP_PTMD(DBMS_PLUGTS_LIB)",
    kcprdfh="SYS.DBMS_PLUGTS.KCP_RDFH(DBMS_PLUGTS_LIB)",
    kcpreclaimsegment="SYS.DBMS_PLUGTS.KCP_PLG_RECLAIM_SEGMENT(DBMS_PLUGTS_LIB)",
    kcptsegetprotectedtsekey="SYS.DBMS_TTS.GET_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcptseputprotectedtsekey="SYS.DBMS_TTS.PUT_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcr="kernel cache recovery",
    kcra="kernel cache recovery redo application/access",
    kcramr="kernel cache recovery redo application/access apply media recovery",
    kcratr="kernel cache recovery redo application/access thread redo application",
    kcratr1="kernel cache recovery redo application/access thread redo application pass one: construct recovery set",
    kcratr2="kernel cache recovery redo application/access thread redo application pass two: apply change vectors",
    kcratr_claim="kernel cache recovery redo application/access thread redo application claim recovery buffers",
    kcrcrl="kernel cache recovery corrupt redo log",
    kcrf="kernel cache recovery file",
    kcrf_cnv_fh_after_read="kernel cache recovery file convert file header after read",
    kcrf_cnv_fh_before_write="kernel cache recovery file convert file header before write",
    kcrf_cnv_fh_layout="kernel cache recovery file convert file header layout",
    kcrf_commit_force="kernel cache recovery file commit changes and post lgwr or wait for lgwr",
    kcrf_commit_force_int="kernel cache recovery file commit changes and post lgwr or wait for lgwr (12c)",
    kcrf_get_logical_block_size="kernel cache recovery file get redo block size",
    kcrf_pvt_strand_bind="kernel cache recovery file try to bind private strand",
    kcrf_read_header="kernel cache recovery file read header",
    kcrf_strand_ftcb="kernel cache recovery file strand fetch callback (x$kcrfstrand helper function)",
    kcrf_sync_adaptive_set="kernel cache recovery file set adaptive log file sync mode",
    kcrf_val_log_bsz="kernel cache recovery file evaluate physical blocksize for logfile IO(?)",
    kcrfds="kernel cache recovery file do switch of current log",
    kcrfisd="kernel cache recovery file redo is on disk",
    kcrfnl="kernel cache recovery file next log",
    kcrfr="kernel cache recovery file read",
    kcrfrgv="kernel cache recovery file read get change vector header/data",
    kcrfsl="kernel cache recovery file switch log",
    kcrfvh="kernel cache recovery file verify header",
    kcrfw="kernel cache recovery file write/broadcast SCN",
    kcrfw_alfs="kernel cache recovery file write/broadcast SCN adaptive log file sync",
    kcrfw_alfs_cron_job="kernel cache recovery file write/broadcast SCN adaptive log file sync calculate alfs stats (ckpt)",
    kcrfw_alfs_save_redowrite_time="kernel cache recovery file write/broadcast SCN adaptive log file sync save redo write time (lgwr)",
    kcrfw_cal_target_rba="kernel cache recovery file write/broadcast SCN calculate target redo byte address",
    kcrfw_copy_cv="kernel cache recovery file write/broadcast SCN copy change vectors to public redo buffer",
    kcrfw_do_null_write="kernel cache recovery file write/broadcast SCN execute write cycle without write only increase on disk SCN",
    kcrfw_do_write="kernel cache recovery file write/broadcast SCN execute write cycle with write and increase on disk and real redo SCN",
    kcrfw_gather_lwn="kernel cache recovery file write/broadcast SCN gather strand info for LWN batch and put results in PIC",
    kcrfw_gather_strand="kernel cache recovery file write/broadcast SCN gather strand write info",
    kcrfw_have_non_idle_strand="kernel cache recovery file write/broadcast SCN gather strands needing writing from PIC",
    kcrfw_partial_checksum="kernel cache recovery file write/broadcast SCN write checksum into the redo strand",
    kcrfw_post="kernel cache recovery file write/broadcast SCN post processing after (null)write",
    kcrfw_redo_gen="kernel cache recovery file write/broadcast SCN main redo generation function",
    kcrfw_redo_gen_ext="kernel cache recovery file write/broadcast SCN main redo generation function (12c)",
    kcrfw_redo_write="kernel cache recovery file write/broadcast SCN redo",
    kcrfw_redo_write_driver="kernel cache recovery file write/broadcast SCN redo main redo handling function",
    kcrfw_redo_write_initpic="kernel cache recovery file write/broadcast SCN redo initialise pending IO context buffer (PIC)",
    kcrfw_slave_adaptive_cronjob="kernel cache recovery file write/broadcast SCN calculate lgwr slave stats (ckpt)",
    kcrfw_slave_group_main="kernel cache recovery file write/broadcast SCN main logwriter worker function",
    kcrfw_slave_group_postall="kernel cache recovery file write/broadcast SCN lgwr function to post lgwr workers",
    kcrfw_slave_queue_insert="kernel cache recovery file write/broadcast SCN main lgwr function to provide writes to lgwr workers",
    kcrfw_update_and_bcast_real_redo_scn="kernel cache recovery file write/broadcast SCN update real redo SCN and real write time in kcrfsg_",
    kcrfw_update_redo_blk_hdrs="kernel cache recovery file write/broadcast SCN obtain write info from PIC and write redo headers",
    kcrfw_wait_for_fg_copy="kernel cache recovery file write/broadcast SCN read redo copy latches accompanying shared pool structure to validate writes to redo are done",
    kcrfwh="kernel cache recovery file write/broadcast SCN write header",
    kcrfwi="kernel cache recovery file write/broadcast SCN write redo into the logfile",
    kcrfwl="kernel cache recovery file write/broadcast SCN sWitch logs",
    kcrfwnf="kernel cache recovery file write/broadcast SCN new file (?)",
    kcrfwr="kernel cache recovery file write/broadcast SCN write redo into the logbuffer",
    kcrfws="kernel cache recovery file write/broadcast SCN wait for space (logswitch)",
    kcrhvbo="kernel cache recovery header verify",
    kcrm="kernel cache recovery media recovery",
    kcroio="kernel cache recovery online logfile IO routines",
    kcropn="kernel cache recovery open online logfile for kcroio and kcrfoc",
    kcrp="kernel cache recovery recovery parallel",
    kcrpap="kernel cache recovery recovery parallel apply change vector",
    kcrpclaim="kernel cache recovery recovery parallel claim recovery buffers",
    kcrpdv="kernel cache recovery recovery parallel recovery parallel (driver?)",
    kcrpsend_claim="kernel cache recovery recovery parallel send recovery buffer claim message",
    kcrr="kernel cache recovery redo archival",
    kcrrlh="kernel cache recovery redo archival log history",
    kcrv="kernel cache recovery recovery",
    kcrvfh="kernel cache recovery recovery file headers",
    kcs="kernel cache scn management",
    kcsadj1="kernel cache scn management adjust SCN",
    kcsadj3="kernel cache scn management adjust SCN",
    kcsaj8="kernel cache scn management adjust SCN",
    kcscu8="kernel cache scn management read current SCN",
    kcscur3="kernel cache scn management read current SCN",
    kcscur_rba="kernel cache scn management read redo byte address from kcrfsg_",
    kcsdnfy="kernel cache scn management distributed notify",
    kcsgbsn="kernel cache scn management get batched SCN",
    kcsgbsn8="kernel cache scn management get batched SCN get batched SCN (12.2)",
    kcsgcsn="kernel cache scn management get current SCN",
    kcsgrsn="kernel cache scn management get recent SCN",
    kcsgssn="kernel cache scn management get snapshot SCN",
    kcsm="kernel cache scn management shared routines",
    kcsnew3="kernel cache scn management get new SCN",
    kcsnew8="kernel cache scn management get new SCN",
    kct="kernel cache threads",
    kctmttr="kernel cache threads mean time to recover (?)",
    kctmttrest="kernel cache threads mean time to recover (?) estimation",
    kctrcp="kernel cache threads record checkpoint progress",
    kctrec="kernel cache threads recovery threads, recover and close threads",
    kcttsc="kernel cache threads thread state change",
    kcv="kernel cache recovery",
    kcvcca="kernel cache recovery checkpoint check action",
    kcvcrv="kernel cache recovery thread recovery",
    kcvdbeb="kernel cache recovery ??",
    kcvdmr="kernel cache recovery do media recovery",
    kcvebk="kernel cache recovery ??",
    kcvirv="kernel cache recovery instance recovery",
    kcvrcrba="kernel cache recovery read current redo byte address",
    kcvsurs="kernel cache recovery set unrecoverable SCN",
    kcvucp="kernel cache recovery ??",
    kcvvra="kernel cache recovery verify reset allowed",
    kd="kernel data",
    kda="kernel data analyze/statistics",
    kdasts="kernel data analyze/statistics Statistics Scan driver",
    kdavls="kernel data analyze/statistics validate structure driver",
    kdb="kernel data block structures and manipulation",
    kdbl="kernel data block structures and manipulation direct path load",
    kdblai="kernel data block structures and manipulation direct path load database block loader array insertion",
    kdblailb="kernel data block structures and manipulation direct path load database block loader array insertion load block",
    kdblcRejectedDueToChaining="kernel data block structures and manipulation direct path load c? rejected due to chaining",
    kdbmrd="kernel data block structures and manipulation multi row slot delete",
    kdc="kernel data cluster",
    kdccak="kernel data cluster ??",
    kdcgcs="kernel data cluster ??",
    kdcgsp="kernel data cluster ??",
    kdd="kernel data delete/(cluster?)",
    kddchg="kernel data delete/(cluster?) perform delete/update change",
    kdddgb="kernel data delete/(cluster?) delete get block",
    kddlkr="kernel data delete/(cluster?) delete rows",
    kdeu="kernel data export unload",
    kdfi="kernel data memoptimize for write",
    kdfiInitSGAState="kernel data memoptimize for write create write buffer in large pool",
    kdfiWrite="kernel data memoptimize for write write into write buffer",
    kdfs="kernel data dbfs c api",
    kdg="kernel data gathering",
    kdglfp="kernel data gathering locator function perform",
    kdglfs="kernel data gathering locator function scan block",
    kdgpnb="kernel data gathering pin block",
    kdgprd="kernel data gathering Process Row Data",
    kdgstp="kernel data gathering STatistics Perform",
    kdgsts="kernel data gathering Gathering STatistics Scan",
    kdgvsp="kernel data gathering validate structure perform",
    kdgvss="kernel data gathering validate structure scan",
    kdi="kernel data index",
    kdib="kernel data index bitmap index generation definitions",
    kdibc="kernel data index bitmap index generation definitions bitmap index compression stream",
    kdibco="kernel data index bitmap index generation definitions bitmap index compression stream stream output",
    kdibFinish="kernel data index bitmap index generation definitions kxib finish index maintenance processing",
    kdibh="kernel data index bitmap index generation definitions hash table",
    kdibi="kernel data index bitmap index generation definitions inversion item-table",
    kdibl="kernel data index bitmap index generation definitions maintenance for dml and direct load",
    kdiblcfls="kernel data index bitmap index generation definitions maintenance for dml and direct load conventional flush batch with undo overhead",
    kdiblFinish1="kernel data index bitmap index generation definitions maintenance for dml and direct load callback processing for KXIB",
    kdiblLockRange="kernel data index bitmap index generation definitions maintenance for dml and direct load lock the range associated with a given dml target",
    kdiblsorget="kernel data index bitmap index generation definitions maintenance for dml and direct load extract key/rewoid from sorter",
    kdiblwrite="kernel data index bitmap index generation definitions maintenance for dml and direct load write a kdi entry",
    kdibq="kernel data index bitmap index generation definitions queue class",
    kdibr="kernel data index bitmap index generation definitions row source utility",
    kdic="kernel data index create",
    kdicclean="kernel data index create cleanup IND$ if online builder crashes",
    kdicdrv="kernel data index create driver routine",
    kdicrws="kernel data index create using row source",
    kdics="kernel data index create cluster table scan",
    kdif="kernel data index scan",
    kdifbk="kernel data index scan fetches the single index row matching the argument key",
    kdifind="kernel data index scan find the appropriate index block to store the key",
    kdifxs="kernel data index scan fetch next or previous row in the argument index scan",
    kdifxs1="kernel data index scan fetch next or previous row in the argument index scan fetch row from index block inner function",
    kdiins="kernel data index inserts the argument key and associated keydata",
    kdiins0="kernel data index inserts the argument key and associated keydata 0",
    kdiixs="kernel data index index range scan",
    kdiknf="kernel data index key not found - debug code for oer-8102",
    kdil="kernel data index load",
    kdilrub="kernel data index load ??",
    kdim="kernel data index coalesce",
    kdimod0="kernel data index coalesce modifies the argument key's row from the argument index according",
    kdis="kernel data index split",
    kdisle="kernel data index split split the argument leaf block and insert the argument key",
    kdisnew="kernel data index split allocate a new index block during a split",
    kdisnewle="kernel data index split allocate a new index block during a split leaf block",
    kdiss="kernel data index split skip scan",
    kdiulk="kernel data index undo leaf operation",
    kdiXuFinish="kernel data index finish processing of delaued index maintenance",
    kdizoltp="kernel data index OLTP HIGH Index",
    kdk="kernel data search key",
    kdkoin="kernel data search key ??",
    kdkv="kernel data search key in-memory OLTP keyvalue",
    kdl="kernel data lob",
    kdl_write="kernel data lob write into an ilob instance",
    kdla="kernel data lob SecureFile Archive",
    kdlgsp_init="kernel data lob space management batching",
    kdli="kernel data lob Inode",
    kdlprl="kernel data lob read a contiguous range of blocks starting at a fatblock",
    kdlrci="kernel data lob rci",
    kdlrdb="kernel data lob read a block at a time",
    kdlsfb="kernel data lob pull in up to size bytes of data from stream and start writing at offset",
    kdlw="kernel data lob kdlw",
    kdlx="kernel data lob xfm",
    kdlxdup="kernel data lob xfm dedup",
    kdlxgs_init="kernel data lob xfm reclaim space from transaction freelist in index",
    kdm="kernel data in-memory data layer",
    kdmado="kernel data in-memory data layer ADO",
    kdmd="kernel data in-memory data layer dictionary and cache",
    kdmemopt_drop_object="SYS.DBMS_MEMOPTIMIZE.DROP_OBJECT_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_get_apply_hwm_seqid="SYS.DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_get_write_hwm_seqid="SYS.DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_populate="SYS.DBMS_MEMOPTIMIZE.POPULATE_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_write_end="SYS.DBMS_MEMOPTIMIZE.WRITE_END(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_writes_flush="SYS.DBMS_MEMOPTIMIZE_ADMIN.WRITES_FLUSH(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptdropobject="SYS.DBMS_MEMOPTIMIZE.DROP_OBJECT_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptgetapplyhwmseqid="SYS.DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptgetwritehwmseqid="SYS.DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptpopulate="SYS.DBMS_MEMOPTIMIZE.POPULATE_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptwriteend="SYS.DBMS_MEMOPTIMIZE.WRITE_END(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptwritesflush="SYS.DBMS_MEMOPTIMIZE_ADMIN.WRITES_FLUSH(DBMS_MEMOPTIMIZE_LIB)",
    kdmgd="kernel data in-memory data layer GD",
    kdmime="kernel data in-memory data layer IME",
    kdml="kernel data in-memory data layer populating",
    kdmo="kernel data in-memory data layer optimizer",
    kdmp3gl1="SYS.DBMS_INMEMORY.REPOPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp3gl2="SYS.DBMS_INMEMORY.POPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp3gl3="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_ENABLE(DBMS_INMEMORY_LIB)",
    kdmp3gl4="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_DISABLE(DBMS_INMEMORY_LIB)",
    kdmp3gl5="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_MIGRATE_STORAGE(DBMS_INMEMORY_LIB)",
    kdmp3gl6="SYS.DBMS_INMEMORY_ADMIN.GET_FASTSTART_TABLESPACE(DBMS_INMEMORY_LIB)",
    kdmp3gl7="SYS.DBMS_INMEMORY.SEG_DEALLOC_VERS_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp3gl8="SYS.DBMS_INMEMORY_ADMIN.DEALLOCATE_VERSIONS(DBMS_INMEMORY_LIB)",
    kdmp3gl9="SYS.PRVT_COMPRESS.COMP_POPULATE(DBMS_INMEMORY_LIB)",
    kdmp3glfs1="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_CHECKPOINT(DBMS_INMEMORY_LIB)",
    kdmp3glime1="SYS.DBMS_INMEMORY_ADMIN.IME_CAPTURE_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp3glime2="SYS.DBMS_INMEMORY_ADMIN.IME_DROP_ALL_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp3glime3="SYS.DBMS_INMEMORY_ADMIN.IME_OPEN_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmp3glime4="SYS.DBMS_INMEMORY_ADMIN.IME_CLOSE_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmp_3gl_1="SYS.DBMS_INMEMORY.REPOPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp_3gl_2="SYS.DBMS_INMEMORY.POPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp_3gl_3="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_ENABLE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_4="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_DISABLE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_5="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_MIGRATE_STORAGE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_6="SYS.DBMS_INMEMORY_ADMIN.GET_FASTSTART_TABLESPACE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_7="SYS.DBMS_INMEMORY.SEG_DEALLOC_VERS_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp_3gl_8="SYS.DBMS_INMEMORY_ADMIN.DEALLOCATE_VERSIONS(DBMS_INMEMORY_LIB)",
    kdmp_3gl_9="SYS.PRVT_COMPRESS.COMP_POPULATE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_fs_1="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_CHECKPOINT(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_1="SYS.DBMS_INMEMORY_ADMIN.IME_CAPTURE_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_2="SYS.DBMS_INMEMORY_ADMIN.IME_DROP_ALL_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_3="SYS.DBMS_INMEMORY_ADMIN.IME_OPEN_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_4="SYS.DBMS_INMEMORY_ADMIN.IME_CLOSE_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmpdeallocateversions="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.DEALLOCATE_VERSIONS",
    kdmpdisablefaststart="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.FASTSTART_DISABLE",
    kdmpenablefaststart="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.FASTSTART_ENABLE",
    kdmpgetfaststarttbs="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.GET_FASTSTART_TABLESPACE",
    kdmpimecapexpr="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.IME_CAPTURE_EXPRESSIONS",
    kdmpimeclosewindow="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.IME_CLOSE_CAPTURE_WINDOW",
    kdmpimedropallexpr="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.IME_DROP_ALL_EXPRESSIONS",
    kdmpimeopenwindow="kernel data in-memory data layer DBMS_INMEMORY_ADMIN.IME_OPEN_CAPTURE_WINDOW",
    kdmppopulate="kernel data in-memory data layer DBMS_INMEMORY.POPULATE_INTERNAL",
    kdmprepopulate="kernel data in-memory data layer DBMS_INMEMORY.REPOPULATE_INTERNAL",
    kdmpsegmentdeallocateversions="kernel data in-memory data layer DBMS_INMEMORY.SEG_DEALLOC_VERS_INTERNAL",
    kdmr="kernel data in-memory data layer background",
    kdmrIMCLOAD="kernel data in-memory data layer background in memory chunk load/populate",
    kdmrIMCLOAD_cb="kernel data in-memory data layer background in memory chunk load/populate callback",
    kdn="kernel data sequence number",
    kdns="kernel data sequence number sequence enqueue",
    kdo="kernel data operations",
    kdoapl="kernel data operations apply",
    kdodrp="kernel data operations delete row piece",
    kdoirp="kernel data operations insert row piece",
    kdoiur="kernel data operations insert undo record",
    kdp="kernel data archive compression: pcode",
    kdq="kernel data query",
    kdrpCC="SYS.DBMS_REPAIR.CHECK_COMPAT(DBMS_REPAIR_LIB)",
    kdrpCO="SYS.DBMS_REPAIR.CHECK_OBJECT(DBMS_REPAIR_LIB)",
    kdrpDK="SYS.DBMS_REPAIR.DUMP_ORPHAN_KEYS(DBMS_REPAIR_LIB)",
    kdrpFB="SYS.DBMS_REPAIR.SEGMENT_FIX_STATUS(DBMS_REPAIR_LIB)",
    kdrpFC="SYS.DBMS_REPAIR.FIX_CORRUPT_BLOCKS(DBMS_REPAIR_LIB)",
    kdrpFL="SYS.DBMS_REPAIR.REBUILD_FREELISTS(DBMS_REPAIR_LIB)",
    kdrpOIC="SYS.DBMS_REPAIR.ONLINE_INDEX_CLEAN(DBMS_REPAIR_LIB)",
    kdrpRCK="SYS.DBMS_REPAIR.REPAIR_CLUSTER_INDEX_KEYCOUNT(DBMS_REPAIR_LIB)",
    kdrpRQI="SYS.DBMS_REPAIR.REBUILD_SHC_INDEX(DBMS_REPAIR_LIB)",
    kdrpSC="SYS.DBMS_REPAIR.SKIP_CORRUPT_BLOCKS(DBMS_REPAIR_LIB)",
    kds="kernel data seek/scan",
    kdsc="kernel data seek/scan cluster",
    kdscgr="kernel data seek/scan cluster table scan",
    kdse="kernel data seek/scan extent",
    kdselget="kernel data seek/scan extent ??",
    kdselini="kernel data seek/scan extent list initialize",
    kdsfbr="kernel data seek/scan fetch by rowid. returns a pointer to the row header",
    kdsfbrcb="kernel data seek/scan fetch by rowid. returns a pointer to the row header ??",
    kdsgnp="kernel data seek/scan fetch by rowid get continued row piece (chained row)",
    kdsgrp="kernel data seek/scan fetch by rowid get row piece",
    kdsics="kernel data seek/scan cluster table scan",
    kdso="kernel data seek/scan service object",
    kdsocrl="kernel data seek/scan service object check if row is locked",
    kdst="kernel data seek/scan table",
    kdst_compile="kernel data seek/scan table compile scan type",
    kdst_fetch="kernel data seek/scan table fetch blocks",
    kdst_mode="kernel data seek/scan table determine scan mode",
    kdstf="kernel data seek/scan table full ultra fast scan",
    kdstgr="kernel data seek/scan table get row",
    kdstsnb="kernel data seek/scan table ??",
    kdsttgr="kernel data seek/scan table full table scan",
    kdt_bseg_srch_cbk="kernel data table insert check for uncommitted space",
    kdtchg="kernel data table insert generate change",
    kdtgrs="kernel data table insert get space",
    kdtgsp="kernel data table insert table/cluster insert get space",
    kdtInsRow="kernel data table insert insert a row immediately",
    kdtSimpleInsRow="kernel data table insert simple insert a row",
    kdtwrp="kernel data table insert write row piece",
    kdt ="kernel data table insert",
    kdu="kernel data update",
    kdugetpart="kernel data update get partition information for a deleted or opdated row",
    kdumrp="kernel data update update multiple row pieces",
    kduovw="kernel data update updates already existing rows",
    kdusru="kernel data update single row update, main entry",
    kduurp="kernel data update update row piece",
    kdwf="kernel data worker framework",
    kdx="kernel data index block",
    kdxokcmp="kernel data index block Auto Prefix Compressed Index",
    kdxt="kernel data index block temporary block",
    kdz="kernel data archive compression",
    kdza="kernel data archive compression compression",
    kdza_delete="SYS.DBMS_COMPRESSION.KDZA_DELETE(C)",
    kdza_dump_map="SYS.DBMS_COMPRESSION.KDZA_DUMP_MAP(C)",
    kdzadelete="SYS.DBMS_COMPRESSION.KDZA_DELETE(C)",
    kdzadumpmap="SYS.DBMS_COMPRESSION.KDZA_DUMP_MAP(C)",
    kdzc="kernel data archive compression compression",
    kdzcheckhi="SYS.PRVT_COMPRESSION.KDZCHECKHI(C)",
    kdzcmptype="SYS.DBMS_COMPRESSION.KDZCMPTYPE(C)",
    kdzd="kernel data archive compression decompression",
    kdzh="kernel data archive compression compression",
    kdzk="kernel data archive compression HPK",
    kdzp="kernel data archive compression pcode",
    kdzs="kernel data archive compression decompression",
    kdzstoragetype="SYS.KDZSTORAGETYPE.kdzstoragetype(DBMS_STORAGE_TYPE_LIB)",
    kdzu="kernel data archive compression uncompress",
    ke="kernel event",
    keadDeleteDirectivePLSQL="SYS.PRVT_ADVISOR.DELETE_DIRECTIVE_I(DBMS_KEA_LIB)",
    keadEvalDirectivePLSQL="SYS.PRVT_ADVISOR.EVAL_DIRECTIVE_VALUE_I(DBMS_KEA_LIB)",
    keadInsertDirDefPLSQL="SYS.PRVT_ADVISOR.INSERT_ADV_DIR_DEF_I(DBMS_KEA_LIB)",
    keadInsertDirectivePLSQL="SYS.PRVT_ADVISOR.INSERT_DIRECTIVE_I(DBMS_KEA_LIB)",
    keadUpdateDirDefPLSQL="SYS.PRVT_ADVISOR.UPDATE_ADV_DIR_DEF_I(DBMS_KEA_LIB)",
    keadUpdateDirectivePLSQL="SYS.PRVT_ADVISOR.UPDATE_DIRECTIVE_I(DBMS_KEA_LIB)",
    keasEditPLSQL="SYS.PRVT_ADVISOR.EDIT(DBMS_KEA_LIB)",
    keauFormatMsgGroupPLSQL="SYS.PRVT_ADVISOR.FORMAT_MESSAGE_GROUP(DBMS_KEA_LIB)",
    keauFormatMsgPLSQL="SYS.PRVT_ADVISOR.FORMAT_MESSAGE(DBMS_KEA_LIB)",
    keauGetDbVersionPLSQL="SYS.PRVT_ADVISOR.GET_DB_VERSION(DBMS_KEA_LIB)",
    keauhtlPLSQL="SYS.PRVT_ADVISOR.HANDLE_LOCK(DBMS_KEA_LIB)",
    keauInterruptTaskPLSQL="SYS.PRVT_ADVISOR.SIGNAL_INTERRUPT(DBMS_KEA_LIB)",
    keauRecordErrorMsg="SYS.PRVT_ADVISOR.RECORD_ERRORMSG_CALLOUT(DBMS_KEA_LIB)",
    keauRecordJournalPLSQL="SYS.PRVT_ADVISOR.RECORD_JOURNAL(DBMS_KEA_LIB)",
    keautcintrPLSQL="SYS.PRVT_ADVISOR.TEST_CHECK_INTERRUPT(DBMS_KEA_LIB)",
    keauWriteFile="SYS.PRVT_ADVISOR.X_WRITE_TO_FILE(DBMS_KEA_LIB)",
    keb="kernel event MMON/MMNL infrastructure",
    kec="kernel event real application testing",
    kecp_get_state="SYS.DBMS_WORKLOAD_REPLAY_I.GET_STATE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpAddTblPartitionOneInst="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_ADD_TBL_PARTITIONS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcEntryGenCapture="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GENERATE_CAPTURE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcEntryParseLoginQueue="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PARSE_LOGIN_QUEUE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcEntryScheduleEvent="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_SCHEDULE_EVENT(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpCheckConcurrentRep="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CHECK_CONCURRENT_REP(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryCalibrate="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CALIBRATE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryCancelReplay="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CANCEL_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryClientConnect="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CLIENT_CONNECT(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryClientVitals="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CLIENT_VITALS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryCreateRepDir="SYS.DBMS_WORKLOAD_REPLAY.INVOKE_CREATE_REPDIR(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryEndReplayActions="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_END_REPLAY_ACTIONS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryFilters="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_FILTERS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryGetAdvancedParameter="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_ADVANCED_PARAMETER(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryGetCapDirType="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_CAPDIR_TYPE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryGetCapturedTables="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_CAPTURED_TABLES(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryHandleRepDir="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_HANDLE_REPDIR(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryIsReplayPaused="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_IS_REPLAY_PAUSED(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryLoadDivergence="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_LOAD_DIVERGENCE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryPauseReplay="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PAUSE_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryPrepareReplay="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PREPARE_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntrySetAdvancedParameter="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_SET_ADVANCED_PARAMETER(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpEntryStartReplay="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_START_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpGetClock="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_CLOCK(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpgetstate="SYS.DBMS_WORKLOAD_REPLAY_I.GET_STATE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppEntryLoadLongSqlText="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_LOAD_LONG_SQLTEXT(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppEntryProcessRecording="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PROCESS_CAPTURE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppGetWMDSyncMode="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_SYNC_MODE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpPopulateDivergenceEntry="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_POPULATE_DIVERGENCE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpReplayRemappedRandomNumber="SYS.DBMS_RANDOM.replay_random_number(dbms_workload_replay_lib)",
    kecprm="kernel event real application testing masking",
    kecprmEntryExtract="SYS.DBMS_RAT_MASK_INTERNAL.DBR_EXTRACT_CALLOUT(DBMS_SQLTUNE_LIB)",
    kecprmEntryReplace="SYS.DBMS_RAT_MASK_INTERNAL.DBR_MASK_CALLOUT(DBMS_SQLTUNE_LIB)",
    kecpSqlIdToOCINumber="SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_SQLID_TO_OCINUMBER(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpValidateEncryptionPasswd="SYS.DBMS_WRR_INTERNAL.INVOKE_VALIDATE_ENC_PASSWD(DBMS_WORKLOAD_REPLAY_LIB)",
    kecr_get_state="SYS.DBMS_WORKLOAD_CAPTURE_I.GET_STATE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecr_OS_seconds="SYS.DBMS_WRR_REPORT.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrCheckConcurrentCap="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_CHECK_CONCURRENT_CAP(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrCheckSqlsetPrivs="SYS.DBMS_WRR_INTERNAL.INVOKE_CHECK_SQLSET_PRIVS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrEntryAcquireLock="SYS.DBMS_WRR_INTERNAL.INVOKE_ACQUIRE_WRR_LOCK(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrEntryDisResSes="SYS.DBMS_WRR_INTERNAL.INVOKE_DIS_RES_SESS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrEntryFinishRecord="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_FINISH_CAPTURE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrEntryReleaseLock="SYS.DBMS_WRR_INTERNAL.INVOKE_RELEASE_WRR_LOCK(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrEntryStartRecord="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_START_CAPTURE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrEntrySwitchBucket="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_SWITCH_BUCKET(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrgetstate="SYS.DBMS_WORKLOAD_CAPTURE_I.GET_STATE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrHandleEncryption="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_HANDLE_ENCRYPTION(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrOSseconds="SYS.DBMS_WRR_REPORT.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrRecordRandomNumber="SYS.DBMS_RANDOM.record_random_number(dbms_workload_capture_lib)",
    kecucXCacheFree="SYS.DBMS_WRR_PROTECTED.INVOKE_XCACHE_FREE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecucXCacheLoad="SYS.DBMS_WRR_PROTECTED.INVOKE_XCACHE_LOAD(DBMS_WORKLOAD_REPLAY_LIB)",
    kecuDirExists="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_DIR_EXISTS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.INVOKE_DIR_EXISTS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_DIR_EXISTS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuGetDirPath="SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_GET_PATH(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.INVOKE_GET_PATH(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_PATH(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuGetFeatureBooleanValue="SYS.DBMS_WRR_INTERNAL.INVOKE_GET_FEATURE_BOOL_VALUE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecukghsfsNewfile="SYS.DBMS_WRR_INTERNAL.INVOKE_KGHSFSNEWFILE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuSimpleCommand="SYS.DBMS_WRR_PROTECTED.INVOKE_SIMPLE_CMD(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuwReadWMD="SYS.DBMS_WRR_INTERNAL.INVOKE_READ_WMD(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuwUpdateWMD="SYS.DBMS_WRR_INTERNAL.INVOKE_UPDATE_WMD(DBMS_WORKLOAD_CAPTURE_LIB)",
    kegCheckRatOption="SYS.PRVT_SMGUTIL.CHECK_RAT_OPTION(DBMS_KEG_LIB)",
    kegPackEnabledPLSQL="SYS.PRVT_SMGUTIL.PRVT_PACK_ENABLED(DBMS_KEG_LIB)",
    kehASHqueryPLSQL="SYS.PRVT_HDM.GET_QUERY_PREDICATE(DBMS_HDM_LIB)",
    kehePlsqlRacFloodControl="SYS.PRVT_RTADDM.RAC_FLOOD_CONTROL(DBMS_HDM_LIB)",
    kehExecute="SYS.PRVT_HDM.EXECUTE(DBMS_HDM_LIB)",
    kehPlsqlValidateInstance="SYS.PRVT_HDM.VALIDATE_INSTANCE(DBMS_HDM_LIB)",
    keiut="kernel event IUT infrastructure",
    kel="kernel event server generated alert infrastructure",
    kelr_reconcile_threshold="kernel event server generated alert infrastructure DBMS_SERVER_ALERT.RECONCILE_THRESHOLD",
    kelr_set_threshold="kernel event server generated alert infrastructure DBMS_SERVER_ALERT.SET_THRESHOLD",
    keltpost_plsql="kernel event server generated alert infrastructure DBMS_SERVER_ALERT_PRVT.POST_ALERT_I",
    keomg="kernel event DBOP generic service/monitoring daemon",
    keomm="kernel event DBOP composite type",
    keommBeginOperationExt="SYS.DBMS_SQL_MONITOR.BEGIN_OPERATION_INT(DBMS_SQLMON_LIB)",
    keommEndOperationExt="SYS.DBMS_SQL_MONITOR.END_OPERATION_INT(DBMS_SQLMON_LIB)",
    keomn="kernel event DBOP monitoring",
    keplan="kernel event SQL compare plans",
    ker="kernel event orarep",
    kerctc_generic="SYS.DBMS_REPORT.BUILD_GENERIC_TAG(DBMS_REPORT_LIB)",
    kerctcBuildGenericTag="kernel event orarep DBMS_REPORT.BUILD_GENERIC_TAG",
    kerctcgeneric="SYS.DBMS_REPORT.BUILD_GENERIC_TAG(DBMS_REPORT_LIB)",
    kerpiFinishFullCapture="SYS.DBMS_AUTO_REPORT.FINISH_REPORT_CAPTURE_CALLOUT(DBMS_REPORT_LIB)",
    kerpiMarkSqlMonEntryExt="SYS.DBMS_AUTO_REPORT_INTERNAL.I_MARK_SQLMON_CALLOUT(DBMS_REPORT_LIB)",
    kerpiStartFullCapture="SYS.DBMS_AUTO_REPORT.START_REPORT_CAPTURE_CALLOUT(DBMS_REPORT_LIB)",
    kertv_apply_schema="SYS.DBMS_REPORT.APPLY_XML_SCHEMA(DBMS_REPORT_LIB)",
    kertv_apply_xslt="SYS.DBMS_REPORT.APPLY_XSLT(DBMS_REPORT_LIB)",
    kertv_html_to_text="SYS.DBMS_REPORT.TRANSFORM_HTML_TO_TEXT(DBMS_REPORT_LIB)",
    kertvapplyschema="SYS.DBMS_REPORT.APPLY_XML_SCHEMA(DBMS_REPORT_LIB)",
    kertvApplySchemaExt="kernel event orarep DBMS_REPORT.APPLY_XML_SCHEMA",
    kertvapplyxslt="SYS.DBMS_REPORT.APPLY_XSLT(DBMS_REPORT_LIB)",
    kertvApplyXsltExt="kernel event orarep DBMS_REPORT.APPLY_XSLT",
    kertvGetLargeParamValExt="SYS.DBMS_REPORT.KERTVGETLARGEPARAMVALEXT(DBMS_REPORT_LIB)",
    kertvhtmltotext="SYS.DBMS_REPORT.TRANSFORM_HTML_TO_TEXT(DBMS_REPORT_LIB)",
    kertvTransformHtmlToTextExt="kernel event orarep DBMS_REPORT.TRANSFORM_HTML_TO_TEXT",
    kerutl_build_ref_struct="SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_STRUCT(DBMS_REPORT_LIB)",
    kerutl_build_ref_varg="SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_VARG(DBMS_REPORT_LIB)",
    kerutl_get_expanded_osd_path="SYS.PRVT_EMX.GET_EXPANDED_OSD_PATH(DBMS_REPORT_LIB)",
    kerutl_validate_name="SYS.DBMS_REPORT.VALIDATE_NAME(DBMS_REPORT_LIB)",
    kerutl_validate_ref_param="SYS.DBMS_REPORT.VALIDATE_REF_PARAMETER(DBMS_REPORT_LIB)",
    kerutlbuildrefstruct="SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_STRUCT(DBMS_REPORT_LIB)",
    kerutlbuildrefvarg="SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_VARG(DBMS_REPORT_LIB)",
    kerutlBuildRRefStruct="kernel event orarep DBMS_REPORT.BUILD_REPORT_REFERENCE_STRUCT",
    kerutlBuildRRefVararg="kernel event orarep DBMS_REPORT.BUILD_REPORT_REFERENCE_VARG",
    kerutlCheckCaptureXmlExt="SYS.DBMS_REPORT.I_CAPTURE_XML_ENABLED(DBMS_REPORT_LIB)",
    kerutlCheckLrgModeExt="SYS.DBMS_REPORT.I_LRG_MODE(DBMS_REPORT_LIB)",
    kerutlCompressExt="SYS.DBMS_REPORT.I_COMPRESS_REPORT_CALLOUT(DBMS_REPORT_LIB)",
    kerutlgetexpandedosdpath="SYS.PRVT_EMX.GET_EXPANDED_OSD_PATH(DBMS_REPORT_LIB)",
    kerutlGetExpOsdPathExt="kernel event orarep PRVT_EMX.GET_EXPANDED_OSD_PATH",
    kerutlIsRacExt="SYS.PRVT_EMX.IS_RAC(DBMS_REPORT_LIB)",
    kerutlIsZlib2base64CompExt="SYS.DBMS_REPORT.I_IS_ZLIB2BASE64_CALLOUT(DBMS_REPORT_LIB)",
    kerutlReadFileToLobExt="SYS.PRVT_EMX.I_READ_FILE_TO_LOB(DBMS_REPORT_LIB)",
    kerutlReadXmlTypeFromFileExt="SYS.PRVTEMX_DBHOME.I_READ_XMLFILE(DBMS_REPORT_LIB)",
    kerutlUnescapeRRefExt="SYS.DBMS_REPORT.I_UNESCAPE_REPORT_REF(DBMS_REPORT_LIB)",
    kerutlvalidatename="SYS.DBMS_REPORT.VALIDATE_NAME(DBMS_REPORT_LIB)",
    kerutlvalidaterefparam="SYS.DBMS_REPORT.VALIDATE_REF_PARAMETER(DBMS_REPORT_LIB)",
    kes="kernel event SQL manageability",
    kesai="kernel event SQL manageability infrastructure",
    kesaiCreateProfileExt="SYS.DBMS_SQLTUNE_INTERNAL.I_LOAD_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    kesaiRemoteAcceptProfileExt="SYS.DBMS_SQLTUNE_INTERNAL.I_ACCEPT_SQL_PROFILE_REMOTE(DBMS_SQLTUNE_LIB)",
    kesaiRemoteCreatePlanBLExt="SYS.DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PLAN_BL_REMOTE(DBMS_SQLTUNE_LIB)",
    kesaiTuneSqlDriver="SYS.DBMS_SQLTUNE_INTERNAL.I_SUB_EXECUTE_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesatm="kernel event SQL manageability infrastructure",
    kesdsCreateIncidentCallout="SYS.DBMS_SQLDIAG_INTERNAL.I_CREATE_INCIDENT_CALLOUT(DBMS_SQLDIAG_LIB)",
    kesdsIncidentid2SqlCallout="SYS.DBMS_SQLDIAG_INTERNAL.I_INCIDENTID_2_SQL_CALLOUT(DBMS_SQLDIAG_LIB)",
    kesdsRemoveIncidentCallout="SYS.DBMS_SQLDIAG_INTERNAL.I_REMOVE_INCIDENT_CALLOUT(DBMS_SQLDIAG_LIB)",
    kesdsSetTraceIdentifier="SYS.DBMS_SQLDIAG_INTERNAL.I_SET_TRACEFILE_IDENTIFIER(DBMS_SQLDIAG_LIB)",
    kesdtcbCompressTestcaseCallout="SYS.DBMS_SQLTCB_INTERNAL.I_COMPRESS_TESTCASE_CALLOUT(DBMS_SQLTCB_LIB)",
    keshs_alterExt="kernel event SQL manageability DBMS_SQLTUNE_INTERNAL.I_ALTER_SQL_PROFILE",
    keshs_clone="kernel event SQL manageability DBMS_SQLTUNE_INTERNAL.I_CLONE_SQL_PROFILE",
    keshs_create2Ext="kernel event SQL manageability DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE",
    keshs_createExt="kernel event SQL manageability DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE",
    keshs_dropExt="kernel event SQL manageability DBMS_SQLTUNE_INTERNAL.I_DROP_SQL_PROFILE",
    keshs_updateExt="kernel event SQL manageability DBMS_SQLTUNE_INTERNAL.I_UPDATE_SQL_PROFILE",
    keshs_validateCategoryExt="kernel event SQL manageability DBMS_SQLTUNE.VALIDATE_CATEGORY",
    keshs_validateProfileNameExt="kernel event SQL manageability DBMS_SQLTUNE.VALIDATE_PROFILE_NAME",
    keshsalter="SYS.DBMS_SQLTUNE_INTERNAL.I_ALTER_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsclone="SYS.DBMS_SQLTUNE_INTERNAL.I_CLONE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshscreate="SYS.DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshscreate2="SYS.DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsdrop="SYS.DBMS_SQLTUNE_INTERNAL.I_DROP_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsupdate="SYS.DBMS_SQLTUNE_INTERNAL.I_UPDATE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsvalidatecategory="SYS.DBMS_SQLTUNE.VALIDATE_CATEGORY(DBMS_SQLTUNE_LIB)",
    keshsvalidateprofilename="SYS.DBMS_SQLTUNE.VALIDATE_PROFILE_NAME(DBMS_SQLTUNE_LIB)",
    kesm="kernel event SQL manageability real application testing: masking",
    kesmdStsExtractExt="SYS.DBMS_RAT_MASK_INTERNAL.STS_EXTRACT_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesmdStsReplaceExt="SYS.DBMS_RAT_MASK_INTERNAL.STS_MASK_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesmuIsBindMasked="SYS.DBMS_SQLTUNE_UTIL0.IS_BIND_MASKED_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesp="kernel event SQL manageability SQL performance analyzer",
    kespiGetCECallout="SYS.DBMS_SQLPA.GET_SESS_OPTIMIZER_ENV(DBMS_SQLTUNE_LIB)",
    kesqs="kernel event SQL manageability infrastructure",
    kessi="kernel event SQL manageability infrastructure",
    kessiFetchSqlTraceSqlExt="SYS.DBMS_SQLTUNE.FETCH_SQL_TRACE_NEXT_SQL(DBMS_SQLTUNE_LIB)",
    kessiGetOptParamValNumExt="SYS.DBMS_SQLTUNE_INTERNAL.I_GET_OPT_PARAM_VAL_NUM(DBMS_SQLTUNE_LIB)",
    kessiGetOptParamValStrExt="SYS.DBMS_SQLTUNE_INTERNAL.I_GET_OPT_PARAM_VAL_STR(DBMS_SQLTUNE_LIB)",
    kessiInsertSqlText="SYS.DBMS_SQLTUNE_INTERNAL.I_INSERT_SQLSET_SQLTEXT(DBMS_SQLTUNE_LIB)",
    kessiUpdateStmtRefCount="SYS.DBMS_SQLTUNE_INTERNAL.I_UPDATE_AWR_SQLTEXT_REFCOUNT(DBMS_SQLTUNE_LIB)",
    kessiValidateName="SYS.DBMS_SQLTUNE_UTIL1.VALIDATE_NAME(DBMS_SQLTUNE_LIB)",
    kesstp="kernel event SQL manageability SQL trace parser",
    kest="kernel event SQL manageability tokenize (?)",
    kestb_get_signature="SYS.DBMS_SQLTUNE_UTIL0.GET_SIGNATURE(DBMS_SQLTUNE_LIB)",
    kestbgetsignature="SYS.DBMS_SQLTUNE_UTIL0.GET_SIGNATURE(DBMS_SQLTUNE_LIB)",
    kestsa="kernel event SQL manageability tokenize (?) fix regression/parallel execution",
    kestsaExa="kernel event SQL manageability tokenize (?) fix regression/parallel execution exadata",
    kestse="kernel event SQL manageability tokenize (?) SQL test-execute service",
    kestsi="kernel event SQL manageability tokenize (?) index-tune",
    kestsInitCapStats="SYS.DBMS_SQLTUNE_INTERNAL.I_INIT_CAP_STATS_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsMmonToTuneExt="SYS.DBMS_SQLTUNE_INTERNAL.EXEC_EMX_TUNING_TASK_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsp="kernel event SQL manageability tokenize (?) plan node analysis",
    kestsProcessSqlCallout="SYS.DBMS_SQLTUNE_INTERNAL.I_PROCESS_SQL_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsProcessStsCallout="SYS.DBMS_SQLTUNE_INTERNAL.I_PROCESS_SQLSET_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsRemoteExecSqlExt="SYS.DBMS_SQLPA.REMOTE_PROCESS_SQL_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestss="kernel event SQL manageability tokenize (?) statistics advisor",
    kestsUpdCapStats="SYS.DBMS_SQLTUNE_INTERNAL.I_UPD_CAP_STATS_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutl="kernel event SQL manageability infrastructure",
    kesutlCdbConDbid2NameExt="SYS.DBMS_SQLTUNE_UTIL0.CDBCON_DBID_TO_NAME(DBMS_SQLTUNE_LIB)",
    kesutlCdbConId2DbidExt="SYS.DBMS_SQLTUNE_UTIL0.CDBCON_ID_TO_DBID(DBMS_SQLTUNE_LIB)",
    kesutlCdbConName2ConIdExt="SYS.DBMS_SQLTUNE_UTIL0.CDBCON_NAME2ID(DBMS_SQLTUNE_LIB)",
    kesutlCdbConName2IdsExt="SYS.DBMS_SQLTUNE_UTIL0.CDBCON_NAME2IDS(DBMS_SQLTUNE_LIB)",
    kesutlCheckObjPrivExt="SYS.DBMS_SQLTUNE_UTIL0.CHECK_OBJ_PRIV_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlCheckPrivExt="SYS.DBMS_SQLTUNE_UTIL2.CHECK_PRIV_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlExtractBind="SYS.DBMS_SQLTUNE_UTIL0.EXTRACT_BIND_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlGenSqlId="SYS.DBMS_SQLTUNE_UTIL0.SQLTEXT_TO_SQLID(DBMS_SQLTUNE_LIB)",
    kesutlGetBindDataCount="SYS.DBMS_SQLTUNE_UTIL0.GET_BINDS_COUNT(DBMS_SQLTUNE_LIB)",
    kesutlGetCurTimeExt="SYS.DBMS_SQLTUNE_UTIL1.GET_CURRENT_TIME(DBMS_SQLTUNE_LIB)",
    kesutlGetSeqExt="SYS.DBMS_SQLTUNE_UTIL1.GET_SEQ_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlSqlIdToHash="kernel event SQL manageability infrastructure DBMS_UTILITY.KESUTLSQLIDTOHASHICD SQLID_TO_HASH",
    kesutlsqlidtohashicd="SYS.DBMS_UTILITY.KESUTLSQLIDTOHASHICD(C)",
    kesutlSqlIdValidate="SYS.DBMS_SQLTUNE_UTIL0.VALIDATE_SQLID(DBMS_SQLTUNE_LIB)",
    kesutlValidateName="SYS.DBMS_SQLTUNE_UTIL1.VALIDATE_NAME(DBMS_SQLTUNE_LIB)",
    keswat="kernel event SQL manageability infrastructure",
    keswpi="kernel event SQL manageability SQL performance analyzer",
    kesws="kernel event SQL manageability SQL monitor",
    keswsq="kernel event SQL manageability SQL monitor infrastructure",
    keswts="kernel event SQL manageability infrastructure",
    keswtsUnpackStsExt="SYS.DBMS_SQLTUNE_INTERNAL.I_UNPACK_SQLSETS_BULK_CALLOUT(DBMS_SQLTUNE_LIB)",
    keswx="kernel event SQL manageability SQL monitor",
    keswxGetCpuCores="SYS.DBMS_SQLTUNE.KESWXGETCPUCORES(DBMS_SQLTUNE_LIB)",
    ket="kernel event automated maintenance tasks",
    ket3gl5="SYS.DBMS_AUTO_TASK.GET_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ket3gl6="SYS.DBMS_AUTO_TASK.CHECK_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ket_3gl_5="SYS.DBMS_AUTO_TASK.GET_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ket_3gl_6="SYS.DBMS_AUTO_TASK.CHECK_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ketrcc_refresh_client_config="SYS.DBMS_AUTOTASK_PRVT.REFRESH_CLIENT_CONFIG(DBMS_AUTOTASK_PRVT_LIB)",
    ketrccrefreshclientconfig="SYS.DBMS_AUTOTASK_PRVT.REFRESH_CLIENT_CONFIG(DBMS_AUTOTASK_PRVT_LIB)",
    keum="kernel event dbms_umf(_internal)",
    keumatlc_acquire_top_lock_cb="SYS.DBMS_UMF_INTERNAL.ACQUIRE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumatlcacquiretoplockcb="SYS.DBMS_UMF_INTERNAL.ACQUIRE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumbtxc_build_target_xml_co="SYS.DBMS_UMF_INTERNAL.BUILD_TARGET_XML_INTERNAL(DBMS_UMF_LIB)",
    keumbtxcbuildtargetxmlco="SYS.DBMS_UMF_INTERNAL.BUILD_TARGET_XML_INTERNAL(DBMS_UMF_LIB)",
    keumcnc_config_node_co="SYS.DBMS_UMF.CONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumcncconfignodeco="SYS.DBMS_UMF.CONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumctic_cpy_top_info_co="SYS.DBMS_UMF.COPY_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumcticcpytopinfoco="SYS.DBMS_UMF.COPY_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumdtic_del_top_info_co="SYS.DBMS_UMF.DELETE_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumdticdeltopinfoco="SYS.DBMS_UMF.DELETE_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumggdnco="SYS.DBMS_UMF_INTERNAL.GET_GLOBAL_DBLINK_NAME_INT(DBMS_UMF_LIB)",
    keumgnnc_get_nn_co="SYS.DBMS_UMF.GET_NODE_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgnncgetnnco="SYS.DBMS_UMF.GET_NODE_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgrsnco_get_reg_state_id_co="SYS.DBMS_UMF_INTERNAL.GET_REG_STATE_ID(DBMS_UMF_LIB)",
    keumgrsncogetregstateidco="SYS.DBMS_UMF_INTERNAL.GET_REG_STATE_ID(DBMS_UMF_LIB)",
    keumgtic_get_target_id_co="SYS.DBMS_UMF.GET_TARGET_ID_CO(DBMS_UMF_LIB)",
    keumgticgettargetidco="SYS.DBMS_UMF.GET_TARGET_ID_CO(DBMS_UMF_LIB)",
    keumgtnc_get_topology_name_co="SYS.DBMS_UMF.GET_TOPOLOGY_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgtncgettopologynameco="SYS.DBMS_UMF.GET_TOPOLOGY_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgtsnco_get_top_state_id_co="SYS.DBMS_UMF_INTERNAL.GET_TOP_STATE_ID(DBMS_UMF_LIB)",
    keumgtsncogettopstateidco="SYS.DBMS_UMF_INTERNAL.GET_TOP_STATE_ID(DBMS_UMF_LIB)",
    keumitcc_is_tgt_capable_co="kernel event dbms_umf(_internal) DBMS_UMF.IS_TGT_CAPABLE_CO",
    keumitccistgtcapableco="SYS.DBMS_UMF.IS_TGT_CAPABLE_CO(DBMS_UMF_LIB)",
    keummtsc_modify_top_sw_co="kernel event dbms_umf(_internal) DBMS_UMF.TOPOLOGY_ROLE_CHANGE_CO",
    keummtscmodifytopswco="SYS.DBMS_UMF.TOPOLOGY_ROLE_CHANGE_CO(DBMS_UMF_LIB)",
    keumpclc_pop_cache_local_co="SYS.DBMS_UMF_INTERNAL.POP_CACHE_LOCAL_CO(DBMS_UMF_LIB)",
    keumpclcpopcachelocalco="SYS.DBMS_UMF_INTERNAL.POP_CACHE_LOCAL_CO(DBMS_UMF_LIB)",
    keumqlic_query_link_info_co="SYS.DBMS_UMF.QUERY_LINK_INFO_CO(DBMS_UMF_LIB)",
    keumqlicquerylinkinfoco="SYS.DBMS_UMF.QUERY_LINK_INFO_CO(DBMS_UMF_LIB)",
    keumqni2c_query_node_info2_co="SYS.DBMS_UMF.QUERY_NODE_INFO_ID_CO(DBMS_UMF_LIB)",
    keumqni2cquerynodeinfo2co="SYS.DBMS_UMF.QUERY_NODE_INFO_ID_CO(DBMS_UMF_LIB)",
    keumqnic_query_node_info_co="SYS.DBMS_UMF.QUERY_NODE_INFO_CO(DBMS_UMF_LIB)",
    keumqnicquerynodeinfoco="SYS.DBMS_UMF.QUERY_NODE_INFO_CO(DBMS_UMF_LIB)",
    keumrrc_register_remote_co="SYS.DBMS_UMF_INTERNAL.REGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumrrcregisterremoteco="SYS.DBMS_UMF_INTERNAL.REGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumrtlc_release_top_lock_cb="SYS.DBMS_UMF_INTERNAL.RELEASE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumrtlcreleasetoplockcb="SYS.DBMS_UMF_INTERNAL.RELEASE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumruec_umf_remote_enabled_co="SYS.DBMS_UMF_INTERNAL.UMF_REMOTE_ENABLED_CALLOUT(DBMS_UMF_LIB)",
    keumruecumfremoteenabledco="SYS.DBMS_UMF_INTERNAL.UMF_REMOTE_ENABLED_CALLOUT(DBMS_UMF_LIB)",
    keumsdc_switch_destination_co="SYS.DBMS_UMF.SWITCH_DESTINATION_CO(DBMS_UMF_LIB)",
    keumsdcswitchdestinationco="SYS.DBMS_UMF.SWITCH_DESTINATION_CO(DBMS_UMF_LIB)",
    keumspfps_sub_pat_co="SYS.DBMS_UMF_PROTECTED.PSF_SUBSTITUTE_PAT2(DBMS_UMF_LIB)",
    keumspfpssubpatco="SYS.DBMS_UMF_PROTECTED.PSF_SUBSTITUTE_PAT2(DBMS_UMF_LIB)",
    keumswtc_sync_with_target_co="SYS.DBMS_UMF_INTERNAL.SYNC_WITH_TARGET_CO(DBMS_UMF_LIB)",
    keumswtcsyncwithtargetco="SYS.DBMS_UMF_INTERNAL.SYNC_WITH_TARGET_CO(DBMS_UMF_LIB)",
    keumunc_unconfig_node_co="SYS.DBMS_UMF.UNCONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumuncunconfignodeco="SYS.DBMS_UMF.UNCONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumurc_unreg_remote_co="SYS.DBMS_UMF_INTERNAL.UNREGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumurcunregremoteco="SYS.DBMS_UMF_INTERNAL.UNREGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumusotc_upd_svc_old_tgt_co="kernel event dbms_umf(_internal) DBMS_UMF.UPD_SVC_OLD_TGT_CO",
    keumusotcupdsvcoldtgtco="SYS.DBMS_UMF.UPD_SVC_OLD_TGT_CO(DBMS_UMF_LIB)",
    keumusr_update_service_remote="SYS.DBMS_UMF_INTERNAL.UPDATE_SERVICE_REMOTE_INT(DBMS_UMF_LIB)",
    keumusrupdateserviceremote="SYS.DBMS_UMF_INTERNAL.UPDATE_SERVICE_REMOTE_INT(DBMS_UMF_LIB)",
    keumxlc_xmlpar_load_c="SYS.DBMS_UMF_INTERNAL.TOPOLOGY_LOAD(DBMS_UMF_LIB)",
    keumxlcxmlparloadc="SYS.DBMS_UMF_INTERNAL.TOPOLOGY_LOAD(DBMS_UMF_LIB)",
    kew="kernel event AWR",
    kewa="kernel event AWR ASH",
    kewccccc_config_client_co="SYS.DBMS_AWR_WAREHOUSE_SOURCE.CONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewcccccconfigclientco="SYS.DBMS_AWR_WAREHOUSE_SOURCE.CONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewccgmc_get_mailpkg_co="SYS.DBMS_AWR_WAREHOUSE_SOURCE.GET_MAILPKG_TO_DELIVER_CO(DBMS_AWRWH_LIB)",
    kewccgmcgetmailpkgco="SYS.DBMS_AWR_WAREHOUSE_SOURCE.GET_MAILPKG_TO_DELIVER_CO(DBMS_AWRWH_LIB)",
    kewccnmdc_nfy_mpk_delivered_co="SYS.DBMS_AWR_WAREHOUSE_SOURCE.NFY_MAILPKG_DELIVERED_CO(DBMS_AWRWH_LIB)",
    kewccnmdcnfympkdeliveredco="SYS.DBMS_AWR_WAREHOUSE_SOURCE.NFY_MAILPKG_DELIVERED_CO(DBMS_AWRWH_LIB)",
    kewccrldc_reg_loc_delivery_co="SYS.DBMS_AWR_WAREHOUSE_SOURCE.REGISTER_AWR_DELIVERY_CO(DBMS_AWRWH_LIB)",
    kewccrldcreglocdeliveryco="SYS.DBMS_AWR_WAREHOUSE_SOURCE.REGISTER_AWR_DELIVERY_CO(DBMS_AWRWH_LIB)",
    kewccucc_unconfig_client_co="SYS.DBMS_AWR_WAREHOUSE_SOURCE.UNCONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewccuccunconfigclientco="SYS.DBMS_AWR_WAREHOUSE_SOURCE.UNCONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewceaec_awr_exp_co="SYS.DBMS_SWRF_INTERNAL.AWR_EXP_CO(DBMS_SWRF_LIB)",
    kewceaecawrexpco="SYS.DBMS_SWRF_INTERNAL.AWR_EXP_CO(DBMS_SWRF_LIB)",
    kewciaic_awr_imp_co="SYS.DBMS_SWRF_INTERNAL.AWR_IMP_CO(DBMS_SWRF_LIB)",
    kewciaicawrimpco="SYS.DBMS_SWRF_INTERNAL.AWR_IMP_CO(DBMS_SWRF_LIB)",
    kewcrdec_record_dp_err_co="SYS.DBMS_SWRF_INTERNAL.RECORD_DATAPUMP_ERROR_CO(DBMS_AWRWH_LIB)",
    kewcrdecrecorddperrco="SYS.DBMS_SWRF_INTERNAL.RECORD_DATAPUMP_ERROR_CO(DBMS_AWRWH_LIB)",
    kewcscwc_create_warehouse_co="SYS.DBMS_AWR_WAREHOUSE_SERVER.CREATE_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcscwccreatewarehouseco="SYS.DBMS_AWR_WAREHOUSE_SERVER.CREATE_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcsdwc_drop_warehouse_co="SYS.DBMS_AWR_WAREHOUSE_SERVER.DROP_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcsdwcdropwarehouseco="SYS.DBMS_AWR_WAREHOUSE_SERVER.DROP_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcsguc_get_uploadmb_path_co="SYS.DBMS_AWR_WAREHOUSE_SERVER.GET_UPLOADMB_PATH_CO(DBMS_AWRWH_LIB)",
    kewcsgucgetuploadmbpathco="SYS.DBMS_AWR_WAREHOUSE_SERVER.GET_UPLOADMB_PATH_CO(DBMS_AWRWH_LIB)",
    kewcsnmac_nfy_mpk_arrived_co="SYS.DBMS_AWR_WAREHOUSE_SERVER.NFY_MAILPKG_ARRIVED_CO(DBMS_AWRWH_LIB)",
    kewcsnmacnfympkarrivedco="SYS.DBMS_AWR_WAREHOUSE_SERVER.NFY_MAILPKG_ARRIVED_CO(DBMS_AWRWH_LIB)",
    kewcsrdc_register_wh_dbid_co="SYS.DBMS_AWR_WAREHOUSE_SERVER.REGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewcsrdcregisterwhdbidco="SYS.DBMS_AWR_WAREHOUSE_SERVER.REGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewcsurdc_unregister_dbid_co="SYS.DBMS_AWR_WAREHOUSE_SERVER.UNREGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewcsurdcunregisterdbidco="SYS.DBMS_AWR_WAREHOUSE_SERVER.UNREGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewe3gl1="SYS.DBMS_MONITOR.CLIENT_ID_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl10="SYS.DBMS_MONITOR.SESSION_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl11="SYS.DBMS_MONITOR.DATABASE_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl12="SYS.DBMS_MONITOR.DATABASE_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl2="SYS.DBMS_MONITOR.CLIENT_ID_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl3="SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl4="SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl5="SYS.DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl6="SYS.DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl7="SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl8="SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl9="SYS.DBMS_MONITOR.SESSION_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_1="SYS.DBMS_MONITOR.CLIENT_ID_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_10="SYS.DBMS_MONITOR.SESSION_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_11="SYS.DBMS_MONITOR.DATABASE_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_12="SYS.DBMS_MONITOR.DATABASE_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_2="SYS.DBMS_MONITOR.CLIENT_ID_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_3="SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_4="SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_5="SYS.DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_6="SYS.DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_7="SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_8="SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_9="SYS.DBMS_MONITOR.SESSION_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_cln_stat_disable="kernel event AWR DBMS_MONITOR.CLIENT_ID_STAT_DISABLE",
    kewe_cln_stat_enable="kernel event AWR DBMS_MONITOR.CLIENT_ID_STAT_ENABLE",
    kewe_cln_trace_disable="kernel event AWR DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE",
    kewe_cln_trace_enable="kernel event AWR DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE",
    kewe_database_trace_disable="kernel event AWR DBMS_MONITOR.DATABASE_TRACE_DISABLE",
    kewe_database_trace_enable="kernel event AWR DBMS_MONITOR.DATABASE_TRACE_ENABLE",
    kewe_mysession_trace_disable="SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_DISABL(C)",
    kewe_mysession_trace_enable="SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_ENABLE(C)",
    kewe_sid_trace_disable="kernel event AWR DBMS_MONITOR.SESSION_TRACE_DISABLE",
    kewe_sid_trace_enable="kernel event AWR DBMS_MONITOR.SESSION_TRACE_ENABLE",
    kewe_svm_stat_disable="kernel event AWR DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE",
    kewe_svm_stat_enable="kernel event AWR DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE",
    kewe_svm_trace_disable="kernel event AWR DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE",
    kewe_svm_trace_enable="kernel event AWR DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE",
    kewemysessiontracedisable="SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_DISABL(C)",
    kewemysessiontraceenable="SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_ENABLE(C)",
    kewfc_callout_test="SYS.DBMS_FEATURE_USAGE_CLIENT.CALLOUT_TEST(DBMS_DBFUSC_LIB)",
    kewfc_dbsnmp_baseline_adaptive="SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_ADAPTIVE(DBMS_DBFUSC_LIB)",
    kewfc_dbsnmp_baseline_computes="SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_COMPUTES(DBMS_DBFUSC_LIB)",
    kewfccallouttest="SYS.DBMS_FEATURE_USAGE_CLIENT.CALLOUT_TEST(DBMS_DBFUSC_LIB)",
    kewfcdbsnmpbaselineadaptive="SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_ADAPTIVE(DBMS_DBFUSC_LIB)",
    kewfcdbsnmpbaselinecomputes="SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_COMPUTES(DBMS_DBFUSC_LIB)",
    kewm="kernel event AWR metrics",
    kewr="kernel event AWR repository",
    kewrafm_auto_flush_main="kernel event AWR repository auto flush main",
    kewrcfp_create_first_partition="kernel event AWR repository create first partition for all AWR after dbid is registered",
    kewrcmp_create_manual_partns="SYS.DBMS_SWRF_INTERNAL.CREATE_IMPORT_PARTITIONS(DBMS_SWRF_LIB)",
    kewrcmpcreatemanualpartns="SYS.DBMS_SWRF_INTERNAL.CREATE_IMPORT_PARTITIONS(DBMS_SWRF_LIB)",
    kewrcup_create_upgrade_partns="kernel event AWR repository DBMS_SWRF_INTERNAL.CREATE_UPGRADE_PARTITIONS",
    kewrcupcreateupgradepartns="SYS.DBMS_SWRF_INTERNAL.CREATE_UPGRADE_PARTITIONS(DBMS_SWRF_LIB)",
    kewrf="kernel event AWR repository flush",
    kewrgsi_get_segment_info="SYS.DBMS_SWRF_INTERNAL.GET_SEG_INFO(DBMS_SWRF_LIB)",
    kewrgsigetsegmentinfo="SYS.DBMS_SWRF_INTERNAL.GET_SEG_INFO(DBMS_SWRF_LIB)",
    kewrmas_modify_apurge_setting="SYS.DBMS_SWRF_INTERNAL.MODIFY_AUTOPURGE_SETTINGS(DBMS_SWRF_LIB)",
    kewrmasmodifyapurgesetting="SYS.DBMS_SWRF_INTERNAL.MODIFY_AUTOPURGE_SETTINGS(DBMS_SWRF_LIB)",
    kewrpacs_add_colored_sql="SYS.DBMS_WORKLOAD_REPOSITORY.ADD_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrpacsaddcoloredsql="SYS.DBMS_WORKLOAD_REPOSITORY.ADD_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrpcb_create_baseline="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BASELINE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbcreatebaseline="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BASELINE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbt_create_bl_template="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TEMPLATE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbt_create_bl_timerange="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TIMERANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbtcreatebltemplate="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TEMPLATE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbtcreatebltimerange="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TIMERANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcc_cleanup_catalog="SYS.DBMS_SWRF_INTERNAL.CLEANUP_CATALOG(DBMS_SWRF_LIB)",
    kewrpcccleanupcatalog="SYS.DBMS_SWRF_INTERNAL.CLEANUP_CATALOG(DBMS_SWRF_LIB)",
    kewrpcldb_cleanup_database="SYS.DBMS_SWRF_INTERNAL.CLEANUP_DATABASE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcldbcleanupdatabase="SYS.DBMS_SWRF_INTERNAL.CLEANUP_DATABASE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcrs_ctl_restricted_snap="SYS.DBMS_WORKLOAD_REPOSITORY.CONTROL_RESTRICTED_SNAPSHOT(DBMS_SWRF_LIB)",
    kewrpcrsctlrestrictedsnap="SYS.DBMS_WORKLOAD_REPOSITORY.CONTROL_RESTRICTED_SNAPSHOT(DBMS_SWRF_LIB)",
    kewrpcs_create_snapshot="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcscreatesnapshot="SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcstgs_create_stg_schema="kernel event AWR repository DBMS_SWRF_INTERNAL.CREATE_STAGING_SCHEMA",
    kewrpcstgscreatestgschema="SYS.DBMS_SWRF_INTERNAL.CREATE_STAGING_SCHEMA(DBMS_SWRF_LIB)",
    kewrpdbn_dropbl_byname="SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE(DBMS_SWRF_LIB)",
    kewrpdbndropblbyname="SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE(DBMS_SWRF_LIB)",
    kewrpdbt_drop_bl_template="SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE_TEMPLATE(DBMS_SWRF_LIB)",
    kewrpdbtdropbltemplate="SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE_TEMPLATE(DBMS_SWRF_LIB)",
    kewrpdsr_drop_snapshot_range="SYS.DBMS_WORKLOAD_REPOSITORY.DROP_SNAPSHOT_RANGE(DBMS_SWRF_LIB)",
    kewrpdsrdropsnapshotrange="SYS.DBMS_WORKLOAD_REPOSITORY.DROP_SNAPSHOT_RANGE(DBMS_SWRF_LIB)",
    kewrpdtr_dump_trace="SYS.DBMS_SWRF_INTERNAL.DUMP_TRACE(DBMS_SWRF_LIB)",
    kewrpdtrdumptrace="SYS.DBMS_SWRF_INTERNAL.DUMP_TRACE(DBMS_SWRF_LIB)",
    kewrpglt_get_lrgtest_tables="SYS.DBMS_SWRF_INTERNAL.GET_LRGTEST_TABLES_CALLOUT(DBMS_SWRF_LIB)",
    kewrpgltgetlrgtesttables="SYS.DBMS_SWRF_INTERNAL.GET_LRGTEST_TABLES_CALLOUT(DBMS_SWRF_LIB)",
    kewrpms_modify_settings="SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmsmodifysettings="SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmtsc_mod_tab_settings_co="SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_TABLE_SETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmtscmodtabsettingsco="SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_TABLE_SETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmvs_modify_view_settings="SYS.DBMS_MANAGEMENT_BOOTSTRAP.MODIFY_AWR_VIEW_SETTINGS_CO(DBMS_SWRF_LIB)",
    kewrpmvsmodifyviewsettings="SYS.DBMS_MANAGEMENT_BOOTSTRAP.MODIFY_AWR_VIEW_SETTINGS_CO(DBMS_SWRF_LIB)",
    kewrpmws_modbl_window_size="SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_BASELINE_WINDOW_SIZE(DBMS_SWRF_LIB)",
    kewrpmwsmodblwindowsize="SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_BASELINE_WINDOW_SIZE(DBMS_SWRF_LIB)",
    kewrprb_rename_baseline="SYS.DBMS_WORKLOAD_REPOSITORY.RENAME_BASELINE(DBMS_SWRF_LIB)",
    kewrprbrenamebaseline="SYS.DBMS_WORKLOAD_REPOSITORY.RENAME_BASELINE(DBMS_SWRF_LIB)",
    kewrprc_refresh_catalog="SYS.DBMS_SWRF_INTERNAL.REFRESH_CATALOG(DBMS_SWRF_LIB)",
    kewrprcrefreshcatalog="SYS.DBMS_SWRF_INTERNAL.REFRESH_CATALOG(DBMS_SWRF_LIB)",
    kewrprcs_remove_colored_sql="SYS.DBMS_WORKLOAD_REPOSITORY.REMOVE_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrprcsremovecoloredsql="SYS.DBMS_WORKLOAD_REPOSITORY.REMOVE_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrprdb_register_database="SYS.DBMS_SWRF_INTERNAL.REGISTER_DBID_CALLOUT(DBMS_SWRF_LIB)",
    kewrprdbregisterdatabase="SYS.DBMS_SWRF_INTERNAL.REGISTER_DBID_CALLOUT(DBMS_SWRF_LIB)",
    kewrprmdb_register_multidb="SYS.DBMS_SWRF_INTERNAL.REGISTER_MULTIDB_CALLOUT(DBMS_SWRF_LIB)",
    kewrprmdbregistermultidb="SYS.DBMS_SWRF_INTERNAL.REGISTER_MULTIDB_CALLOUT(DBMS_SWRF_LIB)",
    kewrprstdb_reset_database="SYS.DBMS_SWRF_INTERNAL.RESET_AWR_CALLOUT(DBMS_SWRF_LIB)",
    kewrprstdbresetdatabase="SYS.DBMS_SWRF_INTERNAL.RESET_AWR_CALLOUT(DBMS_SWRF_LIB)",
    kewrprstgs_remove_stg_schema="kernel event AWR repository DBMS_SWRF_INTERNAL.REMOVE_STAGING_SCHEMA",
    kewrprstgsremovestgschema="SYS.DBMS_SWRF_INTERNAL.REMOVE_STAGING_SCHEMA(DBMS_SWRF_LIB)",
    kewrprwc_remove_wr_control="SYS.DBMS_SWRF_INTERNAL.REMOVE_WR_CONTROL(DBMS_SWRF_LIB)",
    kewrprwcremovewrcontrol="SYS.DBMS_SWRF_INTERNAL.REMOVE_WR_CONTROL(DBMS_SWRF_LIB)",
    kewrps="kernel event AWR repository purge",
    kewrpsbd_sync_bl_details="SYS.DBMS_SWRF_INTERNAL.INSERT_BASELINE_DETAILS(DBMS_SWRF_LIB)",
    kewrpsbdsyncbldetails="SYS.DBMS_SWRF_INTERNAL.INSERT_BASELINE_DETAILS(DBMS_SWRF_LIB)",
    kewrpsd_purge_sql_details="SYS.DBMS_WORKLOAD_REPOSITORY.PURGE_SQL_DETAILS(DBMS_SWRF_LIB)",
    kewrpsdpurgesqldetails="SYS.DBMS_WORKLOAD_REPOSITORY.PURGE_SQL_DETAILS(DBMS_SWRF_LIB)",
    kewrpsl_set_lrgtest="SYS.DBMS_SWRF_INTERNAL.SET_LRGTEST_CALLOUT(DBMS_SWRF_LIB)",
    kewrpslsetlrgtest="SYS.DBMS_SWRF_INTERNAL.SET_LRGTEST_CALLOUT(DBMS_SWRF_LIB)",
    kewrpulc_updbl_last_computed="SYS.DBMS_SWRF_INTERNAL.BLUPDATE_LAST_TIME_COMPUTED(DBMS_SWRF_LIB)",
    kewrpulcupdbllastcomputed="SYS.DBMS_SWRF_INTERNAL.BLUPDATE_LAST_TIME_COMPUTED(DBMS_SWRF_LIB)",
    kewrpurdb_unregister_database="SYS.DBMS_SWRF_INTERNAL.UNREGISTER_DATABASE(DBMS_SWRF_LIB)",
    kewrpurdbunregisterdatabase="SYS.DBMS_SWRF_INTERNAL.UNREGISTER_DATABASE(DBMS_SWRF_LIB)",
    kewrpurmdb_unregister_multidb="SYS.DBMS_SWRF_INTERNAL.UNREGISTER_REMOTE_DATABASE(DBMS_SWRF_LIB)",
    kewrpurmdbunregistermultidb="SYS.DBMS_SWRF_INTERNAL.UNREGISTER_REMOTE_DATABASE(DBMS_SWRF_LIB)",
    kewrrsr_reserve_snap_range="SYS.DBMS_SWRF_INTERNAL.RESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrrsrreservesnaprange="SYS.DBMS_SWRF_INTERNAL.RESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrst2si_source_t2s_intent="SYS.DBMS_SWRF_INTERNAL.T2S_SNAP_INTENT_NFY(DBMS_SWRF_LIB)",
    kewrst2sisourcet2sintent="SYS.DBMS_SWRF_INTERNAL.T2S_SNAP_INTENT_NFY(DBMS_SWRF_LIB)",
    kewrst2srn_source_t2s_reg_nfy="SYS.DBMS_SWRF_INTERNAL.T2S_REGISTER_NFY(DBMS_SWRF_LIB)",
    kewrst2srnsourcet2sregnfy="SYS.DBMS_SWRF_INTERNAL.T2S_REGISTER_NFY(DBMS_SWRF_LIB)",
    kewrst2ss_source_t2s_snap="SYS.DBMS_SWRF_INTERNAL.AWR_FLUSH_T2SS_SNAP_CALLOUT(DBMS_SWRF_LIB)",
    kewrst2sssourcet2ssnap="SYS.DBMS_SWRF_INTERNAL.AWR_FLUSH_T2SS_SNAP_CALLOUT(DBMS_SWRF_LIB)",
    kewrudf_update_datafile="SYS.DBMS_SWRF_INTERNAL.UPDATE_DATAFILE(DBMS_SWRF_LIB)",
    kewrudfupdatedatafile="SYS.DBMS_SWRF_INTERNAL.UPDATE_DATAFILE(DBMS_SWRF_LIB)",
    kewrusi_update_segment_info="SYS.DBMS_SWRF_INTERNAL.UPDATE_SEG_INFO(DBMS_SWRF_LIB)",
    kewrusiupdatesegmentinfo="SYS.DBMS_SWRF_INTERNAL.UPDATE_SEG_INFO(DBMS_SWRF_LIB)",
    kewrusr_unreserve_snap_range="SYS.DBMS_SWRF_INTERNAL.UNRESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrusrunreservesnaprange="SYS.DBMS_SWRF_INTERNAL.UNRESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrwfao_wait_for_awr_open="SYS.DBMS_SWRF_INTERNAL.WAIT_FOR_AWR_OPEN_CO(DBMS_SWRF_LIB)",
    kewrwfaowaitforawropen="SYS.DBMS_SWRF_INTERNAL.WAIT_FOR_AWR_OPEN_CO(DBMS_SWRF_LIB)",
    kews="kernel event AWR statistics",
    kews_cln_timestate="kernel event AWR statistics clean timestate",
    kews_sqlst_flush="kernel event AWR statistics flush cursor statistics",
    kews_update_wait_time="kernel event AWR statistics update wait time",
    kewu="kernel event AWR utilities",
    kewx="kernel event AWR sysaux?",
    kex="kernel event EM express",
    key="SYS.SODA_OPERATION_T.KEY(DBMS_SODAOPR_LIB)",
    keys="SYS.SODA_OPERATION_T.KEYS(DBMS_SODAOPR_LIB)",
    kf="kernel automatic storage management",
    kfa="kernel automatic storage management alias operations",
    kfc="kernel automatic storage management cache",
    kfcl="kernel automatic storage management cache lock",
    kfcLoad="kernel automatic storage management cache ??",
    kfcReadBlk="kernel automatic storage management cache ??",
    kfd="kernel automatic storage management disk",
    kfdp="kernel automatic storage management disk PST",
    kfds="kernel automatic storage management disk staleness registry and resync",
    kfdva="kernel automatic storage management disk virtual ATB",
    kfdx="kernel automatic storage management disk exadata interface",
    kfe="kernel automatic storage management attributes",
    kff="kernel automatic storage management KFF",
    kffb="kernel automatic storage management KFF metadata block",
    kffbScanNext="kernel automatic storage management KFF metadata block ??",
    kffbTableCb="kernel automatic storage management KFF metadata block ??",
    kffd="kernel automatic storage management KFF metadata directory",
    kffg="kernel automatic storage management KFF file group",
    kffilTableCb="kernel automatic storage management KFF ??",
    kffm="kernel automatic storage management KFF map header",
    kffs="kernel automatic storage management KFF split mirror operations",
    kffscrub="kernel automatic storage management KFF split mirror operations scrubbing",
    kfg="kernel automatic storage management diskgroups",
    kfgb="kernel automatic storage management diskgroups background",
    kfgTableCb="kernel automatic storage management diskgroups ??",
    kfia="kernel automatic storage management remote",
    kfiac="kernel automatic storage management remote IOServer client",
    kfias="kernel automatic storage management remote IOServer",
    kfio="kernel automatic storage management translation I/O layer",
    kfioDumpPg="kernel automatic storage management translation I/O layer dump routine",
    kfioer="kernel automatic storage management translation I/O layer translation",
    kfioErrorRecord="kernel automatic storage management translation I/O layer ??",
    kfioPhysical="kernel automatic storage management translation I/O layer get physical sector size",
    kfioRequest="kernel automatic storage management translation I/O layer ??",
    kfioRequestPriv="kernel automatic storage management translation I/O layer ??",
    kfioRqSetDump="kernel automatic storage management translation I/O layer ??",
    kfioRqSetPrepare="kernel automatic storage management translation I/O layer ??",
    kfios="kernel automatic storage management translation I/O layer simple",
    kfioSubmitIO="kernel automatic storage management translation I/O layer ??",
    kfioTranslateIO="kernel automatic storage management translation I/O layer ??",
    kfis="kernel automatic storage management intelligent storage interfaces",
    kfk="kernel automatic storage management KFK",
    kfk_dump="kernel automatic storage management KFK dump routine",
    kfk_dump_iosubsys="kernel automatic storage management KFK dump routine io subsystem",
    kfk_dump_kfkio="kernel automatic storage management KFK dump routine KFK IO",
    kfm="kernel automatic storage management node monitor interface implementation",
    kfmd="kernel automatic storage management node monitor interface implementation layer for diskgroup registration",
    kfms="kernel automatic storage management node monitor interface implementation layers support function interface",
    kfmsInit="kernel automatic storage management node monitor interface implementation layers support function interface initialise group services (kgxgncin cssd)",
    kfn="kernel automatic storage management networking subsystem",
    kfnb="kernel automatic storage management networking subsystem umbilicus",
    kfnbGrpFindDisks="kernel automatic storage management networking subsystem umbilicus group find disks",
    kfnc="kernel automatic storage management networking subsystem client networking",
    kfncPhysical="kernel automatic storage management networking subsystem client networking request physical sector size",
    kfncSlaveSubmit="kernel automatic storage management networking subsystem client networking submit request",
    kfnm="kernel automatic storage management networking subsystem umbilicus",
    kfnor="kernel automatic storage management networking subsystem KFN orion",
    kfns="kernel automatic storage management networking subsystem server networking",
    kfpkgDG="kernel automatic storage management DBMS_DISKGROUP",
    kfpkgDGChangeClientCluster="kernel automatic storage management DBMS_DISKGROUP CHANGECLIENTCLUSTER",
    kfpkgDGCheckFile="kernel automatic storage management DBMS_DISKGROUP CHECKFILE",
    kfpkgDGCloseFile="kernel automatic storage management DBMS_DISKGROUP CLOSE",
    kfpkgDGCommitFile="kernel automatic storage management DBMS_DISKGROUP COMMIT",
    kfpkgDGCreateClientCluster2="kernel automatic storage management DBMS_DISKGROUP CREATECLIENTCLUSTER2",
    kfpkgDGCreateDir="kernel automatic storage management DBMS_DISKGROUP CREATEDIR",
    kfpkgDGCreateFile="kernel automatic storage management DBMS_DISKGROUP CREATEFILE",
    kfpkgDGDelBadfEntry="kernel automatic storage management DBMS_DISKGROUP DELETEBADFENTRY",
    kfpkgDGDropDir="kernel automatic storage management DBMS_DISKGROUP DROPDIR",
    kfpkgDGGetFileAttr="kernel automatic storage management DBMS_DISKGROUP GETFILEATTR",
    kfpkgDGGetFilePhyBlkSize="kernel automatic storage management DBMS_DISKGROUP GETFILEPHYBLKSIZE",
    kfpkgDGMapAu="kernel automatic storage management DBMS_DISKGROUP MAPAU",
    kfpkgDGMapBlock="kernel automatic storage management DBMS_DISKGROUP MAPBLOCK",
    kfpkgDGMapExtent="kernel automatic storage management DBMS_DISKGROUP MAPEXTENT",
    kfpkgDGMapExtent2="kernel automatic storage management DBMS_DISKGROUP MAPEXTENT 12.2 version",
    kfpkgDGOpenFile="kernel automatic storage management DBMS_DISKGROUP OPEN",
    kfpkgDGPatchFile="kernel automatic storage management DBMS_DISKGROUP PATCHFILE",
    kfpkgDGReadFile="kernel automatic storage management DBMS_DISKGROUP READ",
    kfpkgDGRemap="kernel automatic storage management DBMS_DISKGROUP REMAP",
    kfpkgDGResizeFile="kernel automatic storage management DBMS_DISKGROUP RESIZEFILE",
    kfpkgDGSetSparseParent="kernel automatic storage management DBMS_DISKGROUP SETSPARSEPARENT",
    kfr="kernel automatic storage management recovery",
    kfrb="kernel automatic storage management recovery buffer",
    kfrc="kernel automatic storage management recovery COD",
    kftha="kernel automatic storage management transparent high availability",
    kftr2="kernel automatic storage management relative to absolute file number translation",
    kftr2ah="kernel automatic storage management relative to absolute file number translation with hint",
    kfv="kernel automatic storage management volume subsystem",
    kfvioc="kernel automatic storage management volume subsystem cell storage",
    kfvsd="kernel automatic storage management volume subsystem background",
    kfvsu="kernel automatic storage management volume subsystem umbilicus",
    kfz="kernel automatic storage management zecurity subsystem",
    kfzp="kernel automatic storage management zecurity subsystem password file layer",
    kg="kernel generic",
    kgas="kernel generic tcp/ip networking",
    kgasc_close="kernel generic tcp/ip networking close tcp connection",
    kgasct_connect_tcp="kernel generic tcp/ip networking connect tcp connection",
    kgasr="kernel generic tcp/ip networking receive",
    kgasra2_recv_avail_2="kernel generic tcp/ip networking receive second routine",
    kgasra_recv_avail="kernel generic tcp/ip networking receive first routine",
    kgass="kernel generic tcp/ip networking send",
    kgass_send="kernel generic tcp/ip networking send routine",
    kgbt="kernel generic btree operations",
    kgcc="kernel generic compress",
    kgccbuf="kernel generic compress buffer",
    kgccbz2do="kernel generic compress bzip2 do apply bzip2 compression",
    kgccbz2pseudodo="kernel generic compress bzip2 pseudo do",
    kgccdo="kernel generic compress do, main compression function",
    kgccgmtf="kernel generic compress generate move to front",
    kgccm="kernel generic compress memory (?)",
    kgcd="kernel generic decompress",
    kgcddo="kernel generic decompress do, main decompression function",
    kgce="kernel generic encryption engine",
    kgcs="kernel generic cloud services",
    kgcs_bmiaas="kernel generic cloud services (detect) bare metal IaaS",
    kgcs_bmiaasgen2="kernel generic cloud services (detect) bare metal IaaS (detect) bare metal IaaS second generation",
    kgcs_exacloud="kernel generic cloud services (detect) exacloud",
    kgcs_http_url_read="kernel generic cloud services read url for determination of cloud and type of cloud",
    kgcs_is_non_oracle_cloud="kernel generic cloud services is the instance running in an non-oracle cloud?",
    kgcs_is_on_premise="kernel generic cloud services is the instance running on-premises?",
    kgcs_is_oracle_cloud="kernel generic cloud services is the instance running in oracle cloud?",
    kgcs_nimbula="kernel generic cloud services is the instance running in a nimbula infrastructure?",
    kgds="kernel generic vos generic stack trace",
    kge="kernel generic error",
    kgeade="kernel generic error add error onto the error stack",
    kgeadse="kernel generic error KGE ADd String Internal Error onto the error stack",
    kgeasi="kernel generic error raise an error on an assertion failure",
    kgeasnmierr="kernel generic error assert named internal error",
    kgecrs="kernel generic error check and record O/S error code",
    kgecxd="kernel generic error context of error driver",
    kgefec="kernel generic error fatal error code",
    kgefem="kernel generic error format error message (null-terminated)",
    kgefic="kernel generic error ??",
    kgemef="kernel generic error mae error message (with Va_list)",
    kgepop="kernel generic error pop to the current top error frame",
    kger="kernel generic error record",
    kgerelv="kernel generic error ??",
    kgerem="kernel generic error record error code (with already-formatted message)",
    kgerev="kernel generic error record error code (with Va_list)",
    kgerinv="kernel generic error record internal named error with va_list",
    kgerinv_internal="kernel generic error record internal named error with va_list or soft internal named error",
    kgeriv="kernel generic error record internal error code with va_list",
    kgersel="kernel generic error ??",
    kgese="kernel generic error signal error",
    kgesec="kernel generic error signal error code",
    kgesev="kernel generic error signal error code (with Va_list)",
    kgesin="kernel generic error signal a named internal error",
    kgesinv="kernel generic error signal a named internal error signal internal named error with va_list",
    kgesiv="kernel generic error ??",
    kgespf="kernel generic error string printf (format a message straing)",
    kgf="kernel generic ASM",
    kgfd="kernel generic ASM io subsystem driver",
    kgfdvf="kernel generic ASM io subsystem driver Voting file Interface",
    kgff="kernel generic ASM direct file io adapter",
    kgffdcn="kernel generic ASM direct file io adapter disconnect from kgff instance",
    kgfpm="kernel generic ASM PATCH repository",
    kgg="kernel generic generic routines",
    kggchk="kernel generic generic lists ??",
    kggec="kernel generic generic routines element cache(?)",
    kggecAlloc="kernel generic generic routines element cache(?) allocate",
    kggecInitH="kernel generic generic routines element cache(?) initialise heap",
    kggfa="kernel generic generic routines freeable (memory) allocation",
    kggfaAlloc="kernel generic generic routines freeable (memory) allocation allocate",
    kggfaDoKghAlloc="kernel generic generic routines freeable (memory) allocation do KGH allocation. allocate memory in KGH managed heap",
    kggfaInitH="kernel generic generic routines freeable (memory) allocation initialise heap",
    kgghash="kernel generic generic routines produce hash value",
    kgghstfel="kernel generic generic lists ??",
    kgghte="kernel generic generic routines hash table",
    kgghteAdd="kernel generic generic routines hash table add",
    kgghteAddCB="kernel generic generic lists ??",
    kgghteGetEle="kernel generic generic routines hash table get element",
    kggmd5="kernel generic generic routines functions to calculate md5 values",
    kggms="kernel generic generic routines map service",
    kggmsAdd="kernel generic generic routines map service add",
    kggmsAddCB="kernel generic generic lists ??",
    kggmsAddPtrCB="kernel generic generic lists ??",
    kggmsAddUb4="kernel generic generic routines map service add unsigned 4 bytes",
    kggmsCreateMap="kernel generic generic routines map service create map",
    kggmsCreateStaticMaps="kernel generic generic routines map service create static maps",
    kggmsHash="kernel generic generic routines map service hashing function",
    kggmsHash12="kernel generic generic routines map service hashing function 12 bit",
    kggmsHash16="kernel generic generic routines map service hashing function 16 bit",
    kggmsHash8="kernel generic generic routines map service hashing function 8 bit",
    kggmsInitMapServiceH="kernel generic generic routines map service initialise map service heap",
    kggsm="kernel generic generic routines string mapping",
    kggsmCommonInit="kernel generic generic routines string mapping common initialisation.",
    kggsmInit="kernel generic generic routines string mapping initialise",
    kggsmInitStringMapService="kernel generic generic routines string mapping initialise string map service",
    kgh="kernel generic heap manager",
    kgh_update_comment="kernel generic heap manager add comment to memory chunk allocation",
    kghaddex="kernel generic heap manager add extent",
    kghalf="kernel generic heap manager non-recoverably allocate a freeable chunk of memory",
    kghalo="kernel generic heap manager main allocation entry point",
    kghalp="kernel generic heap manager allocate permanent memory",
    kghbshrt="kernel generic heap manager ??",
    kgherror="kernel generic heap manager internal error routine for signalling an error",
    kghfen="kernel generic heap manager free a portion of a chunk of space at the end of the chunk",
    kghfnd="kernel generic heap manager find a chunk of memory of at least the minimum size",
    kghfnd_in_free_lists="kernel generic heap manager find a chunk of memory of at least the minimum size in free lists",
    kghfre="kernel generic heap manager free a chunk of memory",
    kghfrempty="kernel generic heap manager free a chunk of memory ??",
    kghfrf="kernel generic heap manager non-recoverably free a freeable chunk of space",
    kghfrh="kernel generic heap manager free heap. free all the extents allocated in the heap using kghalfrx",
    kghfrmrg="kernel generic heap manager free a chunk, merge with neighbors if free returns merged chunk",
    kghfru="kernel generic heap manager free unused space in a heap",
    kghfru_internal="kernel generic heap manager free unused space in a heap internal",
    kghfrunp="kernel generic heap manager free unused space in a heap free unpinned space",
    kghfrx="kernel generic heap manager free extent",
    kghgex="kernel generic heap manager get a new extent",
    kghini="kernel generic heap manager heap initialize",
    kghissga="kernel generic heap manager is heap in SGA?",
    kghmrk="kernel generic heap manager mark heap",
    kghnerror="kernel generic heap manager ??",
    kghnospc="kernel generic heap manager no space available in the heap, signal an error",
    kghphini="kernel generic heap manager parent heap initialize",
    kghpin="kernel generic heap manager pin a heap",
    kghpir="kernel generic heap manager pin a chunk of space that was specified to be recreatable",
    kghpmalo="kernel generic heap manager find and return permanent chunk of space",
    kghprmalo="kernel generic heap manager permanent memory allocate",
    kghrcappl="kernel generic heap manager apply this heap function depth first",
    kghrsp="kernel generic heap manager remove permanent chunk",
    kghrst="kernel generic heap manager ??",
    kghsc="kernel generic heap manager stream compact",
    kghsrch="kernel generic heap manager search freelists for a memory chunk",
    kghssgai="kernel generic heap manager segmented allocation internal",
    kghssgal="kernel generic heap manager segmented allocate",
    kghssgfr="kernel generic heap manager segmented free",
    kghssgmm="kernel generic heap manager ??",
    kghstack="kernel generic heap manager stack",
    kghstack_alloc="kernel generic heap manager allocate pga memory",
    kghstack_free="kernel generic heap manager free pga memory",
    kghsup="kernel generic heap manager unpaged page table",
    kghsupmm="kernel generic heap manager unpaged page table more memory",
    kghufreetop="kernel generic heap manager ??",
    kghugetuds="kernel generic heap manager ??",
    kghup="kernel generic heap manager unpin",
    kghupr="kernel generic heap manager unpin recreatable chunk",
    kghx="kernel generic heap manager fixed sized memory",
    kghxal="kernel generic heap manager fixed sized memory allocate shared memory",
    kghxcb="kernel generic heap manager fixed sized memory callback to free memory on the free lists back to kgh",
    kghxcb_internal="kernel generic heap manager fixed sized memory callback to free memory on the free lists back to kgh internal",
    kghxcu="kernel generic heap manager fixed sized memory latch cleanup for the fixed allocator",
    kgi="kernel generic instantiation manager",
    kgicli="kernel generic instantiation manager close all cursors for an instantiation",
    kgidel="kernel generic instantiation manager delete an instantiation object",
    kgidlt="kernel generic instantiation manager delete an instantiation object",
    kgidmp="kernel generic instantiation manager ??",
    kgimal="kernel generic instantiation manager memory allocate",
    kgiscl="kernel generic instantiation manager state close cursors",
    kgisdl="kernel generic instantiation manager state delete",
    kgitrc="kernel generic instantiation manager trace call stack",
    kgk="kernel generic token",
    kgkp="kernel generic token generic services scheduling policies",
    kgl="kernel generic library cache management",
    kgl_can_unpin_heap_0="kernel generic library cache management can heap 0 be unpinned",
    kglati="kernel generic library cache management authorization table insert(?)",
    kglchk1="kernel generic library cache management check for 1 access on object",
    kglchk2="kernel generic library cache management check for access on an object",
    kglchk3="kernel generic library cache management check for access on an object",
    kglComputeHash="kernel generic library cache management compute hash value",
    kglConcurrencyId="kernel generic library cache management return library cache hash bucket number",
    kgldmp="kernel generic library cache management dump an object",
    kgldon="kernel generic library cache management depend on an object",
    kgldpo="kernel generic library cache management depend on an object",
    kgldti="kernel generic library cache management dependency table insert (under latch or KGLMX pin/load)",
    kgldtin="kernel generic library cache management dependency table insert (under latch or KGLMX pin/load) ?",
    kgldtld="kernel generic library cache management ??",
    kglfnd="kernel generic library cache management find a chunk of at least the minimum size",
    kglfrunp="kernel generic library cache management ask a client to free unpinned space",
    kglfrx="kernel generic library cache management free extent (heap unpin)",
    kglget="kernel generic library cache management get a lock on an object",
    kglGetMutex="kernel generic library cache management get mutex",
    kglGetSessionUOL="kernel generic library cache management obtain location for AOL in KKSSP",
    kglGetSO="kernel generic library cache management get state object",
    kglgob="kernel generic library cache management get an objected locked and pinned",
    kglhd="kernel generic library cache management object handle",
    kglhdal="kernel generic library cache management object handle allocate",
    kglhdd="kernel generic library cache management object handle deallocate",
    kglhdda="kernel generic library cache management object handle deallocate a",
    kglhdgc="kernel generic library cache management object handle get child(?)",
    kglhdgh="kernel generic library cache management object handle get handle",
    kglhdgn="kernel generic library cache management object handle get new(?)",
    kglhdi="kernel generic library cache management object handle increase version count",
    kglHeapInitializeInternalFL="kernel generic library cache management initialize heap allocation",
    kglhpd="kernel generic library cache management heap deallocate",
    kglhpn="kernel generic library cache management heap pin",
    kglhup="kernel generic library cache management heap update",
    kglic="kernel generic library cache management ??",
    kgligi="kernel generic library cache management ??",
    kgllcu="kernel generic library cache management latch cleanup for the library cache and pin latches",
    kgllk="kernel generic library cache management library cache lock",
    kgllkal="kernel generic library cache management library cache lock allocate",
    kgllkdl="kernel generic library cache management library cache lock delete",
    kgllkds="kernel generic library cache management library cache lock delete state object",
    kglll="kernel generic library cache management load lock",
    kglllal="kernel generic library cache management load lock allocate",
    kgllldl="kernel generic library cache management load lock delete",
    kglLock="kernel generic library cache management library cache lock",
    kglLockWait="kernel generic library cache management ??",
    kglob="kernel generic library cache management object",
    kglobal="kernel generic library cache management object allocate",
    kglobcl="kernel generic library cache management object clear all tables",
    kglobf0="kernel generic library cache management object free heap/data block 0 of an object",
    kglobfr="kernel generic library cache management object free all heaps (except data block 0's) of an object",
    kglobld="kernel generic library cache management object load",
    kglobpn="kernel generic library cache management object pin heaps and load data pieces",
    kglpim="kernel generic library cache management pin and load more heaps",
    kglpin="kernel generic library cache management pin heaps and load data pieces of an object",
    kglPinSO="kernel generic library cache management pin SO",
    kglpn="kernel generic library cache management pin",
    kglpnal="kernel generic library cache management pin allocate",
    kglpnc="kernel generic library cache management pin pin heaps and load data pieces of a cursor object",
    kglpnck="kernel generic library cache management pin pin heaps and load data pieces of a cursor object check if latch is held",
    kglpndl="kernel generic library cache management pin delete data heaps",
    kglpnds="kernel generic library cache management pin delete state object",
    kglpnmi="kernel generic library cache management pin migration",
    kglpnp="kernel generic library cache management pin pin heaps and load data for stored procedures",
    kglpur="kernel generic library cache management ??",
    kglpurge="CTXSYS.DRIXMD.KGLPURGE_CALLOUT(DR$LIB)",
    kglrddsc="kernel generic library cache management describe callback function",
    kglrds="kernel generic library cache management describe a remote object",
    kglrfcl="kernel generic library cache management reference clear",
    kglsec="kernel generic library cache management signal error code",
    kglshu="kernel generic library cache management ??",
    kglsim="kernel generic library cache management simulator (library cache advise)",
    kglsscn="kernel generic library cache management scan a loaded set invoking a supplied callback for each element",
    kglssr="kernel generic library cache management session state remove",
    kgltba="kernel generic library cache management child cursor table?",
    kglUnLock="kernel generic library cache management library cache unlock",
    kglunp="kernel generic library cache management unpin heaps of an object",
    kglUnPin="kernel generic library cache management release pin",
    kgm="kernel generic inter-language method services",
    kgmexcb="kernel generic inter-language method services execution callback",
    kgmexch="kernel generic inter-language method services execute by compilation handle",
    kgmexec="kernel generic inter-language method services execute",
    kgmexsc="kernel generic inter-language method services execute call with SCD (used only by PLSQL)",
    kgmgaicn="kernel generic inter-language method services generic arguments input conversions",
    kgmgaocn="kernel generic inter-language method services generic arguments output conversions",
    kgmgchd="kernel generic inter-language method services get compilation handle",
    kgmimio="kernel generic inter-language method services implementation fro mmethod instantion object",
    kgmtconv="kernel generic inter-language method services performconversion",
    kgmtomib="kernel generic inter-language method services image to object (named types)",
    kgnfs="kernel generic network file system",
    kgnfs_wat="kernel generic network file system wait",
    kgnfswat="kernel generic network file system wait",
    kgodm="kernel generic oracle disk manager",
    kgodm_io="kernel generic oracle disk manager IO",
    kgodm_wait_ios="kernel generic oracle disk manager wait on IOs",
    kgs="kernel generic service",
    kgsc="kernel generic service cache, session cache for cursors",
    kgscCacheCursor="kernel generic service cache, session cache for cursors add cursor to cache",
    kgscComputeHash="kernel generic service cache, session cache for cursors compute hash value for cursor",
    kgscFindCursor="kernel generic service cache, session cache for cursors search cursor in the cache",
    kgscFindFreeSlot="kernel generic service cache, session cache for cursors find a free slot in the cache",
    kgsd="kernel generic service debugging",
    kgsf="kernel generic service ??",
    kgsk="kernel generic service resource manager",
    kgskbwt="kernel generic service resource manager begin wait",
    kgskchk="kernel generic service resource manager check resource state for RM",
    kgskckcpuswch="kernel generic service resource manager check cpu switches",
    kgskdecr="kernel generic service resource manager decrease",
    kgskdecrstat1="kernel generic service resource manager decrease statistics",
    kgskentsch="kernel generic service resource manager enter scheduler",
    kgskewt="kernel generic service resource manager end wait",
    kgskewtint="kernel generic service resource manager end wait internal",
    kgskexitsch="kernel generic service resource manager exit scheduler",
    kgsklheld="kernel generic service resource manager lock held",
    kgskmodruncnt="kernel generic service resource manager modify run count",
    kgskrunnextint="kernel generic service resource manager run next int(?)",
    kgskthbwt="kernel generic service resource manager thread begin wait",
    kgskthewt="kernel generic service resource manager thread end wait",
    kgskthrexit="kernel generic service resource manager thread exit",
    kgskupdbalance="kernel generic service resource manager update balance",
    kgskupdcputm="kernel generic service resource manager update cpu time",
    kgskusedynshares="kernel generic service resource manager use dynamic shares",
    kgskuselowthreshold="kernel generic service resource manager use low threshold",
    kgss="kernel generic service state object manager",
    kgstm="kernel generic service time",
    kgur="kernel generic recovery",
    kgx="kernel generic mutex/communication",
    kgxAllocWhereStats="kernel generic mutex/communication mutex set statistics for wait",
    kgxAolDump="kernel generic mutex/communication mutex dump AOL",
    kgxAOLInit="kernel generic mutex/communication mutex initialize AOL",
    kgxCleanup="kernel generic mutex/communication mutex cleanup",
    kgxDecrement="kernel generic mutex/communication mutex decrement RefCnt",
    kgxDecrementExamine="kernel generic mutex/communication mutex decrement RefCnt and set E mode",
    kgxEndExamine="kernel generic mutex/communication mutex clear E mode",
    kgxExamine="kernel generic mutex/communication mutex set E mode",
    kgxExclusive="kernel generic mutex/communication mutex get in X mode",
    kgxExclusive2Shared="kernel generic mutex/communication mutex get in X mode downgrade X to S mode",
    kgxExclusiveNowait="kernel generic mutex/communication mutex get in X mode nowait",
    kgxg="kernel generic mutex/communication node monitor/cluster group services layer",
    kgxgncin="kernel generic mutex/communication node monitor/cluster group services layer group membership cssd initiate",
    kgxIncrement="kernel generic mutex/communication mutex increment RefCnt",
    kgxIncrementExamine="kernel generic mutex/communication mutex increment RefCnt and set E mode",
    kgxLatchCleanup="kernel generic mutex/communication mutex cleanup latch(?)",
    kgxLongExclusive="kernel generic mutex/communication mutex get in long exclusive mode",
    kgxModifyRefCount="kernel generic mutex/communication mutex modify RefCnt",
    kgxMutexHng="kernel generic mutex/communication mutex hang(?)",
    kgxPgaInitialize="kernel generic mutex/communication mutex initialize PGA",
    kgxRegisterClient="kernel generic mutex/communication mutex register client(?)",
    kgxRelease="kernel generic mutex/communication mutex release",
    kgxSgaInitialize="kernel generic mutex/communication mutex initialize SGA",
    kgxShared="kernel generic mutex/communication mutex get in S mode",
    kgxSharedExamine="kernel generic mutex/communication mutex get in S mode sharedexamine mode",
    kgxSharedNowait="kernel generic mutex/communication mutex get in S mode nowait",
    kgxSharedNowaitExamine="kernel generic mutex/communication mutex get in S mode nowait sharedexamine mode",
    kgxWait="kernel generic mutex/communication mutex register wait and sleep",
    khpro="kernel hierarchical profiler",
    khproanalyze="kernel hierarchical profiler DBMS_HPROF.KHPROANALYZE",
    khprostart="kernel hierarchical profiler DBMS_HPROF.KHPROSTART",
    khprostop="kernel hierarchical profiler DBMS_HPROF.KHPROSTOP",
    kidievl_scr="ORDSYS.ORDIMAGESIGNATURE.EVALUATESCORE(ORDIMLIBT)",
    kidievlscr="ORDSYS.ORDIMAGESIGNATURE.EVALUATESCORE(ORDIMLIBT)",
    kidiext_feature="ORDSYS.ORDIMGSI_PKG.EXTRACT_ALLPROPERTIES_FUNC(ORDIMLIBT)",
    kidiextfeature="ORDSYS.ORDIMGSI_PKG.EXTRACT_ALLPROPERTIES_FUNC(ORDIMLIBT)",
    kidigen_sig="ORDSYS.ORDIMGSIG_PKG.GENERATESIGNATUREFUNC(ORDIMLIBT)",
    kidigensig="ORDSYS.ORDIMGSIG_PKG.GENERATESIGNATUREFUNC(ORDIMLIBT)",
    kidipcp="ORDSYS.ORDIMGEXTCODEC_PKG.MMTK_EXT_PROCESS(ORDIMLIBS)",
    kidipro="ORDSYS.ORDIMGEXTCODEC_PKG.MMTK_GETPROPERTIES(ORDIMLIBS)",
    kidiscr_avgcol="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscr_col="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscr_poscol="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscr_tex="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscravgcol="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscrcol="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscrposcol="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscrtex="ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidzmsg_raise2="ORDSYS.ORDIMERRORCODES.PVTRAISEEXCEPTIONWITHMSG2(ORDIMLIBT)",
    kidzmsg_raise3="ORDSYS.ORDERROR.RAISE(ORDIMLIBT)",
    kidzmsgraise2="ORDSYS.ORDIMERRORCODES.PVTRAISEEXCEPTIONWITHMSG2(ORDIMLIBT)",
    kidzmsgraise3="ORDSYS.ORDERROR.RAISE(ORDIMLIBT)",
    kill="kernel ??",
    kj="kernel lock management",
    kjac="kernel lock management application continuity",
    kjac11203monitortxnpls="SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjac_11203_monitor_txn_pls="SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjac_begin_replay="SYS.DBMS_APP_CONT_PRVT.BEGIN_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjac_clr_failpoint_pls="SYS.DBMS_TG_DBG.I_CLEAR_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjac_end_replay="SYS.DBMS_APP_CONT_PRVT.END_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjac_force_outcome_pls="SYS.DBMS_APP_CONT.INT_FORCE_OUTCOME(DBMS_APP_CONT_LIB)",
    kjac_monitor_txn="SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjac_set_failpoint_pls="SYS.DBMS_TG_DBG.I_SET_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjac_set_session_drainable_pls="SYS.DBMS_TG_DBG.I_SET_SESSION_DRAINABLE(DBMS_TG_DBG_LIB)",
    kjacbeginreplay="SYS.DBMS_APP_CONT_PRVT.BEGIN_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjacclrfailpointpls="SYS.DBMS_TG_DBG.I_CLEAR_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjacendreplay="SYS.DBMS_APP_CONT_PRVT.END_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjacforceoutcomepls="SYS.DBMS_APP_CONT.INT_FORCE_OUTCOME(DBMS_APP_CONT_LIB)",
    kjacmonitortxn="SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjacsetfailpointpls="SYS.DBMS_TG_DBG.I_SET_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjacsetsessiondrainablepls="SYS.DBMS_TG_DBG.I_SET_SESSION_DRAINABLE(DBMS_TG_DBG_LIB)",
    kjb="kernel lock management global cache service",
    kjbcr="kernel lock management global cache service consistent read",
    kjbcrconvert="kernel lock management global cache service consistent read convert LE lock",
    kjbcropen="kernel lock management global cache service consistent read open LE lock",
    kjbfp="kernel lock management global cache service persistent cluster flash cache",
    kjbl="kernel lock management global cache service lock table",
    kjblcrcbk="kernel lock management global cache service lock table ??",
    kjblpcr="kernel lock management global cache service lock table ??",
    kjbmpbast="kernel lock management global cache service ??",
    kjbmpocr="kernel lock management global cache service master<-client (receive) process open convert request",
    kjbr="kernel lock management global cache service resource table",
    kjbrpread="kernel lock management global cache service resource table pred read request at master",
    kjbrref="(kjbr)ref - kernel lock management global cache service resource table ??",
    kjc="kernel lock management communication",
    kjci="kernel lock management communication cross instance call",
    kjcsrmg="kernel lock management communication ??",
    kjctr_pbmsg="kernel lock management communication process batch message",
    kjctr_rksxp="kernel lock management communication read message from KSXP service",
    kjctr_watq="kernel lock management communication read messages from wait queue",
    kjctrcv="kernel lock management communication receive messages",
    kjcts_dmpbmsg="kernel lock management communication dump batch message content",
    kjctsrmg="kernel lock management communication receive a vector of messages",
    kjcvcvd="kernel lock management communication deadlock detection routines",
    kjdd="kernel lock management deadlock detection",
    kjdr="kernel lock management dynamic remastering",
    kjdrbnftpoll="kernel lock management ??",
    kjfcln="kernel lock management ??",
    kjfcrfg="kernel lock management ??",
    kjfcshut="kernel lock management ??",
    kjfm="kernel lock management heartbeat monitoring",
    kjfz="kernel lock management DLM-client freeze/unfreeze",
    kjhn_get_alert_severity_plsql="kernel lock management DBMS_HA_ALERTS.GET_SEVERITY",
    kjhn_get_cardinality_plsql="kernel lock management DBMS_HA_ALERTS.GET_CARDINALITY",
    kjhn_get_db_domain_plsql="kernel lock management DBMS_HA_ALERTS.GET_DB_DOMAIN",
    kjhn_get_db_unique_name_plsql="kernel lock management DBMS_HA_ALERTS.GET_DB_UNIQUE_NAME",
    kjhn_get_event_time_plsql="kernel lock management DBMS_HA_ALERTS.GET_EVENT_TIME0",
    kjhn_get_host_plsql="kernel lock management DBMS_HA_ALERTS.GET_HOST",
    kjhn_get_incarnation_plsql="kernel lock management DBMS_HA_ALERTS.GET_INCARNATION",
    kjhn_get_instance_plsql="kernel lock management DBMS_HA_ALERTS.GET_INSTANCE",
    kjhn_get_reason_plsql="kernel lock management DBMS_HA_ALERTS.GET_REASON",
    kjhn_get_service_plsql="kernel lock management DBMS_HA_ALERTS.GET_SERVICE",
    kjhn_get_version_plsql="kernel lock management DBMS_HA_ALERTS.GET_VERSION",
    kjk="kernel lock management RAC kernel accelerator",
    kjl="kernel lock management lock",
    kjlrem="kernel lock management lock remove lock from all queues and free it",
    kjlrlr="kernel lock management lock remove lock from resource queue",
    kjlsod="kernel lock management lock state object delete",
    kjlt="kernel lock management lock table",
    kjm="kernel lock management RAC multiple LMS",
    kjmpmsg="kernel lock management RAC multiple LMS process the message",
    kjmpmsgi="kernel lock management RAC multiple LMS ??",
    kjmsm="kernel lock management RAC multiple LMS main action callback (LMS main loop)",
    kjmxmpm="kernel lock management RAC multiple LMS ??",
    kjoe="kernel lock management DLM omni enqueue service",
    kjpfr="kernel lock management process free",
    kjpsod="kernel lock management state object delete, disconnect from DLM",
    kjpt="kernel lock management processes",
    kjr="kernel lock management resource table",
    kjsc="kernel lock management RAC global stats",
    kjskcvl="kernel lock management main cache convert routine",
    kju="kernel lock management global enqueue service",
    kjual="kernel lock management global enqueue service allocate, connection to dlm",
    kjucv="kernel lock management global enqueue service asynchronous convert a lock",
    kjucvl="kernel lock management global enqueue service asynchronous convert a lock convert a lock",
    kjuscl="kernel lock management global enqueue service synchronous close a lock",
    kjuscv="kernel lock management global enqueue service synchronous convert a lock",
    kjusuc="kernel lock management global enqueue service synchronous open and convert a lock",
    kjuuc="kernel lock management global enqueue service asynchronous open and convert a lock",
    kjx="kernel lock management cross instance",
    kjxg="kernel lock management cross instance cluster group services",
    kjxgr="kernel lock management cross instance cluster group services instance membership recovery",
    kjz="kernel lock management DIAG",
    kjzc="kernel lock management DIAG communication layer",
    kjzd="kernel lock management DIAG main layer",
    kjzdattdlm="kernel lock management DIAG main layer attach to distributed lock manager",
    kjzdicrshnfy="kernel lock management DIAG main layer ??",
    kjzdpcrshnfy="kernel lock management DIAG main layer ??",
    kjzdssdmp="kernel lock management DIAG main layer ??",
    kjzduptcctx="kernel lock management DIAG main layer ??",
    kjzf="kernel lock management DIAG flow control layer",
    kjzg="kernel lock management DIAG group services layer",
    kjzh="kernel lock management DIAG API layer",
    kjzhgigblk="kernel lock management DIAG API layer ??",
    kjzhgigfreep="kernel lock management DIAG API layer ??",
    kjzm="kernel lock management DIAG membership layer",
    kjzn="kernel lock management DIAG node layer",
    kjznpsp="SYS.DBMS_HANG_MANAGER.SET_PARAM_INTERNAL(DBMS_HANG_MANAGER_LIB)",
    kk="kernel compile",
    kkae="kernel compile editions",
    kkae_reset_edition_always_icd="SYS.DBMS_SESSION.KKAE_RESET_EDITION_ALWAYS_ICD(C)",
    kkae_reset_edition_icd="SYS.DBMS_SESSION.KKAE_RESET_EDITION_IC(C)",
    kkae_set_edition_icd="SYS.DBMS_SESSION.KKAE_SET_EDITION_ICD(C)",
    kkaereseteditionalwaysicd="SYS.DBMS_SESSION.KKAE_RESET_EDITION_ALWAYS_ICD(C)",
    kkaereseteditionicd="SYS.DBMS_SESSION.KKAE_RESET_EDITION_IC(C)",
    kkaeseteditionicd="SYS.DBMS_SESSION.KKAE_SET_EDITION_ICD(C)",
    kkb="kernel compile table",
    kkbdgdl_dll_get_dml_lock="kernel compile table lock the user and Get the User Cache entry",
    kkbl="kernel compile table lob",
    kkbltrfr="kernel compile table lob ??",
    kkbltrseg="kernel compile table lob ??",
    kkbn="kernel compile table nested table",
    kkbndrp="kernel compile table nested table drop storage tables for nested table columns",
    kkbnftn="kernel compile table nested table format table for nested table",
    kkbo="kernel compile table object",
    kkbtrn="kernel compile table ??",
    kkcn="kernel compile streams/advanced queuing connection",
    kkcnRegApply="SYS.DBMS_AQ.REGOP_APPLY(DBMS_AQ_LIB)",
    kkcnrini="kernel compile streams advanaced queuing ??",
    kkcnRstatFind="kernel compile streams advanaced queuing ??",
    kkcnRstatIni="kernel compile streams advanaced queuing ??",
    kkcnsubl="kernel compile streams advanaced queuing ??",
    kkcnsubread="kernel compile streams advanaced queuing ??",
    kkcnsuctx="kernel compile streams/advanced queuing connection set user context",
    kkdc="kernel compile data check (constraints)",
    kkdcac="kernel compile data check (constraints) takes a table name as input and uses the obj# to get the constraint name for each constraint associated.",
    kkdcacr="kernel compile data check (constraints) takes a table name as input and uses the obj# to get the constraint name for each constraint associated. check and referential constrains",
    kkdcico="kernel compile data check (constraints) insert constraint definition",
    kkdl="kernel compile dictionary lookup",
    kkdlacd="kernel compile dictionary lookup get all column definitions",
    kkdlGetBaseUser="kernel compile dictionary lookup translate ownerid to a name",
    kkdlGetUserId="kernel compile dictionary lookup get user id",
    kkdlgun="kernel compile dictionary lookup get user name (translate ownerid to a name)",
    kkdliac="kernel compile dictionary lookup ??",
    kkdllk="kernel compile dictionary lookup lock an object",
    kkdo="kernel compile OBJECTS dictionary",
    kkdoloi="kernel compile OBJECTS dictionary load objects related information",
    kkdxUpdateColInfo="kernel compile ??",
    kke="kernel compile cost engine",
    kkeAdd="kernel compile cost engine add",
    kkeAdj="kernel compile cost engine adjust",
    kkeapr="kernel compile cost engine analyze predicates for optimization returns stat ptr",
    kkeasl="kernel compile cost engine process an AND chain of predicates",
    kkecdn="kernel compile cost engine determine cardinality of a table given single table predicates",
    kkecGetStatID="SYS.DBMS_STATS_INTERNAL.GET_CALIB_OPID_CALLOUT(DBMS_STATS_LIB)",
    kkecpst="kernel compile cost engine create copy of column statistics in compile time memory",
    kkecResetValue="SYS.DBMS_STATS_INTERNAL.DELETE_PROC_RATE_CALLOUT(DBMS_STATS_LIB)",
    kkecSetValue="SYS.DBMS_STATS_INTERNAL.SET_PROCESSING_RATE_CALLOUT(DBMS_STATS_LIB)",
    kkeds="kernel compile cost engine dynamic sampling (ADS)",
    kkegvl="kernel compile cost engine get a value from an opndef and normalize it for cost",
    kkehrd="kernel compile cost engine get column statistics for a table",
    kkeIdx="kernel compile cost engine index",
    kkejcd="kernel compile cost engine returns cardinality of a join between to tables",
    kkeosl="kernel compile cost engine process an OR chain of predicates",
    kkepsl="kernel compile cost engine selectivity of a single predicate",
    kkercs="kernel compile cost engine read column statistics for an object",
    kkesCreateCache="kernel compile cost engine create cache for statistics",
    kkesIOScaleFactor="kernel compile cost engine calculate the factor for converting the number of blocks to IO cost",
    kkeSort="kernel compile cost engine sorting",
    kkeSortCosts="kernel compile cost engine sorting calculate sort (IO) cost",
    kkeSortCPUCost="kernel compile cost engine sorting calculate sort CPU cost",
    kkesScaleIO="kernel compile cost engine calculate IO cost based on the number of blocks",
    kkest="kernel compile cost engine statistics",
    kketac="kernel compile cost engine table access cost(?)",
    kkeTbScan="kernel compile cost engine table scan",
    kkeTbScanCPUCost="kernel compile cost engine table scan calculate cost of CPU",
    kkeTbScanImc="kernel compile cost engine table scan in-memory column store",
    kkeTbScanImcCPUCost="kernel compile cost engine table scan in-memory column store calculate cost of CPU",
    kkeTbScanImcIOCost="kernel compile cost engine table scan in-memory column store calculate cost of IO",
    kkeTbScanIOCost="kernel compile cost engine table scan calculate cost of IO",
    kkevcs="kernel compile cost engine set view column stats for underlying column",
    kkevp="kernel compile cost engine vector processing",
    kkfd="kernel compile fast dataflow (PQ DFO)",
    kkfi="kernel compile optimizer virtual column/indexes",
    kkfr="kernel compile fast rowid (PQ)",
    kkhf="kernel compile hash join file and memory management",
    kkhr="kernel compile hash join row management",
    kkj="kernel compile job queue",
    kkjbgd="SYS.DBMS_JOB.KKJBGD(C)",
    kkjdva="SYS.DBMS_IJOB.KKJDVA(C)",
    kkjenv="SYS.DBMS_JOB.KKJENV(C)",
    kkjexi="SYS.DBMS_IJOB.KKJEXI(C)",
    kkjges="SYS.DBMS_IJOB.KKJGES(C)",
    kkjp="kernel compile job queue package",
    kkjpru="SYS.DBMS_IJOB.KKJPRU(C)",
    kkjses="SYS.DBMS_IJOB.KKJSES(C)",
    kkjspc="SYS.DBMS_IJOB.KKJSPC(C)",
    kkkibgnsqlblk="SYS.DBMS_RMIN.RM$_BGN_SQLBLK(DBMS_RMGR_LIB)",
    kkkicalibrateio="SYS.DBMS_RMIN_SYS.RM$_CALIBRATE_IO(DBMS_RMGR_LIB)",
    kkkicancelsql="SYS.DBMS_SESSION.KKKICANCELSQL(C)",
    kkkickcmp="SYS.DBMS_PRVTRMIE.CHECK_COMPATIBILITY(DBMS_RMGR_LIB)",
    kkkiclrparea="SYS.DBMS_RMIN_SYS.RM$_CLRPAREA(DBMS_RMGR_LIB)",
    kkkicrtcategory="SYS.DBMS_RMIN.RM$_CUP_CATEGORY(DBMS_RMGR_LIB)",
    kkkicrtgroup="SYS.DBMS_RMIN.RM$_CUP_GROUP(DBMS_RMGR_LIB)",
    kkkicrtparea="SYS.DBMS_RMIN_SYS.RM$_CRTPAREA(DBMS_RMGR_LIB)",
    kkkicrtpd="SYS.DBMS_RMIN.RM$_CUP_PLAN_DIRECTIVE(DBMS_RMGR_LIB)",
    kkkicrtplan="SYS.DBMS_RMIN.RM$_CUP_PLAN(DBMS_RMGR_LIB)",
    kkkicrtspmap="SYS.DBMS_RMIN.RM$_CUP_STORAGE_POOL_MAPPING(DBMS_RMGR_LIB)",
    kkkidrpcategory="SYS.DBMS_RMIN.RM$_DRP_CATEGORY(DBMS_RMGR_LIB)",
    kkkidrpgroup="SYS.DBMS_RMIN.RM$_DRP_GROUP(DBMS_RMGR_LIB)",
    kkkidrppd="SYS.DBMS_RMIN.RM$_DRP_PLAN_DIRECTIVE(DBMS_RMGR_LIB)",
    kkkidrpplan="SYS.DBMS_RMIN.RM$_DRP_PLAN(DBMS_RMGR_LIB)",
    kkkidrpplancsd="SYS.DBMS_RMIN.RM$_DRP_PLAN_CSD(DBMS_RMGR_LIB)",
    kkkiendsqlblk="SYS.DBMS_RMIN.RM$_END_SQLBLK(DBMS_RMGR_LIB)",
    kkkiget_pdb_enabled="SYS.DBMS_RMIN_SYS.RM$_GET_PDB_ENABLED(DBMS_RMGR_LIB)",
    kkkiget_root_pdb="SYS.DBMS_RMIN_SYS.RM$_GET_ROOT_PDB(DBMS_RMGR_LIB)",
    kkkigetpdbenabled="SYS.DBMS_RMIN_SYS.RM$_GET_PDB_ENABLED(DBMS_RMGR_LIB)",
    kkkigetrootpdb="SYS.DBMS_RMIN_SYS.RM$_GET_ROOT_PDB(DBMS_RMGR_LIB)",
    kkkimappriority="SYS.DBMS_RMIN.RM$_CONSUMER_GROUP_MAPPING_PRI(DBMS_RMGR_LIB)",
    kkkiprpriv="SYS.DBMS_RMIN.RM$_PROCESS_PRIV(DBMS_RMGR_LIB)",
    kkkirunqdpstmt="SYS.DBMS_RMIN.RM$_RUN_QUEUED_PARALLEL_STMT(DBMS_RMGR_LIB)",
    kkkisetcap="SYS.DBMS_RMIN.RM$_SET_CAPABILITY(DBMS_RMGR_LIB)",
    kkkisetgrpmap="SYS.DBMS_RMIN.RM$_SET_CONSUMER_GROUP_MAPPING(DBMS_RMGR_LIB)",
    kkkiseticap="SYS.DBMS_RMIN.RM$_SET_INSTANCE_CAPABILITY(DBMS_RMGR_LIB)",
    kkkisetinigrp="SYS.DBMS_RMIN.RM$_SET_INITIAL_GROUP_INT(DBMS_RMGR_LIB)",
    kkkisetmand="SYS.DBMS_RMIN.RM$_SET_MANDATORY(DBMS_RMGR_LIB)",
    kkkisubparea="SYS.DBMS_RMIN_SYS.RM$_SUBPAREA_EXT(DBMS_RMGR_LIB)",
    kkkiswtchgrpssn="SYS.DBMS_RMIN_SYS.RM$_SWTCH_SESSION_GROUP_INT(DBMS_RMGR_LIB)",
    kkkiswtchgrpusr="SYS.DBMS_RMIN_SYS.RM$_SWTCH_USR_GROUP_INT(DBMS_RMGR_LIB)",
    kkkiswtchinvgrp="SYS.DBMS_SESSION.KKKISWTCHINVGRP(C)",
    kkkiupgrpmap="SYS.DBMS_RMIN.RM$_UP_CONSUMER_GROUP_MAPPINGS(DBMS_RMGR_LIB)",
    kkkiverify_parea_act="SYS.DBMS_RMIN_SYS.RM$_VERIFY_PENDING_AREA_ACT(DBMS_RMGR_LIB)",
    kkkiverify_parse_id="SYS.DBMS_RMIN_SYS.RM$_VERIFY_ID_PARSES(DBMS_RMGR_LIB)",
    kkkiverify_privileges="SYS.DBMS_RMIN.RM$_VERIFY_PRIVILEGES(DBMS_RMGR_LIB)",
    kkkiverify_rm_feature="SYS.DBMS_RMIN_SYS.RM$_VERIFY_RM_FEATURE(DBMS_RMGR_LIB)",
    kkkiverify_root_pdb="kernel compile DBMS_RMIN_SYS.RM$_IS_ROOT_PDB",
    kkkiverify_str_in="kernel compile DBMS_RMIN_SYS.RM$_VERIFY_STR_IND_INT",
    kkkiverify_str_ind="SYS.DBMS_RMIN_SYS.RM$_VERIFY_STR_IND_INT(DBMS_RMGR_LIB)",
    kkkiverifypareaact="SYS.DBMS_RMIN_SYS.RM$_VERIFY_PENDING_AREA_ACT(DBMS_RMGR_LIB)",
    kkkiverifyparseid="SYS.DBMS_RMIN_SYS.RM$_VERIFY_ID_PARSES(DBMS_RMGR_LIB)",
    kkkiverifyprivileges="SYS.DBMS_RMIN.RM$_VERIFY_PRIVILEGES(DBMS_RMGR_LIB)",
    kkkiverifyrmfeature="SYS.DBMS_RMIN_SYS.RM$_VERIFY_RM_FEATURE(DBMS_RMGR_LIB)",
    kkkiverifystrind="SYS.DBMS_RMIN_SYS.RM$_VERIFY_STR_IND_INT(DBMS_RMGR_LIB)",
    kkkivldparea="SYS.DBMS_RMIN_SYS.RM$_VLDPAREA_EXT(DBMS_RMGR_LIB)",
    kkm="kernel compile SQL semantic analysis",
    kkmdel="kernel compile SQL semantic analysis extra semantic processes for deletes",
    kkmdrv="kernel compile SQL semantic analysis driver",
    kkmdrvend="kernel compile SQL semantic analysis ??",
    kkmevw="kernel compile SQL semantic analysis expand view",
    kkmpfcbk="kernel compile SQL semantic analysis process frodef callback",
    kkmpost="kernel compile SQL semantic analysis post processing",
    kkmqccr="kernel compile SQL semantic analysis query compile (memory) creation?",
    kkmupd="kernel compile SQL semantic analysis extra semantic processing for update",
    kkn="kernel compile analyze",
    kkndgd="kernel compile analyze command Analyze Data Gathering Driver",
    kkndrv="kernel compile analyze command Analyze Driver",
    kknls="kernel compile analyze command Analyze Locks/Security",
    kknpat="kernel compile analyze command partition analyze table",
    kknpob="kernel compile analyze command partition object",
    kko="kernel compile optimizer",
    kkoaccsqf="kernel compile optimizer adjust cardinality and cost for subquery filters",
    kkoads="kernel compile optimizer active dynamic sampling (ADS)",
    kkoadsComputeSqlid="kernel compile optimizer active dynamic sampling (ADS) compute sqlid",
    kkoar="kernel compile optimizer automatic (sql) reoptimisation",
    kkoasj="kernel compile optimizer add semi-join function",
    kkoat="kernel compile optimizer auto tuning optimizer",
    kkobmp="kernel compile optimizer bitmap processing",
    kkocfb="kernel compile optimizer cardinality feedback",
    kkocnp="kernel compile optimizer cost next permutation",
    kkocpjoinqb="kernel compile optimizer copy and join query block",
    kkocpqb="kernel compile optimizer copy query block: copy a query block by reparsing its SQL text",
    kkocri="kernel compile optimizer create index",
    kkocs="kernel compile optimizer cursor sharing",
    kkoctx="kernel compile optimizer setup context for optimizer",
    kkodp="kernel compile optimizer AQP",
    kkoecp="kernel compile optimizer evaluate constant predicate",
    kkogfp="kernel compile optimizer get first permutation",
    kkoiqb="kernel compile optimizer initialise query block",
    kkojnp="kernel compile optimizer join order path",
    kkooqb="kernel compile optimizer optimize query block",
    kkoOrExpand="kernel compile optimizer or expansion",
    kkopm="kernel compile optimizer plan management",
    kkopmCheckSmbUpdate="kernel compile optimizer plan management Check if updates to the Sql Management Base are pending",
    kkopq="kernel compile optimizer parallel optimization",
    kkopqAllocPQCtx="kernel compile optimizer parallel optimization allocate PQ context",
    kkopqInitDopComputation="kernel compile optimizer parallel optimization initialise DOP computation",
    kkopqIsDegreePolicyManual="kernel compile optimizer parallel optimization is degree policy manual",
    kkopqIsDopComputedOrParallelHinted="kernel compile optimizer parallel optimization is DOP computed or parallel hinted",
    kkoqbc="kernel compile optimizer query block optimization start point",
    kkosbn="kernel compile optimizer sort bitmap nodes",
    kkoshd="kernel compile optimizer shard sql",
    kkostran="kernel compile optimizer star transformation",
    kkotap="kernel compile optimizer table access path",
    kkotsc="kernel compile optimizer tablescan cost",
    kkp="kernel compile compilation",
    kkpa="kernel compile compilation partitioning",
    kkpamFRange="kernel compile compilation partitioning ??",
    kkpamRefGet="kernel compile compilation partitioning ??",
    kkpapbGetRange="kernel compile compilation partitioning ??",
    kkpapGRangeSLvl="kernel compile compilation partitioning ??",
    kkpapiItOpen="kernel compile compilation partitioning ??",
    kkpapItOpen="kernel compile compilation partitioning ??",
    kkpcrt="kernel compile compilation create",
    kkpo="kernel compile compilation partitioned objects",
    kkpod="kernel compile compilation partitioned objects partitioning dictionary",
    kkq="kernel compile query",
    kkqanj="kernel compile query ansi join",
    kkqbj="kernel compile query bushy join",
    kkqbjdrv="kernel compile query bushy join driver",
    kkqcby="kernel compile query connect by",
    kkqcls="kernel compile query subquery coalescing",
    kkqcs="kernel compile query cost based query transformation",
    kkqct="kernel compile query cost based query transformation",
    kkqctCostTransfQB="kernel compile query cost based query transformation transfer query block cost (?)",
    kkqctdrv="kernel compile query cost based query transformation driver",
    kkqctdrvBJ="kernel compile query cost based query transformation driver bushy join",
    kkqctdrvCVM="kernel compile query cost based query transformation driver complex view merging",
    kkqctdrvDP="kernel compile query cost based query transformation driver distinct placement",
    kkqctdrvGBP="kernel compile query cost based query transformation driver group by placement",
    kkqctdrvIT="kernel compile query cost based query transformation driver initiate cost-based transformation",
    kkqctdrvJF="kernel compile query cost based query transformation driver join filter",
    kkqctdrvJPPD="kernel compile query cost based query transformation driver Join Predicate Push Down",
    kkqctdrvORE="kernel compile query cost based query transformation driver or-expansion",
    kkqctdrvPU="kernel compile query cost based query transformation driver PU",
    kkqctdrvST="kernel compile query cost based query transformation driver star transformation",
    kkqctdrvSU="kernel compile query cost based query transformation driver subquery unnesting",
    kkqctdrvTD="kernel compile query cost based query transformation driver transformation directives",
    kkqctdrvTE="kernel compile query cost based query transformation driver table expansion",
    kkqctdrvVM="kernel compile query cost based query transformation driver view merging",
    kkqctdrvVT="kernel compile query cost based query transformation driver vector transformation",
    kkqctInterleave="kernel compile query cost based query transformation interleave",
    kkqctInterleaveCVM="kernel compile query cost based query transformation interleave complex view merging",
    kkqctInterleaveDP="kernel compile query cost based query transformation interleave distinct placement",
    kkqctInterleaveJF="kernel compile query cost based query transformation interleave join filter",
    kkqctInterleaveJPPD="kernel compile query cost based query transformation interleave join predicate pushdown",
    kkqctInterleaveLargeQry="kernel compile query cost based query transformation interleave large query",
    kkqctInterleaveORE="kernel compile query cost based query transformation interleave or-expansion",
    kkqctInterleaveSTJF="kernel compile query cost based query transformation interleave STJF",
    kkqctnojppd="kernel compile query cost based query transformation no join predicate pushdown (?)",
    kkqctNxtLinearStt="kernel compile query cost based query transformation next linear state",
    kkqcttcalo="kernel compile query cost based query transformation type check allocate",
    kkqctUpdBestCostStt="kernel compile query cost based query transformation pick the most efficient query transformation state",
    kkqdrv="kernel compile query transformation driver",
    kkqgb="kernel compile query group by",
    kkqgbp="kernel compile query group by placement",
    kkqgbpCheckPred="kernel compile query group by placement check validity of predicate",
    kkqgbpCheckValidity="kernel compile query group by placement check basic validity",
    kkqgbpColHasHighNDV="kernel compile query group by placement Column has high NDV",
    kkqgbpdrv="kernel compile query group by placement driver",
    kkqgbpTravChkTran="kernel compile query group by placement traverse, check and transform",
    kkqj="kernel compile query join analysis",
    kkqjf="kernel compile query join analysis join factorization",
    kkqjfChkBasicValidity="kernel compile query join analysis join factorization check basic validity",
    kkqjfdrv="kernel compile query join analysis join factorization driver",
    kkqjpd="kernel compile query join analysis predicate push down",
    kkqjpdctr="kernel compile query join analysis predicate push down traverse and transform",
    kkqjpddrv="kernel compile query join analysis predicate push down driver",
    kkqoj="kernel compile query outer join",
    kkqojeanl="kernel compile query outer join expression analyze",
    kkqolap="kernel compile query olap",
    kkqolapdrv="kernel compile query olap driver",
    kkqore="kernel compile query or-expansion",
    kkqoredrv="kernel compile query or-expansion driver",
    kkqstar="kernel compile query star transformation",
    kkqstarChkValidity="kernel compile query star transformation check validity",
    kkqstardrv="kernel compile query star transformation driver",
    kkqt="kernel compile query table",
    kkqtcplog="kernel compile query table copy log chain (query tools)",
    kkqte="kernel compile query table expansion",
    kkqteCheckValidity="kernel compile query table expansion check validity",
    kkqtedrv="kernel compile query table expansion driver",
    kkqtedtr="kernel compile query ??",
    kkqteGeneratePreds="kernel compile query ??",
    kkqteParseSqlForPG="kernel compile query ??",
    kkqteTransform="kernel compile query ??",
    kkqu="kernel compile query subquery unnesting",
    kkqvm="kernel compile query view merging",
    kkqvmdrv="kernel compile query view merging driver",
    kkqvt="kernel compile query vector transformation",
    kkqvtCheckGeneralValidity="kernel compile query vector transformation check general validity",
    kkqvtdrv="kernel compile query vector transformation driver",
    kkr="kernel compile rowsource",
    kkrba="kernel compile rowsource bitmap index and",
    kkrbc="kernel compile rowsource bitmap index compaction",
    kkrbi="kernel compile rowsource bitmap index creation",
    kkrbo="kernel compile rowsource bitmap index or",
    kkrbt="kernel compile rowsource bob dylan convertor",
    kkrbu="kernel compile rowsource unlimited or",
    kkrbx="kernel compile rowsource index access",
    kkrh="kernel compile rowsource hash",
    kkri="kernel compile rowsource parallel index create",
    kkrp="kernel compile rowsource parallelizer (DFO)",
    kkrpfch="kernel compile rowsource parallelizer (DFO) fetch from rowsource",
    kkrt="kernel compile rowsource rowsource table create as select",
    kks="kernel compile shared objects (cursor)",
    kksalc="kernel compile shared objects (cursor) allocate compile time memory",
    kksald="kernel compile shared objects (cursor) auxiliary load function",
    kksalx="kernel compile shared objects (cursor) allocate bytes from the execution time heap",
    kksarm="kernel compile shared objects (cursor) authorize for remote",
    kksauc="kernel compile shared objects (cursor) authorized to use this child?",
    kksaxs="kernel compile shared objects (cursor) semantic analysis, authorize and audit",
    kksCheckForTrace="kernel compile shared objects (cursor) check for trace (not sure which; 10046?)",
    kkscls="kernel compile shared objects (cursor) close cursor, user is done with it",
    kkscs="kernel compile shared objects (cursor) child cursor",
    kkscsCheckCriteria="kernel compile shared objects (cursor) child cursor check cursor criteria",
    kkscsCheckCursor="kernel compile shared objects (cursor) child cursor check if child cursor can be used",
    kkscscid="kernel compile shared objects (cursor) child cursor criteria identification",
    kkscscid_AdgRedirect="kernel compile shared objects (cursor) child cursor criteria identification active dataguard redirect",
    kkscscid_auc="kernel compile shared objects (cursor) child cursor criteria identification authorized to use this child",
    kkscscid_containers="kernel compile shared objects (cursor) child cursor criteria identification PDB(?)",
    kkscscid_pddl="kernel compile shared objects (cursor) child cursor criteria identification parallel ddl(?)",
    kkscscid_pdm="kernel compile shared objects (cursor) child cursor criteria identification parallel dml(?)",
    kkscsSearchChildList="kernel compile shared objects (cursor) child cursor ??",
    kksdopt="kernel compile shared objects (cursor) smart disk no option",
    kksfbc="kernel compile shared objects (cursor) find bound cursor",
    kksffr="kernel compile shared objects (cursor) free a frame",
    kksfft="kernel compile shared objects (cursor) find first token",
    kksFreeHeap="kernel compile shared objects (cursor) ??",
    kksFullTypeCheck="kernel compile shared objects (cursor) full type check (performs semantic and authorization checks, cost based optimization)",
    kksh="kernel compile shared objects (cursor) cursor hash table",
    kksheqd="kernel compile shared objects (cursor) cursor hash table clean/delete and enqueue",
    kkshh="kernel compile shared objects (cursor) cursor hash table ?",
    kkshhcdel="kernel compile shared objects (cursor) cursor hash table ? child delete",
    kkshhcins="kernel compile shared objects (cursor) cursor hash table ? child insert",
    kkshin="kernel compile shared objects (cursor) cursor hash table incomplete list",
    kkshindel="kernel compile shared objects (cursor) cursor hash table incomplete list remove child",
    kkshinins="kernel compile shared objects (cursor) cursor hash table incomplete list insert child",
    kkshmih="kernel compile shared objects (cursor) cursor hash table ??",
    kkslcr="kernel compile shared objects (cursor) ??",
    kkslhsh="kernel compile shared objects (cursor) ??",
    kksLoadChild="kernel compile shared objects (cursor) load child",
    kksLockDelete="kernel compile shared objects (cursor) ??",
    kksLockOperation="kernel compile shared objects (cursor) ??",
    kkslod="kernel compile shared objects (cursor) cursor load callback",
    kkslof="kernel compile shared objects (cursor) log off (?)",
    kkslrev="kernel compile shared objects (cursor) reverse system generated bind variable to litaral",
    kkslrpl="kernel compile shared objects (cursor) replace literals in SQL statement (cursor_sharing=force)",
    kkslsp="kernel compile shared objects (cursor) ??",
    kksMapCursor="kernel compile shared objects (cursor) map cursor",
    kksmcAlFree="kernel compile shared objects (cursor) conditially segmented array allocate.",
    kksParseChildCursor="kernel compile shared objects (cursor) parse child cursor",
    kksParseCursor="kernel compile shared objects (cursor) parse cursor",
    kkspfda="kernel compile shared objects (cursor) multiple context area management",
    kksPopCompileCall="kernel compile shared objects (cursor) end compilation call",
    kkspsc0="kernel compile shared objects (cursor) parse shared cursor",
    kksReplaceLiterals="kernel compile shared objects (cursor) replace literals in SQL statement (cursor_sharing=force)",
    kkssbt="kernel compile shared objects (cursor) set bind types",
    kksscl="kernel compile shared objects (cursor) scan child list",
    kksSetBindType="kernel compile shared objects (cursor) ??",
    kkstpld="kernel compile shared objects (cursor) this functions returns a text pointer to a contiguous string (sqltext?)",
    kksumc="kernel compile shared objects (cursor) unmap shared cursor",
    kksvld="kernel compile shared objects (cursor) validate cursor",
    kksx="kernel compile shared objects (cursor) execute(?)",
    kksxCreate="SYS.DBMS_SQL_TRANSLATOR.CREATE_PROFILE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxDeregErrorTrans="SYS.DBMS_SQL_TRANSLATOR.DEREGISTER_ERROR_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxDeregSQLTrans="SYS.DBMS_SQL_TRANSLATOR.DEREGISTER_SQL_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxDrop="SYS.DBMS_SQL_TRANSLATOR.DROP_PROFILE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxEnableErrorTrans="SYS.DBMS_SQL_TRANSLATOR.ENABLE_ERROR_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxEnableSQLTrans="SYS.DBMS_SQL_TRANSLATOR.ENABLE_SQL_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxRegErrorTrans="SYS.DBMS_SQL_TRANSLATOR.REGISTER_ERROR_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxRegSQLTrans="SYS.DBMS_SQL_TRANSLATOR.REGISTER_SQL_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxResolve="SYS.DBMS_SQL_TRANSLATOR.RESOLVE_PROFILE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsccmp="kernel compile shared objects (cursor) execute(?) shared cursor criteria compare(?)",
    kksxSetAttribute="SYS.DBMS_SQL_TRANSLATOR.SET_ATTRIBUTE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSetDictSQLID="SYS.DBMS_SQL_TRANSLATOR.SET_DICTIONARY_SQL_ID(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSetErrorTransCmt="SYS.DBMS_SQL_TRANSLATOR.SET_ERROR_TRANSLATION_COMMENT(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSetSQLTransCmt="SYS.DBMS_SQL_TRANSLATOR.SET_SQL_TRANSLATION_COMMENT(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSetSQLTransError="SYS.DBMS_SQL_TRANSLATOR.SET_SQL_TRANSLATION_ERROR(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSetSQLTransMod="SYS.DBMS_SQL_TRANSLATOR.SET_SQL_TRANSLATION_MODULE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSQLHash="SYS.DBMS_SQL_TRANSLATOR.SQL_HASH(DBMS_SQL_TRANSLATOR_LIB)",
    kksxSQLID="SYS.DBMS_SQL_TRANSLATOR.SQL_ID(DBMS_SQL_TRANSLATOR_LIB)",
    kksxTranslateError="SYS.DBMS_SQL_TRANSLATOR.TRANSLATE_ERROR(DBMS_SQL_TRANSLATOR_LIB)",
    kksxTranslateSQL="SYS.DBMS_SQL_TRANSLATOR.TRANSLATE_SQL(DBMS_SQL_TRANSLATOR_LIB)",
    kkt="kernel compile triggers",
    kktalt="kernel compile triggers alter trigger",
    kktf="kernel compile triggers polymorphic table functions",
    kktf_icd_env_get="SYS.DBMS_TF.KKTF_ICD_ENV_GET(C)",
    kktf_icd_env_proj="SYS.DBMS_TF.KKTF_ICD_ENV_PROJ(C)",
    kktf_icd_env_put="SYS.DBMS_TF.KKTF_ICD_ENV_PUT(C)",
    kktf_icd_env_px="SYS.DBMS_TF.KKTF_ICD_ENV_PX(C)",
    kktf_icd_env_rcnt="SYS.DBMS_TF.KKTF_ICD_ENV_RCNT(C)",
    kktf_icd_env_samp="SYS.DBMS_TF.KKTF_ICD_ENV_SAMP(C)",
    kktf_icd_getptf_id="SYS.DBMS_TF.KKTF_ICD_GETPTF_ID(C)",
    kktf_icd_rr_fix="SYS.DBMS_TF.KKTF_ICD_RR_FIX(C)",
    kktf_icd_rr_var="SYS.DBMS_TF.KKTF_ICD_RR_VAR(C)",
    kktfcstore_exists="SYS.DBMS_TF.KKTFCSTORE_EXISTS(C)",
    kktfcstoreexists="SYS.DBMS_TF.KKTFCSTORE_EXISTS(C)",
    kktficdcstoreallbol="SYS.DBMS_TF.KKTFICDCSTOREALLBOL(C)",
    kktficdcstoreallchr="SYS.DBMS_TF.KKTFICDCSTOREALLCHR(C)",
    kktficdcstorealldat="SYS.DBMS_TF.KKTFICDCSTOREALLDAT(C)",
    kktficdcstoreallnum="SYS.DBMS_TF.KKTFICDCSTOREALLNUM(C)",
    kktfICDCStoreExists="kernel compile triggers polymorphic table functions DBMS_TF.KKTFCSTORE_EXISTS CSTORE_EXISTS",
    kktficdcstoregetbol="SYS.DBMS_TF.KKTFICDCSTOREGETBOL(C)",
    kktfICDCStoreGetChar="kernel compile triggers polymorphic table functions DBMS_TF.KKTFICDCSTOREGETVC2 CSTORE_GET",
    kktficdcstoregetdat="SYS.DBMS_TF.KKTFICDCSTOREGETDAT(C)",
    kktficdcstoregetnum="SYS.DBMS_TF.KKTFICDCSTOREGETNUM(C)",
    kktficdcstoregetvc2="SYS.DBMS_TF.KKTFICDCSTOREGETVC2(C)",
    kktficdenvget="SYS.DBMS_TF.KKTF_ICD_ENV_GET(C)",
    kktficdenvproj="SYS.DBMS_TF.KKTF_ICD_ENV_PROJ(C)",
    kktficdenvput="SYS.DBMS_TF.KKTF_ICD_ENV_PUT(C)",
    kktficdenvpx="SYS.DBMS_TF.KKTF_ICD_ENV_PX(C)",
    kktficdenvrcnt="SYS.DBMS_TF.KKTF_ICD_ENV_RCNT(C)",
    kktficdenvsamp="SYS.DBMS_TF.KKTF_ICD_ENV_SAMP(C)",
    kktficdgetptfid="SYS.DBMS_TF.KKTF_ICD_GETPTF_ID(C)",
    kktficdrrfix="SYS.DBMS_TF.KKTF_ICD_RR_FIX(C)",
    kktficdrrvar="SYS.DBMS_TF.KKTF_ICD_RR_VAR(C)",
    kktfICDXStoreClear="kernel compile triggers polymorphic table functions DBMS_TF.KKTFXSTORE_CLEAR XSTORE_CLEAR",
    kktfICDXStoreExists="kernel compile triggers polymorphic table functions DBMS_TF.KKTFXSTORE_EXISTS XSTORE_EXISTS",
    kktficdxstoregetbol="SYS.DBMS_TF.KKTFICDXSTOREGETBOL(C)",
    kktfICDXStoreGetChar="kernel compile triggers polymorphic table functions DBMS_TF.KKTFICDXSTOREGETVC2 XSTORE_GET",
    kktficdxstoregetdat="SYS.DBMS_TF.KKTFICDXSTOREGETDAT(C)",
    kktficdxstoregetnum="SYS.DBMS_TF.KKTFICDXSTOREGETNUM(C)",
    kktficdxstoregetvc2="SYS.DBMS_TF.KKTFICDXSTOREGETVC2(C)",
    kktfICDXStoreRemove="kernel compile triggers polymorphic table functions DBMS_TF.KKTFXSTORE_REMOVE XSTORE_REMOVE",
    kktficdxstoresetbol="SYS.DBMS_TF.KKTFICDXSTORESETBOL(C)",
    kktfICDXStoreSetChar="kernel compile triggers polymorphic table functions DBMS_TF.KKTFICDXSTORESETVC2 XSTORE_SET",
    kktficdxstoresetdat="SYS.DBMS_TF.KKTFICDXSTORESETDAT(C)",
    kktficdxstoresetnum="SYS.DBMS_TF.KKTFICDXSTORESETNUM(C)",
    kktficdxstoresetvc2="SYS.DBMS_TF.KKTFICDXSTORESETVC2(C)",
    kktfxstore_clear="SYS.DBMS_TF.KKTFXSTORE_CLEA(C)",
    kktfxstore_exists="SYS.DBMS_TF.KKTFXSTORE_EXISTS(C)",
    kktfxstore_remove="SYS.DBMS_TF.KKTFXSTORE_REMOVE(C)",
    kktfxstoreclear="SYS.DBMS_TF.KKTFXSTORE_CLEA(C)",
    kktfxstoreexists="SYS.DBMS_TF.KKTFXSTORE_EXISTS(C)",
    kktfxstoreremove="SYS.DBMS_TF.KKTFXSTORE_REMOVE(C)",
    kktget="kernel compile triggers ??",
    kktiddlt="SYS.DBMS_DDL_INTERNAL.IS_DDL_TRIGGER(DBMS_TRIGGER_LIB)",
    kkx="kernel compile execute",
    kkxa="kernel compile execute external/asynch RPC(DBMS_DEFER_QUERY_UTL)",
    kkxacar="SYS.DBMS_DEFER_QUERY_UTL.KKXACAR(C)",
    kkxacst="SYS.DBMS_DEFER_QUERY_UTL.KKXACST(C)",
    kkxactl="SYS.DBMS_DEFER_QUERY_UTL.KKXACTL(C)",
    kkxadtl="SYS.DBMS_DEFER_QUERY_UTL.KKXADTL(C)",
    kkxagac="SYS.DBMS_DEFER_QUERY_UTL.KKXAGAC(C)",
    kkxagad="SYS.DBMS_DEFER_QUERY_UTL.GET_ANYDATA_ARG(DBMS_DEFER_QUERY_UTL_LIB)",
    kkxagaf="SYS.DBMS_DEFER_QUERY_UTL.KKXAGAF(C)",
    kkxagat="SYS.DBMS_DEFER_QUERY_UTL.KKXAGAT(C)",
    kkxagbl="SYS.DBMS_DEFER_QUERY_UTL.KKXAGBL(C)",
    kkxagca="SYS.DBMS_DEFER_QUERY_UTL.KKXAGCA(C)",
    kkxagcl="SYS.DBMS_DEFER_QUERY_UTL.KKXAGCL(C)",
    kkxagda="SYS.DBMS_DEFER_QUERY_UTL.KKXAGDA(C)",
    kkxagids="SYS.DBMS_DEFER_QUERY_UTL.KKXAGIDS(C)",
    kkxagiym="SYS.DBMS_DEFER_QUERY_UTL.KKXAGIYM(C)",
    kkxagna="SYS.DBMS_DEFER_QUERY_UTL.KKXAGNA(C)",
    kkxagnc="SYS.DBMS_DEFER_QUERY_UTL.KKXAGNC(C)",
    kkxagnl="SYS.DBMS_DEFER_QUERY_UTL.KKXAGNL(C)",
    kkxagnv="SYS.DBMS_DEFER_QUERY_UTL.KKXAGNV(C)",
    kkxagonv="SYS.DBMS_DEFER_QUERY_UTL.KKXAGONV(C)",
    kkxagrd="SYS.DBMS_DEFER_QUERY_UTL.KKXAGRD(C)",
    kkxagrw="SYS.DBMS_DEFER_QUERY_UTL.KKXAGRW(C)",
    kkxagtm="SYS.DBMS_DEFER_QUERY_UTL.KKXAGTM(C)",
    kkxagts="SYS.DBMS_DEFER_QUERY_UTL.KKXAGTS(C)",
    kkxagtsltz="SYS.DBMS_DEFER_QUERY_UTL.KKXAGTSLTZ(C)",
    kkxagtstz="SYS.DBMS_DEFER_QUERY_UTL.KKXAGTSTZ(C)",
    kkxagttz="SYS.DBMS_DEFER_QUERY_UTL.KKXAGTTZ(C)",
    kkxagva="SYS.DBMS_DEFER_QUERY_UTL.KKXAGVA(C)",
    kkxasd="SYS.DBMS_DEFER_QUERY_UTL.SET_DISABLED(DBMS_DEFER_QUERY_UTL_LIB)",
    kkxb="kernel compile execute external tables",
    kkxccg1="SYS.DBMS_PREPROCESSOR.KKXCCG1(C)",
    kkxccg2="SYS.DBMS_PREPROCESSOR.KKXCCG2(C)",
    kkxccg3="SYS.DBMS_PREPROCESSOR.KKXCCG3(C)",
    kkxcg1="kernel compile execute DBMS_PREPROCESSOR.KKXCG1 GET_PP_SOURCE_LINES",
    kkxcg2="kernel compile execute DBMS_PREPROCESSOR.KKXCG2 GET_PP_SOURCE_LINES",
    kkxcg3="kernel compile execute DBMS_PREPROCESSOR.KKXCG3 GET_PP_SOURCE_LINES",
    kkxcls="kernel compile execute close cursor",
    kkxcmp="kernel compile execute compile (all compilation phases)",
    kkxerae="SYS.DBMS_OUTPUT.KKXERAE(C)/SYS.DBMS_RCVMAN.KKXERAE(C)",
    kkxere0="SYS.DBMS_SYS_ERROR.KKXERE0(C)",
    kkxere1="SYS.DBMS_SYS_ERROR.KKXERE1(C)",
    kkxere2="SYS.DBMS_SYS_ERROR.KKXERE2(C)",
    kkxere3="SYS.DBMS_SYS_ERROR.KKXERE3(C)",
    kkxere4="SYS.DBMS_SYS_ERROR.KKXERE4(C)",
    kkxere5="SYS.DBMS_SYS_ERROR.KKXERE5(C)",
    kkxere6="SYS.DBMS_SYS_ERROR.KKXERE6(C)",
    kkxere7="SYS.DBMS_SYS_ERROR.KKXERE7(C)",
    kkxere8="SYS.DBMS_SYS_ERROR.KKXERE8(C)",
    kkxexe="kernel compile execute execute plsql",
    kkxhtmldb_verify_user="SYS.HTMLDB_SYSTEM.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)/SYS.WWV_FLOW_VAL.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)",
    kkxhtmldbverifyuser="SYS.HTMLDB_SYSTEM.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)/SYS.WWV_FLOW_VAL.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)",
    kkxj="kernel compile execute java",
    kkxjexe="kernel compile execute java execute",
    kkxl="kernel compile execute lob",
    kkxl_append="SYS.DBMS_LOB.KKXL_APPEND(C)",
    kkxl_clob2file="SYS.DBMS_LOB.KKXL_CLOB2FILE(C)",
    kkxl_close="SYS.DBMS_LOB.KKXL_CLOSE(C)",
    kkxl_compare="SYS.DBMS_LOB.KKXL_COMPARE(C)",
    kkxl_converttoblob="SYS.DBMS_LOB.KKXL_CONVERTTOBLOB(C)",
    kkxl_converttoclob="SYS.DBMS_LOB.KKXL_CONVERTTOCLOB(C)",
    kkxl_copy="SYS.DBMS_LOB.KKXL_COPY(C)",
    kkxl_copy_dbfs_link="SYS.DBMS_LOB.KKXL_COPY_DBFS_LINK(C)",
    kkxl_copy_from_dbfs_link="SYS.DBMS_LOB.KKXL_COPY_FROM_DBFS_LINK(C)",
    kkxl_createtemporary="SYS.DBMS_LOB.KKXL_CREATETEMPORARY(C)",
    kkxl_dbfs_link_generate_path="SYS.DBMS_LOB.KKXL_DBFS_LINK_GENERATE_PATH(C)",
    kkxl_delete="SYS.DBMS_LOB.KKXL_DELETE(C)",
    kkxl_erase="SYS.DBMS_LOB.KKXL_ERASE(C)",
    kkxl_fileclose="SYS.DBMS_LOB.KKXL_FILECLOSE(C)",
    kkxl_filecloseall="SYS.DBMS_LOB.KKXL_FILECLOSEAL(C)",
    kkxl_fileexists="SYS.DBMS_LOB.KKXL_FILEEXISTS(C)",
    kkxl_filegetname="SYS.DBMS_LOB.KKXL_FILEGETNAME(C)",
    kkxl_fileisopen="SYS.DBMS_LOB.KKXL_FILEISOPEN(C)",
    kkxl_fileopen="SYS.DBMS_LOB.KKXL_FILEOPEN(C)",
    kkxl_freetemporary="SYS.DBMS_LOB.KKXL_FREETEMPORARY(C)",
    kkxl_get_dbfs_link="SYS.DBMS_LOB.KKXL_GET_DBFS_LINK(C)",
    kkxl_get_dbfs_link_state="SYS.DBMS_LOB.KKXL_GET_DBFS_LINK_STATE(C)",
    kkxl_get_storage_limit="SYS.DBMS_LOB.KKXL_GET_STORAGE_LIMIT(C)",
    kkxl_getchunksize="SYS.DBMS_LOB.KKXL_GETCHUNKSIZE(C)",
    kkxl_getlength="SYS.DBMS_LOB.KKXL_GETLENGTH(C)",
    kkxl_getmimetype="SYS.DBMS_LOB.KKXL_GETMIMETYPE(C)",
    kkxl_getoptions="SYS.DBMS_LOB.KKXL_GETOPTIONS(C)",
    kkxl_getshr="SYS.DBMS_LOB.KKXL_GETSHR(C)",
    kkxl_insert="SYS.DBMS_LOB.KKXL_INSERT(C)",
    kkxl_instr="SYS.DBMS_LOB.KKXL_INSTR(C)",
    kkxl_isopen="SYS.DBMS_LOB.KKXL_ISOPEN(C)",
    kkxl_isremote="SYS.DBMS_LOB.KKXL_ISREMOTE(C)",
    kkxl_issecurefile="SYS.DBMS_LOB.KKXL_ISSECUREFILE(C)",
    kkxl_istemporary="SYS.DBMS_LOB.KKXL_ISTEMPORARY(C)",
    kkxl_loadblobfromfile="SYS.DBMS_LOB.KKXL_LOADBLOBFROMFILE(C)",
    kkxl_loadclobfromfile="SYS.DBMS_LOB.KKXL_LOADCLOBFROMFILE(C)",
    kkxl_loadfromfile="SYS.DBMS_LOB.KKXL_LOADFROMFILE(C)",
    kkxl_move="SYS.DBMS_LOB.KKXL_MOVE(C)",
    kkxl_move_to_dbfs_link="SYS.DBMS_LOB.KKXL_MOVE_TO_DBFS_LINK(C)",
    kkxl_open="SYS.DBMS_LOB.KKXL_OPEN(C)",
    kkxl_read="SYS.DBMS_LOB.KKXL_READ(C)",
    kkxl_replace="SYS.DBMS_LOB.KKXL_REPLACE(C)",
    kkxl_set_dbfs_link="SYS.DBMS_LOB.KKXL_SET_DBFS_LINK(C)",
    kkxl_setmimetype="SYS.DBMS_LOB.KKXL_SETMIMETYPE(C)",
    kkxl_setoptions="SYS.DBMS_LOB.KKXL_SETOPTIONS(C)",
    kkxl_substr="SYS.DBMS_LOB.KKXL_SUBSTR(C)",
    kkxl_trim="SYS.DBMS_LOB.KKXL_TRIM(C)",
    kkxl_write="SYS.DBMS_LOB.KKXL_WRITE(C)",
    kkxl_writeappend="SYS.DBMS_LOB.KKXL_WRITEAPPEND(C)",
    kkxlappend="SYS.DBMS_LOB.KKXL_APPEND(C)",
    kkxlcisopen="SYS.UTL_SYS_COMPRESS.ISOPEN(UTL_SYS_CMP_LIB)",
    kkxlclob2file="SYS.DBMS_LOB.KKXL_CLOB2FILE(C)",
    kkxlclose="SYS.DBMS_LOB.KKXL_CLOSE(C)",
    kkxlcompare="SYS.DBMS_LOB.KKXL_COMPARE(C)",
    kkxlcomplzadd="SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_ADD(UTL_SYS_CMP_LIB)",
    kkxlcomplzclose="SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_CLOSE(UTL_SYS_CMP_LIB)",
    kkxlcomplzlob="SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_BLOB(UTL_SYS_CMP_LIB)/SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_BFILE(UTL_SYS_CMP_LIB)",
    kkxlcomplzopen="SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_OPEN(UTL_SYS_CMP_LIB)",
    kkxlcompulzclose="SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_CLOSE(UTL_SYS_CMP_LIB)",
    kkxlcompulzextract="SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_EXTRACT(UTL_SYS_CMP_LIB)",
    kkxlcompulzlob="SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_BLOB(UTL_SYS_CMP_LIB)/SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_BFILE(UTL_SYS_CMP_LIB)",
    kkxlcompulzopen="SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_OPEN(UTL_SYS_CMP_LIB)",
    kkxlconverttoblob="SYS.DBMS_LOB.KKXL_CONVERTTOBLOB(C)",
    kkxlconverttoclob="SYS.DBMS_LOB.KKXL_CONVERTTOCLOB(C)",
    kkxlcopy="SYS.DBMS_LOB.KKXL_COPY(C)",
    kkxlcopydbfslink="SYS.DBMS_LOB.KKXL_COPY_DBFS_LINK(C)",
    kkxlcopyfromdbfslink="SYS.DBMS_LOB.KKXL_COPY_FROM_DBFS_LINK(C)",
    kkxlcpinit="SYS.UTL_SYS_COMPRESS.INITIALIZE_I(UTL_SYS_CMP_LIB)",
    kkxlcreatetemporary="SYS.DBMS_LOB.KKXL_CREATETEMPORARY(C)",
    kkxldbfslinkgeneratepath="SYS.DBMS_LOB.KKXL_DBFS_LINK_GENERATE_PATH(C)",
    kkxldelete="SYS.DBMS_LOB.KKXL_DELETE(C)",
    kkxlerase="SYS.DBMS_LOB.KKXL_ERASE(C)",
    kkxlfileclose="SYS.DBMS_LOB.KKXL_FILECLOSE(C)",
    kkxlfilecloseall="SYS.DBMS_LOB.KKXL_FILECLOSEAL(C)",
    kkxlfileexists="SYS.DBMS_LOB.KKXL_FILEEXISTS(C)",
    kkxlfilegetname="SYS.DBMS_LOB.KKXL_FILEGETNAME(C)",
    kkxlfileisopen="SYS.DBMS_LOB.KKXL_FILEISOPEN(C)",
    kkxlfileopen="SYS.DBMS_LOB.KKXL_FILEOPEN(C)",
    kkxlfreetemporary="SYS.DBMS_LOB.KKXL_FREETEMPORARY(C)",
    kkxlgetchunksize="SYS.DBMS_LOB.KKXL_GETCHUNKSIZE(C)",
    kkxlgetdbfslink="SYS.DBMS_LOB.KKXL_GET_DBFS_LINK(C)",
    kkxlgetdbfslinkstate="SYS.DBMS_LOB.KKXL_GET_DBFS_LINK_STATE(C)",
    kkxlgetlength="SYS.DBMS_LOB.KKXL_GETLENGTH(C)",
    kkxlgetmimetype="SYS.DBMS_LOB.KKXL_GETMIMETYPE(C)",
    kkxlgetoptions="SYS.DBMS_LOB.KKXL_GETOPTIONS(C)",
    kkxlgetshr="SYS.DBMS_LOB.KKXL_GETSHR(C)",
    kkxlgetstoragelimit="SYS.DBMS_LOB.KKXL_GET_STORAGE_LIMIT(C)",
    kkxlinsert="SYS.DBMS_LOB.KKXL_INSERT(C)",
    kkxlinstr="SYS.DBMS_LOB.KKXL_INSTR(C)",
    kkxlisopen="SYS.DBMS_LOB.KKXL_ISOPEN(C)",
    kkxlisremote="SYS.DBMS_LOB.KKXL_ISREMOTE(C)",
    kkxlissecurefile="SYS.DBMS_LOB.KKXL_ISSECUREFILE(C)",
    kkxlistemporary="SYS.DBMS_LOB.KKXL_ISTEMPORARY(C)",
    kkxlloadblobfromfile="SYS.DBMS_LOB.KKXL_LOADBLOBFROMFILE(C)",
    kkxlloadclobfromfile="SYS.DBMS_LOB.KKXL_LOADCLOBFROMFILE(C)",
    kkxlloadfromfile="SYS.DBMS_LOB.KKXL_LOADFROMFILE(C)",
    kkxlmove="SYS.DBMS_LOB.KKXL_MOVE(C)",
    kkxlmovetodbfslink="SYS.DBMS_LOB.KKXL_MOVE_TO_DBFS_LINK(C)",
    kkxlnu="kernel compile execute lob DBMS_LOBUTIL",
    kkxlnu_cpprmdedup="SYS.DBMS_LOBUTIL.KKXLNU_CPPRMDEDUP(C)",
    kkxlnu_getdedupset="SYS.DBMS_LOBUTIL.KKXLNU_GETDEDUPSET(C)",
    kkxlnu_getinode="SYS.DBMS_LOBUTIL.KKXLNU_GETINODE(C)",
    kkxlnu_getlobmap="SYS.DBMS_LOBUTIL.KKXLNU_GETLOBMAP(C)",
    kkxlnucpprm="kernel compile execute lob DBMS_LOBUTIL KKXLNU_CPPRMDEDUP",
    kkxlnucpprmdedup="SYS.DBMS_LOBUTIL.KKXLNU_CPPRMDEDUP(C)",
    kkxlnugd="kernel compile execute lob DBMS_LOBUTIL KKXLNU_GETDEDUPSET",
    kkxlnugetdedupset="SYS.DBMS_LOBUTIL.KKXLNU_GETDEDUPSET(C)",
    kkxlnugetinode="SYS.DBMS_LOBUTIL.KKXLNU_GETINODE(C)",
    kkxlnugetlobmap="SYS.DBMS_LOBUTIL.KKXLNU_GETLOBMAP(C)",
    kkxlnugi="kernel compile execute lob DBMS_LOBUTIL KKXLNU_GETINODE",
    kkxlnugl="kernel compile execute lob DBMS_LOBUTIL KKXLNU_GETLOBMAP",
    kkxlopen="SYS.DBMS_LOB.KKXL_OPEN(C)",
    kkxlr="kernel compile execute lob DBMS_LOB",
    kkxlr_append="kernel compile execute lob DBMS_LOB KKXL_APPEND",
    kkxlr_close="kernel compile execute lob DBMS_LOB KKXL_CLOSE",
    kkxlr_compare="kernel compile execute lob DBMS_LOB KKXL_COMPORE",
    kkxlr_convertToBlob="kernel compile execute lob DBMS_LOB KKXL_CONVERTTOBLOB",
    kkxlr_convertToClob="kernel compile execute lob DBMS_LOB KKXL_CONVERTTOCLOB",
    kkxlr_copy="kernel compile execute lob DBMS_LOB KKXL_COPY",
    kkxlr_erase="kernel compile execute lob DBMS_LOB KKXL_ERASE",
    kkxlr_get_storage_limit="kernel compile execute lob DBMS_LOB KKXL_GET_STORAGE_LIMIT",
    kkxlr_instr="kernel compile execute lob DBMS_LOB KKXL_INSTR",
    kkxlr_open="kernel compile execute lob DBMS_LOB KKXL_OPEN",
    kkxlr_read="kernel compile execute lob DBMS_LOB KKXL_READ",
    kkxlr_substr="kernel compile execute lob DBMS_LOB KKXL_SUBSTR",
    kkxlr_trim="kernel compile execute lob DBMS_LOB KKXL_TRIM",
    kkxlr_write="kernel compile execute lob DBMS_LOB KKXL_WRITE",
    kkxlr_writeappend="kernel compile execute lob DBMS_LOB KKXL_WRITE KKXL_WRITEAPPEND",
    kkxlread="SYS.DBMS_LOB.KKXL_READ(C)",
    kkxlreplace="SYS.DBMS_LOB.KKXL_REPLACE(C)",
    kkxlsetdbfslink="SYS.DBMS_LOB.KKXL_SET_DBFS_LINK(C)",
    kkxlsetmimetype="SYS.DBMS_LOB.KKXL_SETMIMETYPE(C)",
    kkxlsetoptions="SYS.DBMS_LOB.KKXL_SETOPTIONS(C)",
    kkxlsubstr="SYS.DBMS_LOB.KKXL_SUBSTR(C)",
    kkxltrim="SYS.DBMS_LOB.KKXL_TRIM(C)",
    kkxlwrite="SYS.DBMS_LOB.KKXL_WRITE(C)",
    kkxlwriteappend="SYS.DBMS_LOB.KKXL_WRITEAPPEND(C)",
    kkxpfr="kernel compile execute PGA free",
    kkxppp="kernel compile execute private pipe",
    kkxrd="kernel compile execute DBMS_ROWID",
    kkxrpc="kernel compile execute rpc",
    kkxscrptparse="SYS.DBMS_SQLPLUS_SCRIPT.PARSE(DBMS_SQLPLUS_SCRIPT_LIB)",
    kkxsem="kernel compile execute semantic phase",
    kkxsexe="kernel compile execute execute a cursor",
    kkxsexr="kernel compile execute execute with returning binds",
    kkxsfcn="kernel compile execute scalar fetch n rows",
    kkxsscfch="kernel compile execute scalar fetch",
    kkxt="kernel compile execute trigger",
    kkxtcs="kernel compile execute trigger trace pl/sql call stack",
    kkxtexe="kernel compile execute trigger trigger execute",
    kkxtgos="SYS.DBMS_REPUTIL.KKXTGOS(C)",
    kkxtgsv="SYS.DBMS_INTERNAL_TRIGGER.KKXTGSV(C)",
    kkxtilc="SYS.DBMS_INTERNAL_TRIGGER.KKXTILC(C)",
    kkxtios="SYS.DBMS_REPUTIL.KKXTIOS(C)",
    kkxtmit="SYS.DBMS_INTERNAL_TRIGGER.KKXTMIT(C)",
    kkxtr2v="SYS.DBMS_REPUTIL.KKXTR2V(C)",
    kkxtusv="SYS.DBMS_INTERNAL_TRIGGER.KKXTUSV(C)",
    kkxuexe="kernel compile execute stub execute",
    kkxwtp="kernel compile execute plsql compiler",
    kky="kernel compile system/session",
    kkyasy="kernel compile system/session alter system driver",
    kkz="kernel compile security",
    kkzgdcol="kernel compile security get distinct column. This function checks the column chain for a frodef and mark the columns needed for materialized view.",
    kkzgna="kernel compile security generate name",
    kkzi_is_param_taken="SYS.DBMS_REDEFINITION.IS_PARAM_NM_TAKEN(DBMS_SNAPSHOT_LIB)",
    kkzi_is_XMLtab_Objrel="SYS.DBMS_REDEFINITION.IS_XMLTAB_OBJREL(DBMS_SNAPSHOT_LIB)",
    kkzi_reg_idx_param="SYS.DBMS_REDEFINITION.REG_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzi_test_dml_refresh_trigger="SYS.DBMS_REDEFINITION_INTERNAL.TEST_DML_REFRESH_TRIGGER(DBMS_SNAPSHOT_LIB)",
    kkzi_xmlidx_parmstr="SYS.DBMS_REDEFINITION.GET_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzi_xmlidx_sxtab="SYS.DBMS_REDEFINITION.GET_XMLIDX_SX_TAB(DBMS_SNAPSHOT_LIB)",
    kkziacset="SYS.DBMS_IREFRESH.SET_AUTOCOMMIT(DBMS_SNAPSHOT_LIB)",
    kkziaord="SYS.DBMS_REDEFINITION.ABORT_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzibcrd="SYS.DBMS_SNAP_INTERNAL.KKZIBCR(C)",
    kkzibfqn="SYS.DBMS_SNAPSHOT_UTL.GET_FULLY_QUALIFIED_NAME(DBMS_SNAPSHOT_LIB)",
    kkzibonm="SYS.DBMS_SNAPSHOT_UTL.GET_OBJECT_NAME_INT(DBMS_SNAPSHOT_LIB)",
    kkzibpkce="SYS.DBMS_SNAPSHOT_UTL.GET_PK_BY_EOID(DBMS_SNAPSHOT_LIB)",
    kkzibponm="kernel compile security DBMS_SNAPSHOT_UTL.GET_OBJECT_NAME_INT",
    kkzibsrd="SYS.DBMS_SNAP_INTERNAL.KKZIBSR(C)",
    kkzibsu="SYS.DBMS_SNAPSHOT_UTL.SET_UP_INT(DBMS_SNAPSHOT_LIB)",
    kkzibtbto="SYS.DBMS_SNAPSHOT_UTL.GET_TYPEINFO_BY_TOID(DBMS_SNAPSHOT_LIB)",
    kkzibvl="SYS.DBMS_SNAPSHOT_UTL.VERIFY_LOG_INT(DBMS_SNAPSHOT_LIB)",
    kkzibwu="SYS.DBMS_SNAPSHOT_UTL.WRAP_UP(DBMS_SNAPSHOT_LIB)",
    kkzichkprivs="SYS.DBMS_REDEFINITION.CHECK_PRIVS(DBMS_SNAPSHOT_LIB)",
    kkziciti="SYS.DBMS_SNAP_INTERNAL.KKZICITI(C)",
    kkzickusrpriv="SYS.DBMS_ISNAPSHOT.CHECK_USRPRIV(DBMS_SNAPSHOT_LIB)",
    kkzicls="SYS.DBMS_SNAPSHOT_UTL.CLEANUP_SUBSCRIPTION(DBMS_SNAPSHOT_LIB)",
    kkzicort="SYS.DBMS_REDEFINITION.CAN_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzicort_batched_parts="SYS.DBMS_REDEFINITION.CAN_REDEF_INT_BATCH(DBMS_SNAPSHOT_LIB)",
    kkzicortbatchedparts="SYS.DBMS_REDEFINITION.CAN_REDEF_INT_BATCH(DBMS_SNAPSHOT_LIB)",
    kkzicp3g="SYS.DBMS_SNAPSHOT_KKXRCA.CHECK_PERMISSION_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_basic="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VBASIC(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_prog="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VPROG(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_setb="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_SETB(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_waitb="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_WAITB(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarbasic="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VBASIC(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarprog="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VPROG(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarsetb="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_SETB(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarwaitb="SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_WAITB(DBMS_SNAPSHOT_LIB)",
    kkzidlused="SYS.DBMS_SNAPSHOT_UTL.DIRECT_LOAD_USED(DBMS_SNAPSHOT_LIB)",
    kkzidro="SYS.DBMS_SNAP_INTERNAL.KKZIDRO(C)",
    kkzidrrg="SYS.DBMS_REPCAT_RGT_CUST2.DROP_REFRESH_GROUP(DBMS_SNAPSHOT_LIB)",
    kkzienms="SYS.DBMS_SNAP_INTERNAL.KKZIENM(C)",
    kkzieoms="SYS.DBMS_SNAP_INTERNAL.KKZIEOM(C)",
    kkziess="SYS.DBMS_SNAP_INTERNAL.KKZIES(C)",
    kkziexecddl="SYS.DBMS_REDEFINITION.PARSE_DDL(DBMS_SNAPSHOT_LIB)",
    kkzifenq="SYS.DBMS_SNAPSHOT_KKXRCA.RELEASE_ENQ_SNAPSHOTS(DBMS_SNAPSHOT_LIB)",
    kkziford="SYS.DBMS_REDEFINITION.FINISH_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzifr3g="SYS.DBMS_SNAPSHOT_KKXRCA.REFRESH_KERNEL_INTERFACE(DBMS_SNAPSHOT_LIB)",
    kkzigbdb="SYS.DBMS_SNAP_INTERNAL.KKZIGBDB(C)",
    kkzigenq="SYS.DBMS_SNAPSHOT_KKXRCA.GET_ENQ_SNAPSHOTS(DBMS_SNAPSHOT_LIB)",
    kkziglnm="SYS.DBMS_SNAPSHOT_UTL.GET_LOG_NAME(DBMS_SNAPSHOT_LIB)",
    kkzigltyp="SYS.DBMS_SNAPSHOT_UTL.GET_LOG_TYPE(DBMS_SNAPSHOT_LIB)",
    kkzigmbc="SYS.DBMS_SNAPSHOT_UTL.GET_MAX_BYTES_PER_CHAR(DBMS_SNAPSHOT_LIB)",
    kkzigmv3g="SYS.DBMS_SNAPSHOT_UTL.GET_COLM_MASKVEC(DBMS_SNAPSHOT_LIB)",
    kkzigpe="SYS.DBMS_SNAPSHOT_KKXRCA.GET_PARALLEL_ENV(DBMS_SNAPSHOT_LIB)",
    kkzigpki="SYS.DBMS_SNAPSHOT_UTL.GET_PK_CONSTRAINT_INFO(DBMS_SNAPSHOT_LIB)",
    kkzigrcol="SYS.DBMS_SNAPSHOT_UTL.GET_RELATIONAL_COLUMNS(DBMS_SNAPSHOT_LIB)",
    kkzigsp="SYS.DBMS_SNAPSHOT_KKXRCA.GET_SESSION_ENV(DBMS_SNAPSHOT_LIB)",
    kkzigtn="SYS.DBMS_REDEFINITION.GET_TABLE_NAME(DBMS_SNAPSHOT_LIB)",
    kkzigunqnm="SYS.DBMS_REDEFINITION.GET_UNQ_NAME(DBMS_SNAPSHOT_LIB)",
    kkzii_o2n="SYS.DBMS_SNAPSHOT_UTL.TRANS_IN_OLD2NEW(DBMS_SNAPSHOT_LIB)",
    kkziibtrd="SYS.DBMS_SNAP_INTERNAL.KKZIIBTRD(C)",
    kkziicsu="SYS.DBMS_SNAP_INTERNAL.IAS_CREATE_MV_DDL(DBMS_SNAPSHOT_LIB)",
    kkziio2n="SYS.DBMS_SNAPSHOT_UTL.TRANS_IN_OLD2NEW(DBMS_SNAPSHOT_LIB)",
    kkziisparamtaken="SYS.DBMS_REDEFINITION.IS_PARAM_NM_TAKEN(DBMS_SNAPSHOT_LIB)",
    kkziIsUserCreatedIdx="SYS.DBMS_REDEFINITION.IS_USER_CREATED(DBMS_SNAPSHOT_LIB)",
    kkziisXMLtabObjrel="SYS.DBMS_REDEFINITION.IS_XMLTAB_OBJREL(DBMS_SNAPSHOT_LIB)",
    kkzilnr3g="SYS.DBMS_SNAP_INTERNAL.LOC_NAM_RES3G(DBMS_SNAPSHOT_LIB)",
    kkzimlt="SYS.DBMS_SNAPSHOT_UTL.MASTER_LOG_TYPE(DBMS_SNAPSHOT_LIB)",
    kkzimroa="SYS.DBMS_SNAP_INTERNAL.MODIFY_RO_ATTRIBUTE(DBMS_SNAPSHOT_LIB)",
    kkzio_n2o="SYS.DBMS_SNAPSHOT_UTL.TRANS_OUT_NEW2OLD(DBMS_SNAPSHOT_LIB)",
    kkziofln="SYS.DBMS_SNAP_INTERNAL.INSTANTIATE_OFFLINE(DBMS_SNAPSHOT_LIB)",
    kkziofvs="SYS.DBMS_SNAP_INTERNAL.VALIDATE_SQL(DBMS_SNAPSHOT_LIB)",
    kkzion2o="SYS.DBMS_SNAPSHOT_UTL.TRANS_OUT_NEW2OLD(DBMS_SNAPSHOT_LIB)",
    kkziorset="SYS.DBMS_REDEFINITION.SET_REDEF_SESSION(DBMS_SNAPSHOT_LIB)",
    kkzipllg="SYS.DBMS_ISNAPSHOT.KKZIPLLG(DBMS_SNAPSHOT_LIB)",
    kkzipsl_xid="SYS.DBMS_ISNAPSHOT.KKZIPSL_XID(DBMS_SNAPSHOT_LIB)",
    kkzipslxid="SYS.DBMS_ISNAPSHOT.KKZIPSL_XID(DBMS_SNAPSHOT_LIB)",
    kkzirdobj="SYS.DBMS_REDEFINITION.REGISTER_DEP_OBJ_INT(DBMS_SNAPSHOT_LIB)",
    kkziregidxparam="SYS.DBMS_REDEFINITION.REG_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzisbdb="SYS.DBMS_SNAP_INTERNAL.KKZISBD(C)",
    kkziset="SYS.DBMS_SNAPSHOT_UTL.SETUP(DBMS_SNAPSHOT_LIB)",
    kkziSetAclmv="SYS.DBMS_SNAP_INTERNAL.SET_I_AM_AN_ACLMV(DBMS_SNAPSHOT_LIB)",
    kkzisf3g="SYS.DBMS_SNAPSHOT_KKXRCA.SCHEDULE_KERNEL_INTERFACE(DBMS_SNAPSHOT_LIB)",
    kkzisint="SYS.DBMS_REDEFINITION.SYNC_INTERIM_INT(DBMS_SNAPSHOT_LIB)",
    kkzisord="SYS.DBMS_REDEFINITION.START_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzispe="SYS.DBMS_SNAPSHOT_KKXRCA.SET_PARALLEL_ENV(DBMS_SNAPSHOT_LIB)",
    kkzisr_chk_tbl_priv="SYS.DBMS_SNAPSHOT_COMMON.CHECK_PRIVS_ON_TABLE_PRIVATE(DBMS_SNAPSHOT_LIB)",
    kkzisr_do_refr_op="SYS.DBMS_SYNC_REFRESH_INTERNAL.DO_REFRESH_OPN_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisr_prepstlog="SYS.DBMS_SYNC_REFRESH_INTERNAL.PREPARE_STAGING_LOG_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisr_regmviews="SYS.DBMS_SYNC_REFRESH_INTERNAL.REGISTER_MVIEWS_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisr_throwerr="SYS.DBMS_SYNC_REFRESH_INTERNAL.THROW_ERROR(DBMS_SNAPSHOT_LIB)",
    kkzisrchktblpriv="SYS.DBMS_SNAPSHOT_COMMON.CHECK_PRIVS_ON_TABLE_PRIVATE(DBMS_SNAPSHOT_LIB)",
    kkzisrdorefrop="SYS.DBMS_SYNC_REFRESH_INTERNAL.DO_REFRESH_OPN_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisro="SYS.DBMS_SNAP_INTERNAL.KKZISRO(C)",
    kkzisrprepstlog="SYS.DBMS_SYNC_REFRESH_INTERNAL.PREPARE_STAGING_LOG_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisrregmviews="SYS.DBMS_SYNC_REFRESH_INTERNAL.REGISTER_MVIEWS_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisrthrowerr="SYS.DBMS_SYNC_REFRESH_INTERNAL.THROW_ERROR(DBMS_SNAPSHOT_LIB)",
    kkzissp="SYS.DBMS_SNAPSHOT_KKXRCA.SET_SESSION_ENV(DBMS_SNAPSHOT_LIB)",
    kkzisu="kernel compile security DBMS_SNAPSHOT_UTL.SUBSCRIBE",
    kkzisub="SYS.DBMS_SNAPSHOT_UTL.SUBSCRIBE(DBMS_SNAPSHOT_LIB)",
    kkzitestdmlrefreshtrigger="SYS.DBMS_REDEFINITION_INTERNAL.TEST_DML_REFRESH_TRIGGER(DBMS_SNAPSHOT_LIB)",
    kkzitti="SYS.DBMS_SNAP_INTERNAL.KKZITTI(C)",
    kkziudobj="SYS.DBMS_REDEFINITION.UNREGISTER_DEP_OBJ_INT(DBMS_SNAPSHOT_LIB)",
    kkziulph="SYS.DBMS_SNAPSHOT_UTL.UPDATE_LOG_PLACEHOLDER_INT(DBMS_SNAPSHOT_LIB)",
    kkzivcmp="SYS.DBMS_SNAPSHOT_UTL.KKZIVCMP(C)",
    kkzivfc="SYS.DBMS_SNAPSHOT_UTL.VERIFY_FC_AGE(DBMS_SNAPSHOT_LIB)",
    kkzivld="SYS.DBMS_SNAPSHOT_UTL.VALIDATE(DBMS_SNAPSHOT_LIB)",
    kkzivordclr="SYS.DBMS_REDEFINITION.VDOLLAR_ORD_CLR(DBMS_SNAPSHOT_LIB)",
    kkzivordini="SYS.DBMS_REDEFINITION.VDOLLAR_ORD_INIT(DBMS_SNAPSHOT_LIB)",
    kkziwrp="SYS.DBMS_SNAPSHOT_UTL.WRAPUP(DBMS_SNAPSHOT_LIB)",
    kkzixmlidxparmstr="SYS.DBMS_REDEFINITION.GET_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzixmlidxsxtab="SYS.DBMS_REDEFINITION.GET_XMLIDX_SX_TAB(DBMS_SNAPSHOT_LIB)",
    kkzrgrc="SYS.DBMS_SNAP_REPAPI.GENERATE_REFRESH_CONTEXT(DBMS_REPAPI_LIB)",
    kl="kernel loader",
    klc="kernel loader column array builder",
    klclil1r="kernel loader column array builder c level interface load 1 row",
    klcs="kernel loader column array builder character set",
    klcslod="kernel loader column array builder character set load NLS data object",
    kll="kernel loader library",
    kllcqgf="kernel loader library circular queue get free slot",
    klllr="kernel loader library logical record",
    klm="kernel loader memory",
    klmalf="kernel loader memory allocate freeable memory",
    km="kernel multi threaded/mman",
    kmc="kernel multi threaded/mman virtual circuit",
    kmcadq="kernel multi threaded/mman virtual circuit add circuit to a queue",
    kmcdflu="kernel multi threaded/mman virtual circuit flush. perform the flush operation, forces the data in the current send buffer to get flushed out to the user.",
    kmcdlc="kernel multi threaded/mman virtual circuit state object delete routine",
    kmcdrv="kernel multi threaded/mman virtual circuit driver",
    kmcmbf="kernel multi threaded/mman virtual circuit mark buffer",
    kmcrowrt="kernel multi threaded/mman virtual circuit private functions",
    kmd="kernel multi threaded/mman dispatcher",
    kmdmai="kernel multi threaded/mman dispatcher main loop",
    kmdrdp="kernel multi threaded/mman dispatcher run a dispatcher process",
    kmdu2s="kernel multi threaded/mman dispatcher route messages from user to server",
    kmgs="kernel multi threaded/mman manage (sga) space (?)",
    kmgs_create_request="kernel multi threaded/mman manage (sga) space (?) creates and waits for a memory resize request involving a requestor",
    kmgs_immediate_req="kernel multi threaded/mman manage (sga) space (?) immediate mode request interface function",
    kmgs_sleep_wait="kernel multi threaded/mman manage (sga) space (?) this function should be used in kmgs whenever immediate mode memory is requested from auto-sga",
    kmgsdrv="kernel multi threaded/mman manage (sga) space (?) driver",
    kml="kernel multi threaded/mman listener registration (lreg)",
    kmlini="kernel multi threaded/mman listener registration (lreg) initialization",
    kmm="kernel multi threaded/mman monitor",
    kmmd="kernel multi threaded/mman monitor dispatcher",
    kmml="kernel multi threaded/mman monitor listener",
    kmmlrl="kernel multi threaded/mman monitor listener remote listener",
    kmmrdp="kernel multi threaded/mman monitor run dispatcher process",
    kmms="kernel multi threaded/mman monitor server",
    kmn="kernel multi threaded/mman network",
    kmnsbf="kernel multi threaded/mman network ??",
    kmnsbm="kernel multi threaded/mman network buffer memory allocation callback",
    kmp="kernel multi threaded/mman pool",
    kn="kernel replication",
    kna="kernel replication apply",
    knac="kernel replication apply coordinator",
    knah="kernel replication apply HA DB",
    knahsma="kernel replication apply HA DB slave main",
    knahspx="kernel replication apply HA DB process transaction",
    knaladmAddAutoCDR="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ADD_AUTO_CDR_INT(DBMS_LOGREP_LIB)",
    knaladmAddAutoCDRColGroup="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ADD_AUTO_CDR_COLGROUP_INT(DBMS_LOGREP_LIB)",
    knaladmAddAutoCDRDeltaRes="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ADD_AUTO_CDR_DELTA_RES_INT(DBMS_LOGREP_LIB)",
    knaladmAlterAutoCDR="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ALTER_AUTO_CDR_INT(DBMS_LOGREP_LIB)",
    knaladmAlterAutoCDRColGroup="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ALTER_AUTO_CDR_COLGROUP_INT(DBMS_LOGREP_LIB)",
    knaladmImportACDRMetadata="SYS.DBMS_GOLDENGATE_IMP.ACDR_UPDATE_METADATA(DBMS_LOGREP_LIB)",
    knaladmRemoveAutoCDR="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.REMOVE_AUTO_CDR_INT(DBMS_LOGREP_LIB)",
    knaladmRemoveAutoCDRColGroup="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.REMOVE_AUTO_CDR_COLGROUP_INT(DBMS_LOGREP_LIB)",
    knaladmRemoveAutoCDRDeltaRes="SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.REMOVE_AUTO_CDR_DELTA_RES_INT(DBMS_LOGREP_LIB)",
    knalExtractFromUserProps="SYS.DBMS_APPLY_ERROR.PROCESS_USER_PROPERTIES(DBMS_LOGREP_LIB)",
    knalf="kernel replication apply reader",
    knaliAlter="SYS.DBMS_APPLY_ADM_INTERNAL.ALTER_APPLY_INTERNAL(DBMS_LOGREP_LIB)",
    knaliCreate="SYS.DBMS_APPLY_ADM_INTERNAL.CREATE_APPLY_INTERNAL(DBMS_LOGREP_LIB)",
    knaliDrop="SYS.DBMS_APPLY_ADM_INTERNAL.DROP_APPLY(DBMS_LOGREP_LIB)",
    knaliGetApplyNum="SYS.DBMS_APPLY_PROCESS.GET_APPLY#(DBMS_LOGREP_LIB)",
    knaliSetInstScn="SYS.DBMS_APPLY_ADM.SET_INSTANTIATION_SCN(DBMS_LOGREP_LIB)",
    knalkdinv="SYS.DBMS_APPLY_ADM_INTERNAL.INVALIDATE_DEST_OBJ(DBMS_LOGREP_LIB)",
    knalperr="SYS.DBMS_APPLY_ERROR.IN(DBMS_LOGREP_LIB)/SYS.DBMS_APPLY_ERROR.PROCESS_ERRORS(DBMS_LOGREP_LIB)",
    knals_ddl_gcscn="SYS.LCR$_DDL_RECORD.GET_COMMIT_SCN(LCR_DDL_LIB)",
    knals_ddl_gctime="SYS.LCR$_DDL_RECORD.GET_COMMIT_TIME(LCR_DDL_LIB)",
    knals_execute_ddl="SYS.LCR$_DDL_RECORD.EXECUTE(LCR_DDL_LIB)",
    knals_execute_dml="SYS.LCR$_ROW_RECORD.EXECUTE(LCR_ROW_LIB)",
    knals_row_gcscn="SYS.LCR$_ROW_RECORD.GET_COMMIT_SCN(LCR_ROW_LIB)",
    knals_row_gctime="SYS.LCR$_ROW_RECORD.GET_COMMIT_TIME(LCR_ROW_LIB)",
    knalsddlgcscn="SYS.LCR$_DDL_RECORD.GET_COMMIT_SCN(LCR_DDL_LIB)",
    knalsddlgctime="SYS.LCR$_DDL_RECORD.GET_COMMIT_TIME(LCR_DDL_LIB)",
    knalsDropAPR="SYS.DBMS_APPLY_ADM_INTERNAL.DROP_APPLY_PROGRESS_REDO(DBMS_LOGREP_LIB)",
    knalsexecuteddl="SYS.LCR$_DDL_RECORD.EXECUTE(LCR_DDL_LIB)",
    knalsexecutedml="SYS.LCR$_ROW_RECORD.EXECUTE(LCR_ROW_LIB)",
    knalsGetSender="SYS.DBMS_STREAMS.GET_SENDER_INTERNAL(DBMS_LOGREP_LIB)",
    knalspCleanApplySpill="SYS.DBMS_XSTREAM_ADM_UTL.CLEAN_APPLY_SPILL(DBMS_LOGREP_LIB)",
    knalsrowgcscn="SYS.LCR$_ROW_RECORD.GET_COMMIT_SCN(LCR_ROW_LIB)",
    knalsrowgctime="SYS.LCR$_ROW_RECORD.GET_COMMIT_TIME(LCR_ROW_LIB)",
    knanr="kernel replication apply propogation receiver",
    knas="kernel replication apply slave",
    knasm2="kernel replication apply slave main 2",
    knasplcr="kernel replication apply slave process logical change record",
    knaspx="kernel replication apply slave process transaction",
    knasxStopClient="SYS.DBMS_XSTREAM_ADM_UTL.STOP_XOUT_CLIENT(DBMS_LOGREP_LIB)",
    kncclog="SYS.DBMS_REPCAT_CACHE.KNCCLOG(C)",
    kncclpp="SYS.DBMS_REPCAT_CACHE.KNCCLPP(C)",
    knccpog="SYS.DBMS_REPCAT_CACHE.KNCCPOG(C)",
    knccppp="SYS.DBMS_REPCAT_CACHE.KNCCPP(C)",
    knccrog="SYS.DBMS_REPCAT_CACHE.KNCCROG(C)",
    knccrpi="SYS.DBMS_REPCAT_CACHE.KNCCRPI(C)",
    knccrpn="SYS.DBMS_REPCAT_CACHE.KNCCRPN(C)",
    kncd="kernel replication dequeue generic functions",
    kncdccp="SYS.DBMS_ASYNCRPC_PUSH.KNCDCCP(C)",
    kncdgcs="SYS.DBMS_ASYNCRPC_PUSH.KNCDGCS(C)",
    kncdgep="SYS.DBMS_ASYNCRPC_PUSH.KNCDGEP(C)",
    kncdpdc="SYS.DBMS_ASYNCRPC_PUSH.KNCDPDC(C)",
    kncdups="SYS.DBMS_ASYNCRPC_PUSH.KNCDUPS(C)",
    kncead="SYS.DBMS_DEFER_ENQ_UTL.ANYDATA_ARG(DBMS_DEFER_ENQ_UTL_LIB)",
    kncebla="SYS.DBMS_DEFER_ENQ_UTL.KNCEBLA(C)",
    kncecha="SYS.DBMS_DEFER_ENQ_UTL.KNCECHA(C)",
    kncecla="SYS.DBMS_DEFER_ENQ_UTL.KNCECLA(C)",
    kncedta="SYS.DBMS_DEFER_ENQ_UTL.KNCEDTA(C)",
    knceenq="SYS.DBMS_DEFER_ENQ_UTL.ENQUE_CALL_INTERNAL(DBMS_DEFER_ENQ_UTL_LIB)",
    kncegcn="SYS.DBMS_DEFER_ENQ_UTL.KNCEGCN(C)",
    kncegui="SYS.DBMS_DEFER_ENQ_UTL.KNCEGUI(C)",
    knceids="SYS.DBMS_DEFER_ENQ_UTL.KNCEIDS(C)",
    knceiym="SYS.DBMS_DEFER_ENQ_UTL.KNCEIYM(C)",
    kncenua="SYS.DBMS_DEFER_ENQ_UTL.KNCENUA(C)",
    kncerbr="SYS.DBMS_DEFER_ENQ_UTL.KNCERBR(C)",
    kncerda="SYS.DBMS_DEFER_ENQ_UTL.KNCERDA(C)",
    kncertid="SYS.DBMS_DEFER_ENQ_UTL.RESET_TRAN_ID(DBMS_DEFER_ENQ_UTL_LIB)",
    kncerwa="SYS.DBMS_DEFER_ENQ_UTL.KNCERWA(C)",
    kncetma="SYS.DBMS_DEFER_ENQ_UTL.KNCETMA(C)",
    kncetsa="SYS.DBMS_DEFER_ENQ_UTL.KNCETSA(C)",
    kncetsltz="SYS.DBMS_DEFER_ENQ_UTL.KNCETSLTZ(C)",
    kncetstz="SYS.DBMS_DEFER_ENQ_UTL.KNCETSTZ(C)",
    kncettz="SYS.DBMS_DEFER_ENQ_UTL.KNCETTZ(C)",
    kncevca="SYS.DBMS_DEFER_ENQ_UTL.KNCEVCA(C)",
    kngocachep_ext="SYS.DBMS_LOGREP_UTIL.LCR_CACHE_PURGE(DBMS_LOGREP_LIB)",
    kngocachepext="SYS.DBMS_LOGREP_UTIL.LCR_CACHE_PURGE(DBMS_LOGREP_LIB)",
    knipiada="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.ANYDATA_ARG_INNER(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipibis="SYS.DBMS_REPCAT_INTERNAL.SET_REPOBJECT_FLAG_CALLOUT(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipibit="SYS.DBMS_REPCAT_INTERNAL.CHECK_REPOBJECT_FLAG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipibla="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.BLOB_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipical="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.INTERNAL_CALL(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipicha="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipicla="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.CLOB_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipicrc="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.CHECK_REPOBJECT_CACHE(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipides="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.DESTINATION(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipidta="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.DATE_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipigdt="SYS.DBMS_REPCAT_INTERNAL.GET_NO_DEPENDENCY_TRACKING(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipiinv="SYS.DBMS_REPCAT_INTERNAL.INVALIDATE_INTERNAL_PKG_C_OUT(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipimip="SYS.DBMS_REPCAT_INTERNAL.MAKE_INTERNAL_PKG_INNER(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipinua="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipir2n="SYS.DBMS_REPCAT_INTERNAL.GET_NUM_FROM_RAW(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipirda="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.ROWID_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipirse="SYS.DBMS_REPCAT_INTERNAL.RAISE_SYSTEM_ERROR(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipirwa="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.RAW_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipisdt="SYS.DBMS_REPCAT_INTERNAL.SET_NO_DEPENDENCY_TRACKING(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipiudt="SYS.DBMS_REPCAT_INTERNAL.UPDATE_DEPENDENCY_TRACKING(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipivca="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipixec="SYS.DBMS_REPCAT_INTERNAL_PACKAGE.EXECUTE_ERROR_CALL(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knl="kernel replication streams replication",
    knl_DropTableSuppLog="SYS.DBMS_CAPTURE_ADM_INTERNAL.DROP_TABLE_SUPP_LOGGING(DBMS_LOGREP_LIB)",
    knlabortschemainst_cdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlabortschemainstcdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlaborttableinst_cdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlaborttableinstcdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlAnnotateDDL="SYS.DBMS_LOGREP_UTIL.DDL_ANNOTATE(DBMS_LOGREP_LIB)",
    knlBumpSCN="SYS.DBMS_LOGREP_UTIL.BUMP_SCN(DBMS_LOGREP_LIB)",
    knlc="kernel replication streams replication capture",
    knlcabortglobalinst="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_GLOBAL_INST(DBMS_LOGREP_LIB)",
    knlcabortglobalinst_pdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcabortglobalinstpdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlCanonicalize="SYS.DBMS_LOGREP_UTIL.CANONICALIZE(DBMS_LOGREP_LIB)",
    knlChkPDBAccessCl="SYS.DBMS_LOGREP_UTIL_INVOK.CHECK_PDB_ACCESS(DBMS_LOGREP_LIB)",
    knlciAddLogfile="SYS.DBMS_CAPTURE_ADM_INTERNAL.ADD_LOGFILE(DBMS_LOGREP_LIB)",
    knlciAlterCapture="SYS.DBMS_CAPTURE_ADM_INTERNAL.ALTER_CAPTURE_INTERNAL(DBMS_LOGREP_LIB)",
    knlciCreateCapture="SYS.DBMS_CAPTURE_ADM_INTERNAL.CREATE_CAPTURE_INTERNAL(DBMS_LOGREP_LIB)",
    knlciDropCapture="SYS.DBMS_CAPTURE_ADM_INTERNAL.DROP_CAPTURE(DBMS_LOGREP_LIB)",
    knlciIncludeExtraAttribute="SYS.DBMS_CAPTURE_ADM_INTERNAL.INCLUDE_EXTRA_ATTRIBUTE(DBMS_LOGREP_LIB)",
    knlciwfit="SYS.DBMS_CAPTURE_ADM_INTERNAL.WAIT_FOR_INFLIGHT_TXN(DBMS_LOGREP_LIB)",
    knlComparePosition="SYS.DBMS_XSTREAM_ADM.COMPARE_POSITION(DBMS_LOGREP_LIB)",
    knlCompatVarToInt="SYS.DBMS_LOGREP_UTIL.COMPATIBLE_VARCHAR_TO_INT(DBMS_LOGREP_LIB)",
    knlConvertPosition="SYS.DBMS_XSTREAM_ADM_INTERNAL.CONVERT_POSITION_INTERNAL(DBMS_LOGREP_LIB)",
    knlcprepglobalinst="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_GLOBAL_INST(DBMS_LOGREP_LIB)",
    knlcprepglobalinst_pdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcprepglobalinstpdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcpreptabinst="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST(DBMS_LOGREP_LIB)",
    knlcpreptabinstuid="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST_UID(DBMS_LOGREP_LIB)",
    knlcsv="kernel replication streams replication capture propogation sender",
    knldi_ProcSrcDropTable="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_TABLE_INT(DBMS_LOGREP_LIB)",
    knldi_ProcSrcDropUser="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_USER_INT(DBMS_LOGREP_LIB)",
    knldi_ProcSrcNewTable="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_TABLE_INT(DBMS_LOGREP_LIB)",
    knldi_ProcSrcNewUser="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_USER_INT(DBMS_LOGREP_LIB)",
    knldiProcSrcDropTable="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_TABLE_INT(DBMS_LOGREP_LIB)",
    knldiProcSrcDropUser="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_USER_INT(DBMS_LOGREP_LIB)",
    knldiProcSrcNewTable="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_TABLE_INT(DBMS_LOGREP_LIB)",
    knldiProcSrcNewUser="SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_USER_INT(DBMS_LOGREP_LIB)",
    knlDisableTDupWorkspace="SYS.DBMS_XSTREAM_GG_INTERNAL.DISABLE_TDUP_WRKSPC_INT(DBMS_LOGREP_LIB)",
    knlDropTableSuppLog="SYS.DBMS_CAPTURE_ADM_INTERNAL.DROP_TABLE_SUPP_LOGGING(DBMS_LOGREP_LIB)",
    knlEnableTDupWorkspace="SYS.DBMS_XSTREAM_GG_INTERNAL.ENABLE_TDUP_WORKSPACE_INT(DBMS_LOGREP_LIB)",
    knlexeonpkg="SYS.DBMS_STREAMS_ADM_UTL_INVOK.EXE_ON_PKG(DBMS_LOGREP_LIB)",
    knlfalt="SYS.DBMS_FILE_GROUP_INTERNAL_INVOK.ALTER_FILE_GROUP_3GL(DBMS_FILE_GROUP_LIB)",
    knlfCanonSID="SYS.DBMS_FILE_GROUP_UTL.CANONICALIZE_SIDEN30(DBMS_FILE_GROUP_LIB)",
    knlfchk="SYS.DBMS_FILE_GROUP_UTL_INVOK.CHECK_PRIVILEGE_ON_FILE_GROUP(DBMS_FILE_GROUP_LIB)",
    knlfcre="SYS.DBMS_FILE_GROUP_INTERNAL_INVOK.CREATE_FILE_GROUP_3GL(DBMS_FILE_GROUP_LIB)",
    knlfdrp="SYS.DBMS_FILE_GROUP_INTERNAL_INVOK.DROP_FILE_GROUP_3GL(DBMS_FILE_GROUP_LIB)",
    knlfgop="SYS.DBMS_FILE_GROUP.GRANT_OBJECT_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfgsp="SYS.DBMS_FILE_GROUP.GRANT_SYSTEM_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfhsp="SYS.DBMS_FILE_GROUP_UTL_INVOK.HAS_SYSTEM_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfRaiseDPErrors="SYS.DBMS_FILE_GROUP_UTL.RAISE_DP_ERRORS(DBMS_FILE_GROUP_LIB)",
    knlfrop="SYS.DBMS_FILE_GROUP.REVOKE_OBJECT_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfrsp="SYS.DBMS_FILE_GROUP.REVOKE_SYSTEM_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlgcompat="SYS.DBMS_LOGREP_UTIL.GET_STR_COMPAT(DBMS_LOGREP_LIB)",
    knlgcscn="SYS.DBMS_LOGREP_UTIL.GET_CONSISTENT_SCN(DBMS_LOGREP_LIB)",
    knlGetAPRType="SYS.DBMS_APPLY_ADM_INTERNAL.UNPICKLE_PROGRESS_REDO_META(DBMS_LOGREP_LIB)",
    knlGetCSCNFromPos="SYS.LCR$_DDL_RECORD.GET_COMMIT_SCN_FROM_POSITION(DBMS_LOGREP_LIB)/SYS.LCR$_ROW_RECORD.GET_COMMIT_SCN_FROM_POSITION(DBMS_LOGREP_LIB)",
    knlGetGGFlags="SYS.DBMS_XSTREAM_GG_INTERNAL.GET_GG_SESS_FLAGS_INT(DBMS_LOGREP_LIB)",
    knlgetobjname="SYS.DBMS_LOGREP_UTIL_INVOK.GET_OBJECT_NAME(DBMS_LOGREP_LIB)",
    knlGetProcUseContext="SYS.DBMS_LOGREP_UTIL.GET_PROCUSE_CONTEXT_INTERNAL(DBMS_LOGREP_LIB)",
    knlGetSCNFromPos="SYS.LCR$_DDL_RECORD.GET_SCN_FROM_POSITION(DBMS_LOGREP_LIB)/SYS.LCR$_ROW_RECORD.GET_SCN_FROM_POSITION(DBMS_LOGREP_LIB)",
    knlGetSubsetRules="SYS.DBMS_STREAMS_ADM_IVK.GET_SUBSET_RULES(DBMS_LOGREP_LIB)",
    knlGetUGAProcUseContext="SYS.DBMS_LOGREP_UTIL.GET_PROC_USE_CONTEXT_INT(DBMS_LOGREP_LIB)",
    knlgmt="SYS.DBMS_STREAMS_ADM_IVK.GET_MESSAGE_TRACKING_INTERNAL(DBMS_LOGREP_LIB)",
    knlgrantadmin="SYS.DBMS_XSTREAM_AUTH_IVK.GRANT_ADMIN_PRIVILEGE_PDBS(DBMS_LOGREP_LIB)",
    knlgrt="SYS.DBMS_STREAMS_ADM_IVK.GET_TAG_INTERNAL(DBMS_LOGREP_LIB)",
    knlgsn="SYS.DBMS_STREAMS.GET_STREAMS_NAME(DBMS_LOGREP_LIB)",
    knlgst="SYS.DBMS_STREAMS.GET_STREAMS_TYPE(DBMS_LOGREP_LIB)",
    knlIsPreObj="SYS.DBMS_CAPTURE_ADM_INTERNAL.VALIDATE_PREPARE_TABLE(DBMS_LOGREP_LIB)",
    knlIsSwitchUser="SYS.DBMS_LOGREP_IMP.IS_SWITCH_USER(DBMS_LOGREP_LIB)",
    knlIsTDupWrkspEnabled="SYS.DBMS_XSTREAM_GG_INTERNAL.IS_TDUP_WRKSPC_ENABLED_INT(DBMS_LOGREP_LIB)",
    knll_ddl_cons="SYS.LCR$_DDL_RECORD.set_source_database_name(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.construct(LCR_DDL_LIB)",
    knll_ddl_gbown="SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knll_ddl_gbtnm="SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knll_ddl_gcompat="SYS.LCR$_DDL_RECORD.GET_COMPATIBLE_INTERNAL(LCR_DDL_LIB)",
    knll_ddl_gcsma="SYS.LCR$_DDL_RECORD.GET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knll_ddl_gct="SYS.LCR$_DDL_RECORD.GET_COMMAND_TYPE(LCR_DDL_LIB)",
    knll_ddl_gcusr="SYS.LCR$_DDL_RECORD.GET_CURRENT_USER(LCR_DDL_LIB)",
    knll_ddl_gddl="SYS.LCR$_DDL_RECORD.GET_DDL_TEXT(LCR_DDL_LIB)",
    knll_ddl_gea="SYS.LCR$_DDL_RECORD.GET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knll_ddl_gedt="SYS.LCR$_DDL_RECORD.GET_EDITION_NAME(LCR_DDL_LIB)",
    knll_ddl_get_position="SYS.LCR$_DDL_RECORD.GET_POSITION(LCR_DDL_LIB)",
    knll_ddl_get_src_time="SYS.LCR$_DDL_RECORD.GET_SOURCE_TIME(LCR_DDL_LIB)",
    knll_ddl_get_threadnum="SYS.LCR$_DDL_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_DDL_LIB)",
    knll_ddl_glusr="SYS.LCR$_DDL_RECORD.GET_LOGON_USER(LCR_DDL_LIB)",
    knll_ddl_gonm="SYS.LCR$_DDL_RECORD.GET_OBJECT_NAME(LCR_DDL_LIB)",
    knll_ddl_gotp="SYS.LCR$_DDL_RECORD.GET_OBJECT_TYPE(LCR_DDL_LIB)",
    knll_ddl_gown="SYS.LCR$_DDL_RECORD.GET_OBJECT_OWNER(LCR_DDL_LIB)",
    knll_ddl_gscn="SYS.LCR$_DDL_RECORD.MAP_LCR(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.GET_SCN(LCR_DDL_LIB)",
    knll_ddl_gsdn="SYS.LCR$_DDL_RECORD.GET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knll_ddl_gsrn="SYS.LCR$_DDL_RECORD.GET_ROOT_NAME(LCR_DDL_LIB)",
    knll_ddl_gtag="SYS.LCR$_DDL_RECORD.GET_TAG(LCR_DDL_LIB)",
    knll_ddl_gtxid="SYS.LCR$_DDL_RECORD.GET_TRANSACTION_ID(LCR_DDL_LIB)",
    knll_ddl_intg="SYS.LCR$_DDL_RECORD.IS_NULL_TAG(LCR_DDL_LIB)",
    knll_ddl_sbown="SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knll_ddl_sbtnm="SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knll_ddl_scsma="SYS.LCR$_DDL_RECORD.SET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knll_ddl_sct="SYS.LCR$_DDL_RECORD.SET_COMMAND_TYPE(LCR_DDL_LIB)",
    knll_ddl_scusr="SYS.LCR$_DDL_RECORD.SET_CURRENT_USER(LCR_DDL_LIB)",
    knll_ddl_sddl="SYS.LCR$_DDL_RECORD.SET_DDL_TEXT(LCR_DDL_LIB)",
    knll_ddl_sea="SYS.LCR$_DDL_RECORD.SET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knll_ddl_sedt="SYS.LCR$_DDL_RECORD.SET_EDITION_NAME(LCR_DDL_LIB)",
    knll_ddl_slusr="SYS.LCR$_DDL_RECORD.SET_LOGON_USER(LCR_DDL_LIB)",
    knll_ddl_sonm="SYS.LCR$_DDL_RECORD.SET_OBJECT_NAME(LCR_DDL_LIB)",
    knll_ddl_sotp="SYS.LCR$_DDL_RECORD.SET_OBJECT_TYPE(LCR_DDL_LIB)",
    knll_ddl_sown="SYS.LCR$_DDL_RECORD.SET_OBJECT_OWNER(LCR_DDL_LIB)",
    knll_ddl_ssdn="SYS.LCR$_DDL_RECORD.SET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knll_ddl_ssrn="SYS.LCR$_DDL_RECORD.SET_ROOT_NAME(LCR_DDL_LIB)",
    knll_ddl_stag="SYS.LCR$_DDL_RECORD.SET_TAG(LCR_DDL_LIB)",
    knll_prc_gcompat="SYS.LCR$_PROCEDURE_RECORD.GET_COMPATIBLE(LCR_PRC_LIB)",
    knll_prc_gcurusr="SYS.LCR$_PROCEDURE_RECORD.GET_CURRENT_USER(LCR_PRC_LIB)",
    knll_prc_gdefusr="SYS.LCR$_PROCEDURE_RECORD.GET_DEFAULT_USER(LCR_PRC_LIB)",
    knll_prc_get_position="SYS.LCR$_PROCEDURE_RECORD.GET_POSITION(LCR_PRC_LIB)",
    knll_prc_get_src_time="SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_TIME(LCR_PRC_LIB)",
    knll_prc_get_threadnum="SYS.LCR$_PROCEDURE_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_PRC_LIB)",
    knll_prc_glogusr="SYS.LCR$_PROCEDURE_RECORD.GET_LOGON_USER(LCR_PRC_LIB)",
    knll_prc_gpknm="SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_NAME(LCR_PRC_LIB)",
    knll_prc_gpkown="SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_OWNER(LCR_PRC_LIB)",
    knll_prc_gprms="SYS.LCR$_PROCEDURE_RECORD.GET_PARAMETERS(LCR_PRC_LIB)",
    knll_prc_gprnm="SYS.LCR$_PROCEDURE_RECORD.GET_PROCEDURE_NAME(LCR_PRC_LIB)",
    knll_prc_gpub="SYS.LCR$_PROCEDURE_RECORD.GET_PUBLICATION(LCR_PRC_LIB)",
    knll_prc_groot="SYS.LCR$_PROCEDURE_RECORD.GET_ROOT_NAME(LCR_PRC_LIB)",
    knll_prc_gscn="SYS.LCR$_PROCEDURE_RECORD.map_lcr(LCR_PRC_LIB)/SYS.LCR$_PROCEDURE_RECORD.GET_SCN(LCR_PRC_LIB)",
    knll_prc_gsdn="SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_DATABASE_NAME(LCR_PRC_LIB)",
    knll_prc_gtag="SYS.LCR$_PROCEDURE_RECORD.GET_TAG(LCR_PRC_LIB)",
    knll_prc_gtxid="SYS.LCR$_PROCEDURE_RECORD.GET_TRANSACTION_ID(LCR_PRC_LIB)",
    knll_prc_intg="SYS.LCR$_PROCEDURE_RECORD.IS_NULL_TAG(LCR_PRC_LIB)",
    knll_row_acol="SYS.LCR$_ROW_RECORD.ADD_COLUMN(LCR_ROW_LIB)",
    knll_row_cons="SYS.LCR$_ROW_RECORD.set_source_database_name(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.construct(LCR_ROW_LIB)",
    knll_row_dcol="SYS.LCR$_ROW_RECORD.DELETE_COLUMN(LCR_ROW_LIB)",
    knll_row_gcompat="SYS.LCR$_ROW_RECORD.GET_COMPATIBLE_INTERNAL(LCR_ROW_LIB)",
    knll_row_gct="SYS.LCR$_ROW_RECORD.GET_COMMAND_TYPE(LCR_ROW_LIB)",
    knll_row_gcvl="SYS.LCR$_ROW_RECORD.GET_VALUE(LCR_ROW_LIB)",
    knll_row_gcvls="SYS.LCR$_ROW_RECORD.GET_VALUES(LCR_ROW_LIB)",
    knll_row_gea="SYS.LCR$_ROW_RECORD.GET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knll_row_get_base_oid="SYS.LCR$_ROW_RECORD.GET_BASE_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knll_row_get_objn="SYS.LCR$_ROW_RECORD.GET_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knll_row_get_position="SYS.LCR$_ROW_RECORD.GET_POSITION(LCR_ROW_LIB)",
    knll_row_get_src_time="SYS.LCR$_ROW_RECORD.GET_SOURCE_TIME(LCR_ROW_LIB)",
    knll_row_get_text="SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knll_row_get_text_bind="SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knll_row_get_threadnum="SYS.LCR$_ROW_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_ROW_LIB)",
    knll_row_get_wc="SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knll_row_get_wc_bind="SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knll_row_glinfo="SYS.LCR$_ROW_RECORD.GET_LOB_INFORMATION(LCR_ROW_LIB)",
    knll_row_glninfo="SYS.LCR$_ROW_RECORD.GET_LONG_INFORMATION(LCR_ROW_LIB)",
    knll_row_glsize="SYS.LCR$_ROW_RECORD.GET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knll_row_goff="SYS.LCR$_ROW_RECORD.GET_LOB_OFFSET(LCR_ROW_LIB)",
    knll_row_gonm="SYS.LCR$_ROW_RECORD.GET_OBJECT_NAME(LCR_ROW_LIB)",
    knll_row_gown="SYS.LCR$_ROW_RECORD.GET_OBJECT_OWNER(LCR_ROW_LIB)",
    knll_row_gscn="SYS.LCR$_ROW_RECORD.MAP_LCR(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.GET_SCN(LCR_ROW_LIB)",
    knll_row_gsdn="SYS.LCR$_ROW_RECORD.GET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knll_row_gsrn="SYS.LCR$_ROW_RECORD.GET_ROOT_NAME(LCR_ROW_LIB)",
    knll_row_gtag="SYS.LCR$_ROW_RECORD.GET_TAG(LCR_ROW_LIB)",
    knll_row_gtxid="SYS.LCR$_ROW_RECORD.GET_TRANSACTION_ID(LCR_ROW_LIB)",
    knll_row_gxinfo="SYS.LCR$_ROW_RECORD.GET_XML_INFORMATION(LCR_ROW_LIB)",
    knll_row_intg="SYS.LCR$_ROW_RECORD.IS_NULL_TAG(LCR_ROW_LIB)",
    knll_row_is_stmt_lcr="SYS.LCR$_ROW_RECORD.IS_STATEMENT_LCR(LCR_ROW_LIB)",
    knll_row_kcols="SYS.LCR$_ROW_RECORD.KEEP_COLUMNS(LCR_ROW_LIB)",
    knll_row_long2lob="SYS.LCR$_ROW_RECORD.CONVERT_LONG_TO_LOB_CHUNK(LCR_ROW_LIB)",
    knll_row_rcol="SYS.LCR$_ROW_RECORD.RENAME_COLUMN(LCR_ROW_LIB)",
    knll_row_sct="SYS.LCR$_ROW_RECORD.SET_COMMAND_TYPE(LCR_ROW_LIB)",
    knll_row_scvl="SYS.LCR$_ROW_RECORD.SET_VALUE(LCR_ROW_LIB)",
    knll_row_scvls="SYS.LCR$_ROW_RECORD.SET_VALUES(LCR_ROW_LIB)",
    knll_row_sea="SYS.LCR$_ROW_RECORD.SET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knll_row_set_text="SYS.LCR$_ROW_RECORD.SET_ROW_TEXT(LCR_ROW_LIB)",
    knll_row_slinfo="SYS.LCR$_ROW_RECORD.SET_LOB_INFORMATION(LCR_ROW_LIB)",
    knll_row_slsize="SYS.LCR$_ROW_RECORD.SET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knll_row_soff="SYS.LCR$_ROW_RECORD.SET_LOB_OFFSET(LCR_ROW_LIB)",
    knll_row_sonm="SYS.LCR$_ROW_RECORD.SET_OBJECT_NAME(LCR_ROW_LIB)",
    knll_row_sown="SYS.LCR$_ROW_RECORD.SET_OBJECT_OWNER(LCR_ROW_LIB)",
    knll_row_ssdn="SYS.LCR$_ROW_RECORD.SET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knll_row_ssrn="SYS.LCR$_ROW_RECORD.SET_ROOT_NAME(LCR_ROW_LIB)",
    knll_row_stag="SYS.LCR$_ROW_RECORD.SET_TAG(LCR_ROW_LIB)",
    knll_row_sxinfo="SYS.LCR$_ROW_RECORD.SET_XML_INFORMATION(LCR_ROW_LIB)",
    knlLcrIntToExt="SYS.DBMS_LOGREP_UTIL.CONVERT_INT_TO_EXT_LCR(DBMS_LOGREP_LIB)",
    knllcrtoxml="SYS.DBMS_STREAMS_LCR_INT.CONVERT_LCR_TO_XML_INT(DBMS_LOGREP_LIB)",
    knllddlcons="SYS.LCR$_DDL_RECORD.set_source_database_name(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.construct(LCR_DDL_LIB)",
    knllddlgbown="SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knllddlgbtnm="SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knllddlgcompat="SYS.LCR$_DDL_RECORD.GET_COMPATIBLE_INTERNAL(LCR_DDL_LIB)",
    knllddlgcsma="SYS.LCR$_DDL_RECORD.GET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knllddlgct="SYS.LCR$_DDL_RECORD.GET_COMMAND_TYPE(LCR_DDL_LIB)",
    knllddlgcusr="SYS.LCR$_DDL_RECORD.GET_CURRENT_USER(LCR_DDL_LIB)",
    knllddlgddl="SYS.LCR$_DDL_RECORD.GET_DDL_TEXT(LCR_DDL_LIB)",
    knllddlgea="SYS.LCR$_DDL_RECORD.GET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knllddlgedt="SYS.LCR$_DDL_RECORD.GET_EDITION_NAME(LCR_DDL_LIB)",
    knllddlgetposition="SYS.LCR$_DDL_RECORD.GET_POSITION(LCR_DDL_LIB)",
    knllddlgetsrctime="SYS.LCR$_DDL_RECORD.GET_SOURCE_TIME(LCR_DDL_LIB)",
    knllddlgetthreadnum="SYS.LCR$_DDL_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_DDL_LIB)",
    knllddlglusr="SYS.LCR$_DDL_RECORD.GET_LOGON_USER(LCR_DDL_LIB)",
    knllddlgonm="SYS.LCR$_DDL_RECORD.GET_OBJECT_NAME(LCR_DDL_LIB)",
    knllddlgotp="SYS.LCR$_DDL_RECORD.GET_OBJECT_TYPE(LCR_DDL_LIB)",
    knllddlgown="SYS.LCR$_DDL_RECORD.GET_OBJECT_OWNER(LCR_DDL_LIB)",
    knllddlgscn="SYS.LCR$_DDL_RECORD.MAP_LCR(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.GET_SCN(LCR_DDL_LIB)",
    knllddlgsdn="SYS.LCR$_DDL_RECORD.GET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knllddlgsrn="SYS.LCR$_DDL_RECORD.GET_ROOT_NAME(LCR_DDL_LIB)",
    knllddlgtag="SYS.LCR$_DDL_RECORD.GET_TAG(LCR_DDL_LIB)",
    knllddlgtxid="SYS.LCR$_DDL_RECORD.GET_TRANSACTION_ID(LCR_DDL_LIB)",
    knllddlintg="SYS.LCR$_DDL_RECORD.IS_NULL_TAG(LCR_DDL_LIB)",
    knllddlsbown="SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knllddlsbtnm="SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knllddlscsma="SYS.LCR$_DDL_RECORD.SET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knllddlsct="SYS.LCR$_DDL_RECORD.SET_COMMAND_TYPE(LCR_DDL_LIB)",
    knllddlscusr="SYS.LCR$_DDL_RECORD.SET_CURRENT_USER(LCR_DDL_LIB)",
    knllddlsddl="SYS.LCR$_DDL_RECORD.SET_DDL_TEXT(LCR_DDL_LIB)",
    knllddlsea="SYS.LCR$_DDL_RECORD.SET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knllddlsedt="SYS.LCR$_DDL_RECORD.SET_EDITION_NAME(LCR_DDL_LIB)",
    knllddlslusr="SYS.LCR$_DDL_RECORD.SET_LOGON_USER(LCR_DDL_LIB)",
    knllddlsonm="SYS.LCR$_DDL_RECORD.SET_OBJECT_NAME(LCR_DDL_LIB)",
    knllddlsotp="SYS.LCR$_DDL_RECORD.SET_OBJECT_TYPE(LCR_DDL_LIB)",
    knllddlsown="SYS.LCR$_DDL_RECORD.SET_OBJECT_OWNER(LCR_DDL_LIB)",
    knllddlssdn="SYS.LCR$_DDL_RECORD.SET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knllddlssrn="SYS.LCR$_DDL_RECORD.SET_ROOT_NAME(LCR_DDL_LIB)",
    knllddlstag="SYS.LCR$_DDL_RECORD.SET_TAG(LCR_DDL_LIB)",
    knllprcgcompat="SYS.LCR$_PROCEDURE_RECORD.GET_COMPATIBLE(LCR_PRC_LIB)",
    knllprcgcurusr="SYS.LCR$_PROCEDURE_RECORD.GET_CURRENT_USER(LCR_PRC_LIB)",
    knllprcgdefusr="SYS.LCR$_PROCEDURE_RECORD.GET_DEFAULT_USER(LCR_PRC_LIB)",
    knllprcgetposition="SYS.LCR$_PROCEDURE_RECORD.GET_POSITION(LCR_PRC_LIB)",
    knllprcgetsrctime="SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_TIME(LCR_PRC_LIB)",
    knllprcgetthreadnum="SYS.LCR$_PROCEDURE_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_PRC_LIB)",
    knllprcglogusr="SYS.LCR$_PROCEDURE_RECORD.GET_LOGON_USER(LCR_PRC_LIB)",
    knllprcgpknm="SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_NAME(LCR_PRC_LIB)",
    knllprcgpkown="SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_OWNER(LCR_PRC_LIB)",
    knllprcgprms="SYS.LCR$_PROCEDURE_RECORD.GET_PARAMETERS(LCR_PRC_LIB)",
    knllprcgprnm="SYS.LCR$_PROCEDURE_RECORD.GET_PROCEDURE_NAME(LCR_PRC_LIB)",
    knllprcgpub="SYS.LCR$_PROCEDURE_RECORD.GET_PUBLICATION(LCR_PRC_LIB)",
    knllprcgroot="SYS.LCR$_PROCEDURE_RECORD.GET_ROOT_NAME(LCR_PRC_LIB)",
    knllprcgscn="SYS.LCR$_PROCEDURE_RECORD.map_lcr(LCR_PRC_LIB)/SYS.LCR$_PROCEDURE_RECORD.GET_SCN(LCR_PRC_LIB)",
    knllprcgsdn="SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_DATABASE_NAME(LCR_PRC_LIB)",
    knllprcgtag="SYS.LCR$_PROCEDURE_RECORD.GET_TAG(LCR_PRC_LIB)",
    knllprcgtxid="SYS.LCR$_PROCEDURE_RECORD.GET_TRANSACTION_ID(LCR_PRC_LIB)",
    knllprcintg="SYS.LCR$_PROCEDURE_RECORD.IS_NULL_TAG(LCR_PRC_LIB)",
    knllrowacol="SYS.LCR$_ROW_RECORD.ADD_COLUMN(LCR_ROW_LIB)",
    knllrowcons="SYS.LCR$_ROW_RECORD.set_source_database_name(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.construct(LCR_ROW_LIB)",
    knllrowdcol="SYS.LCR$_ROW_RECORD.DELETE_COLUMN(LCR_ROW_LIB)",
    knllrowgcompat="SYS.LCR$_ROW_RECORD.GET_COMPATIBLE_INTERNAL(LCR_ROW_LIB)",
    knllrowgct="SYS.LCR$_ROW_RECORD.GET_COMMAND_TYPE(LCR_ROW_LIB)",
    knllrowgcvl="SYS.LCR$_ROW_RECORD.GET_VALUE(LCR_ROW_LIB)",
    knllrowgcvls="SYS.LCR$_ROW_RECORD.GET_VALUES(LCR_ROW_LIB)",
    knllrowgea="SYS.LCR$_ROW_RECORD.GET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knllrowgetbaseoid="SYS.LCR$_ROW_RECORD.GET_BASE_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knllrowgetobjn="SYS.LCR$_ROW_RECORD.GET_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knllrowgetposition="SYS.LCR$_ROW_RECORD.GET_POSITION(LCR_ROW_LIB)",
    knllrowgetsrctime="SYS.LCR$_ROW_RECORD.GET_SOURCE_TIME(LCR_ROW_LIB)",
    knllrowgettext="SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knllrowgettextbind="SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knllrowgetthreadnum="SYS.LCR$_ROW_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_ROW_LIB)",
    knllrowgetwc="SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knllrowgetwcbind="SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knllrowglinfo="SYS.LCR$_ROW_RECORD.GET_LOB_INFORMATION(LCR_ROW_LIB)",
    knllrowglninfo="SYS.LCR$_ROW_RECORD.GET_LONG_INFORMATION(LCR_ROW_LIB)",
    knllrowglsize="SYS.LCR$_ROW_RECORD.GET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knllrowgoff="SYS.LCR$_ROW_RECORD.GET_LOB_OFFSET(LCR_ROW_LIB)",
    knllrowgonm="SYS.LCR$_ROW_RECORD.GET_OBJECT_NAME(LCR_ROW_LIB)",
    knllrowgown="SYS.LCR$_ROW_RECORD.GET_OBJECT_OWNER(LCR_ROW_LIB)",
    knllrowgscn="SYS.LCR$_ROW_RECORD.MAP_LCR(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.GET_SCN(LCR_ROW_LIB)",
    knllrowgsdn="SYS.LCR$_ROW_RECORD.GET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knllrowgsrn="SYS.LCR$_ROW_RECORD.GET_ROOT_NAME(LCR_ROW_LIB)",
    knllrowgtag="SYS.LCR$_ROW_RECORD.GET_TAG(LCR_ROW_LIB)",
    knllrowgtxid="SYS.LCR$_ROW_RECORD.GET_TRANSACTION_ID(LCR_ROW_LIB)",
    knllrowgxinfo="SYS.LCR$_ROW_RECORD.GET_XML_INFORMATION(LCR_ROW_LIB)",
    knllrowintg="SYS.LCR$_ROW_RECORD.IS_NULL_TAG(LCR_ROW_LIB)",
    knllrowisstmtlcr="SYS.LCR$_ROW_RECORD.IS_STATEMENT_LCR(LCR_ROW_LIB)",
    knllrowkcols="SYS.LCR$_ROW_RECORD.KEEP_COLUMNS(LCR_ROW_LIB)",
    knllrowlong2lob="SYS.LCR$_ROW_RECORD.CONVERT_LONG_TO_LOB_CHUNK(LCR_ROW_LIB)",
    knllrowrcol="SYS.LCR$_ROW_RECORD.RENAME_COLUMN(LCR_ROW_LIB)",
    knllrowsct="SYS.LCR$_ROW_RECORD.SET_COMMAND_TYPE(LCR_ROW_LIB)",
    knllrowscvl="SYS.LCR$_ROW_RECORD.SET_VALUE(LCR_ROW_LIB)",
    knllrowscvls="SYS.LCR$_ROW_RECORD.SET_VALUES(LCR_ROW_LIB)",
    knllrowsea="SYS.LCR$_ROW_RECORD.SET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knllrowsettext="SYS.LCR$_ROW_RECORD.SET_ROW_TEXT(LCR_ROW_LIB)",
    knllrowslinfo="SYS.LCR$_ROW_RECORD.SET_LOB_INFORMATION(LCR_ROW_LIB)",
    knllrowslsize="SYS.LCR$_ROW_RECORD.SET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knllrowsoff="SYS.LCR$_ROW_RECORD.SET_LOB_OFFSET(LCR_ROW_LIB)",
    knllrowsonm="SYS.LCR$_ROW_RECORD.SET_OBJECT_NAME(LCR_ROW_LIB)",
    knllrowsown="SYS.LCR$_ROW_RECORD.SET_OBJECT_OWNER(LCR_ROW_LIB)",
    knllrowssdn="SYS.LCR$_ROW_RECORD.SET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knllrowssrn="SYS.LCR$_ROW_RECORD.SET_ROOT_NAME(LCR_ROW_LIB)",
    knllrowstag="SYS.LCR$_ROW_RECORD.SET_TAG(LCR_ROW_LIB)",
    knllrowsxinfo="SYS.LCR$_ROW_RECORD.SET_XML_INFORMATION(LCR_ROW_LIB)",
    knlog="kernel replication streams replication goldengate",
    knlprepschemainst_cdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlprepschemainstcdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlprepsynctabs="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_SYNC_TABLE_LIST(DBMS_LOGREP_LIB)",
    knlpreptableinst_cdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlpreptableinstcdb="SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlrevokeadmin="SYS.DBMS_XSTREAM_AUTH_IVK.REVOKE_ADMIN_PRIVILEGE_PDBS(DBMS_LOGREP_LIB)",
    knlrsconn="SYS.DBMS_RECOVERABLE_SCRIPT.CONNECT_CALLOUT(DBMS_RECO_SCRIPT_LIB)",
    knlrsdisconn="SYS.DBMS_RECOVERABLE_SCRIPT.DISCONNECT_CALLOUT(DBMS_RECO_SCRIPT_LIB)",
    knlrsebsn="SYS.DBMS_RECOVERABLE_SCRIPT.EXECUTE_BLOCK_CALLOUT(DBMS_RECO_SCRIPT_LIB)",
    knlsaoerr="SYS.DBMS_APPLY_ADM_INTERNAL.ALTER_OBJECT_ERROR_NOTIFIER(DBMS_LOGREP_LIB)",
    knlsaooper="SYS.DBMS_APPLY_ADM.SET_DML_HANDLER_INTERNAL(DBMS_LOGREP_LIB)",
    knlSetAllocatedMemory="SYS.DBMS_LOGREP_UTIL.SET_ALLOCATED_MEMORY(DBMS_LOGREP_LIB)",
    knlSetCcaMaxPercentage="SYS.DBMS_LOGREP_UTIL.SET_CCA_MAX_PERCENTAGE(DBMS_LOGREP_LIB)",
    knlSetGGFlags="SYS.DBMS_XSTREAM_GG_INTERNAL.SET_GG_SESS_FLAGS_INT(DBMS_LOGREP_LIB)",
    knlSetXStreamBit="SYS.DBMS_XSTREAM_ADM_UTL.SET_GG_XSTREAM_BIT(DBMS_LOGREP_LIB)",
    knlsiCmpOldVal="SYS.DBMS_APPLY_ADM_INTERNAL.COMPARE_OLD_VALUES_INTERNAL(DBMS_LOGREP_LIB)",
    knlsiInst="SYS.DBMS_LOGREP_IMP_INTERNAL.INSTANTIATE(DBMS_LOGREP_LIB)",
    knlsiitb="SYS.DBMS_APPLY_ADM_INTERNAL.INVALIDATE_TABLE_OBJECT(DBMS_LOGREP_LIB)",
    knlsiRegRemObj="SYS.DBMS_APPLY_ADM_INTERNAL.REGISTER_REMOTE_OBJECT(DBMS_LOGREP_LIB)",
    knlsiscc="SYS.DBMS_APPLY_ADM_INTERNAL.SET_CONSTRAINT_COLUMNS(DBMS_LOGREP_LIB)",
    knlsisoc="SYS.DBMS_APPLY_ADM_INTERNAL.SET_OBJECT_CONSTRAINT(DBMS_LOGREP_LIB)",
    knlsiValRemCol="SYS.DBMS_APPLY_ADM_INTERNAL.VALIDATE_REMOTE_COLUMN(DBMS_LOGREP_LIB)",
    knlsmt="SYS.DBMS_STREAMS_ADM_IVK.SET_MESSAGE_TRACKING_INTERNAL(DBMS_LOGREP_LIB)",
    knlspval="SYS.DBMS_LOGREP_UTIL.SET_PARAMETER(DBMS_LOGREP_LIB)",
    knlsrt="SYS.DBMS_STREAMS_ADM_IVK.SET_TAG(DBMS_LOGREP_LIB)",
    knlssaf="SYS.DBMS_LOGREP_UTIL.SET_STREAMS_AUTO_FILTER(DBMS_LOGREP_LIB)",
    knlsskeycol="SYS.DBMS_APPLY_ADM.SET_KEY_COLUMNS_INTERNAL(DBMS_LOGREP_LIB)",
    knlStartProc="SYS.DBMS_LOGREP_UTIL.START_PROCESS(DBMS_LOGREP_LIB)",
    knlStopProc="SYS.DBMS_LOGREP_UTIL.STOP_PROCESS(DBMS_LOGREP_LIB)",
    knlStorePrepareInfo="SYS.DBMS_CAPTURE_ADM_INTERNAL.STORE_PREPARE_INFO(DBMS_LOGREP_LIB)",
    knltcfe="SYS.DBMS_STREAMS_TBS_INT.CHECK_FILE_EXISTS_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltchk="SYS.DBMS_STREAMS_TBS_INT_INVOK.CHECK_PRIVILEGE_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltcpn="SYS.DBMS_STREAMS_TBS_INT.COMPARE_PATH_NAMES_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltdel="SYS.DBMS_STREAMS_TBS_INT.REMOVE_FILE_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltgfn="SYS.DBMS_STREAMS_TBS_INT.GENERATE_FILE_NAME_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltpfn="SYS.DBMS_STREAMS_TBS_INT.PARSE_FILE_NAME_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knlu_mt_purge_btree="SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_PURGE(DBMS_LOGREP_LIB)",
    knlu_mt_resize_btree="SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_RESIZE_INT(DBMS_LOGREP_LIB)",
    knlu_txn_purge_btree="SYS.DBMS_LOGREP_UTIL.STREAMS_TRANSACTION_PURGE_INT(DBMS_LOGREP_LIB)",
    knluenst="SYS.DBMS_LOGREP_UTIL.ENSURE_STREAMS(DBMS_LOGREP_LIB)",
    knluGetConstraint="SYS.DBMS_LOGREP_UTIL.GET_CONSTRAINT_NAME(DBMS_LOGREP_LIB)",
    knluisbit="SYS.DBMS_LOGREP_UTIL.IS_BUILT_IN_TYPE(DBMS_LOGREP_LIB)",
    knluIsCtasSupDml="SYS.DBMS_XSTREAM_GG_INTERNAL.IS_CTAS_NO_DML_SESS_INT(DBMS_LOGREP_LIB)",
    knluIsFooTriggSet="SYS.DBMS_XSTREAM_GG_INTERNAL.IS_FOO_TRIG_FIRE_AT_SESS_INT(DBMS_LOGREP_LIB)",
    knluIsMiningCharsetCompatible="SYS.DBMS_XSTREAM_GG_INTERNAL.IS_CHARSET_COMP_FOR_MINING(DBMS_LOGREP_LIB)",
    knluLock3gl="SYS.DBMS_LOGREP_UTIL.GET_LOCK(DBMS_LOGREP_LIB)",
    knluLock_3gl="SYS.DBMS_LOGREP_UTIL.GET_LOCK(DBMS_LOGREP_LIB)",
    knlumtpurgebtree="SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_PURGE(DBMS_LOGREP_LIB)",
    knlumtresizebtree="SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_RESIZE_INT(DBMS_LOGREP_LIB)",
    knlUnPickleAPR="SYS.DBMS_APPLY_ADM_INTERNAL.UNPICKLE_APPLY_PROGRESS_REDO(DBMS_LOGREP_LIB)",
    knlUnPickleLsbyPR="SYS.DBMS_APPLY_ADM_INTERNAL.UNPICKLE_LSBY_PROGRESS_REDO(DBMS_LOGREP_LIB)",
    knluNumSubs="SYS.DBMS_XSTREAM_ADM_UTL.NUM_SUBSCRIBERS(DBMS_LOGREP_LIB)",
    knlurse="SYS.DBMS_LOGREP_UTIL.RAISE_SYSTEM_ERROR_3GL(DBMS_LOGREP_LIB)",
    knlursw="SYS.DBMS_LOGREP_UTIL.RAISE_SYSTEM_WARNING_3GL(DBMS_LOGREP_LIB)",
    knluScnToPos="SYS.DBMS_XSTREAM_ADM_UTL.CONVERT_SCN_TO_POS(DBMS_LOGREP_LIB)",
    knluSet3xIdenFlag="SYS.DBMS_LOGREP_UTIL.SET_3X_IDEN(DBMS_LOGREP_LIB)",
    knluSetCtasSupDml="SYS.DBMS_XSTREAM_GG_INTERNAL.SET_CTAS_SESS_CTX_INT(DBMS_LOGREP_LIB)",
    knluSetFooTrigg="SYS.DBMS_XSTREAM_GG_INTERNAL.SET_FOO_TRIGGER_CONTXT_INT(DBMS_LOGREP_LIB)",
    knluSetSuppLog="SYS.DBMS_LOGREP_UTIL.SET_SUPP_LOGGING(DBMS_LOGREP_LIB)",
    knlustrcmpcs="SYS.DBMS_LOGREP_UTIL.STRCMP_CS(DBMS_LOGREP_LIB)",
    knluStreamsAdminCheck="SYS.DBMS_LOGREP_UTIL_INVOK.CHECK_DV_STREAMS_ADMIN(DBMS_LOGREP_LIB)",
    knlutxnpurgebtree="SYS.DBMS_LOGREP_UTIL.STREAMS_TRANSACTION_PURGE_INT(DBMS_LOGREP_LIB)",
    knluUnLock3gl="SYS.DBMS_LOGREP_UTIL.RELEASE_LOCK(DBMS_LOGREP_LIB)",
    knluUnLock_3gl="SYS.DBMS_LOGREP_UTIL.RELEASE_LOCK(DBMS_LOGREP_LIB)",
    knlxmltolcr="SYS.DBMS_STREAMS_LCR_INT.CONVERT_XML_TO_LCR_INT(DBMS_LOGREP_LIB)",
    knlzseshasrol="SYS.DBMS_LOGREP_UTIL.SESS_HAS_ROLE(DBMS_LOGREP_LIB)",
    knlzusrhasrol="SYS.DBMS_LOGREP_UTIL.USER_HAS_ROLE(DBMS_LOGREP_LIB)",
    knpc_gcticd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_GCTICD(C)",
    knpc_pricd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_PRICD(C)",
    knpc_puicd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_PUICD(C)",
    knpc_sqbicd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_SQBICD(C)",
    knpcgcticd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_GCTICD(C)",
    knpcpricd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_PRICD(C)",
    knpcpuicd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_PUICD(C)",
    knpcsqbicd="SYS.DBMS_ASYNCRPC_PUSH.KNPC_SQBICD(C)",
    knsq="kernel replication streams/goldengate message queueing",
    knst="kernel replication streams/goldengate",
    knt="kernel replication (internal) triggers",
    kntxit="kernel replication (internal) triggers execute internal triggers",
    kntxlp="kernel replication (internal) triggers exeucte internal triggers for LOB piecewise",
    kntxrl="kernel replication (internal) triggers execute replication trigger for LOB",
    ko="kernel objects",
    koc="kernel objects cache manager",
    kocbeg="kernel objects cache manager begin transaction",
    koccngt="kernel objects cache manager ??",
    kocdsgt="kernel objects cache manager ??",
    kocedd="kernel objects cache manager end duration",
    kocgor="kernel objects cache manager ??",
    kociih="kernel objects cache manager instantiate an instance in the object heap",
    kocpnm="kernel objects cache manager pin an object by name",
    kod="kernel objects data manager (pickler)",
    kod2ppic="kernel objects data manager (pickler) pickle an object into an image",
    kodin2p="kernel objects data manager (pickler) map a name to an pref",
    kodpunp="kernel objects data manager (pickler) unpickle an image into an object",
    kodrdel="SYS.UTL_REF.DELETE_OBJECT(DBMS_UTL_REF_LIB)",
    kodrlk="SYS.UTL_REF.LOCK_OBJECT(DBMS_UTL_REF_LIB)",
    kodrsel="SYS.UTL_REF.SELECT_OBJECT(DBMS_UTL_REF_LIB)",
    kodrslk="SYS.UTL_REF.LOCK_OBJECT(DBMS_UTL_REF_LIB)",
    kodrslsn="SYS.UTL_REF.SELECT_OBJECT_WITH_CR(DBMS_UTL_REF_LIB)",
    kodrupd="SYS.UTL_REF.UPDATE_OBJECT(DBMS_UTL_REF_LIB)",
    koh="kernel objects heap manager",
    kohaii="kernel objects heap manager allocate and initialize an instance",
    kohalc="kernel objects heap manager allocate memory chunk",
    kohatd="kernel objects heap manager allocate using TDs",
    kohdee="kernel objects heap manager duration entry end",
    kohdmpins="kernel objects heap manager ??",
    kohdtg="kernel objects heap manager duration table get a duration entry",
    kohedu="kernel objects heap manager end an user duration",
    kohrsc="kernel objects heap manager resize memory chunk",
    koi="kernel objects interface",
    koicadt="kernel objects interface construct ADT",
    koicupt="kernel objects interface construct UPT",
    koio="kernel objects interface ?",
    koiocon="kernel objects interface ? constructor",
    koionew="kernel objects interface ? create (and pin) a new named instance",
    koiopnm="kernel objects interface ? pin an object by name",
    kok="kernel objects kernel side",
    koka="kernel objects kernel side access",
    kokbtns="kernel objects kernel side type check the nested select operator",
    kokd="kernel objects kernel side driver",
    kokdn2p="kernel objects kernel side driver map a name to an pref",
    koke="kernel objects kernel side OBJECTS images",
    koki="kernel objects kernel side id generator",
    kokl="kernel objects kernel side lob access",
    kokl3="kernel objects kernel side lob access temporary lob access",
    kokla="kernel objects kernel side lob access OBJECTS anydata",
    koklcopy="kernel objects kernel side lob access lob copy",
    koklcpb2c="kernel objects kernel side lob access copy binary data into lob",
    koklcre="kernel objects kernel side lob access lob create",
    koklcwrite="kernel objects kernel side lob access lob write",
    kokleva="kernel objects kernel side lob access lob evaluate",
    kokli="kernel objects kernel side lob access internal",
    kokliclo="kernel objects kernel side lob access internal create with another locator",
    kokligrd="kernel objects kernel side lob access internal initialize kdllfn with row data",
    koklivrl="kernel objects kernel side lob access internal verify the row containing the lob is locked",
    koklm="kernel objects kernel side lob access lob Default",
    koklread="kernel objects kernel side lob access read",
    kokltrim="kernel objects kernel side lob access trim",
    koklv="kernel objects kernel side lob access lob default",
    kokm="kernel objects kernel side methods",
    kokmrwo="kernel objects kernel side methods get new RWO vector enhanced with ordering",
    kokn="kernel objects kernel side ?",
    koknmpn="kernel objects kernel side ? map name and oid",
    koko="kernel objects kernel side objects?",
    kokoupkl="kernel objects kernel side objects? unpickle into and instance",
    koks="kernel objects kernel side semantic analysis",
    kokscupd="kernel objects kernel side semantic analysis check for updatability of column and change adf flag",
    koksxlv="kernel objects kernel side semantic analysis xform operand tree into an L-Value",
    kokt="kernel objects kernel side OBJECTS DDL",
    kola="kernel objects lob",
    kolace="kernel objects lob XDB CSX print",
    kolaErrorHandler="kernel objects lob error handler",
    kolars="kernel objects lob XDB CSX print",
    kolc="kernel objects collection?",
    kolccst="kernel objects collection? construct element callback",
    kolcins="kernel objects collection? inset space for the element at the given index",
    kolcpupkl="kernel objects collection? unpickle collection",
    kole="kernel objects lob default",
    kolf="kernel objects file",
    kolfgdir="kernel objects file get directory object path and filenames",
    kolfopen="kernel objects file open a file",
    koll="kernel objects lob locator",
    kollrsz="kernel objects lob locator resize and initialize a lob locator",
    kolo="kernel objects OBJECTS anydata",
    kolr="kernel objects lob refcount",
    kols="kernel objects ?",
    kolsins="kernel objects ? insert space for the element at the given index",
    kolstins="kernel objects ? tree insert space for the element at the given index",
    koluislc="SYS.UTL_COLL.IS_LOCATOR(DBMS_UTL_COLL_LIB)",
    kope2pic="kernel objects pickler mumbo jumbo",
    kopetrv="kernel objects kop engine and traverse",
    kopldsinit="kernel objects kop lds initialize a pre-allocated lds",
    kos="kernel objects stream interfaces for images/objects",
    kosibegin="kernel objects stream interfaces for images/objects image begin",
    kosiend="kernel objects stream interfaces for images/objects image end callback",
    kot="kernel objects type manager",
    kotg="kernel objects type manager accessor (get)",
    kotgtyp="kernel objects type manager accessor (get) type",
    koxs="kernel objects OBJECTS streams",
    koxsihread="kernel objects OBJECTS streams image handle write from buffer",
    kp="kernel programmatic interface",
    kpbf="kernel programmatic interface progint miscellaneous",
    kpbfcopy="SYS.DBMS_FILE_TRANSFER.COPY_FILE_I(DBMS_FILE_TRANSFER_LIB)",
    kpbfget="SYS.DBMS_FILE_TRANSFER.GET_FILE_I(DBMS_FILE_TRANSFER_LIB)",
    kpbfput="SYS.DBMS_FILE_TRANSFER.PUT_FILE_I(DBMS_FILE_TRANSFER_LIB)",
    kpce="kernel programmatic interface multi threaded network",
    kpcesend="kernel programmatic interface streams advanaced queuing ??",
    kpceterm="kernel programmatic interface multi threaded network terminate any connections from this layer",
    kpcm="kernel programmatic interface streams advanced queuing",
    kpdb="kernel programmatic interface pluggable database",
    kpdbchecknft="SYS.DBMS_PDB.KPDBCHECKNF(C)",
    kpdbcheckplugcompatible="SYS.DBMS_PDB.KPDBCHECKPLUGCOMPATIBLE(C)",
    kpdbchklockdown="SYS.DBMS_PDB.KPDBCHKLOCKDOWN(C)",
    kpdbcleanresolve="SYS.DBMS_PDB.KPDBCLEANRESOLVE(C)",
    kpdbcleanuptask="SYS.DBMS_PDB.KPDBCLEANUPTASK(C)",
    kpdbconverttolocal="SYS.DBMS_PDB.KPDBCONVERTTOLOCAL(C)",
    kpdbcreatecftables="SYS.DBMS_PDB.KPDBCREATECFTABLE(C)",
    kpdbcvupdatecrossconstats="SYS.DBMS_PDB.KPDBCVUPDATECROSSCONSTATS(C)",
    kpdbdescribe="SYS.DBMS_PDB.KPDBDESCRIBE(C)",
    kpdbdropcftables="SYS.DBMS_PDB.KPDBDROPCFTABLE(C)",
    kpdbExecOracleScript="SYS.DBMS_PDB.EXEC_AS_ORACLE_SCRIPT(DBMS_PDB_LIB)",
    kpdbfCopyTaskCbk="kernel programmatic interface pluggable database parallel copy or move file task callback",
    kpdbfDeleteFile="kernel programmatic interface pluggable database delete a file based on copy or move",
    kpdbfdsetprofexplicit="SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETPROFEXPLICIT(C)",
    kpdbfdsetroleexplicit="SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETROLEEXPLICIT(C)",
    kpdbfdsetsharing="SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETSHARING(C)",
    kpdbfdsetuserexplicit="SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETUSEREXPLICIT(C)",
    kpdbisvalidpath="SYS.DBMS_PDB.KPDBISVALIDPATH(C)",
    kpdbLong2Varchar2="SYS.CDBVIEW_INTERNAL.long2varchar2_i(DBMS_PDB_LIB)",
    kpdbmoMoveData="SYS.DBMS_PDB_APP_CON.MOVE_DATA(DBMS_PDB_LIB)",
    kpdbnoncdb2pdb="SYS.DBMS_PDB.KPDBNONCDB2PDB(C)",
    kpdbpopulatesynctable="SYS.DBMS_PDB.KPDBPOPULATESYNCTABL(C)",
    kpdbrecover="SYS.DBMS_PDB.KPDBRECOVER(C)",
    kpdbsync="SYS.DBMS_PDB.KPDBSYN(C)",
    kpdbUpdateCrossConStats="kernel programmatic interface pluggable database DBMS_PDB.KPDBCVUPDATECROSSCONSTRATS UPDATE_CDBVW_STATS",
    kpdbupdatevsn="SYS.DBMS_PDB.KPDBUPDATEVS(C)",
    kpeDbgCrash="kernel programmatic interface ??",
    kpeDbgSignalHandler="kernel programmatic interface ??",
    kpfs="kernel programmatic interface NPI",
    kpin="kernel programmatic interface progint miscellaneous",
    kpk="kernel programmatic interface OCI",
    kpkhetp="SYS.HAEN_TXFM_TEXT.haen_txfm_text(DBMS_HAEVENTNOT_PRVT_LIB)",
    kpkptResolveTNSName="SYS.DBMS_TNS.RESOLVE_TNSNAME(DBMS_TNS_LIB)",
    kpm="kernel programmatic interface transparent session migration",
    kpn="kernel programmatic interface OCI",
    kpndbcon="kernel programmatic interface OCI ??",
    kpo="kernel programmatic interface oracle",
    kpoal8="kernel programmatic interface oracle V8 bundled execution",
    kpoaq="kernel programmatic interface oracle streams advanaced queuing",
    kpoauth="kernel programmatic interface oracle authenticate",
    kpoclsa="kernel programmatic interface oracle close all cursors",
    kpodny="kernel programmatic interface oracle describe any arguments used",
    kpodp="kernel programmatic interface oracle direct path load",
    kpodpp="kernel programmatic interface oracle direct path load ??",
    kpofchswcbk="kernel programmatic interface oracle fetch switch callback",
    kpofrws="kernel programmatic interface oracle ??",
    kpogsk="kernel programmatic interface oracle initializes the session and returns the encrypted session key",
    kpohal="kernel programmatic interface oracle This is the memory allocator that uses kpcch (the common heap module)",
    kpolal="kernel programmatic interface oracle lob allocator",
    kpolnb="kernel programmatic interface oracle ??",
    kpolob="kernel programmatic interface oracle lob operations",
    kpon="kernel programmatic interface oracle notification",
    kponcoord="kernel programmatic interface oracle streams advanaced queuing ??",
    kpond="kernel programmatic interface oracle notification advanced queuing",
    kpone="kernel programmatic interface oracle notification event monitor",
    kponemn="kernel programmatic interface oracle notification event monitor main. emon main loop",
    kponepms="kernel programmatic interface oracle streams advanaced queuing ??",
    kponprmsg="kernel programmatic interface oracle streams advanaced queuing ??",
    kponPurgeUnreachLoc="kernel programmatic interface oracle notification remove registrations for unreachable locations",
    kponsnd="kernel programmatic interface oracle streams advanaced queuing ??",
    kpoodr="kernel programmatic interface oracle replaces ttcdrv to handle pisdef in fastpath mode",
    kpoodrc="kernel programmatic interface oracle replaces ttcdrv to handle pisdef in fastpath mode ??",
    kpoopq="kernel programmatic interface oracle set keyword value pair",
    kpooprx="kernel programmatic interface oracle open, parse, and optionally execute",
    kpoq="kernel programmatic interface oracle result cache",
    kpor="kernel programmatic interface oracle RPC callback for streaming",
    kporpc="kernel programmatic interface oracle RPC callback for streaming the oracle side function to start rpc",
    kposc="kernel programmatic interface oracle scrollable cursors",
    kpotc="kernel programmatic interface oracle setting up trusted external procedure callbacks",
    kpotx="kernel programmatic interface oracle local transaction coordination",
    kpotxcap="kernel programmatic interface oracle local transaction coordination commit, abort and prepare",
    kpotxen="kernel programmatic interface oracle local transaction coordination 2-phase end transaction driver",
    kpov="kernel programmatic interface oracle distributed transaction coordination",
    kpoxcAppContBeginReplay="SYS.DBMS_APP_CONT_PRVT.BEGIN_REPLAY(DBMS_APP_CONT_PRVT_LIB2)",
    kpoxcAppContEndReplay="SYS.DBMS_APP_CONT_PRVT.END_REPLAY(DBMS_APP_CONT_PRVT_LIB2)",
    kpoxcAppContPrepareReplay="SYS.DBMS_APP_CONT_PRVT.PREPARE_REPLAY_INT(DBMS_APP_CONT_PRVT_LIB2)",
    kpp2="kernel programmatic interface parse routine for dimensions",
    kpp3="kernel programmatic interface parse routine for create/alter/drop summary statements",
    kppl="kernel programmatic interface database resistent connection pool",
    kppliatpcp="SYS.DBMS_CONNECTION_POOL.ALTER_PARAM(DBMS_CONNECTION_POOL_LIB)",
    kpplicfgcp="SYS.DBMS_CONNECTION_POOL.CONFIGURE_POOL(DBMS_CONNECTION_POOL_LIB)",
    kpplistpcp="SYS.DBMS_CONNECTION_POOL.STOP_POOL(DBMS_CONNECTION_POOL_LIB)",
    kpplistrcp="SYS.DBMS_CONNECTION_POOL.START_POOL(DBMS_CONNECTION_POOL_LIB)",
    kpr="kernel programmatic interface recursive program interface",
    kprb="kernel programmatic interface recursive program interface bundled operations",
    kprball="kernel programmatic interface recursive program interface bundled operations execute all bundled kpr/rpi operations",
    kprbalo="kernel programmatic interface recursive program interface bundled operations allocator callback",
    kprbbin="kernel programmatic interface recursive program interface bundled operations number of bind variables",
    kprc="kernel programmatic interface recursive program interface RPI copy routines",
    kprccu="kernel programmatic interface recursive program interface RPI copy routines copy data given Uac",
    kprcdt="kernel programmatic interface recursive program interface RPI copy routines copy data",
    kps="kernel programmatic interface transparent session migration",
    kpscrcap="SYS.DBMS_SESSION_STATE.SS_CAPTURE(DBMS_SS_LIB)",
    kpscrmrk="SYS.DBMS_SESSION_STATE.SS_MARK_CAPTURE(DBMS_SS_LIB)",
    kpscrres="SYS.DBMS_SESSION_STATE.SS_RESTORE(DBMS_SS_LIB)",
    kpscrumk="SYS.DBMS_SESSION_STATE.SS_UNMARK_CAPTURE(DBMS_SS_LIB)",
    kptsc="kernel programmatic interface callback functions for streaming operations for replication",
    kpu="kernel programmatic interface user",
    kpuaq="kernel programmatic interface user streams advanaced queuing",
    kpuc="kernel programmatic interface user cursor management functions",
    kpucp="kernel programmatic interface user cursor management functions client side connection pooling support",
    kpudcn2c="kernel programmatic interface user convert Number to Character string",
    kpudp="kernel programmatic interface user DPAPI Load",
    kpuexec="kernel programmatic interface user execute",
    kpuexecv8="kernel programmatic interface user execute execute V8",
    kpufch="kernel programmatic interface user fetch one or more rows",
    kpuhh="kernel programmatic interface user handle heap",
    kpuhhalo="kernel programmatic interface user handle heap allocate memory freeable",
    kpuhhmrk="kernel programmatic interface user handle heap mark",
    kpun="kernel programmatic interface user streams advanced queuing",
    kpur="kernel programmatic interface user remote",
    kpurcs="kernel programmatic interface user remote call with service context",
    kpurcsc="kernel programmatic interface user remote call with service context remote call with service context, callbacks",
    kpureq="kernel programmatic interface user remote request (a statement to be executed)",
    kpuvers="kernel programmatic interface user version",
    kpuzxs="kernel programmatic interface user XS midtier",
    kq="kernel query",
    kqaiconn="SYS.DBMS_DEBUG_JDWP.KQAICONN(C)",
    kqaidisc="SYS.DBMS_DEBUG_JDWP.KQAIDISC(C)",
    kqaigcsi="SYS.DBMS_DEBUG_JDWP.KQAIGCSI(C)",
    kqaigcss="SYS.DBMS_DEBUG_JDWP.KQAIGCSS(C)",
    kqaignp="SYS.DBMS_DEBUG_JDWP.KQAIGNP(C)",
    kqaipcs="SYS.DBMS_DEBUG_JDWP.KQAIPCS(C)",
    kqaipde="SYS.PBSDE.KQAIPDE(C)",
    kqairjd="SYS.DBMS_JAVA_DUMP.KQAIRJD(C)",
    kqaisnp="SYS.DBMS_DEBUG_JDWP.KQAISNP(C)",
    kqaivsn="SYS.DBMS_DEBUG_JDWP.KQAIVSN(C)/SYS.DBMS_JAVA_DUMP.KQAIVSN(C)/SYS.PBSDE.KQAIVSN(C)",
    kqan="kernel query server side debug operations",
    kqap="kernel query server side debug operations",
    kqas="kernel query server side debug operations",
    kqd="kernel query dictionary management",
    kqdgtc="kernel query dictionary management return an open and parsed cursor for a statement",
    kqdobr="kernel query dictionary management read obj$ row using (owner#,name,namespace,remoteowner,linkname) as key",
    kqdobu="kernel query dictionary management verify object uniqueness (?)",
    kqdunr="kernel query dictionary management get user id using name as key",
    kqf="kernel query fixed tables",
    kqfd="kernel query fixed tables direct access to fixed tables",
    kqfp="kernel query fixed tables packages",
    kqfrs="kernel query fixed tables row source",
    kql="kernel query library cache",
    kqlAddSchemaReference="kernel query library cache add a schema during semantic checking",
    kqlb="kernel query library cache bootstrapping support",
    kqlclo="kernel query library cache cleanup nonexistent objects in OBJ$",
    kqld="kernel query library cache dictionary callbacks",
    kqldprr="kernel query library cache dictionary callbacks parent referential constraint read",
    kqlfbct="kernel query library cache ??",
    kqlfbctc="kernel query library cache ??",
    kqlfgl="kernel query library cache get row for Lock, fixed table support",
    kqlfgx="kernel query library cache get row for access table entry, fixed table support",
    kqlftl="kernel query library cache cache fixed Table for Locks callback",
    kqlfxp="kernel query library cache ??",
    kqllod="kernel query library cache database object load",
    kqlm="kernel query library cache multi-instance manager",
    kqlmbpil="kernel query library cache multi-instance manager background process a pin instance lock",
    kqlmcdlod="kernel query library cache multi-instance manager mcode heap load",
    kqlnfy="kernel query library cache notify",
    kqlobjlod="kernel query library cache object load",
    kqlobld="kernel query library cache object load",
    kqlobpn="kernel query library cache object pin heaps and load data pieces",
    kqlp="kernel query library cache sharing of sql statements",
    kqlpim="kernel query library cache sharing of sql statements pin and load more heaps",
    kqlplslod="kernel query library cache sharing of sql statements pl/sql object load",
    kqlr="kernel query library cache remote",
    kqlrddsc="kernel query library cache remote describe callback function",
    kqlrds="kernel query library cache remote describe a cursor at the default host",
    kqlrld="kernel query library cache remote load a remote library object",
    kqls="kernel query library cache subordinate set manager",
    kqlsadd="kernel query library cache subordinate set manager add a new element to a subordinate set",
    kqlsget="kernel query library cache subordinate set manager get full constraint definition",
    kqlslod="kernel query library cache subordinate set manager load all subordinate set elements for a given heap",
    kqludp="kernel query library cache update with dependencies",
    kqlunac="kernel query library cache unauthenticate dependents of an object",
    kqlvld="kernel query library cache validate an object",
    kqr="kernel query dictionary/row cache",
    kqreqd="kernel query dictionary/row cache enqueue delete",
    kqrfr="kernel query dictionary/row cache free",
    kqrfrc="kernel query dictionary/row cache free cache",
    kqrfrpo="kernel query dictionary/row cache free pinned object(?)",
    kqrhsh="kernel query dictionary/row cache hash",
    kqrpre="kernel query dictionary/row cache read a parent cache object",
    kqrpre1="kernel query dictionary/row cache read a parent cache object additional 1",
    kqrprl="kernel query dictionary/row cache parent release enqueue",
    kqrrls="kernel query dictionary/row cache release lock",
    kr="kernel redo",
    kra="kernel redo recovery area function",
    krb="kernel redo backup/restore",
    krb1g="kernel redo backup/restore read (and optionally validate) first block of file",
    krbabr="kernel redo backup/restore auto block media recovery",
    krbb="kernel redo backup/restore creation of a backuppiece",
    krbb2ec="kernel redo backup/restore creation of a backuppiece write backuplog records to controlfile at end of backup set",
    krbb3fwb="kernel redo backup/restore creation of a backuppiece finish write buffer for creation of compressed backup pieces",
    krbbcdo="kernel redo backup/restore creation of a backuppiece compression do",
    krbbpc="kernel redo backup/restore creation of a backuppiece piece create",
    krbc="kernel redo backup/restore controlfile",
    krbd="kernel redo backup/restore device control",
    krbdgdal="kernel recovery backup restore device control ??",
    krbdrel="kernel recovery backup restore device control ??",
    krbfgh="kernel redo backup/restore read first block with kGfd. the block must have a kcbh header",
    krbfghv="kernel redo backup/restore read first block with kGfd. the block must have a kcbh header Datafile/control header block Validation. callback from krb1g.",
    krbi="kernel redo backup/restore dbms_backup_restore package",
    krbi_beg_register_auxdfc="SYS.DBMS_BACKUP_RESTORE.KRBI_BEG_REGISTER_AUXDFC(C)",
    krbi_chkcompalg="SYS.DBMS_BACKUP_RESTORE.KRBI_CHKCOMPALG(C)",
    krbi_cleanup_backup_records="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_BACKUP_RECORD(C)",
    krbi_cleanup_foreign_al="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_FOREIGN_A(C)",
    krbi_cleanup_foreign_all="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_CLEANUP_FOREIGN_ALL CLEANUPFOREIGNARCHIVEDLOGS",
    krbi_cleanup_pgax="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_PGA(C)",
    krbi_clear_controlfile="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_CLEARCONTROLFILE CLEARCONTROLFILE",
    krbi_clearcontrolfile="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEARCONTROLFIL(C)",
    krbi_create_fra_acc="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ACC(C)",
    krbi_create_fra_adc="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ADC(C)",
    krbi_create_restorepoint="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_CREATE_RESTPOINT CREATERESTOREPOINT",
    krbi_create_restpoint="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_RESTPOINT(C)",
    krbi_create_xml="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_XML(C)",
    krbi_describeremotepdb="SYS.DBMS_BACKUP_RESTORE.KRBI_DESCRIBEREMOTEPDB(C)",
    krbi_dupfileexists="SYS.DBMS_BACKUP_RESTORE.KRBI_DUPFILEEXISTS(C)",
    krbi_flashback_cf="SYS.DBMS_BACKUP_RESTORE.KRBI_FLASHBACK_CF(C)",
    krbi_free_storage_space="SYS.DBMS_BACKUP_RESTORE.KRBI_FREE_STORAGE_SPACE(C)",
    krbi_gconnect_id="SYS.DBMS_BACKUP_RESTORE.KRBI_GCONNECT_ID(C)",
    krbi_get_primary_constr="SYS.DBMS_BACKUP_RESTORE.KRBI_GET_PRIMARY_CONSTR(C)",
    krbi_get_standby_constr="SYS.DBMS_BACKUP_RESTORE.KRBI_GET_STANDBY_CONSTR(C)",
    krbi_getdupcopy="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_GETDUPCOPY GETDUPLICATEDDATAFILECOPY",
    krbi_getdupdcopy="SYS.DBMS_BACKUP_RESTORE.KRBI_GETDUPDCOPY(C)",
    krbi_getguid="SYS.DBMS_BACKUP_RESTORE.KRBI_GETGUID(C)",
    krbi_getstandbyfname="SYS.DBMS_BACKUP_RESTORE.KRBI_GETSTANDBYFNAME(C)",
    krbi_getxttsname="SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSNAME(C)",
    krbi_getxttsplugname="SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSPLUGNAME(C)",
    krbi_init_fra_metadata="SYS.DBMS_BACKUP_RESTORE.KRBI_INIT_FRA_METADAT(C)",
    krbi_network_backupdf="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPDF(C)",
    krbi_network_backuprl="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPRL(C)",
    krbi_network_backupsf="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPS(C)",
    krbi_network_rdfhdr="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_RDFHDR(C)",
    krbi_network_setmsb="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_SETMSB(C)",
    krbi_parse_plugxml="SYS.DBMS_BACKUP_RESTORE.KRBI_PARSE_PLUGXML(C)",
    krbi_pdb_time_check="SYS.DBMS_BACKUP_RESTORE.KRBI_PDB_TIME_CHECK(C)",
    krbi_preplugin_do_mediarcv="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_DO_MEDIARCV(C)",
    krbi_preplugin_trans="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_TRANS(C)",
    krbi_prepluginrcv_addfile="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_ADDFILE(C)",
    krbi_prepluginrcv_cancel="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_CANCE(C)",
    krbi_prepluginrcv_start="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_START(C)",
    krbi_read_action="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_READ_ACTION",
    krbi_recover_add_file="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_FILE(C)",
    krbi_recover_add_pdb="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_PDB(C)",
    krbi_recover_cancel="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_CANCE(C)",
    krbi_recover_do="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_DO(C)",
    krbi_recover_start="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_START(C)",
    krbi_register_auxdfc="SYS.DBMS_BACKUP_RESTORE.KRBI_REGISTER_AUXDFC(C)",
    krbi_remdupfile="SYS.DBMS_BACKUP_RESTORE.KRBI_REMDUPFIL(C)",
    krbi_remstandbysyncfile="SYS.DBMS_BACKUP_RESTORE.KRBI_REMSTANDBYSYNCFIL(C)",
    krbi_restoreexttfileto="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_RESTOREXTTFILETO RESTOREXTTFILETO",
    krbi_restorexttfileto="SYS.DBMS_BACKUP_RESTORE.KRBI_RESTOREXTTFILETO(C)",
    krbi_rman_usage="SYS.DBMS_BACKUP_RESTORE.KRBI_RMAN_USAGE(C)",
    krbi_save_action="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_SAVE_ACTION",
    krbi_sdbuname_tspitr="SYS.DBMS_BACKUP_RESTORE.KRBI_SDBUNAME_TSPITR(C)",
    krbi_standbysyncfileexists="SYS.DBMS_BACKUP_RESTORE.KRBI_STANDBYSYNCFILEEXISTS(C)",
    krbi_switch_prim_bct="SYS.DBMS_BACKUP_RESTORE.KRBI_SWITCH_PRIM_BC(C)",
    krbi_unlockremotepdb="SYS.DBMS_BACKUP_RESTORE.KRBI_UNLOCKREMOTEPDB(C)",
    krbi_wrtdupcopy="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBI_WRTDUPDCOPY WRITEDUPLICATEDDATAFILECOPY",
    krbi_wrtdupdcopy="SYS.DBMS_BACKUP_RESTORE.KRBI_WRTDUPDCOPY(C)",
    krbi_wrtstandbyfname="SYS.DBMS_BACKUP_RESTORE.KRBI_WRTSTANDBYFNAME(C)",
    krbi_xttrestore="SYS.DBMS_BACKUP_RESTORE.KRBI_XTTRESTORE(C)",
    krbiabf="SYS.DBMS_BACKUP_RESTORE.KRBIABF(C)",
    krbiadft="SYS.DBMS_BACKUP_RESTORE.KRBIADFT(C)",
    krbiaor="SYS.DBMS_BACKUP_RESTORE.KRBIAOR(C)",
    krbiarcfn="SYS.DBMS_BACKUP_RESTORE.KRBIARCFN(C)",
    krbiaux="SYS.DBMS_BACKUP_RESTORE.KRBIAUX(C)",
    krbibab="SYS.DBMS_BACKUP_RESTORE.KRBIBAB(C)",
    krbibackuppiecebackup="SYS.DBMS_BACKUP_RESTORE.KRBIBACKUPPIECEBACKUP(C)",
    krbibackupsetpiece="SYS.DBMS_BACKUP_RESTORE.KRBIBACKUPSETPIECE(C)",
    krbibcf="SYS.DBMS_BACKUP_RESTORE.KRBIBCF(C)",
    krbibckdmpfile="SYS.DBMS_BACKUP_RESTORE.KRBIBCKDMPFILE(C)",
    krbibcle="SYS.DBMS_BACKUP_RESTORE.KRBIBCL(C)",
    krbibdcp="SYS.DBMS_BACKUP_RESTORE.KRBIBDCP(C)",
    krbibdf="SYS.DBMS_BACKUP_RESTORE.KRBIBDF(C)",
    krbibdg="SYS.DBMS_BACKUP_RESTORE.KRBIBDG(C)",
    krbibdmr="SYS.DBMS_BACKUP_RESTORE.KRBIBDMR(C)",
    krbibds="SYS.DBMS_BACKUP_RESTORE.KRBIBDS(C)",
    krbibegregisterauxdfc="SYS.DBMS_BACKUP_RESTORE.KRBI_BEG_REGISTER_AUXDFC(C)",
    krbibgf="SYS.DBMS_BACKUP_RESTORE.KRBIBGF(C)",
    krbibis="SYS.DBMS_BACKUP_RESTORE.KRBIBI(C)",
    krbiblkstat="SYS.DBMS_BACKUP_RESTORE.KRBIBLKSTAT(C)",
    krbibmrc="SYS.DBMS_BACKUP_RESTORE.KRBIBMR(C)",
    krbibmrs="SYS.DBMS_BACKUP_RESTORE.KRBIBMRS(C)",
    krbibpc="SYS.DBMS_BACKUP_RESTORE.KRBIBPC(C)",
    krbibrf="SYS.DBMS_BACKUP_RESTORE.KRBIBRF(C)",
    krbibrl="SYS.DBMS_BACKUP_RESTORE.KRBIBRL(C)",
    krbibrpsby="SYS.DBMS_BACKUP_RESTORE.KRBIBRPSBY(C)",
    krbibsdf="SYS.DBMS_BACKUP_RESTORE.KRBIBSDF(C)",
    krbibsf="SYS.DBMS_BACKUP_RESTORE.KRBIBS(C)",
    krbibsrl="SYS.DBMS_BACKUP_RESTORE.KRBIBSRL(C)",
    krbibsta="SYS.DBMS_BACKUP_RESTORE.KRBIBSTA(C)",
    krbibufc="SYS.DBMS_BACKUP_RESTORE.KRBIBUFC(C)",
    krbibv="SYS.DBMS_BACKUP_RESTORE.KRBIBV(C)",
    krbicbbp="SYS.DBMS_BACKUP_RESTORE.KRBICBBP(C)",
    krbicbs="SYS.DBMS_BACKUP_RESTORE.KRBICBS(C)",
    krbiccf="SYS.DBMS_BACKUP_RESTORE.KRBICCF(C)",
    krbicdcp="SYS.DBMS_BACKUP_RESTORE.KRBICDCP(C)",
    krbicdf="SYS.DBMS_BACKUP_RESTORE.KRBICDF(C)",
    krbicf="SYS.DBMS_BACKUP_RESTORE.KRBICF(C)",
    krbichkcompalg="SYS.DBMS_BACKUP_RESTORE.KRBI_CHKCOMPALG(C)",
    krbickeepf="SYS.DBMS_BACKUP_RESTORE.KRBICKEEPF(C)",
    krbickpt="SYS.DBMS_BACKUP_RESTORE.KRBICKPT(C)",
    krbicleanupbackuprecords="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_BACKUP_RECORD(C)",
    krbicleanupforeignal="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_FOREIGN_A(C)",
    krbicleanuppgax="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_PGA(C)",
    krbiclearcontrolfile="SYS.DBMS_BACKUP_RESTORE.KRBI_CLEARCONTROLFIL(C)",
    krbiclrl="SYS.DBMS_BACKUP_RESTORE.KRBICLR(C)",
    krbicmus="SYS.DBMS_BACKUP_RESTORE.KRBICMUS(C)",
    krbicreatefraacc="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ACC(C)",
    krbicreatefraadc="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ADC(C)",
    krbicreaterestpoint="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_RESTPOINT(C)",
    krbicreatexml="SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_XML(C)",
    krbicrl="SYS.DBMS_BACKUP_RESTORE.KRBICRL(C)",
    krbicror="SYS.DBMS_BACKUP_RESTORE.KRBICROR(C)",
    krbicrs="SYS.DBMS_BACKUP_RESTORE.KRBICRS(C)",
    krbicrsr="SYS.DBMS_BACKUP_RESTORE.KRBICRSR(C)",
    krbicsl="SYS.DBMS_BACKUP_RESTORE.KRBICSL(C)",
    krbicssn="SYS.DBMS_BACKUP_RESTORE.KRBICSSN(C)",
    krbictset="SYS.DBMS_BACKUP_RESTORE.KRBICTSET(C)",
    krbicuc="SYS.DBMS_BACKUP_RESTORE.KRBICUC(C)",
    krbicup="SYS.DBMS_BACKUP_RESTORE.KRBICUP(C)",
    krbicus="SYS.DBMS_BACKUP_RESTORE.KRBICU(C)",
    krbicvrt="SYS.DBMS_BACKUP_RESTORE.KRBICVRT(C)",
    krbid2rf="SYS.DBMS_BACKUP_RESTORE.KRBID2RF(C)",
    krbidab="SYS.DBMS_BACKUP_RESTORE.KRBIDAB(C)",
    krbidbp="SYS.DBMS_BACKUP_RESTORE.KRBIDBP(C)",
    krbiddf="SYS.DBMS_BACKUP_RESTORE.KRBIDDF(C)",
    krbideft="SYS.DBMS_BACKUP_RESTORE.KRBIDEFT(C)",
    krbidescriberemotepdb="SYS.DBMS_BACKUP_RESTORE.KRBI_DESCRIBEREMOTEPDB(C)",
    krbidf="SYS.DBMS_BACKUP_RESTORE.KRBIDF(C)",
    krbidrl="SYS.DBMS_BACKUP_RESTORE.KRBIDRL(C)",
    krbidrm="SYS.DBMS_BACKUP_RESTORE.KRBIDRM(C)",
    krbidsta="SYS.DBMS_BACKUP_RESTORE.KRBIDSTA(C)",
    krbidupfileexists="SYS.DBMS_BACKUP_RESTORE.KRBI_DUPFILEEXISTS(C)",
    krbidvac="SYS.DBMS_BACKUP_RESTORE.KRBIDVAC(C)",
    krbidvcm="SYS.DBMS_BACKUP_RESTORE.KRBIDVCM(C)",
    krbidvda="SYS.DBMS_BACKUP_RESTORE.KRBIDVDA(C)",
    krbidvq="SYS.DBMS_BACKUP_RESTORE.KRBIDVQ(C)",
    krbiesjnp="SYS.DBMS_BACKUP_RESTORE.KRBIESJNP(C)",
    krbifbaf="SYS.DBMS_BACKUP_RESTORE.KRBIFBAF(C)",
    krbifbc="SYS.DBMS_BACKUP_RESTORE.KRBIFB(C)",
    krbifbf="SYS.DBMS_BACKUP_RESTORE.KRBIFBF(C)",
    krbifbs="SYS.DBMS_BACKUP_RESTORE.KRBIFBS(C)",
    krbiffr="SYS.DBMS_BACKUP_RESTORE.KRBIFFR(C)",
    krbiflashbackcf="SYS.DBMS_BACKUP_RESTORE.KRBI_FLASHBACK_CF(C)",
    krbifreestoragespace="SYS.DBMS_BACKUP_RESTORE.KRBI_FREE_STORAGE_SPACE(C)",
    krbifsft="SYS.DBMS_BACKUP_RESTORE.KRBIFSFT(C)",
    krbigaln="SYS.DBMS_BACKUP_RESTORE.KRBIGALN(C)",
    krbigconnectid="SYS.DBMS_BACKUP_RESTORE.KRBI_GCONNECT_ID(C)",
    krbigcs="SYS.DBMS_BACKUP_RESTORE.KRBIGCS(C)",
    krbigdgn="SYS.DBMS_BACKUP_RESTORE.KRBIGDGN(C)",
    krbigetdupdcopy="SYS.DBMS_BACKUP_RESTORE.KRBI_GETDUPDCOPY(C)",
    krbigetguid="SYS.DBMS_BACKUP_RESTORE.KRBI_GETGUID(C)",
    krbigetprimaryconstr="SYS.DBMS_BACKUP_RESTORE.KRBI_GET_PRIMARY_CONSTR(C)",
    krbigetstandbyconstr="SYS.DBMS_BACKUP_RESTORE.KRBI_GET_STANDBY_CONSTR(C)",
    krbigetstandbyfname="SYS.DBMS_BACKUP_RESTORE.KRBI_GETSTANDBYFNAME(C)",
    krbigetxttsname="SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSNAME(C)",
    krbigetxttsplugname="SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSPLUGNAME(C)",
    krbigfno="SYS.DBMS_BACKUP_RESTORE.KRBIGFNO(C)",
    krbigpn="SYS.DBMS_BACKUP_RESTORE.KRBIGPN(C)",
    krbigtsc="SYS.DBMS_BACKUP_RESTORE.KRBIGTSC(C)",
    krbigtsn="SYS.DBMS_BACKUP_RESTORE.KRBIGTSN(C)",
    krbiialbac="SYS.DBMS_BACKUP_RESTORE.KRBIIALBAC(C)",
    krbiif="SYS.DBMS_BACKUP_RESTORE.KRBIIF(C)",
    krbiimsb="SYS.DBMS_BACKUP_RESTORE.KRBIIMSB(C)",
    krbiimsc="SYS.DBMS_BACKUP_RESTORE.KRBIIMSC(C)",
    krbiimsr="SYS.DBMS_BACKUP_RESTORE.KRBIIMSR(C)",
    krbiinins="SYS.DBMS_BACKUP_RESTORE.KRBIININ(C)",
    krbiinitframetadata="SYS.DBMS_BACKUP_RESTORE.KRBI_INIT_FRA_METADAT(C)",
    krbiisomf="SYS.DBMS_BACKUP_RESTORE.KRBIISOMF(C)",
    krbimaux="SYS.DBMS_BACKUP_RESTORE.KRBIMAUX(C)",
    krbimrsr="SYS.DBMS_BACKUP_RESTORE.KRBIMRSR(C)",
    krbimxi="SYS.DBMS_BACKUP_RESTORE.KRBIMXI(C)",
    krbinbaf="SYS.DBMS_BACKUP_RESTORE.KRBINBAF(C)",
    krbinbdmr="SYS.DBMS_BACKUP_RESTORE.KRBINBDMR(C)",
    krbinbeg="SYS.DBMS_BACKUP_RESTORE.KRBINBEG(C)",
    krbinblkstat="SYS.DBMS_BACKUP_RESTORE.KRBINBLKSTAT(C)",
    krbinbrc="SYS.DBMS_BACKUP_RESTORE.KRBINBR(C)",
    krbinbrfs="SYS.DBMS_BACKUP_RESTORE.KRBINBRFS(C)",
    krbinbrs="SYS.DBMS_BACKUP_RESTORE.KRBINBR(C)",
    krbinend="SYS.DBMS_BACKUP_RESTORE.KRBINEN(C)",
    krbinettransfer="SYS.DBMS_BACKUP_RESTORE.KRBINETTRANSFER(C)",
    krbinetworkbackupdf="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPDF(C)",
    krbinetworkbackuprl="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPRL(C)",
    krbinetworkbackupsf="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPS(C)",
    krbinetworkrdfhdr="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_RDFHDR(C)",
    krbinetworksetmsb="SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_SETMSB(C)",
    krbinfn="SYS.DBMS_BACKUP_RESTORE.KRBINFN(C)",
    krbingni="SYS.DBMS_BACKUP_RESTORE.KRBINGNI(C)",
    krbinpcf="SYS.DBMS_BACKUP_RESTORE.KRBINPCF(C)",
    krbinpdf="SYS.DBMS_BACKUP_RESTORE.KRBINPDF(C)",
    krbiomfn="SYS.DBMS_BACKUP_RESTORE.KRBIOMFN(C)",
    krbiovac="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBIOVAC",
    krbiparseplugxml="SYS.DBMS_BACKUP_RESTORE.KRBI_PARSE_PLUGXML(C)",
    krbipba="SYS.DBMS_BACKUP_RESTORE.KRBIPBA(C)",
    krbipbb="SYS.DBMS_BACKUP_RESTORE.KRBIPBB(C)",
    krbipbcf="SYS.DBMS_BACKUP_RESTORE.KRBIPBCF(C)",
    krbipbdc="SYS.DBMS_BACKUP_RESTORE.KRBIPBDC(C)",
    krbipbdf="SYS.DBMS_BACKUP_RESTORE.KRBIPBDF(C)",
    krbipbr="SYS.DBMS_BACKUP_RESTORE.KRBIPBR(C)",
    krbipcgn="SYS.DBMS_BACKUP_RESTORE.KRBIPCGN(C)",
    krbipcn="SYS.DBMS_BACKUP_RESTORE.KRBIPC(C)",
    krbipdbtimecheck="SYS.DBMS_BACKUP_RESTORE.KRBI_PDB_TIME_CHECK(C)",
    krbipdl="SYS.DBMS_BACKUP_RESTORE.KRBIPDL(C)",
    krbipgo="SYS.DBMS_BACKUP_RESTORE.KRBIPG(C)",
    krbipqb="SYS.DBMS_BACKUP_RESTORE.KRBIPQB(C)",
    krbipqr="SYS.DBMS_BACKUP_RESTORE.KRBIPQR(C)",
    krbipra="SYS.DBMS_BACKUP_RESTORE.KRBIPRA(C)",
    krbiprcf="SYS.DBMS_BACKUP_RESTORE.KRBIPRCF(C)",
    krbiprdf="SYS.DBMS_BACKUP_RESTORE.KRBIPRDF(C)",
    krbipreplugindomediarcv="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_DO_MEDIARCV(C)",
    krbiprepluginrcvaddfile="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_ADDFILE(C)",
    krbiprepluginrcvcancel="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_CANCE(C)",
    krbiprepluginrcvstart="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_START(C)",
    krbipreplugintrans="SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_TRANS(C)",
    krbiprm="SYS.DBMS_BACKUP_RESTORE.KRBIPRM(C)",
    krbipsft="SYS.DBMS_BACKUP_RESTORE.KRBIPSFT(C)",
    krbipvl="SYS.DBMS_BACKUP_RESTORE.KRBIPVL(C)",
    krbiragf="SYS.DBMS_BACKUP_RESTORE.KRBIRAG(C)",
    krbiran="SYS.DBMS_BACKUP_RESTORE.KRBIRA(C)",
    krbirbp="SYS.DBMS_BACKUP_RESTORE.KRBIRBP(C)",
    krbircdf="SYS.DBMS_BACKUP_RESTORE.KRBIRCDF(C)",
    krbircft="SYS.DBMS_BACKUP_RESTORE.KRBIRCFT(C)",
    krbircle="SYS.DBMS_BACKUP_RESTORE.KRBIRCLE(C)",
    krbircp="SYS.DBMS_BACKUP_RESTORE.KRBIRCP(C)",
    krbirdalhd="SYS.DBMS_BACKUP_RESTORE.KRBIRDALHD(C)",
    krbirdb="SYS.DBMS_BACKUP_RESTORE.KRBIRDB(C)",
    krbirdft="SYS.DBMS_BACKUP_RESTORE.KRBIRDFT(C)",
    krbirdhd="SYS.DBMS_BACKUP_RESTORE.KRBIRDHD(C)",
    krbirecfs="SYS.DBMS_BACKUP_RESTORE.KRBIRECFS(C)",
    krbirecoveraddfile="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_FILE(C)",
    krbirecoveraddpdb="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_PDB(C)",
    krbirecovercancel="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_CANCE(C)",
    krbirecoverdo="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_DO(C)",
    krbirecoverstart="SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_START(C)",
    krbiregisterauxdfc="SYS.DBMS_BACKUP_RESTORE.KRBI_REGISTER_AUXDFC(C)",
    krbiremdupfile="SYS.DBMS_BACKUP_RESTORE.KRBI_REMDUPFIL(C)",
    krbiremstandbysyncfile="SYS.DBMS_BACKUP_RESTORE.KRBI_REMSTANDBYSYNCFIL(C)",
    krbirerr="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBIRERR Raise error",
    krbiresdmpfile="SYS.DBMS_BACKUP_RESTORE.KRBIRESDMPFILE(C)",
    krbirestorexttfileto="SYS.DBMS_BACKUP_RESTORE.KRBI_RESTOREXTTFILETO(C)",
    krbiri="SYS.DBMS_BACKUP_RESTORE.KRBIR(C)",
    krbirmanusage="SYS.DBMS_BACKUP_RESTORE.KRBI_RMAN_USAGE(C)",
    krbirrl="SYS.DBMS_BACKUP_RESTORE.KRBIRRL(C)",
    krbirrm="SYS.DBMS_BACKUP_RESTORE.KRBIRR(C)",
    krbirrng="SYS.DBMS_BACKUP_RESTORE.KRBIRRNG(C)",
    krbirsdf="SYS.DBMS_BACKUP_RESTORE.KRBIRSDF(C)",
    krbirsft="SYS.DBMS_BACKUP_RESTORE.KRBIRSFT(C)",
    krbirsp="SYS.DBMS_BACKUP_RESTORE.KRBIRSP(C)",
    krbirsqlexec="SYS.DBMS_BACKUP_RESTORE.KRBIRSQLEXEC(C)",
    krbirsta="SYS.DBMS_BACKUP_RESTORE.KRBIRSTA(C)",
    krbirvd="SYS.DBMS_BACKUP_RESTORE.KRBIRV(C)",
    krbisal="SYS.DBMS_BACKUP_RESTORE.KRBISAL(C)",
    krbisbtv="SYS.DBMS_BACKUP_RESTORE.KRBISBTV(C)",
    krbisdbunametspitr="SYS.DBMS_BACKUP_RESTORE.KRBI_SDBUNAME_TSPITR(C)",
    krbisf="SYS.DBMS_BACKUP_RESTORE.KRBISF(C)",
    krbisl="SYS.DBMS_BACKUP_RESTORE.KRBISL(C)",
    krbislp="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBISL SETLIMIT, GETLIMIT DBMS_BACKUP_RESTORE.KRBISLP SLEEP",
    krbismsb="SYS.DBMS_BACKUP_RESTORE.KRBISMSB(C)",
    krbismsc="SYS.DBMS_BACKUP_RESTORE.KRBISMSC(C)",
    krbisprm="SYS.DBMS_BACKUP_RESTORE.KRBISPRM(C)",
    krbisrid="SYS.DBMS_BACKUP_RESTORE.KRBISRID(C)",
    krbisrm="SYS.DBMS_BACKUP_RESTORE.KRBISRM(C)",
    krbistandbysyncfileexists="SYS.DBMS_BACKUP_RESTORE.KRBI_STANDBYSYNCFILEEXISTS(C)",
    krbistc="SYS.DBMS_BACKUP_RESTORE.KRBISTC(C)",
    krbistcs="SYS.DBMS_BACKUP_RESTORE.KRBISTCS(C)",
    krbiswitch="SYS.DBMS_BACKUP_RESTORE.KRBISWITCH(C)",
    krbiswitchprimbct="SYS.DBMS_BACKUP_RESTORE.KRBI_SWITCH_PRIM_BC(C)",
    krbiswtf="SYS.DBMS_BACKUP_RESTORE.KRBISWTF(C)",
    krbitdblk="SYS.DBMS_BACKUP_RESTORE.KRBITDBLK(C)",
    krbitdbunlk="SYS.DBMS_BACKUP_RESTORE.KRBITDBUNL(C)",
    krbitrc="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBITRC",
    krbitsat="SYS.DBMS_BACKUP_RESTORE.KRBITSAT(C)",
    krbiufc="SYS.DBMS_BACKUP_RESTORE.KRBIUFC(C)",
    krbiufr="SYS.DBMS_BACKUP_RESTORE.KRBIUFR(C)",
    krbiunlockremotepdb="SYS.DBMS_BACKUP_RESTORE.KRBI_UNLOCKREMOTEPDB(C)",
    krbiuphd="SYS.DBMS_BACKUP_RESTORE.KRBIUPHD(C)",
    krbiursr="SYS.DBMS_BACKUP_RESTORE.KRBIURSR(C)",
    krbiurt="SYS.DBMS_BACKUP_RESTORE.KRBIURT(C)",
    krbival="SYS.DBMS_BACKUP_RESTORE.KRBIVAL(C)",
    krbivala="SYS.DBMS_BACKUP_RESTORE.KRBIVALA(C)",
    krbivalblk="SYS.DBMS_BACKUP_RESTORE.KRBIVALBLK(C)",
    krbivale="SYS.DBMS_BACKUP_RESTORE.KRBIVAL(C)",
    krbivaln="SYS.DBMS_BACKUP_RESTORE.KRBIVALN(C)",
    krbivals="SYS.DBMS_BACKUP_RESTORE.KRBIVAL(C)",
    krbivalv="SYS.DBMS_BACKUP_RESTORE.KRBIVALV(C)",
    krbivbp="SYS.DBMS_BACKUP_RESTORE.KRBIVBP(C)",
    krbivdc="SYS.DBMS_BACKUP_RESTORE.KRBIVDC(C)",
    krbivts="SYS.DBMS_BACKUP_RESTORE.KRBIVTS(C)",
    krbiwrtdupdcopy="SYS.DBMS_BACKUP_RESTORE.KRBI_WRTDUPDCOPY(C)",
    krbiwrtstandbyfname="SYS.DBMS_BACKUP_RESTORE.KRBI_WRTSTANDBYFNAME(C)",
    krbiwtrc="kernel redo backup/restore dbms_backup_restore package DBMS_BACKUP_RESTORE.KRBIWTRC WRITETRACE",
    krbixttrestore="SYS.DBMS_BACKUP_RESTORE.KRBI_XTTRESTORE(C)",
    krbizerf="SYS.DBMS_BACKUP_RESTORE.KRBIZERF(C)",
    krbm="kernel redo backup/restore miscellaneous functions",
    krbo="kernel redo backup/restore optimisation",
    krbr="kernel redo backup/restore restore and recovery",
    krbrcc="kernel redo backup/restore restore and recovery clean up conversation",
    krbrpr="kernel redo backup/restore restore and recovery piece read",
    krbrr="kernel redo backup/restore restore and recovery reread corrupt block",
    krbrrp="kernel redo backup/restore restore and recovery reread corrupt block from back piece",
    krbx="kernel redo backup/restore proxy copy controller",
    krby="kernel redo backup/restore image copy",
    krc="kernel redo block change tracking",
    krccacp="kernel redo block change tracking advance the checkpoint",
    krccckp="kernel redo block change tracking checkpoint",
    krcpabs="kernel redo block change tracking I am ctwr",
    krcptmo="kernel redo block change tracking ctwr timeout action, this is the main loop",
    krcrfi="kernel redo block change tracking read file. rman is traversing the bitmaps to find enough historical bitmap data.",
    krd="kernel redo datafiles (media and standby)",
    krd_do_mrp="kernel redo datafiles (media and standby) do managed recovery processing",
    krd_end_rcv="kernel redo datafiles (media and standby) end media recovery",
    krd_implicit_rcv="kernel redo datafiles (media and standby) IMPLICIT ReCoVery for standby open/activation",
    krdrsb="kernel redo datafiles (media and standby) read from standby (?)",
    krdsmr="kernel redo datafiles (media and standby) serial? slave? media recovery",
    krf="kernel redo flashback",
    krf_flashback_db="kernel redo flashback flashback a database from a client other than RMAN",
    krf_restore_driver="kernel redo flashback restore the files in the restore set/flashback restore of the database",
    krfbBuildRestoreSet="kernel redo flashback adds a list if files to flashback to the flashback context",
    krfgdelfb1="kernel redo flashback calculate deleted space (?)",
    krfgfbtofree="kernel redo flashback calculate free space",
    krfxfblog="kernel redo flashback fixed table callback routine for x$kcrfblog",
    krp="kernel redo recovery",
    krp_check_slave_exit="kernel redo recovery wait for ksv slaves to exit",
    krp_slave_apply="kernel redo recovery main redo apply loop",
    krp_slave_main="kernel redo recovery main pmr slave callback",
    krpi="kernel redo recovery dbms_pitr support",
    krpiacp="SYS.DBMS_PITR.KRPIACP(C)",
    krpibexp="SYS.DBMS_PITR.KRPIBEX(C)",
    krpibimp="SYS.DBMS_PITR.KRPIBIMP(C)",
    krpibts="SYS.DBMS_PITR.KRPIBTS(C)",
    krpicpt="SYS.DBMS_PITR.KRPICPT(C)",
    krpidfv="SYS.DBMS_PITR.KRPIDFV(C)",
    krpists="SYS.DBMS_PITR.KRPISTS(C)",
    krs="kernel redo standby/dataguard (?)",
    krsa="kernel redo standby/dataguard (?) access and lock",
    krsc="kernel redo standby/dataguard (?) crash recovery",
    krsd="kernel redo standby/dataguard (?) destination",
    krsh="kernel redo standby/dataguard (?) helper",
    krsm="kernel redo standby/dataguard (?) managed recovery process",
    krsn="kernel redo standby/dataguard (?) network/transport",
    krso="kernel redo standby/dataguard (?) monitor",
    krsr="kernel redo standby/dataguard (?) remote file server",
    krss="kernel redo standby/dataguard (?) scheduler",
    krt="kernel redo tablespaces",
    krta2bz="kernel redo tablespaces obtain blocksize of tablespace",
    krta2rfn="kernel redo tablespaces obtain file number (mos says absolute file number)",
    krtchk="kernel redo tablespaces check consistency (with control file)",
    krtcktt="kernel redo tablespaces check temporary tablespace configuration",
    krv="kernel redo recovery",
    krvarf="SYS.DBMS_LOGMNR.KRVARF(C)",
    krvcp="SYS.DBMS_LOGMNR.KRVCP(C)",
    krvend="SYS.DBMS_LOGMNR.KRVEN(C)",
    krvg="kernel redo recovery generation of redo with DDL",
    krvgdrm="SYS.DBMS_LOGMNR_INTERNAL.KRVGDRM(C)",
    krvgdrm2="SYS.DBMS_LOGMNR_INTERNAL.KRVGDRM2(C)",
    krviad102to101="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_102TO101(DBMS_LOGMNR_LIB)",
    krviad11202to112="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11202TO112(DBMS_LOGMNR_LIB)",
    krviad112to11="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_112TO11(DBMS_LOGMNR_LIB)",
    krviad11to102="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11TO102(DBMS_LOGMNR_LIB)",
    krviad121to11204="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_121TO11204(DBMS_LOGMNR_LIB)",
    krviad12202to122="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_12202TO122(DBMS_LOGMNR_LIB)",
    krviad122to12="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12(DBMS_LOGMNR_LIB)",
    krviad122to12202="kernel redo recovery DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12 DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12202",
    krvialf="SYS.DBMS_LOGMNR_SESSION_INT.ADD_LOG_FILE(DBMS_LOGMNR_LIB)",
    krviarscn="SYS.DBMS_LOGMNR_INTERNAL.ADVANCE_READ_SCN(DBMS_LOGMNR_LIB)",
    krviats="SYS.DBMS_LOGMNR_SESSION_INT.ATTACH_SESSION(DBMS_LOGMNR_LIB)",
    krviau101to102="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_101TO102(DBMS_LOGMNR_LIB)",
    krviau102to11="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_102TO11(DBMS_LOGMNR_LIB)",
    krviau11204to121="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11204TO121(DBMS_LOGMNR_LIB)",
    krviau11to112="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11TO112(DBMS_LOGMNR_LIB)",
    krviau122to12202="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12202(DBMS_LOGMNR_LIB)",
    krviau12to122="SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_12TO122(DBMS_LOGMNR_LIB)",
    krvicdng="SYS.DBMS_LOGMNR_INTERNAL.DOWNGRADE_CKPT(DBMS_LOGMNR_LIB)",
    krvicl="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVICL(DBMS_LOGMNR_LIB)",
    krvicp="SYS.DBMS_LOGMNR_SESSION_INT.COLUMN_PRESENT(DBMS_LOGMNR_LIB)",
    krvics="SYS.DBMS_LOGMNR_SESSION_INT.CREATE_SESSION(DBMS_LOGMNR_LIB)",
    krvicupg="SYS.DBMS_LOGMNR_INTERNAL.UPGRADE_CKPT(DBMS_LOGMNR_LIB)",
    krvidcd="SYS.DBMS_LOGMNR_INTERNAL.DUMP_CKPT_DATA(DBMS_LOGMNR_LIB)",
    krvidib="SYS.DBMS_LOGMNR_INTERNAL.KRVIDIB(DBMS_LOGMNR_LIB)",
    krvidpd="SYS.DBMS_LOGMNR_INTERNAL.DUMP_PAGEOUT_DATA(DBMS_LOGMNR_LIB)",
    krvidscd="SYS.DBMS_LOGMNR_INTERNAL.DUMP_STREAMS_CKPT_DATA(DBMS_LOGMNR_LIB)",
    krvidss="SYS.DBMS_LOGMNR_SESSION_INT.DESTROY_SESSION(DBMS_LOGMNR_LIB)",
    krvidts="SYS.DBMS_LOGMNR_SESSION_INT.DETACH_SESSION(DBMS_LOGMNR_LIB)",
    krviftsi="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIFTSI(DBMS_LOGMNR_LIB)",
    krvigenq="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIGENQ(DBMS_LOGMNR_LIB)",
    krvigrg="SYS.DBMS_LOGMNR_INTERNAL.GET_ROOT_GLOBAL_NAME(DBMS_LOGMNR_LIB)",
    krvigsss="SYS.DBMS_LOGMNR_INTERNAL.KRVIGSSS(DBMS_LOGMNR_LIB)",
    krviisac="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIISAC(DBMS_LOGMNR_LIB)",
    krvilcj="SYS.DBMS_LOGMNR_INTERNAL.KRVILCJ(DBMS_LOGMNR_LIB)",
    krvild="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVILD(DBMS_LOGMNR_LIB)",
    krvilss="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVILSS(DBMS_LOGMNR_LIB)",
    krvilt="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVILT(DBMS_LOGMNR_LIB)",
    krvimv="SYS.DBMS_LOGMNR_SESSION_INT.MINE_VALUE(DBMS_LOGMNR_LIB)",
    krviplead="SYS.DBMS_LOGMNR_INTERNAL.KRVIPLEAD(DBMS_LOGMNR_LIB)",
    krviplenter="SYS.DBMS_LOGMNR_INTERNAL.KRVIPLENTER(DBMS_LOGMNR_LIB)",
    krviplexit="SYS.DBMS_LOGMNR_INTERNAL.KRVIPLEXIT(DBMS_LOGMNR_LIB)",
    krvipliad="SYS.DBMS_LOGMNR_INTERNAL.KRVIPLIAD(DBMS_LOGMNR_LIB)",
    krviplimm="SYS.DBMS_LOGMNR_INTERNAL.KRVIPLIMM(DBMS_LOGMNR_LIB)",
    krvips="SYS.DBMS_LOGMNR_SESSION_INT.PREPARE_SCN_RANGE(DBMS_LOGMNR_LIB)",
    krvirenq="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIRENQ(DBMS_LOGMNR_LIB)",
    krvirlf="SYS.DBMS_LOGMNR_SESSION_INT.REMOVE_LOG_FILE(DBMS_LOGMNR_LIB)",
    krvirm="SYS.DBMS_LOGMNR.KRVIR(C)",
    krvirs="SYS.DBMS_LOGMNR_SESSION_INT.RELEASE_SCN_RANGE(DBMS_LOGMNR_LIB)",
    krvisda="SYS.DBMS_LOGMNR_SESSION_INT.SET_DICT_ATTR(DBMS_LOGMNR_LIB)",
    krvislegc="kernel redo recovery DBMS_LOGMNR_INTERNAL.KRVISLEQC",
    krvisleqc="SYS.DBMS_LOGMNR_INTERNAL.KRVISLEQC(DBMS_LOGMNR_LIB)",
    krvisobj="SYS.DBMS_LOGMNR_INTERNAL.SKIP_OBJ_C(DBMS_LOGMNR_LIB)",
    krvisrba="SYS.DBMS_LOGMNR_INTERNAL.SKIP_RBA(DBMS_LOGMNR_LIB)",
    krvisscn="SYS.DBMS_LOGMNR_INTERNAL.SKIP_SCN(DBMS_LOGMNR_LIB)",
    krvissp="SYS.DBMS_LOGMNR_SESSION_INT.SET_SESSION_PARAMS(DBMS_LOGMNR_LIB)",
    krvisxid="SYS.DBMS_LOGMNR_INTERNAL.SKIP_XID(DBMS_LOGMNR_LIB)",
    krviuld="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIULD(DBMS_LOGMNR_LIB)",
    krviulss="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIULSS(DBMS_LOGMNR_LIB)",
    krviult="SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIULT(DBMS_LOGMNR_LIB)",
    krviusobj="SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_OBJ_C(DBMS_LOGMNR_LIB)",
    krviusrba="SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_RBA(DBMS_LOGMNR_LIB)",
    krviusscn="SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_SCN(DBMS_LOGMNR_LIB)",
    krviusxid="SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_XID(DBMS_LOGMNR_LIB)",
    krvm="kernel redo recovery mine",
    krvmv="SYS.DBMS_LOGMNR.KRVMV(C)",
    krvprof="SYS.DBMS_LOGMNR.KRVPROF(C)",
    krvrgse="SYS.DBMS_LOGMNR_INTERNAL.KRVRGSE(C)",
    krvrgse2="SYS.DBMS_LOGMNR_INTERNAL.KRVRGSE2(C)",
    krvrmgb="SYS.DBMS_LOGMNR_INTERNAL.KRVRMGB(C)",
    krvrrrf="SYS.DBMS_LOGMNR.KRVRRRF(C)",
    krvrrse="SYS.DBMS_LOGMNR_INTERNAL.KRVRRS(C)",
    krvs="kernel redo recovery apply service",
    krvspd="SYS.DBMS_LOGMNR_INTERNAL.KRVSPD(C)",
    krvssf="kernel redo recovery apply service survive failure",
    krvstart="SYS.DBMS_LOGMNR.KRVSTART(C)",
    krvt="kernel redo recovery log miner viewer support",
    krvugaclr="SYS.DBMS_LOGMNR_INTERNAL.KRVUGACL(C)",
    krvugaset="SYS.DBMS_LOGMNR_INTERNAL.KRVUGASE(C)",
    krvx="kernel redo recovery extract",
    ks="kernel service (VOS)",
    ksa="kernel service (VOS) asynchronous messages",
    ksaamb="kernel service (VOS) asynchronous messages allocate message buffer",
    ksadmb="kernel service (VOS) asynchronous messages deallocate message buffer",
    ksarcv="kernel service (VOS) asynchronous messages receive message",
    ksasnd="kernel service (VOS) asynchronous messages send asynchronous message",
    ksasndint="kernel service (VOS) asynchronous messages send asynchronous message send asynchronous message",
    ksb="kernel service (VOS) background processes",
    ksbabs="kernel service (VOS) background processes action based server",
    ksbasend="kernel service (VOS) background processes asynchronous send message main loop",
    ksbckbast="kernel service (VOS) background processes check blocking asynchronous trap",
    ksbcti="kernel service (VOS) background processes call timeout/interrupts",
    ksbd="kernel service (VOS) background processes detached process",
    ksbmsg="kernel service (VOS) background processes call cpu count changed callbacks",
    ksbrdp="kernel service (VOS) background processes run a detached background process",
    ksbsrv="kernel service (VOS) background processes start a multi-stated server process",
    ksbt="kernel service (VOS) background processes background processes",
    ksbx="kernel service (VOS) background processes Xic cross instance calls",
    ksbxiaf="kernel service (VOS) background processes Xic cross instance calls ksbxic (cross instance calls) message and interrupt action",
    ksbxiafdomsg="kernel service (VOS) background processes Xic cross instance calls ksbxic (cross instance calls) message and interrupt action ksbxic and async xic static functions",
    kscn_to_ub8_impl="kernel service (VOS) convert SCN to ub8",
    kscnfy="kernel service (VOS) system notifications to be passed to components",
    kscs="kernel service (VOS) cloud service",
    kscs_cloud_hcc_enabled="kernel service (VOS) cloud service should HCC be enabled?",
    kscs_clouddb_provider_detect="kernel service (VOS) cloud service in what cloud is this instance running",
    kscs_cloudprov_ut="kernel service (VOS) cloud service cloud provider utility. outputs where oracle detects it is running",
    kscs_cloudsim_paramcb="kernel service (VOS) cloud service cloud simulation parameter callback",
    kscs_enabled="kernel service (VOS) cloud service are we in a cloud?",
    kscs_is_exadata_or_oracle_cloud="kernel service (VOS) cloud service is this exadata or oracle cloud?",
    kscs_is_non_oracle_cloud="kernel service (VOS) cloud service is this a non oracle cloud?",
    kscs_is_on_premise="kernel service (VOS) cloud service is this on-premises?",
    kscs_process_param="kernel service (VOS) cloud service process cloud related parameters for determination of services",
    kscsinitcapprovider="kernel service (VOS) cloud service initialize capabilities per provider",
    ksd="kernel service (VOS) debug internal errors",
    ksdacn="kernel service (VOS) debug internal errors action routines for parser",
    ksdddt_icd="SYS.DBMS_SYSTEM.KSDDDT_IC(C)",
    ksdddticd="SYS.DBMS_SYSTEM.KSDDDT_IC(C)",
    ksddoa="kernel service (VOS) debug internal errors debug support do an action",
    ksdfls_icd="SYS.DBMS_SYSTEM.KSDFLS_IC(C)",
    ksdflsicd="SYS.DBMS_SYSTEM.KSDFLS_IC(C)",
    ksdhng="kernel service (VOS) debug internal errors hang analyze",
    ksdind="kernel service (VOS) debug internal errors DBMS_SYSTEM.KSDIND_ICD KSDIND",
    ksdind_icd="SYS.DBMS_SYSTEM.KSDIND_ICD(C)",
    ksdindicd="SYS.DBMS_SYSTEM.KSDIND_ICD(C)",
    ksdnfsp_restore_df_perm="SYS.DBMS_DNFS.KSDNFSP_RESTORE_DF_PERM(C)",
    ksdnfsprestoredfperm="SYS.DBMS_DNFS.KSDNFSP_RESTORE_DF_PERM(C)",
    ksdocrl="kernel service (VOS) debug internal errors check if row is locked",
    ksdp="kernel service (VOS) debug internal errors parser",
    ksdpcg="kernel service (VOS) debug internal errors parser post and check event in the specified event group",
    ksdpec="kernel service (VOS) debug internal errors parser post event and check trigger condition",
    ksdprs="kernel service (VOS) debug internal errors parser parse string",
    ksdwra="kernel service (VOS) debug internal errors write to alert",
    ksdwrf="kernel service (VOS) debug internal errors write to (trace) file",
    ksdwrt="kernel service (VOS) debug internal errors DBMS_SYSTEM.KSDWRT_ICD KSDWRT",
    ksdwrt_icd="SYS.DBMS_SYSTEM.KSDWRT_ICD(C)",
    ksdwrticd="SYS.DBMS_SYSTEM.KSDWRT_ICD(C)",
    ksdxcb="kernel service (VOS) debug internal errors ksdx callback for sosd layer signal handler",
    ksdxen="kernel service (VOS) debug internal errors 2-task entry point",
    ksdxfdmp="kernel service (VOS) debug internal errors ksdx function: invoke named dump",
    ksdxfstk="kernel service (VOS) debug internal errors dump abridged os stack",
    ksdxftev="kernel service (VOS) debug internal errors set trace event",
    ksdxwcwpt="kernel service (VOS) debug internal errors create watchpoint",
    ksdxwdwpt="kernel service (VOS) debug internal errors delete watchpoint",
    kse="kernel service (VOS) error",
    kse_dump_callers="kernel service (VOS) error translate an array that was filled in by kse_get_callers(), and put result into client buffer",
    kse_get_callers="kernel service (VOS) error fill in an array with caller PC values",
    kse_record_stack="kernel service (VOS) error callback implementation for 'record_callstack' trace",
    ksed="kernel service (VOS) error debug",
    ksedmp="kernel service (VOS) error debug dump process state",
    ksedst="kernel service (VOS) error debug dump the call stack",
    ksedst1="kernel service (VOS) error debug dump the call stack stack trace 1 helper",
    ksedsts="kernel service (VOS) error debug dump the call stack short stack",
    ksefic="kernel service error ??",
    kseget_caller="kernel service (VOS) error return a string representation of the calling function's location",
    kseinpre="kernel service error ??",
    ksepop="kernel service (VOS) error perform cleanup when an error frame is being popped",
    kserec1="kernel service (VOS) error record an error code",
    kserec4="kernel service (VOS) error record an error code",
    kserin="kernel service error ??",
    ksesec0="kernel service (VOS) error signal an error code",
    ksesec1="kernel service (VOS) error signal an error code",
    ksesic2="kernel service (VOS) error signal an internal error code",
    ksesin="kernel service (VOS) error signal an internal error (named)",
    ksf="kernel service (VOS) functions",
    ksfd="kernel service (VOS) functions disk IO",
    ksfd_addtoissueq="kernel service (VOS) functions disk IO add requests to issue queue",
    ksfd_chkio="kernel service (VOS) functions disk IO IO checker/io stats",
    ksfd_clear_pgaobjsc="kernel service (VOS) functions disk IO clear pga objects",
    ksfd_do_io_verification="kernel service (VOS) functions disk IO do IO verification",
    ksfd_get_physical_sectsz="kernel service (VOS) functions disk IO read physical sectorsize from device",
    ksfd_gosdrq="kernel service (VOS) functions disk IO get os dependent requests",
    ksfd_io="kernel service (VOS) functions disk IO perform IO",
    ksfd_odm="kernel service (VOS) functions disk IO oracle disks manager",
    ksfd_odmio="kernel service (VOS) functions disk IO oracle disks manager IO",
    ksfd_osdrqfil="kernel service (VOS) functions disk IO operating system dependent request",
    ksfd_sage_poosible="kernel service (VOS) functions disk IO exadata offloading possible check",
    ksfd_sbio="kernel service (VOS) functions disk IO submit block IO",
    ksfd_skgfqio="kernel service (VOS) functions disk IO to system kernel generic file queue IO",
    ksfd_update_iostatstime="kernel service (VOS) functions disk IO update statistics for X$KSFDSTFILE (V$IOSTAT_FILE)",
    ksfdaf="kernel service (VOS) functions disk IO asm files",
    ksfdaio="kernel service (VOS) functions disk IO asynchronous IO",
    ksfdbio="kernel service (VOS) functions disk IO block IO",
    ksfdbio_updatestats="kernel service (VOS) functions disk IO block IO update statistics for X$KSFDSTCMP (V$IOSTAT_FUNCTION)",
    ksfdckerr="kernel service (VOS) functions disk IO check for errrors",
    ksfdDumpPGA="kernel service (VOS) functions disk IO dump ksfd PGA",
    ksfdfchkaio="kernel service (VOS) functions disk IO check if aio can be done",
    ksfdgaiolmt="kernel service (VOS) functions disk IO get aio limit",
    ksfdgfno="kernel service (VOS) functions disk IO get file number",
    ksfdgo="kernel service (VOS) functions disk IO execute IO",
    ksfdgpsz="kernel service (VOS) functions disk IO get physical (sector) size",
    ksfdgrsz="kernel service (VOS) functions disk IO get request size",
    ksfdmp="kernel service (VOS) functions disk IO call the relevant dump routine",
    ksfdnfy="kernel service (VOS) functions disk IO PDB open notifier",
    ksfdopn="kernel service (VOS) functions disk IO open random access file fname",
    ksfdpcl="kernel service (VOS) functions disk IO process IO completion",
    ksfdpgadump="kernel service (VOS) functions disk IO ksfd dump PGA routine",
    ksfdpoll="kernel service (VOS) functions disk IO poll for IO completion",
    ksfdread="kernel service (VOS) functions disk IO read random access file in sync mode",
    ksfdss="kernel service (VOS) functions disk IO snapshot (clonedb)",
    ksfdss_fob_is_snap="kernel service (VOS) functions disk IO snapshot (clonedb) are files in file open block (fob) snapshot files?",
    ksfdss_testdb_renamefile="SYS.DBMS_DNFS.KSFDSS_TESTDB_RENAMEFILE(C)",
    ksfdss_unmountvolume="SYS.DBMS_DNFS.KSFDSS_UNMOUNTVOLUME(C)",
    ksfdsstestdbrenamefile="SYS.DBMS_DNFS.KSFDSS_TESTDB_RENAMEFILE(C)",
    ksfdssunmountvolume="SYS.DBMS_DNFS.KSFDSS_UNMOUNTVOLUME(C)",
    ksfdwat="kernel service (VOS) functions disk IO wait for IOs to finish",
    ksfdwtio="kernel service (VOS) functions disk IO wait for IO",
    ksfflt="kernel service (VOS) functions free latch",
    ksfglt="kernel service (VOS) functions get latch",
    ksfh="kernel service (VOS) functions io helper",
    ksfm="kernel service (VOS) functions file mapping",
    ksfmplsdropall="SYS.DBMS_STORAGE_MAP.DROP_ALL_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsdropelement="SYS.DBMS_STORAGE_MAP.DROP_ELEMENT_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsdropfile="SYS.DBMS_STORAGE_MAP.DROP_FILE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplslockmap="SYS.DBMS_STORAGE_MAP.LOCK_MAP_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsmapelement="SYS.DBMS_STORAGE_MAP.MAP_ELEMENT_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsmapfile="SYS.DBMS_STORAGE_MAP.MAP_FILE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsremvstale="SYS.DBMS_STORAGE_MAP.REMOVE_STALE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsrestore="SYS.DBMS_STORAGE_MAP.RESTORE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsunlockmap="SYS.DBMS_STORAGE_MAP.UNLOCK_MAP_CALLOUT(DBMS_MAP_LIB)",
    ksfpec="kernel service (VOS) functions io post an event",
    ksfq="kernel service (VOS) functions sequential file io interface",
    ksfq_alo="kernel service (VOS) functions sequential file io interface allocate device",
    ksfqfcls="kernel service (VOS) functions sequential file io interface close a sequential file",
    ksfqxdes="kernel service functions io sequential io interface ??",
    ksfsc1="kernel service (VOS) functions OFS file system callback",
    ksfsd="kernel service (VOS) functions OFS file system dispatcher",
    ksfsm="kernel service (VOS) functions OFS file system metadata",
    ksfsp="kernel service (VOS) functions DBMS_FS",
    ksfsp_destroy_fs="SYS.DBMS_FS.KSFSP_DESTROY_FS(C)",
    ksfsp_make_fs="SYS.DBMS_FS.KSFSP_MAKE_FS(C)",
    ksfsp_mount_fs="SYS.DBMS_FS.KSFSP_MOUNT_FS(C)",
    ksfsp_unmount_fs="SYS.DBMS_FS.KSFSP_UNMOUNT_FS(C)",
    ksfspdestroyfs="SYS.DBMS_FS.KSFSP_DESTROY_FS(C)",
    ksfspmakefs="SYS.DBMS_FS.KSFSP_MAKE_FS(C)",
    ksfspmountfs="SYS.DBMS_FS.KSFSP_MOUNT_FS(C)",
    ksfspunmountfs="SYS.DBMS_FS.KSFSP_UNMOUNT_FS(C)",
    ksfv="kernel service (VOS) functions file io server",
    ksi="kernel service (VOS) instance locking",
    ksim="kernel service (VOS) instance locking manager",
    ksimgchg="kernel service (VOS) instance locking manager group state change",
    ksimPrintGroupMemCache="kernel service (VOS) instance locking manager print out group memory cache (oradebug)",
    ksimPrintGroupMemPGA="kernel service (VOS) instance locking manager print out pga group memory (oradebug)",
    ksipc="kernel service (VOS) instance locking VOS IPC",
    ksipcon="kernel service (VOS) instance locking VOS IPC convert a group lock",
    ksipget="kernel service (VOS) instance locking get a group lock (synchronous interface to DLM for lock get)",
    ksiprls="kernel service (VOS) instance locking release a group lock",
    ksires="kernel service instance locking release",
    ksk="kernel service (VOS) resource manager",
    kskadjcpuutil="kernel service (VOS) resource manager adjust cpu utilization (adjusted for instance caging)",
    kskchk="kernel service (VOS) resource manager check resource state for RM",
    kskgetpgalimit="kernel service (VOS) resource manager get pga limit",
    kskinitrm="kernel service (VOS) resource manager initialise resource manager",
    kskiorm="kernel service (VOS) resource manager I/O resource manager",
    ksklheld="kernel service (VOS) resource manager lock held",
    kskosstatact="kernel service (VOS) resource manager operating system statistics act (get os statistics)",
    kskpthr="kernel service (VOS) resource manager post thread",
    kskthbcall="kernel service (VOS) resource manager thread begin call",
    kskthbwt="kernel service (VOS) resource manager thread begin wait",
    kskthecall="kernel service (VOS) resource manager thread end call",
    kskthewt="kernel service (VOS) resource manager thread end wait",
    kskthexit="kernel service (VOS) resource manager thread exit",
    kskthrsod="kernel service (VOS) resource manager thread state object delete",
    kskvmstatact="kernel service (VOS) resource manager measure swap-in and swap-out (and generate error if amount is more than 2% of real memory)",
    kskwait_timed_cpu="kernel service (VOS) resource manager resource manager wait routine",
    ksl="kernel service (VOS) latching and post-wait",
    ksl_get_child_latch_range="kernel service (VOS) latching and post-wait get all child latches for a range",
    ksl_get_child_latches="kernel service (VOS) latching and post-wait get all child latches",
    ksl_get_shared_latch="kernel service (VOS) latching and post-wait get latch in shared mode",
    ksl_get_shared_latch_int="kernel service (VOS) latching and post-wait get latch in shared mode (12.2)",
    ksl_post_proc="kernel service (VOS) latching and post-wait post a single process",
    ksl_postm="kernel service (VOS) latching and post-wait post multiple processes",
    ksl_postm_add="kernel service (VOS) latching and post-wait post multiple processes add a process",
    ksl_postm_do_posts="kernel service (VOS) latching and post-wait post multiple processes post processes",
    ksl_postm_init="kernel service (VOS) latching and post-wait post multiple processes initialise",
    ksl_skgslgts="kernel service (VOS) latching and post-wait spin get of exclusive latch (11g)",
    ksl_update_post_stats="kernel service (VOS) latching and post-wait update processing of posting stats ao. in x$kslpr",
    kslawe="kernel service (VOS) latching and post-wait add post-wait entry",
    kslccll="kernel service (VOS) latching and post-wait clean up after a given latch",
    kslcll="kernel service (VOS) latching and post-wait clean up after a given latch",
    kslcllt="kernel service (VOS) latching and post-wait clean up after a given latch clean up after a given latch",
    kslclt="kernel service (VOS) latching and post-wait create child latch",
    kslconx="kernel service (VOS) latching and post-wait convert latch from shared to exclusive",
    ksle="kernel service (VOS) latching and post-wait event wait",
    kslf2c="kernel service (VOS) latching and post-wait free two child latches",
    kslfre="kernel service (VOS) latching and post-wait free latch",
    kslfred="kernel service (VOS) latching and post-wait free latch free latch, debugging version",
    kslg2c="kernel service (VOS) latching and post-wait get two child latches of the same parent",
    kslg2csl="kernel service (VOS) latching and post-wait get two child latches of the same parent shared latches",
    kslges="kernel service (VOS) latching and post-wait get exclusive latch slow spinning in a loop",
    kslgess="kernel service (VOS) latching and post-wait get exclusive latch slow spinning in a loop shared latch",
    kslgetl="kernel service (VOS) latching and post-wait get latch",
    kslgetsl="kernel service (VOS) latching and post-wait get a shared latch",
    kslgpl="kernel service (VOS) latching and post-wait get parent and child latches",
    kslilcr="kernel service (VOS) latching and post-wait invoke latch cleanup routine",
    ksliwat="kernel service (VOS) latching and post-wait inner wait function; setup a wait that times out",
    ksliwat_cleanup="kernel service (VOS) latching and post-wait inner wait function; setup a wait that times out cleanup post/wait entry",
    kslpsemf="kernel service (VOS) latching and post-wait post semaphores",
    kslpslf="kernel service (VOS) latching and post-wait post list of foregrounds",
    kslpspr="kernel service (VOS) latching and post-wait post the process with that latch",
    kslpwrp_int="kernel service (VOS) latching and post-wait post/wait read post type (to choose single or multi process posting; guess)",
    kslskgs="kernel service (VOS) latching and post-wait spin get of shared latch",
    kslwait="kernel service (VOS) latching and post-wait wait for n centi-seconds or until posted",
    kslwaitctx="kernel service (VOS) latching and post-wait wait for n centi-seconds or until posted wait context; wait until timeout",
    kslwaitns="kernel service (VOS) latching and post-wait wait for n centi-seconds or until posted wait to be awakened w/o calling into the db scheduler",
    kslwat="kernel service (VOS) latching and post-wait wat for event",
    kslwlmod="kernel service (VOS) latching and post-wait wait list modification",
    kslwlscan="kernel service (VOS) latching and post-wait scan write list",
    kslwt="kernel service (VOS) latching and post-wait wait interface",
    kslwt_end_snapshot="kernel service (VOS) latching and post-wait wait interface end snapshot",
    kslwt_update_stats_int="kernel service (VOS) latching and post-wait wait interface update statistics",
    kslwtbctx="kernel service (VOS) latching and post-wait wait interface begin context/wait",
    kslwtectx="kernel service (VOS) latching and post-wait wait interface end context/wait",
    ksm="kernel service (VOS) memory",
    ksm_prepage_sga_seg="kernel service (VOS) memory sga segment selection for prepaging",
    ksmals="kernel service (VOS) memory allocate stack",
    ksmapg="kernel service (VOS) memory callback for allocating a pga extent",
    ksmapply_v2="kernel service (VOS) memory used for prepaging; apply prepage?",
    ksmarfg="kernel service (VOS) memory allocate real free pga(?)",
    ksmasg="kernel service (VOS) memory callback for allocating an sga extent. the sga is fixed size",
    ksmcpg="kernel service (VOS) memory create (variable) pga",
    ksmcsg="kernel service (VOS) memory create sga",
    ksmd="kernel service (VOS) memory state object memory (?)",
    ksmdfr="kernel service (VOS) memory state object memory (?) free memory",
    ksmdpg="kernel service (VOS) memory state object memory (?) deallocate the variable pga. just free top pga heap, the callback will free the extents to osd.",
    ksmem_="kernel service (VOS) memory manipulation",
    ksmerr="kernel service (VOS) memory cleanup any stack memory allocated within the given error frame",
    ksmf="kernel service (VOS) memory fixed sga",
    ksmfpg="kernel service (VOS) memory fixed sga free memory pages",
    ksmh="kernel service (VOS) memory any heap",
    ksmlsg="kernel service (VOS) memory check for errors which occured during sga allocation and mapping",
    ksmp="kernel service (VOS) memory pga heap",
    ksmpgd_cancel_detail="kernel service (VOS) memory pga heap PGA_DETAIL_CANCEL (oradebug/alter session)",
    ksmpgd_dump_detail="kernel service (VOS) memory pga heap dumps pga detail to tracefile. 1 dumps all, otherwise ora pid",
    ksmpgd_get_detail="kernel service (VOS) memory pga heap PGA_DETAIL_GET (oradebug/alter session)",
    ksmprepage="kernel service (VOS) memory pga heap prepage function (only used by sa00?)",
    ksmprepage_memory="kernel service (VOS) memory pga heap prepage function (only used by sa00?) actual prepage function",
    ksmrf="kernel service (VOS) memory real free heap",
    ksmrf_init_alloc="kernel service (VOS) memory real free heap initiate allocation of memory",
    ksms="kernel service (VOS) memory sga heap",
    ksmshu="kernel service (VOS) memory sga heap instance shutdown final check on sga",
    ksmsq="kernel service (VOS) memory sga heap message queue services",
    ksmu="kernel service (VOS) memory uga heap",
    ksmudr="kernel service (VOS) memory uga heap stack segment underflow, free the current stack segment and restore ?",
    ksmuga="kernel service (VOS) memory uga heap allocate user session global data",
    ksmugf="kernel service (VOS) memory uga heap release session global memory",
    ksmuhe="kernel service (VOS) memory uga heap allocate the uga heap using the parent heap specified if state = KSMUGCRE",
    ksmupg="kernel service (VOS) memory uga heap check for references in the session global area to process",
    ksmuse="kernel service (VOS) memory uga heap set pointers to newly allocated memory?",
    ksmxm="kernel service (VOS) memory extended memory (persistent memory)",
    ksmxm_alloc_handle="kernel service (VOS) memory extended memory (persistent memory) allocate handle",
    ksmxm_allocate_areas="kernel service (VOS) memory extended memory (persistent memory) allocate areas",
    ksmxm_apply="kernel service (VOS) memory extended memory (persistent memory) apply",
    ksmxm_attach_xga="kernel service (VOS) memory extended memory (persistent memory) attach xga",
    ksmxm_calculate_memory_info_per_node="kernel service (VOS) memory extended memory (persistent memory) calculate memory info per node",
    ksmxm_check_area_exists="kernel service (VOS) memory extended memory (persistent memory) check area exists",
    ksmxm_create_get_memory_stats="kernel service (VOS) memory extended memory (persistent memory) create get memory statistics",
    ksmxm_create_region="kernel service (VOS) memory extended memory (persistent memory) create region",
    ksmxm_create_xga="kernel service (VOS) memory extended memory (persistent memory) create xga",
    ksmxm_create_xga_metadata="kernel service (VOS) memory extended memory (persistent memory) create xga create xga metadata",
    ksmxm_destroy_xga="kernel service (VOS) memory extended memory (persistent memory) destroy xga",
    ksmxm_detach_xga="kernel service (VOS) memory extended memory (persistent memory) detach xga",
    ksmxm_display_xga_segments_info="kernel service (VOS) memory extended memory (persistent memory) display xga segments info",
    ksmxm_distribute_bc_xmem_regions="kernel service (VOS) memory extended memory (persistent memory) distribute buffer cache regions",
    ksmxm_distribute_imc_xmem_regions="kernel service (VOS) memory extended memory (persistent memory) distribute in-memory column store regions",
    ksmxm_distribute_region_cb="kernel service (VOS) memory extended memory (persistent memory) distribute region callback",
    ksmxm_dump_xga_info="kernel service (VOS) memory extended memory (persistent memory) dump sga info",
    ksmxm_get_area_name="kernel service (VOS) memory extended memory (persistent memory) get area name",
    ksmxm_init="kernel service (VOS) memory extended memory (persistent memory) initialize",
    ksmxm_prepage="kernel service (VOS) memory extended memory (persistent memory) prepage xga",
    ksmxmnfy="kernel service (VOS) memory extended memory (persistent memory) notify",
    ksn="kernel service (VOS) two task",
    kso="kernel service (VOS) operations",
    kso_prespawn_queue_disable="SYS.DBMS_PROCESS.STOP_POOL(DBMS_PROCESS_LIB)",
    kso_prespawn_queue_enable="SYS.DBMS_PROCESS.START_POOL(DBMS_PROCESS_LIB)",
    kso_prespawn_queue_update="SYS.DBMS_PROCESS.CONFIGURE_POOL(DBMS_PROCESS_LIB)",
    ksols="kernel service (VOS) operations object level statistics(?)",
    ksolt="kernel service (VOS) operations lightweight threads",
    ksopid_alive="kernel service (VOS) operations pid alive check",
    ksoprespawnqueuedisable="SYS.DBMS_PROCESS.STOP_POOL(DBMS_PROCESS_LIB)",
    ksoprespawnqueueenable="SYS.DBMS_PROCESS.START_POOL(DBMS_PROCESS_LIB)",
    ksoprespawnqueueupdate="SYS.DBMS_PROCESS.CONFIGURE_POOL(DBMS_PROCESS_LIB)",
    ksp="kernel service (VOS) parameter",
    ksp_param_handle_param="kernel service (VOS) parameter allocate a set of chunks for parameter data",
    ksp_spfile="kernel service (VOS) parameter spfile file management",
    ksp_spfile_open="kernel service (VOS) parameter spfile file management open",
    ksp_spfile_write="kernel service (VOS) parameter spfile file management write",
    kspallmod="(ksp)allmod - kernel service parameter",
    kspGetInstType="kernel service (VOS) parameter validate instance_type",
    kspgir="kernel service (VOS) parameter get range",
    kspgpnicd="SYS.DBMS_UTILITY.KSPGPNICD(C)",
    kspgsp="kernel service (VOS) parameter get string parameter",
    ksppt="kernel service (VOS) parameter parameter table",
    kspptval="kernel service (VOS) parameter parameter table value",
    ksprcvsp="kernel service (VOS) parameter receive spfile information for write to spfile",
    ksq="kernel service (VOS) enqueue",
    ksqcmi="kernel service (VOS) enqueue change lock mode internal",
    ksqcnl="kernel service (VOS) enqueue convert an enqueue's mode",
    ksqcnv="kernel service (VOS) enqueue convert an enqueue's mode",
    ksqcov="kernel service (VOS) enqueue convert an enqueue's mode",
    ksqded="kernel service (VOS) enqueue deadlock check",
    ksqdel="kernel service (VOS) enqueue release an enqueue",
    ksqdldnl="kernel service (VOS) enqueue deadlock dump ktagetg0",
    ksqdmc="kernel service (VOS) enqueue dump lock",
    ksqdmp="kernel service (VOS) enqueue dump details",
    ksqenqalloc="kernel service (VOS) enqueue allocate an enqueue",
    ksqgel="kernel service (VOS) enqueue get and allocate enqueue",
    ksqgelctx="kernel service (VOS) enqueue get and allocate enqueue context",
    ksqget="kernel service (VOS) enqueue get an enqueue",
    ksqgtl="kernel service (VOS) enqueue get an enqueue",
    ksqrcl="kernel service (VOS) enqueue release an enqueue",
    ksqsgn="kernel service (VOS) enqueue procedure to register database name for ?",
    ksqsod="kernel service (VOS) enqueue state object delete",
    ksr="kernel service (VOS) reliable messages",
    ksrma="kernel service (VOS) reliable messages ksrma",
    ksrmf="kernel service (VOS) reliable messages ksrmf",
    kss="kernel service (VOS) state object",
    kss_del_cb="kernel service (VOS) state object delete callback",
    kss_delete_children="kernel service (VOS) state object delete children of SO",
    kssadd="kernel service (VOS) state object add new SO",
    kssadf="kernel service (VOS) state object add SO from free list",
    kssdch="kernel service (VOS) state object delete children of SO",
    kssdch_int="kernel service (VOS) state object delete children of SO internal",
    kssdct="kernel service (VOS) state object delete children of specified type",
    kssdel="kernel service (VOS) state object delete SO",
    kssdmh="kernel service (VOS) state object dump children of a SO",
    kssdmp="kernel service (VOS) state object dump children of a SO",
    kssmc="kernel service (VOS) state object registration caches",
    kssrmf="kernel service (VOS) state object delete SO",
    kssxdl="kernel service (VOS) state object delete SO ignoring errors, cleans latches",
    kst="kernel service (VOS) trace (x$trace)",
    kstdmp="kernel service trace (x$trace) In-memory trace dump",
    kstdump="kernel service trace (x$trace) In-memory trace dump",
    kstm="kernel service (VOS) trace (x$trace) time manager",
    kstmchkdrift="kernel service (VOS) trace (x$trace) time manager check drift",
    kstmgethighresustick="kernel service (VOS) trace (x$trace) time manager get high resolution time",
    ksu="kernel service (VOS) user",
    ksu_detactive_tac="kernel service (VOS) user deactivete time accounting",
    ksu_dispatch_tac="kernel service (VOS) user dispatch timed-out actions (updates wait interface)",
    ksu_update_eoc_stats="kernel service (VOS) user update end of call state(?)",
    ksucin="kernel service (VOS) user check interrupt",
    ksuclc="kernel service (VOS) user cleanup current call",
    ksucln="kernel service (VOS) user cleanup detached process",
    ksuclnwt="kernel service (VOS) user cleanup detached process wait for specified time in seconds",
    ksucre="kernel service (VOS) user create user session in process",
    ksucresg="kernel service (VOS) user create user session in process create session with a process group specified",
    ksucri="kernel service (VOS) user create and initialise process",
    ksucrp="kernel service (VOS) user create and initialise process",
    ksuded="kernel service (VOS) user user disconnect",
    ksudel="kernel service (VOS) user delete specified user session",
    ksudlc="kernel service (VOS) user delete call",
    ksudlp="kernel service (VOS) user delete process. called when user detaches or cleanup by pmon",
    ksudmp="kernel service (VOS) user dump process state object",
    ksudps="kernel service (VOS) user dump process state",
    ksudss="kernel service (VOS) user dump system state",
    ksugetblocker="kernel service user ??",
    ksugtcpums="kernel service (VOS) user get cpu measurement",
    ksuitm="kernel service user ??",
    ksul="kernel service (VOS) user license/language",
    ksumcl="kernel service (VOS) user multi(?) check for process to be alive (checks pmon)",
    ksup="kernel service (VOS) user processes",
    ksupalv="kernel service (VOS) user processes process alive check",
    ksupd="kernel service (VOS) user processes planned draining",
    ksupdProcPls="SYS.DBMS_APP_CONT.PLAN_MAINT_ICD(DBMS_APP_CONT_PMT_LIB)",
    ksupop="kernel service (VOS) user processes pop (restore) user or recursive call",
    ksupr="kernel service (VOS) user processes process object",
    ksuprc="kernel service (VOS) user processes process object process recursive call",
    ksupucg="kernel service (VOS) user processes push user call general",
    ksur="kernel service (VOS) user resource usage",
    ksus="kernel service (VOS) user statistics",
    ksuse="kernel service (VOS) user statistics sessions",
    ksusgn="kernel service (VOS) user statistics session signature",
    ksut="kernel service (VOS) user timer",
    ksuwaitsysevent="kernel service (VOS) user seems to deal with channels (x$ksrchdl, x$ksrcctx)",
    ksux="kernel service (VOS) user instance",
    ksuxda="kernel service (VOS) user instance attempt to delete all processes that are marked dead",
    ksuxdl="kernel service (VOS) user instance delete state object for PMON",
    ksuxds="kernel service (VOS) user instance acquires the ksupol, the SO latch protects access to the sniper bit",
    ksuxfl="kernel service (VOS) user instance find dead processes and cleanup their latches. called by PMON",
    ksv="kernel service (VOS) slave management",
    ksvcheckwait="kernel service (VOS) slave management validate waiting situation",
    ksvcreate="kernel service (VOS) slave management create slave process",
    ksvrdp="kernel service (VOS) slave management run generic detached slave process",
    ksvsend="kernel service (VOS) slave management send message to slave process",
    ksvsubmit="kernel service (VOS) slave management submit request for ASM Onnn slave process",
    ksvwait="kernel service (VOS) slave management setup waiting",
    ksvworkwait="kernel service (VOS) slave management wait for submitted work",
    ksw="kernel service (VOS) workgroup",
    ksws="kernel service (VOS) workgroup services",
    ksws_int_tag_sess="SYS.DBMS_SERVICE.INT_TAG_SESSION(DBMS_SERVICE_LIB)",
    ksws_kill_sess="SYS.DBMS_SERVICE.IKILL_SESSION(DBMS_SERVICE_LIB)",
    ksws_map_rc="SYS.DBMS_SERVICE_ERR.I_MAP_ERROR(DBMS_SERVICE_LIB)",
    ksws_map_rc_to_error="kernel service (VOS) workgroup services DBMS_SERVICE.I_MAP_ERROR (?)",
    ksws_plug_crs="SYS.DBMS_SERVICE.IPLUG_CRS_SERVICES(DBMS_SERVICE_LIB)",
    kswsdls="kernel service (VOS) workgroup services delete service",
    kswsgethash="SYS.DBMS_SERVICE_PRVT.GET_HASH(DBMS_SERVICE_PRVT_LIB)",
    kswsgetosstat="kernel service (VOS) workgroup services get host cpu utilization",
    kswsics="SYS.DBMS_SERVICE.ICREATE_SERVICE(DBMS_SERVICE_LIB)",
    kswsics_nvp="SYS.DBMS_SERVICE.ICREATE_SERVICE(DBMS_SERVICE_LIB)",
    kswsics_nvp_p="SYS.DBMS_SERVICE_PRVT.ICREATE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsicsnvp="SYS.DBMS_SERVICE.ICREATE_SERVICE(DBMS_SERVICE_LIB)",
    kswsicsnvpp="SYS.DBMS_SERVICE_PRVT.ICREATE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsidl="kernel service (VOS) workgroup services DBMS_SERVICE.IDELETE_SERVICE",
    kswsidls="SYS.DBMS_SERVICE.IDELETE_SERVICE(DBMS_SERVICE_LIB)",
    kswsidls_p="SYS.DBMS_SERVICE_PRVT.IDELETE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsidlsp="SYS.DBMS_SERVICE_PRVT.IDELETE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsims="SYS.DBMS_SERVICE.IMODIFY_SERVICE(DBMS_SERVICE_LIB)",
    kswsims_nvp="SYS.DBMS_SERVICE.IMODIFY_SERVICE(DBMS_SERVICE_LIB)",
    kswsims_nvp_p="SYS.DBMS_SERVICE_PRVT.IMODIFY_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsimsnvp="SYS.DBMS_SERVICE.IMODIFY_SERVICE(DBMS_SERVICE_LIB)",
    kswsimsnvpp="SYS.DBMS_SERVICE_PRVT.IMODIFY_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsinttagsess="SYS.DBMS_SERVICE.INT_TAG_SESSION(DBMS_SERVICE_LIB)",
    kswsiss="SYS.DBMS_SERVICE.ISTART_SERVICE(DBMS_SERVICE_LIB)",
    kswsiss_p="SYS.DBMS_SERVICE_PRVT.ISTART_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsissp="SYS.DBMS_SERVICE_PRVT.ISTART_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsists="SYS.DBMS_SERVICE.ISTOP_SERVICE(DBMS_SERVICE_LIB)",
    kswsists_p="SYS.DBMS_SERVICE_PRVT.ISTOP_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsistsp="SYS.DBMS_SERVICE_PRVT.ISTOP_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswskillsess="SYS.DBMS_SERVICE.IKILL_SESSION(DBMS_SERVICE_LIB)",
    kswsmaprc="SYS.DBMS_SERVICE_ERR.I_MAP_ERROR(DBMS_SERVICE_LIB)",
    kswsplugcrs="SYS.DBMS_SERVICE.IPLUG_CRS_SERVICES(DBMS_SERVICE_LIB)",
    ksx="kernel service (VOS) cross instance",
    ksxa="kernel service (VOS) cross instance parallel affinity",
    ksxb1bqb="kernel service (VOS) cross instance memcpy buffer to qb and increment the qb",
    ksxmcln="SYS.DBMS_STATS_INTERNAL.PURGE_ORPHAN_ENTRIES_CALLOUT(DBMS_STATS_LIB)",
    ksxp="kernel service (VOS) cross instance cross instance ipc",
    ksxpcnhent="kernel service cross instance ipc ??",
    ksxplstdmp="kernel service cross instance ipc ??",
    ksxprcvimd="kernel service cross instance ipc ??",
    ksxpwait="kernel service cross instance ipc ??",
    ksxr="kernel service (VOS) cross instance broadcast",
    ksxrpollremote="kernel service (VOS) cross instance broadcast poll for remote messages",
    ksxrrcvmsg="kernel service (VOS) cross instance broadcast receive message",
    ksz="kernel service (VOS) oracle storage server (OSS) server layer",
    ksz_cln_proc1="kernel service ??",
    kt="kernel transaction",
    kta="kernel transaction table access",
    ktaadm="kernel transaction table access get all dml locks",
    ktaftt="kernel transaction table access free temporary table",
    ktagdm="kernel transaction table access get dml lock",
    ktagetg0="kernel transaction table access get generic dml lock",
    ktagetp="kernel transaction table access get partition lock",
    ktaiam="kernel transaction table access internal allocate dml lock",
    ktaidm="kernel transaction table access internal delete dml lock",
    ktaifm="kernel transaction table access internal find dml lock",
    ktam_GetContentCO="SYS.DBMS_APBACKEND.GETCONTENTCO(DBMS_APBACKEND_LIB)",
    ktam_IsAPDebugOn="SYS.DBMS_APBACKEND.ISAPDEBUGON(DBMS_APBACKEND_LIB)",
    ktam_IsReadableOnly="SYS.DBMS_APBACKEND.ISREADABLEONLY(DBMS_APBACKEND_LIB)",
    ktam_remove_backupfile="SYS.DBMS_APBACKEND.REMOVEBACKUPFILE(DBMS_APBACKEND_LIB)",
    ktam_SendCommand="SYS.DBMS_APBACKEND.SENDCOMMANDINTERNAL(DBMS_APBACKEND_LIB)",
    ktam_write_tarball="SYS.DBMS_APBACKEND.WRITETARBALL(DBMS_APBACKEND_LIB)",
    ktam_WriteContentCO="SYS.DBMS_APBACKEND.WRITECONTENTCO(DBMS_APBACKEND_LIB)",
    ktamGetContentCO="SYS.DBMS_APBACKEND.GETCONTENTCO(DBMS_APBACKEND_LIB)",
    ktamIsAPDebugOn="SYS.DBMS_APBACKEND.ISAPDEBUGON(DBMS_APBACKEND_LIB)",
    ktamIsReadableOnly="SYS.DBMS_APBACKEND.ISREADABLEONLY(DBMS_APBACKEND_LIB)",
    ktamp_GetContentCO="kernel transaction table access DBMS_APBACKEND.GETCONTENTCO",
    ktamp_remove_backupfile="kernel transaction table access DBMS_APBACKEND.REMOVEBACKUPFILE",
    ktamp_send_command="kernel transaction table access DBMS_APBACKEND.SENDCOMMANDINTERNAL",
    ktamp_write_tarball="kernel transaction table access DBMS_APBACKEND.WRITETARBALL",
    ktamp_WriteContentCO="kernel transaction table access DBMS_APBACKEND.WRITECONTENTCO",
    ktamremovebackupfile="SYS.DBMS_APBACKEND.REMOVEBACKUPFILE(DBMS_APBACKEND_LIB)",
    ktamSendCommand="SYS.DBMS_APBACKEND.SENDCOMMANDINTERNAL(DBMS_APBACKEND_LIB)",
    ktamWriteContentCO="SYS.DBMS_APBACKEND.WRITECONTENTCO(DBMS_APBACKEND_LIB)",
    ktamwritetarball="SYS.DBMS_APBACKEND.WRITETARBALL(DBMS_APBACKEND_LIB)",
    ktb="kernel transaction block",
    ktbapundo="kernel transaction block apply undo",
    ktbchg2="kernel transaction block (header) change",
    ktbconv="kernel transaction block block convert",
    ktbdbc="kernel transaction block fast block cleanout function",
    ktbgcl="kernel transaction block performs ITL cleanout for RC and CU blocks",
    ktbgcl1="kernel transaction block performs ITL cleanout for RC and CU blocks general clean 1",
    ktbgcur="kernel transaction block get",
    ktbgds="kernel transaction block get dependent SCN",
    ktbgfc="kernel transaction block flush cleanout to disk",
    ktbgfi="kernel transaction block get free ITL",
    ktbgwl="kernel transaction block generate write list (?)",
    ktbisc="kernel transaction block ITL scan",
    ktbrcl="kernel transaction block ITL cleanout routine",
    ktbt="kernel transaction block table",
    ktbtul="kernel transaction block table unlock ITLs",
    ktbtunlk="kernel transaction block table unlock all based on block type",
    ktc="kernel transaction control component",
    ktcbgn="kernel transaction control component begin transaction",
    ktcbod="kernel transaction control component delete the given branch state object and put it on the freelist",
    ktcccdel="kernel transaction control component commit callback delete",
    ktcCommitTxn="kernel transaction control component main commit function, calls ktcCommitTxn_new",
    ktcCommitTxn_new="kernel transaction control component main commit function, calls ktcCommitTxn_new main commit function",
    ktcddt="kernel transaction control component delete distributed transaction",
    ktcdso="kernel transaction control component delete state object",
    ktcgtx="kernel transaction control component get action global area",
    ktcifc="kernel transaction control component idl flush contexts",
    ktcnex_cq_queryid="SYS.DBMS_CHANGE_NOTIFICATION.CQ_NOTIFICATION_QUERYID(DBMS_CHNF_LIB)",
    ktcnexaqreg="SYS.DBMS_CHANGE_NOTIFICATION.INTERNAL_AQ_REGISTER(DBMS_CHNF_LIB)",
    ktcnexaqunreg="SYS.DBMS_CHANGE_NOTIFICATION.INTERNAL_AQ_UNREGISTER(DBMS_CHNF_LIB)",
    ktcnexcqqueryid="SYS.DBMS_CHANGE_NOTIFICATION.CQ_NOTIFICATION_QUERYID(DBMS_CHNF_LIB)",
    ktcnexcregctx="SYS.DBMS_CHANGE_NOTIFICATION.CREATE_NEW_REGCTX(DBMS_CHNF_LIB)",
    ktcnexgcstr="SYS.DBMS_CHANGE_NOTIFICATION.INTERNAL_GET_CONNECT_STR(DBMS_CHNF_LIB)",
    ktcnexoldreg="SYS.DBMS_CHANGE_NOTIFICATION.ENABLE_REG(DBMS_CHNF_LIB)",
    ktcnexregend="SYS.DBMS_CHANGE_NOTIFICATION.REG_END(DBMS_CHNF_LIB)",
    ktcnexrowth="SYS.DBMS_CHANGE_NOTIFICATION.SET_ROWID_THRESHOLD(DBMS_CHNF_LIB)",
    ktcnexuregid="SYS.DBMS_CHANGE_NOTIFICATION.GET_UNIQUE_REGISTRATION_ID(DBMS_CHNF_LIB)",
    ktcrab="kernel transaction control component real abort",
    ktcrcm="kernel transaction control component real commit",
    ktcsod="kernel transaction control component state object procedure vector definition",
    ktcxcb="kernel transaction control component fixed table callback for x$ktcxb",
    ktd="kernel transaction distributed",
    ktdbgn="kernel transaction distributed begin",
    ktdcmt="kernel transaction distributed commit",
    ktdrev="kernel transaction distributed recovery",
    kte="kernel transaction extent management",
    ktec="kernel transaction extent management concurrency",
    ktecgetsh="kernel transaction extent management concurrency get segment header",
    ktecgsc="kernel transaction extent management concurrency get segment header and auto-convert",
    ktecgshx="kernel transaction extent management concurrency ??",
    kteclck="kernel transaction extent management concurrency set extent map lock",
    ktef="kernel transaction extent management extent flush extent map",
    ktehw="kernel transaction extent management high water mark operations",
    ktein="kernel transaction extent management information operations",
    kteinmap="kernel transaction extent management information operations return extent map",
    kteinxtt="kernel transaction extent management information operations extents",
    ktel="kernel transaction extent management loader",
    ktelck="kernel transaction extent management loader set segment header extent map lock",
    ktelrwi="kernel transaction extent management loader redoless write initialize",
    kteop="kernel transaction extent management operations",
    kteopins="kernel transaction extent management operations insert a formatted extent after the high water mark",
    kteopmerge="kernel transaction extent management operations marge extent extent maps",
    kteu="kernel transaction extent management redo support for segment header/extent map changes",
    ktf="kernel transaction flashback support",
    ktfa="kernel transaction flashback support flashback archive",
    ktfa_add_table_to_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.ADD_TABLE_TO_APPLICATION",
    ktfa_disable_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.DISABLE_APPLICATION",
    ktfa_disassociate_fba="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.DISASSOCIATE_FBA_INTERNAL",
    ktfa_do_health_check="kernel transaction flashback support flashback archive do a health check",
    ktfa_drop_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.DROP_APPLICATION",
    ktfa_enable_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.ENABLE_APPLICATION",
    ktfa_extend_mappings="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.EXTEND_MAPPINGS",
    ktfa_get_sys_context="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.GET_SYS_CONTEXT",
    ktfa_import_history="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.IMPORT_HISTORY",
    ktfa_lock_down_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.LOCK_DOWN_APPLICATION",
    ktfa_purge_context="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.PURGE_CONTEXT",
    ktfa_reassociate_fba="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.REASSOCIATE_FBA_INTERNAL",
    ktfa_register_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.REGISTER_APPLICATION",
    ktfa_remtabfapp="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.REMOVE_TABLE_FROM_APPLICATION",
    ktfa_set_context_level="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.SET_CONTEXT_LEVEL",
    ktfa_unlock_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.UNLOCK_APPLICATION",
    ktfactht="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.CREATE_TEMP_HISTORY_TABLE",
    ktfaex_addtabtapp="SYS.DBMS_FLASHBACK_ARCHIVE.ADD_TABLE_TO_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_ctht="SYS.DBMS_FLASHBACK_ARCHIVE.CREATE_TEMP_HISTORY_TABLE(DBMS_FDA_LIB)",
    ktfaex_davt="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_ASOF_VALID_TIME(DBMS_FDA_LIB)",
    ktfaex_disapp="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_disassociate="SYS.DBMS_FLASHBACK_ARCHIVE.DISASSOCIATE_FBA_INTERNAL(DBMS_FDA_LIB)",
    ktfaex_dropapp="SYS.DBMS_FLASHBACK_ARCHIVE.DROP_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_eavt="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_AT_VALID_TIME(DBMS_FDA_LIB)",
    ktfaex_enapp="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_extend_mappings="SYS.DBMS_FLASHBACK_ARCHIVE.EXTEND_MAPPINGS(DBMS_FDA_LIB)",
    ktfaex_get_sys_context="SYS.DBMS_FLASHBACK_ARCHIVE.GET_SYS_CONTEXT_INTERNAL(DBMS_FDA_LIB)",
    ktfaex_import_history="SYS.DBMS_FLASHBACK_ARCHIVE.IMPORT_HISTORY(DBMS_FDA_LIB)",
    ktfaex_ldapp="SYS.DBMS_FLASHBACK_ARCHIVE.LOCK_DOWN_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_purge_context="SYS.DBMS_FLASHBACK_ARCHIVE.PURGE_CONTEXT(DBMS_FDA_LIB)",
    ktfaex_reassociate="SYS.DBMS_FLASHBACK_ARCHIVE.REASSOCIATE_FBA(DBMS_FDA_LIB)",
    ktfaex_register="SYS.DBMS_FLASHBACK_ARCHIVE.REGISTER_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_remtabfapp="SYS.DBMS_FLASHBACK_ARCHIVE.REMOVE_TABLE_FROM_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_set_context_level="SYS.DBMS_FLASHBACK_ARCHIVE.SET_CONTEXT_LEVEL(DBMS_FDA_LIB)",
    ktfaex_ulapp="SYS.DBMS_FLASHBACK_ARCHIVE.UNLOCK_APPLICATION(DBMS_FDA_LIB)",
    ktfaexaddtabtapp="SYS.DBMS_FLASHBACK_ARCHIVE.ADD_TABLE_TO_APPLICATION(DBMS_FDA_LIB)",
    ktfaexctht="SYS.DBMS_FLASHBACK_ARCHIVE.CREATE_TEMP_HISTORY_TABLE(DBMS_FDA_LIB)",
    ktfaexdavt="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_ASOF_VALID_TIME(DBMS_FDA_LIB)",
    ktfaexdisapp="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaexdisassociate="SYS.DBMS_FLASHBACK_ARCHIVE.DISASSOCIATE_FBA_INTERNAL(DBMS_FDA_LIB)",
    ktfaexdropapp="SYS.DBMS_FLASHBACK_ARCHIVE.DROP_APPLICATION(DBMS_FDA_LIB)",
    ktfaexeavt="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_AT_VALID_TIME(DBMS_FDA_LIB)",
    ktfaexenapp="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaexextendmappings="SYS.DBMS_FLASHBACK_ARCHIVE.EXTEND_MAPPINGS(DBMS_FDA_LIB)",
    ktfaexgetsyscontext="SYS.DBMS_FLASHBACK_ARCHIVE.GET_SYS_CONTEXT_INTERNAL(DBMS_FDA_LIB)",
    ktfaeximporthistory="SYS.DBMS_FLASHBACK_ARCHIVE.IMPORT_HISTORY(DBMS_FDA_LIB)",
    ktfaexldapp="SYS.DBMS_FLASHBACK_ARCHIVE.LOCK_DOWN_APPLICATION(DBMS_FDA_LIB)",
    ktfaexpurgecontext="SYS.DBMS_FLASHBACK_ARCHIVE.PURGE_CONTEXT(DBMS_FDA_LIB)",
    ktfaexreassociate="SYS.DBMS_FLASHBACK_ARCHIVE.REASSOCIATE_FBA(DBMS_FDA_LIB)",
    ktfaexregister="SYS.DBMS_FLASHBACK_ARCHIVE.REGISTER_APPLICATION(DBMS_FDA_LIB)",
    ktfaexremtabfapp="SYS.DBMS_FLASHBACK_ARCHIVE.REMOVE_TABLE_FROM_APPLICATION(DBMS_FDA_LIB)",
    ktfaexsetcontextlevel="SYS.DBMS_FLASHBACK_ARCHIVE.SET_CONTEXT_LEVEL(DBMS_FDA_LIB)",
    ktfaexulapp="SYS.DBMS_FLASHBACK_ARCHIVE.UNLOCK_APPLICATION(DBMS_FDA_LIB)",
    ktfb="kernel transaction flashback support bitmapped space manipulation of files/tablespaces",
    ktfbh="kernel transaction flashback support bitmapped space manipulation of files/tablespaces header",
    ktfbt="kernel transaction flashback support bitmapped space manipulation of files/tablespaces extents",
    ktfbtexcfg="SYS.DBMS_FBT.FBT_CLEAR_ANALYZE_FLAG(DBMS_FBT_LIB)",
    ktfbtexsfg="SYS.DBMS_FBT.FBT_SET_ANALYZE_FLAG(DBMS_FBT_LIB)",
    ktfbtgex="kernel transaction flashback support bitmapped space manipulation of files/tablespaces extents get a free extent",
    ktfd="kernel transaction flashback support dictionary based extent management",
    ktfedml="kernel transaction flashback support KUPP$PROC.ENABLE_FLASHBACK_DMLS",
    ktfexedml="SYS.KUPP$PROC.ENABLE_FLASHBACK_DMLS(DBMS_TRAN_LIB)",
    ktfexgscnn="SYS.DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER(DBMS_TRAN_LIB)",
    ktfexscntot="SYS.SCN_TO_TIMESTAMP.scn_to_timestamp(DBMS_TRAN_LIB)",
    ktfexsnrb="SYS.DBMS_FLASHBACK.ENABLE_AT_SYSTEM_CHANGE_NUMBER(DBMS_TRAN_LIB)",
    ktfexsrb="SYS.DBMS_FLASHBACK.ENABLE_AT_TIME(DBMS_TRAN_LIB)",
    ktfexsrd="SYS.DBMS_FLASHBACK.DISABLE(DBMS_TRAN_LIB)",
    ktfexttoscn="SYS.TIMESTAMP_TO_SCN.timestamp_to_scn(DBMS_TRAN_LIB)",
    ktfgscnn="kernel transaction flashback support DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER",
    ktfsnrb="kernel transaction flashback support DBMS_FLASHBACK.ENABLE_AT_SYSTEM_CHANGE_NUMBER",
    ktfsrb="kernel transaction flashback support DBMS_FLASHBACK.ENABLE_AT_TIME",
    ktfsrd="kernel transaction flashback support DBMS_FLASHBACK.DISABLE",
    ktft="kernel transaction flashback support temporary file manipulation",
    ktftb_backout_names="SYS.DBMS_FLASHBACK.INTERNAL_NAMES_BACKOUT(DBMS_TRAN_LIB)",
    ktftb_backout_xids="SYS.DBMS_FLASHBACK.INTERNAL_XIDS_BACKOUT(DBMS_TRAN_LIB)",
    ktftbbackoutnames="SYS.DBMS_FLASHBACK.INTERNAL_NAMES_BACKOUT(DBMS_TRAN_LIB)",
    ktftbbackoutxids="SYS.DBMS_FLASHBACK.INTERNAL_XIDS_BACKOUT(DBMS_TRAN_LIB)",
    ktftbp_backout_xids="kernel transaction flashback support temporary file manipulation DBMS_FLASHBACK.INTERNAL_XIDS_BACKOUT",
    ktfwtsm="kernel transaction flashback support write timestamp",
    kti="kernel transaction in memory undo(?)",
    ktilm="DBMS_ILM",
    ktilm_flush_one_seg="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_SEGMENT_ACCESS_INTERNAL",
    ktilm_flush_rowmaps="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_ROWMAPS",
    ktilm_flush_seg="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_ALL_SEGMENTS",
    ktilm_flush_seg_rowmaps="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_ALL_SEGMENTS DBMS_ILM.FLUSH_SEGMENT_ROWMAP_INTERNAL",
    ktilmex_flush_col_stats="SYS.DBMS_ILM.FLUSH_COL_STATS(DBMS_ILM_LIB)",
    ktilmex_flush_one_seg="SYS.DBMS_ILM.FLUSH_SEGMENT_ACCESS_INTERNAL(DBMS_ILM_LIB)",
    ktilmex_flush_rowmaps="SYS.DBMS_ILM.FLUSH_ROWMAPS(DBMS_ILM_LIB)",
    ktilmex_flush_seg_rowmap="SYS.DBMS_ILM.FLUSH_SEGMENT_ROWMAP_INTERNAL(DBMS_ILM_LIB)",
    ktilmex_flush_segs="SYS.DBMS_ILM.FLUSH_ALL_SEGMENTS(DBMS_ILM_LIB)",
    ktilmexflushcolstats="SYS.DBMS_ILM.FLUSH_COL_STATS(DBMS_ILM_LIB)",
    ktilmexflushoneseg="SYS.DBMS_ILM.FLUSH_SEGMENT_ACCESS_INTERNAL(DBMS_ILM_LIB)",
    ktilmexflushrowmaps="SYS.DBMS_ILM.FLUSH_ROWMAPS(DBMS_ILM_LIB)",
    ktilmexflushsegrowmap="SYS.DBMS_ILM.FLUSH_SEGMENT_ROWMAP_INTERNAL(DBMS_ILM_LIB)",
    ktilmexflushsegs="SYS.DBMS_ILM.FLUSH_ALL_SEGMENTS(DBMS_ILM_LIB)",
    ktl="kernel transaction list blocks changed",
    ktldbl="kernel transaction list blocks changed delete list of block SO's",
    ktli_UpgradeUpdateInstIdAllLogs="kernel transaction list blocks changed DBMS_SECUREFILE_LOG_ADMIN.UPGRADE_INST_ALL_LOGS",
    ktlidestroyalllogmig="SYS.DBMS_SECUREFILE_LOG_ADMIN.DESTROY_ALL_LOGS(DBMS_TLOG_LIB)",
    ktliDestroyAllLogs_Mig="kernel transaction list blocks changed DBMS_SECUREFILE_LOG_ADMIN.DESTROY_ALL_LOGS",
    ktliupdinstidalllogs="SYS.DBMS_SECUREFILE_LOG_ADMIN.UPGRADE_INST_ALL_LOGS(DBMS_TLOG_LIB)",
    ktm="kernel transaction transaction monitor (smon)",
    ktma="kernel transaction transaction monitor (smon) IM transaction ADG",
    ktmb="kernel transaction transaction monitor (smon) IM transaction block",
    ktmc="kernel transaction transaction monitor (smon) IM transaction concurrency",
    ktmirc="kernel transaction transaction monitor (smon) instance recovery",
    ktmjs="kernel transaction transaction monitor (smon) IM transaction journal scan",
    ktmmon="kernel transaction transaction monitor (smon) tx monitor background timeout action (smon)",
    ktmpj="kernel transaction transaction monitor (smon) IM transaction private journal",
    ktmpjInvalidateRow="kernel transaction transaction monitor (smon) IM transaction private journal invalidates the row in a private journal",
    ktmpjUpdInMemExtStat="kernel transaction transaction monitor (smon) IM transaction private journal update inmemory extent statistics",
    ktmr="kernel transaction transaction monitor (smon) IM transaction read",
    ktmres="kernel transaction transaction monitor (smon) IM transaction read resource cleanup routine",
    ktmsj="kernel transaction transaction monitor (smon) IM transaction shared journal",
    ktmSmonMain="kernel transaction transaction monitor (smon) main smon routine",
    ktp="kernel transaction parallel",
    ktpcmt="kernel transaction parallel commit transaction",
    ktpr="kernel transaction parallel recovery",
    ktprbeg="kernel transaction parallel recovery begin",
    ktr="kernel transaction read consistency",
    ktrexc="kernel transaction read consistency examine blocks (consistent gets - examination)",
    ktrexf="kernel transaction read consistency examine blocks (returns best candidate)",
    ktrgcm="kernel transaction read consistency common cr read code; build a cr buffer by applying undo",
    ktrget="kernel transaction read consistency get a read consistent block",
    ktrgtc="kernel transaction read consistency get a read consistent block and call back client",
    ktri="kernel transaction read consistency DBMS_RESUMABLE",
    ktriabt="SYS.DBMS_RESUMABLE.ABORT(DBMS_RESUMABLE_LIB)",
    ktrigst="SYS.DBMS_RESUMABLE.GET_SESSION_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrigt="SYS.DBMS_RESUMABLE.GET_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrisst="SYS.DBMS_RESUMABLE.SET_SESSION_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrist="SYS.DBMS_RESUMABLE.SET_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrsexec="kernel transaction read consistency space management execute",
    ktrvac="kernel transaction read consistency validate active transactions(?)",
    kts="kernel transaction segment management",
    kts4emchk="kernel transaction segment management extended semantic check of the block",
    kts4smck="kernel transaction segment management semantic check of the block",
    ktsa="kernel transaction segment management space analysis(DBMS_SPACE_ADMIN/DBMS_SPACE)",
    ktsap3gl1="SYS.DBMS_SPACE_ADMIN.SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl10="SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_QUOTAS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl11="SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_FROM_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl12="SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl13="SYS.DBMS_SPACE_ADMIN.TABLESPACE_RELOCATE_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl14="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_STATES(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl15="SYS.DBMS_SPACE_ADMIN.SEGMENT_MOVEBLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl16="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_EXTBLKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl17="SYS.DBMS_SPACE_ADMIN.TABLESPACE_DUMP_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl18="SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl19="SYS.DBMS_SPACE_ADMIN.ASSM_TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl2="SYS.DBMS_SPACE_ADMIN.SEGMENT_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl20="SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_REPAIR(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl21="SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_SYNCHWM(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl22="SYS.DBMS_SPACE_ADMIN.FLUSH_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl23="SYS.DBMS_SPACE_ADMIN.PURGE_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl24="SYS.DBMS_SPACE_ADMIN.NGLOB_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl25="SYS.DBMS_SPACE_ADMIN.SEGMENT_REPAIR_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl26="SYS.DBMS_SPACE_ADMIN.SEGMENT_EXTEND_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl27="SYS.DBMS_SPACE_ADMIN.DROP_EMPTY_SEGMENTS_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl28="SYS.DBMS_SPACE_ADMIN.MAT_DEF_SEG_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl29="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_AFFINITY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl3="SYS.DBMS_SPACE_ADMIN.SEGMENT_DROP_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl30="SYS.DBMS_SPACE_ADMIN.HEAT_MAP_SEGMENT_SETMAXSIZE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl31="SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl32="SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl33="SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_LOAD(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl34="SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl35="SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl36="SYS.DBMS_SPACE_ADMIN.IMC_AREA_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl37="SYS.DBMS_SPACE_ADMIN.IMC_TREE_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl4="SYS.DBMS_SPACE_ADMIN.SEGMENT_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl5="SYS.DBMS_SPACE_ADMIN.TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl6="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl7="SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl8="SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_EXTENTS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl9="SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_BLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_1="SYS.DBMS_SPACE_ADMIN.SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_10="SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_QUOTAS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_11="SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_FROM_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_12="SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_13="SYS.DBMS_SPACE_ADMIN.TABLESPACE_RELOCATE_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_14="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_STATES(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_15="SYS.DBMS_SPACE_ADMIN.SEGMENT_MOVEBLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_16="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_EXTBLKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_17="SYS.DBMS_SPACE_ADMIN.TABLESPACE_DUMP_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_18="SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_19="SYS.DBMS_SPACE_ADMIN.ASSM_TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_2="SYS.DBMS_SPACE_ADMIN.SEGMENT_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_20="SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_REPAIR(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_21="SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_SYNCHWM(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_22="SYS.DBMS_SPACE_ADMIN.FLUSH_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_23="SYS.DBMS_SPACE_ADMIN.PURGE_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_24="SYS.DBMS_SPACE_ADMIN.NGLOB_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_25="SYS.DBMS_SPACE_ADMIN.SEGMENT_REPAIR_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_26="SYS.DBMS_SPACE_ADMIN.SEGMENT_EXTEND_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_27="SYS.DBMS_SPACE_ADMIN.DROP_EMPTY_SEGMENTS_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_28="SYS.DBMS_SPACE_ADMIN.MAT_DEF_SEG_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_29="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_AFFINITY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_3="SYS.DBMS_SPACE_ADMIN.SEGMENT_DROP_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_30="SYS.DBMS_SPACE_ADMIN.HEAT_MAP_SEGMENT_SETMAXSIZE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_31="SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_32="SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_33="SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_LOAD(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_34="SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_35="SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_36="SYS.DBMS_SPACE_ADMIN.IMC_AREA_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_37="SYS.DBMS_SPACE_ADMIN.IMC_TREE_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_4="SYS.DBMS_SPACE_ADMIN.SEGMENT_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_5="SYS.DBMS_SPACE_ADMIN.TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_6="SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_7="SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_8="SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_EXTENTS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_9="SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_BLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_cmp_ratio="SYS.DBMS_SPACE.KTSAP_CMP_RATIO(C)",
    ktsap_create_table_cost="SYS.DBMS_SPACE.KTSAP_CREATE_TABLE_COST(C)",
    ktsap_object_space_usage="SYS.DBMS_SPACE.KTSAP_OBJECT_SPACE_USAGE(C)",
    ktsap_verify_shrink_candidate="SYS.DBMS_SPACE.KTSAP_VERIFY_SHRINK_CANDIDATE(C)",
    ktsapcmpratio="SYS.DBMS_SPACE.KTSAP_CMP_RATIO(C)",
    ktsapcreatetablecost="SYS.DBMS_SPACE.KTSAP_CREATE_TABLE_COST(C)",
    ktsapobjectspaceusage="SYS.DBMS_SPACE.KTSAP_OBJECT_SPACE_USAGE(C)",
    ktsaps="kernel transaction segment management space analysis plsql space; dbms_space_admin",
    ktsaps_create_table_cost="kernel transaction segment management space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAP_CREATE_TABLE_COST",
    ktsaps_dropdf="SYS.DBMS_SPACE.KTSAPS_DROPDF(C)",
    ktsaps_info="SYS.DBMS_SPACE.KTSAPS_INFO(C)",
    ktsaps_info2="SYS.DBMS_SPACE.KTSAPS_INFO2(C)",
    ktsaps_nglob_info="SYS.DBMS_SPACE.KTSAPS_NGLOB_INFO(C)",
    ktsaps_nglob_info2="kernel transaction segment management space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAPS_NGLOB_INFO DBMS_SPACE_ADMIN.KTSAPS_NGLOB_INFO2",
    ktsaps_object_space_usage="kernel transaction segment management space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAP_OBJECTS_SPACE_USAGE",
    ktsaps_sf_info_fast="SYS.DBMS_SPACE.KTSAPS_SF_INFO_FAST(C)",
    ktsaps_verify_shrink_candidate="kernel transaction segment management space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAP_VERIFY_SHRINK_CANDIDATE",
    ktsapsdropdf="SYS.DBMS_SPACE.KTSAPS_DROPDF(C)",
    ktsapsinfo="SYS.DBMS_SPACE.KTSAPS_INFO(C)",
    ktsapsinfo2="SYS.DBMS_SPACE.KTSAPS_INFO2(C)",
    ktsapsnglobinfo="SYS.DBMS_SPACE.KTSAPS_NGLOB_INFO(C)",
    ktsapssfinfofast="SYS.DBMS_SPACE.KTSAPS_SF_INFO_FAST(C)",
    ktsapverifyshrinkcandidate="SYS.DBMS_SPACE.KTSAP_VERIFY_SHRINK_CANDIDATE(C)",
    ktsb="kernel transaction segment management bitmap management",
    ktsbfbl="SYS.DBMS_SPACE.KTSBFBL(C)",
    ktsbusp="SYS.DBMS_SPACE.KTSBUSP(C)",
    ktsclsb="kernel transaction segment management coalesce free space",
    ktsf="kernel transaction segment management file",
    ktsf_gsp="kernel transaction segment management file get space",
    ktsfbfmt="kernel transaction segment management file format block and link",
    ktsfsmhwm="kernel transaction segment management file segment move high water mark",
    ktsfsnblk="kernel transaction segment management file new block",
    ktsftcmove="kernel transaction segment management file ??",
    ktsfunlk="kernel transaction segment management file undo free list",
    ktsfx="kernel transaction segment management file datafile extention",
    ktsl="kernel transaction segment management lob",
    ktsl_disp_gsp_driver="kernel transaction segment management lob dispenser get space driver",
    ktsl_fill_dispenser_main="kernel transaction segment management lob fill dispenser main loop",
    ktsl_format_cfs_hbb="kernel transaction segment management lob format commited free space hash bucket block",
    ktsl_format_ehdr="kernel transaction segment management lob format extent header block",
    ktsl_format_ufs_hbb="kernel transaction segment management lob format uncommitted free space hash bucket block",
    ktsl_ins_fsb="kernel transaction segment management lob insert into free space block",
    ktsla="kernel transaction segment management lob space allocation",
    ktsla_cfsgsp_main="kernel transaction segment management lob space allocation committed free space get space main",
    ktsla_format_ufs_fsg="kernel transaction segment management lob space allocation format uncommitted free space FSG block",
    ktsla_hbb_gsp="kernel transaction segment management lob space allocation hash bucket block get space",
    ktsla_ins_fsg="kernel transaction segment management lob space allocation insert into FSG",
    ktslagsp="kernel transaction segment management lob space allocation get space",
    ktslagsp_main="kernel transaction segment management lob space allocation get space main routine",
    ktsld="kernel transaction segment management lob delete",
    ktsld_fsp="kernel transaction segment management lob delete free space",
    ktsld_ins_hbb="kernel transaction segment management lob delete insert into hash bucket block",
    ktsldfsp_main="kernel transaction segment management lob delete free space main procedure",
    ktslf="kernel transaction segment management lob free allocated space",
    ktslfbupd="kernel transaction segment management lob free allocated space buffer update",
    ktslfsp="kernel transaction segment management lob free allocated space procedure",
    ktslgfs="kernel transaction segment management lob get free space",
    ktslghb="kernel transaction segment management lob get hash bucket block",
    ktslj="kernel transaction segment management lob slave process",
    ktsmg="kernel transaction segment management merge",
    ktsmg_icmt="kernel transaction segment management merge insert direct load commit. called by transaction code at commit.",
    ktsmg_seg="kernel transaction segment management merge segments",
    ktsmgaex="kernel transaction segment management merge DBMS_UNDO_ADV.IF_AUTO_EXTEND",
    ktsmgbpr="kernel transaction segment management merge DBMS_UNDO_ADV.GET_BEST_POSSIBLE_RETENTION",
    ktsmgexadv="SYS.PRVT_UADV.EXECUTE(DBMS_UNDOADV_LIB)",
    ktsmgexaex="SYS.DBMS_UNDO_ADV.IF_AUTO_EXTEND(DBMS_UNDOADV_LIB)",
    ktsmgexbpr="SYS.DBMS_UNDO_ADV.GET_BEST_POSSIBLE_RETENTION(DBMS_UNDOADV_LIB)",
    ktsmgexhlth="SYS.DBMS_UNDO_ADV.GET_UNDO_HEALTH(DBMS_UNDOADV_LIB)",
    ktsmgexmql="SYS.DBMS_UNDO_ADV.GET_LONGEST_QUERY(DBMS_UNDOADV_LIB)",
    ktsmgexmsz="SYS.DBMS_UNDO_ADV.MAXSIZE(DBMS_UNDOADV_LIB)",
    ktsmgexru="SYS.DBMS_UNDO_ADV.GET_REQUIRED_UNDO(DBMS_UNDOADV_LIB)",
    ktsmgexruarr="SYS.DBMS_UNDO_ADV.GET_REQUIRED_UNDO(DBMS_UNDOADV_LIB)",
    ktsmgmql="kernel transaction segment management merge DBMS_UNDO_ADV.GET_LONGEST_QUERY",
    ktsmgmsz="kernel transaction segment management merge DBMS_UNDO_ADV.MAXSIZE",
    ktsmgru="kernel transaction segment management merge DBMS_UNDO_ADV.GET_REQUIRED_UNDO",
    ktsmgruarr="kernel transaction segment management merge DBMS_UNDO_ADV.GET_REQUIRED_UNDO DBMS_UNDO_ADV.GET_REQUIRED_UNDO",
    ktsp="kernel transaction segment management segment pagetable",
    ktspffbmb="kernel transaction segment management segment pagetable format first level bitmap block",
    ktspffc="kernel transaction segment management segment pagetable Fill First Level bmb dbas",
    ktspfmdb="kernel transaction segment management segment pagetable format a range of data blocks",
    ktspfmtrng="kernel transaction segment management segment pagetable format one range or less of data blocks",
    ktspfpblk="kernel transaction segment management segment pagetable pin useful block",
    ktspfsbmb="kernel transaction segment management segment pagetable format second level bitmap block",
    ktspfsrch="kernel transaction segment management segment pagetable first level bitmap block search",
    ktspfsteal="kernel transaction segment management segment pagetable Search cache for Pointer to data area of LII bitmap block",
    ktspftbmb="kernel transaction segment management segment pagetable format bitmap, formats lob persistent undo blocks(?)",
    ktspfupdst="kernel transaction segment management segment pagetable ??",
    ktspgetf="kernel transaction segment management segment pagetable Get next set of L1s",
    ktspgfblk3="kernel transaction segment management segment pagetable let L1 BMB",
    ktspgsp_cbk="kernel transaction segment management segment pagetable Get Space for inserts",
    ktspgsp_cbk1="kernel transaction segment management segment pagetable Get Space for inserts Get Space for inserts bitmap segment only",
    ktspgsp_main="kernel transaction segment management segment pagetable get space for inserts",
    ktsplbfmb="kernel transaction segment management segment pagetable reclaim free fatblocks from lob index",
    ktsplbrecl="kernel transaction segment management segment pagetable reclaim lob",
    ktspmlhwm="kernel transaction segment management segment pagetable Move the Low High Water Mark. Called when a range of blocks is formatted",
    ktspsc="kernel transaction segment management segment pagetable search cache",
    ktspscan_bmb="kernel transaction segment management segment pagetable search cache scan the level 1 bitmap blocks",
    ktss="kernel transaction segment management segment procedures",
    ktssdrp_segment="kernel transaction segment management segment procedures converts segment to temp in preparation for dropping",
    ktssdt_segs="kernel transaction segment management segment procedures drops stray temporary segments (creates cursor to check)",
    ktssof="kernel transaction segment management segment procedures callback for the x$ktsso implementation",
    ktst="kernel transaction segment management sort management",
    ktstdropobj="kernel transaction segment management sort management drop the temporary space object",
    ktstdt="kernel transaction segment management sort management deletes the sort handle (ktstused) state object",
    ktsx="kernel transaction segment management extent management",
    ktsx_endtx="kernel transaction segment management extent management end add extent transaction",
    ktsxr_add="kernel transaction segment management extent management redoless add extent to a segment",
    ktsxs_add="kernel transaction segment management extent management add extent to a segment",
    ktsxterr="kernel transaction segment management extent management find extent error",
    ktt="kernel transaction tablespace",
    ktte_ts_gettarget="kernel transaction tablespace check if the tbs needs to be extended",
    ktu="kernel transaction undo",
    ktu4smck="kernel transaction undo semantic check of the block",
    ktu4ubck="kernel transaction undo undo block check",
    ktuabt="kernel transaction undo abort",
    ktuapundo="kernel transaction undo apply undo",
    ktubgn="kernel transaction undo begin transaction",
    ktubko="kernel transaction undo get undo record to rollback transaction, non-cr only",
    ktubnd="kernel transaction undo bind undo segment",
    ktubsy="kernel transaction undo check if an extent can be reclaimed using extent commit time",
    ktuchg="kernel transaction undo write logs and perform changes",
    ktucmt="kernel transaction undo commit transaction",
    ktudba="kernel transaction undo convert from usn to dba",
    ktudecrustat="kernel transaction undo decrement undo usage statistics in the resource maanger",
    ktudnx="kernel transaction undo decrease active transaction count",
    ktugct="kernel transaction undo get commit times for transction ids in the data block's ITL",
    ktugti="kernel transaction undo ??",
    ktugur="kernel transaction undo generate undo and redo",
    ktugus="kernel transaction undo get undo segment header",
    ktugusc="kernel transaction undo get undo segment header get undo segment",
    ktuIM="kernel transaction undo in memory",
    ktuisonline1="kernel transaction undo return undo segment info if undo segment is online",
    ktundo="kernel transaction undo undo",
    ktunfy="kernel transaction undo notification procedure",
    ktur="kernel transaction undo recovery",
    kturbk="kernel transaction undo recovery rollback for CR only, reads undo record pointed by uba and call ktundo to back out the change",
    kturbt="kernel transaction undo recovery rollback to time scn",
    kturcm="kernel transaction undo recovery redo commit",
    kturCRBackoutOneChg="kernel transaction undo recovery consistent read; backout change",
    kturCurrBackoutOneChg="kernel transaction undo recovery current read; backout change",
    kturdb="kernel transaction undo recovery write undo data to undo block",
    kturdh="kernel transaction undo recovery write undo header data to undo block",
    kturef="kernel transaction undo recovery rollback examine candidate undo block",
    kturGetUndoRec="kernel transaction undo recovery get an undo record",
    kturRecover="kernel transaction undo recovery recover",
    kturRecoverActiveTxns="kernel transaction undo recovery recover active transactions",
    kturRecoverTxn="kernel transaction undo recovery recover transaction",
    kturRecoverTxnMain="kernel transaction undo recovery recover transaction main procedure",
    kturRecoverUndoSegment="kernel transaction undo recovery recover undo segment",
    ktursal="kernel transaction undo recovery shrink undo segments",
    ktursn="kernel transaction undo recovery rollback segments shrink numbered",
    ktursp="kernel transaction undo recovery rollback to savepoint",
    ktursr="kernel transaction undo recovery rollback segments shrink requested",
    ktusrs="kernel transaction undo shrink rollback segments",
    ktuulc="kernel transaction undo unlock (?)",
    ktz="kernel transaction testing",
    ku="kernel utility",
    kubsagtDescribeClose="SYS.KUBSAGT.DESCRIBE_CLOSE(KUBSAGT_LIB)",
    kubsagtDescribeGetInfo="SYS.KUBSAGT.DESCRIBE_GETINFO(KUBSAGT_LIB)",
    kubsagtDescribeOpen="SYS.KUBSAGT.DESCRIBE_OPEN(KUBSAGT_LIB)",
    kubsagtDescribeVersion="SYS.KUBSAGT.DESCRIBE_VERSION(KUBSAGT_LIB)",
    kubsagtFetchClose="SYS.KUBSAGT.FETCH_CLOSE(KUBSAGT_LIB)",
    kubsagtFetchData="SYS.KUBSAGT.FETCH_DATA(KUBSAGT_LIB)",
    kubsagtFetchInit="SYS.KUBSAGT.FETCH_INIT(KUBSAGT_LIB)",
    kubsagtFetchOpen="SYS.KUBSAGT.FETCH_OPEN(KUBSAGT_LIB)",
    kubsdesc="SYS.KUBSD$DESC_INT.KUBSDESC(KUBSDLIB)",
    kueuld="kernel utility export unloader",
    kup="kernel utility datapump",
    kupc="kernel utility datapump queue services",
    kupc_load="SYS.KUPD$DATA.CONVENTIONAL_LOAD_CALLOUT(KUPCLIB)",
    kupcload="SYS.KUPD$DATA.CONVENTIONAL_LOAD_CALLOUT(KUPCLIB)",
    kupd="kernel utility datapump data package",
    kupd_load="SYS.KUPD$DATA_INT.LOAD_DATA(KUPDLIB)",
    kupd_meta="SYS.KUPD$DATA_INT.FETCH_METADATA(KUPDLIB)",
    kupd_netload="SYS.KUPD$DATA_INT.NETLOAD_DATA(KUPDLIB)",
    kupd_unload="SYS.KUPD$DATA_INT.UNLOAD_DATA(KUPDLIB)",
    kupdload="SYS.KUPD$DATA_INT.LOAD_DATA(KUPDLIB)",
    kupdmeta="SYS.KUPD$DATA_INT.FETCH_METADATA(KUPDLIB)",
    kupdnetload="SYS.KUPD$DATA_INT.NETLOAD_DATA(KUPDLIB)",
    kupdunload="SYS.KUPD$DATA_INT.UNLOAD_DATA(KUPDLIB)",
    kupf="kernel utility datapump file manager",
    kupfxCloseCtx="SYS.KUPF$FILE_INT.CLOSE_CONTEXT(KUPFLIB)",
    kupfxCreDmpFile="SYS.KUPF$FILE_INT.CREATE_DUMP_FILE(KUPFLIB)",
    kupfxCreKeyInfo="SYS.KUPF$FILE_INT.CREATE_KEY_INFO(KUPFLIB)",
    kupfxDelDmpFile="SYS.KUPF$FILE_INT.DELETE_DUMP_FILE(KUPFLIB)",
    kupfxEncPwd="SYS.KUPF$FILE_INT.ENCPWD(KUPFLIB)",
    kupfxExmDmpFile="SYS.KUPF$FILE_INT.EXAMINE_DUMP_FILE(KUPFLIB)",
    kupfxFlushLob="SYS.KUPF$FILE_INT.FLUSH_LOB(KUPFLIB)",
    kupfxGetBlkBufSizes="SYS.KUPF$FILE_INT.GET_BLKBUF_SIZES(KUPFLIB)",
    kupfxGetDebugEvent="SYS.KUPF$FILE_INT.GET_DEBUG_EVENT(KUPFLIB)",
    kupfxGetDefCredential="SYS.KUPF$FILE_INT.GET_DEFAULT_CREDENTIAL(KUPFLIB)",
    kupfxGetDefFileName="SYS.KUPF$FILE_INT.GET_DEFAULT_FILENAME(KUPFLIB)",
    kupfxGetFmtTime="SYS.KUPF$FILE_INT.GET_FORMATTED_TIME(KUPFLIB)",
    kupfxGetFullFileName="SYS.KUPF$FILE_INT.GET_FULL_FILENAME(KUPFLIB)",
    kupfxGetMaxCswidth="SYS.KUPF$FILE_INT.GET_MAX_CSWIDTH(KUPFLIB)",
    kupfxGetObfPwd="SYS.KUPF$FILE_INT.GTOP(KUPFLIB)",
    kupfxInit="SYS.KUPF$FILE_INT.INIT(KUPFLIB)",
    kupfxInitDfi="SYS.KUPF$FILE_INT.INIT(KUPFLIB)",
    kupfxIsDmpRestFile="SYS.KUPF$FILE_INT.IS_DUMPFILE_A_RESTFILE(KUPFLIB)",
    kupfxOpenCtx="SYS.KUPF$FILE_INT.OPEN_CONTEXT(KUPFLIB)",
    kupfxParseFileName="SYS.KUPF$FILE_INT.PARSE_FILENAME(KUPFLIB)",
    kupfxParseURI="SYS.KUPF$FILE_INT.PARSE_URI(KUPFLIB)",
    kupfxReadLob="SYS.KUPF$FILE_INT.READ_LOB(KUPFLIB)",
    kupfxRelFiles="SYS.KUPF$FILE_INT.RELEASE_FILES(KUPFLIB)",
    kupfxSetDebug="SYS.KUPF$FILE_INT.SET_DEBUG(KUPFLIB)",
    kupfxSetTransParams="SYS.KUPF$FILE_INT.SET_TRANS_PARAMS(KUPFLIB)",
    kupfxTerm="SYS.KUPF$FILE_INT.TERM(KUPFLIB)",
    kupfxVerKeyInfo="SYS.KUPF$FILE_INT.VERIFY_KEY_INFO(KUPFLIB)",
    kupfxWriteLob="SYS.KUPF$FILE_INT.WRITE_LOB(KUPFLIB)",
    kupm="kernel utility datapump master control process",
    kupmuar="SYS.KUPU$UTILITIES_INT.WRITEAUDITRECORD(KUPULIB)",
    kuppchus="SYS.KUPP$PROC.CHANGE_USER_INT(KUPP_PROC_LIB)",
    kuppcki="SYS.KUPP$PROC.CHECK_FOR_INTERRUPT(KUPP_PROC_LIB)",
    kuppcrmp="SYS.KUPP$PROC.CREATE_MASTER_PROCESS_INT(KUPP_PROC_LIB)",
    kuppcrwpr="SYS.KUPP$PROC.CREATE_WORKER_INT(KUPP_PROC_LIB)",
    kuppcws="SYS.KUPP$PROC.CHECK_WORKER_STATUS_INT(KUPP_PROC_LIB)",
    kuppddop="SYS.KUPP$PROC.DEFAULT_DOP(KUPP_PROC_LIB)",
    kuppdewp="SYS.KUPP$PROC.DELETE_WORKER_PROCESSES_INT(KUPP_PROC_LIB)",
    kuppetact="SYS.KUPP$PROC.WORKER_EXTTBL_ACTIVE(KUPP_PROC_LIB)",
    kuppetina="SYS.KUPP$PROC.WORKER_EXTTBL_INACTIVE(KUPP_PROC_LIB)",
    kuppetn="SYS.KUPP$PROC.WORKER_EXTTBL_FULLNAME(KUPP_PROC_LIB)",
    kuppgcit="SYS.KUPP$PROC.GET_CIT_FLAG(KUPP_PROC_LIB)",
    kuppgedf="SYS.KUPP$PROC.GET_EVENT_DEBUG_FLAGS(KUPP_PROC_LIB)",
    kuppgnls="SYS.KUPP$PROC.GET_NLS_ALTER_SESSION(KUPP_PROC_LIB)",
    kuppgwe="SYS.KUPP$PROC.GET_WORKER_EXCEPTION(KUPP_PROC_LIB)",
    kuppindn="SYS.KUPP$PROC.INIT_DONE(KUPP_PROC_LIB)",
    kuppja="SYS.KUPP$PROC.JOB_ALIVE_INT(KUPP_PROC_LIB)",
    kuppkwp="SYS.KUPP$PROC.KILL_WORKER(KUPP_PROC_LIB)",
    kuppmdop="SYS.KUPP$PROC.MAX_DOP(KUPP_PROC_LIB)",
    kuppopten="SYS.KUPP$PROC.OPTION_ENABLED_CALLOUT(KUPP_PROC_LIB)",
    kuppscit="SYS.KUPP$PROC.SET_CIT_FLAG(KUPP_PROC_LIB)",
    kuppsdbg="SYS.KUPP$PROC.SET_DEBUG_INT(KUPP_PROC_LIB)",
    kuppsecld="SYS.KUPP$PROC.SEC_TT_LOADED(KUPP_PROC_LIB)",
    kuppsecul="SYS.KUPP$PROC.SEC_TT_UNLOADED(KUPP_PROC_LIB)",
    kuppsip="SYS.KUPP$PROC.SHUTDOWN_IN_PROGRESS_INT(KUPP_PROC_LIB)",
    kuppsrw="SYS.KUPP$PROC.SET_REMOTE_WORKER_INT(KUPP_PROC_LIB)",
    kupptwa="SYS.KUPP$PROC.TOTAL_WORKERS_ALIVE(KUPP_PROC_LIB)",
    kuppwami="SYS.KUPP$PROC.WHAT_AM_I_INT(KUPP_PROC_LIB)",
    kuppwmid="SYS.KUPP$PROC.WHATS_MY_ID_INT(KUPP_PROC_LIB)",
    kuppwmnm="SYS.KUPP$PROC.WHATS_MY_NAME_INT(KUPP_PROC_LIB)",
    kuppwop="SYS.KUPP$PROC.WHAT_ORACLE_PRODUCT(KUPP_PROC_LIB)",
    kuppwpi="SYS.KUPP$PROC.WORKER_PROCESS_INIT_INT(KUPP_PROC_LIB)",
    kuppwsi="SYS.KUPP$PROC.WORKER_SERVICE_INIT_INT(KUPP_PROC_LIB)",
    kupux10gLogonAllowed="SYS.KUPU$UTILITIES_INT.TEN_G_LOGON_ALLOWED(KUPULIB)",
    kupuxCreateDir="SYS.KUPU$UTILITIES_INT.CREATE_DIRECTORY(KUPULIB)",
    kupuxDecode="SYS.KUPU$UTILITIES_INT.DECODE(KUPULIB)",
    kupuxDHChkDigests="SYS.KUPU$UTILITIES_INT.DH_CHECK_DIGESTS(KUPULIB)",
    kupuxDHDecrypt="SYS.KUPU$UTILITIES_INT.DH_DECRYPT(KUPULIB)",
    kupuxDHEncrypt="SYS.KUPU$UTILITIES_INT.DH_ENCRYPT(KUPULIB)",
    kupuxDHFreeHandle="SYS.KUPU$UTILITIES_INT.DH_FREE_HANDLE(KUPULIB)",
    kupuxDHGenShrKey="SYS.KUPU$UTILITIES_INT.DH_GEN_SHARED_KEY(KUPULIB)",
    kupuxDHGetPubKey="SYS.KUPU$UTILITIES_INT.DH_GET_PUBLIC_KEY(KUPULIB)",
    kupuxDHNewHandle="SYS.KUPU$UTILITIES_INT.DH_NEW_HANDLE(KUPULIB)",
    kupuxDirScan="SYS.KUPU$UTILITIES_INT.DIRECTORY_SCAN_INT(KUPULIB)",
    kupuxEncode="SYS.KUPU$UTILITIES_INT.ENCODE(KUPULIB)",
    kupuxGpdImpAllowed="SYS.KUPU$UTILITIES_INT.GPD_IMP_ALLOWED(KUPULIB)",
    kupuxIsSuperset="SYS.KUPU$UTILITIES_INT.IS_SUPERSET_INT(KUPULIB)",
    kupuxMaxDpJobsGet="SYS.KUPU$UTILITIES_INT.MAX_DATAPUMP_JOBS_PER_PDB(KUPULIB)",
    kupv="kernel utility datapump fixed table",
    kupvcrat="kernel utility datapump fixed table KUPV$FT_INT.CREATE_ATTACH_ENTRY",
    kupvCreateAttachEntry="SYS.KUPV$FT_INT.CREATE_ATTACH_ENTRY(KUPVLIB)",
    kupvCreateJobEntry="SYS.KUPV$FT_INT.CREATE_JOB_ENTRY(KUPVLIB)",
    kupvcrjb="kernel utility datapump fixed table KUPV$FT_INT.CREATE_JOB_ENTRY",
    kupvDeleteAttachEntry="SYS.KUPV$FT_INT.DELETE_ATTACH_ENTRY(KUPVLIB)",
    kupvDeleteJobEntry="SYS.KUPV$FT_INT.DELETE_JOB_ENTRY(KUPVLIB)",
    kupvdlat="kernel utility datapump fixed table KUPV$FT_INT.DELETE_ATTACH_ENTRY",
    kupvdljb="kernel utility datapump fixed table KUPV$FT_INT.DELETE_JOB_ENTRY",
    kupvGetErrorText="SYS.KUPV$FT_INT.GET_ERROR_TEXT(KUPVLIB)",
    kupvgtet="kernel utility datapump fixed table KUPV$FT_INT.GET_ERROR_TEXT",
    kupvIsErrorFatal="SYS.KUPV$FT_INT.FATAL_ERROR(KUPVLIB)",
    kupvisfe="kernel utility datapump fixed table KUPV$FT_INT.FATAL_ERROR",
    kupvUpdateJobEntry="SYS.KUPV$FT_INT.UPDATE_JOB_ENTRY(KUPVLIB)",
    kupvupjb="kernel utility datapump fixed table KUPV$FT_INT.UPDATE_JOB_ENTRY",
    kuxCompare="SYS.UTL_XML.COMPARE(UTL_XML_LIB)",
    kuxgetDDLSrcFromXML="SYS.UTL_XML.GETDDLSRCFROMXML(UTL_XML_LIB)",
    kuxgetFdo="SYS.UTL_XML.KUX$_GETFDO(UTL_XML_LIB)",
    kuxgetHashCode="SYS.UTL_XML.GETHASHCODE(UTL_XML_LIB)",
    kuxgetNextTypeid="SYS.UTL_XML.GETNEXTTYPEID(UTL_XML_LIB)",
    kuxHasTstz="SYS.UTL_XML.HASTSTZ(UTL_XML_LIB)",
    kuxisnameomf="SYS.UTL_XML.ISNAMEOMF(UTL_XML_LIB)",
    kuxLong2Clob="SYS.UTL_XML.KUX$_LONG2CLOB(UTL_XML_LIB)",
    kuxmlClean="SYS.UTL_XML.XMLCLEAN(UTL_XML_LIB)",
    kuxmlDumpCtxs="SYS.UTL_XML.XMLDUMPCTXS(UTL_XML_LIB)",
    kuxmlInit="SYS.UTL_XML.XMLINIT(UTL_XML_LIB)",
    kuxmlParseClob="SYS.UTL_XML.XMLPARSE(UTL_XML_LIB)",
    kuxmlParseURI="SYS.UTL_XML.XMLPARSE(UTL_XML_LIB)",
    kuxmlSetMemDebug="SYS.UTL_XML.XMLSETMEMDEBUG_INT(UTL_XML_LIB)",
    kuxmlSetParseFlag="SYS.UTL_XML.XMLSETPARSEFLAG(UTL_XML_LIB)",
    kuxmlTerm="SYS.UTL_XML.XMLTERM(UTL_XML_LIB)",
    kuxParseExpr="SYS.UTL_XML.PARSEEXPR(UTL_XML_LIB)",
    kuxParseQuery="SYS.UTL_XML.PARSEQUERY(UTL_XML_LIB)",
    kuxsetXmlTransformEngine="SYS.UTL_XML.SETXMLTRANSFORMENGINE(UTL_XML_LIB)",
    kuxslLoadFromFile="SYS.UTL_XML.XSLLOADFROMFILE(UTL_XML_LIB)",
    kuxslResetParams="SYS.UTL_XML.XSLRESETPARAMS(UTL_XML_LIB)",
    kuxslSetParam="SYS.UTL_XML.XSLSETPARAM(UTL_XML_LIB)",
    kuxslSetStyleSheet="SYS.UTL_XML.XSLSETSTYLESHEET(UTL_XML_LIB)",
    kuxslTransformCtoC="SYS.UTL_XML.XSLTRANSFORM(UTL_XML_LIB)",
    kuxslTransformCtoX="SYS.UTL_XML.XSLTRANSFORMCTOX(UTL_XML_LIB)",
    kuxslTransformXtoC="SYS.UTL_XML.XSLTRANSFORMXTOC(UTL_XML_LIB)",
    kuxslTransformXtoX="SYS.UTL_XML.XSLTRANSFORMXTOX(UTL_XML_LIB)",
    kuxsscFind="SYS.UTL_XML.SSCFIND(UTL_XML_LIB)",
    kuxsscGetCtx="SYS.UTL_XML.SSCGETCTX(UTL_XML_LIB)",
    kuxsscMinimizeCache="SYS.UTL_XML.SSCMINIMIZECACHE(UTL_XML_LIB)",
    kuxsscParse="SYS.UTL_XML.SSCPARSE(UTL_XML_LIB)",
    kuxsscPurge="SYS.UTL_XML.SSCPURGE(UTL_XML_LIB)",
    kuxsscSetDebug="SYS.UTL_XML.SSCSETDEBUG_INT(UTL_XML_LIB)",
    kuxtypeHashCodeEq="SYS.UTL_XML.TYPEHASHCODEEQ(UTL_XML_LIB)",
    kuxWindows32="SYS.UTL_XML.WINDOWS32(UTL_XML_LIB)",
    kuz="kernel utility security (orapw utility)",
    kv="kernel performance",
    kvi="kernel performance information tables",
    kwq="kernel advanced queuing",
    kwqa="kernel advanced queuing administration",
    kwqa3glAddSubscriber="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ADDSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa3glAgentExists11g="SYS.DBMS_PRVTAQIS.KWQA_3GL_INT_AGENTEXISTS11G(DBMS_AQADM_LIB)",
    kwqa3glAlterCacheObject="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa3glAlterQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERQUEUE(DBMS_AQADM_LIB)",
    kwqa3glAlterSubscriber="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ALTERSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa3glAqPkg="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_AQPKG(DBMS_AQADM_LIB)",
    kwqa3glBeginTrans="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_BEGINTRANS(DBMS_AQADM_LIB)",
    kwqa3glchangeqreplmod="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CHANGE_REP_MOD(DBMS_AQADM_LIB)",
    kwqa3glCheckQuePriv="SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKQUEPRIV(DBMS_AQADM_LIB)",
    kwqa3glCheckSysPriv="SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIV(DBMS_AQADM_LIB)",
    kwqa3glCheckSysPrivCusr="SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIVCUSR(DBMS_AQADM_LIB)",
    kwqa3glCreateADTPlodInfo="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEADTPLODINFO(DBMS_AQADM_LIB)",
    kwqa3glCreateCacheObject="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATECACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa3glCreateQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE(DBMS_AQADM_LIB)",
    kwqa3glCreateQueue12g="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE_12G(DBMS_AQADM_LIB)",
    kwqa3glDestroyCacheObject="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DESTROYCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa3glDmpEstack="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DMPESTACK(DBMS_AQADM_LIB)",
    kwqa3glDropQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPQUEUE(DBMS_AQADM_LIB)",
    kwqa3glDropRegistrations="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPREGISTRATIONS(DBMS_AQADM_LIB)",
    kwqa3glEndTrans="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ENDTRANS(DBMS_AQADM_LIB)",
    kwqa3glEventLevel="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EVENTLEVEL(DBMS_AQADM_LIB)",
    kwqa3glExecuteStmt="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa3glExecuteStmtBndDfn="SYS.DBMS_AQADM_SYS.KWQA_3GL_EXECUTESTMTBNDDFN(DBMS_AQADM_LIB)",
    kwqa3glExecuteStmtCusr="SYS.DBMS_AQADM_INV.KWQA_3GL_EXECUTESTMTCUSR(DBMS_AQADM_LIB)",
    kwqa3glExecuteStmtdv="SYS.DBMS_PRVTAQIM.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa3glfinddate="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_FIND_DATE(DBMS_AQADM_LIB)",
    kwqa3glgetparamsinqkgl="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa3glgetPassword="SYS.DBMS_PRVTAQIP.KWQA_3GL_GETPASSWORD(DBMS_AQADM_LIB)",
    kwqa3glGrant="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GRANT(DBMS_AQADM_LIB)",
    kwqa3glInValidateQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_INVALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqa3glIsStreamsCaptureOff="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa3glIsTTSImport="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISTTSIMPORT(DBMS_AQADM_LIB)",
    kwqa3glLockQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUE(DBMS_AQADM_LIB)",
    kwqa3glLockQueueTable="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa3glLockQueueTable2="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa3glMarkInternalTables="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_MARK_INTERNAL_TABLES(DBMS_AQADM_LIB)",
    kwqa3glnfynoi="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NFYNOI(DBMS_AQADM_LIB)",
    kwqa3glNtfnTrcChk="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NTFNTRCCHK(DBMS_AQADM_LIB)",
    kwqa3glParseAQName="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_PARSEAQNAME(DBMS_AQADM_LIB)",
    kwqa3glPrintRemSubList="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PRINTREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa3glpurgecbkobj="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_CBK_OBJ(DBMS_AQADM_LIB)",
    kwqa3glpurgequeuetable="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_QUEUE_TABLE(DBMS_AQADM_LIB)",
    kwqa3glPurgeRemSubList="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGEREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa3glPurgeSchemaSubTab="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGESCHEMASUBTAB(DBMS_AQADM_LIB)",
    kwqa3glqtcompat="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_QT_COMPAT(DBMS_AQADM_LIB)",
    kwqa3glRemoveSubscriber="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REMOVESUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa3glRevoke="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REVOKE(DBMS_AQADM_LIB)",
    kwqa3glScheduleTMService="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SCHEDULETMSERVICE(DBMS_AQADM_LIB)",
    kwqa3glsetcleartableflag="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_CLR_TABLE_FLAG(DBMS_AQADM_LIB)",
    kwqa3glSetMsgWait="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETMSGWAIT(DBMS_AQADM_LIB)",
    kwqa3glsetparamsinqkgl="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa3glSetRegistrationName="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETREGISTRATIONNAME(DBMS_AQADM_LIB)",
    kwqa3glSetStreamsCaptureOff="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa3glsettablestatslock="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_TABLE_STATS_LOCK(DBMS_AQADM_LIB)",
    kwqa3glsetviewflag="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_VIEW_FLAG(DBMS_AQADM_LIB)",
    kwqa3glspilledops="SYS.DBMS_AQADM_SYS.KWQA_3GL_SPILLED_OPS(DBMS_AQADM_LIB)",
    kwqa3glStartQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STARTQUEUE(DBMS_AQADM_LIB)",
    kwqa3glStopQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STOPQUEUE(DBMS_AQADM_LIB)",
    kwqa3glunsetparamsinqkgl="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UNSET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa3glUpdKgqm="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDKGQM(DBMS_AQADM_LIB)",
    kwqa3glUpdPerStats="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDPERSTATS(DBMS_AQADM_LIB)",
    kwqa3glValidateQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_VALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_AddSubscriber="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ADDSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa_3gl_AgentExists11g="SYS.DBMS_PRVTAQIS.KWQA_3GL_INT_AGENTEXISTS11G(DBMS_AQADM_LIB)",
    kwqa_3gl_AlterCacheObject="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa_3gl_AlterQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_AlterSubscriber="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ALTERSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa_3gl_AqPkg="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_AQPKG(DBMS_AQADM_LIB)",
    kwqa_3gl_BeginTrans="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_BEGINTRANS(DBMS_AQADM_LIB)",
    kwqa_3gl_change_q_repl_mod="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CHANGE_REP_MOD(DBMS_AQADM_LIB)",
    kwqa_3gl_CheckQuePriv="SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKQUEPRIV(DBMS_AQADM_LIB)",
    kwqa_3gl_CheckSysPriv="SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIV(DBMS_AQADM_LIB)",
    kwqa_3gl_CheckSysPrivCusr="SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIVCUSR(DBMS_AQADM_LIB)",
    kwqa_3gl_CreateADTPlodInfo="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEADTPLODINFO(DBMS_AQADM_LIB)",
    kwqa_3gl_CreateCacheObject="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATECACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa_3gl_CreateQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_CreateQueue_12g="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE_12G(DBMS_AQADM_LIB)",
    kwqa_3gl_DestroyCacheObject="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DESTROYCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa_3gl_DmpEstack="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DMPESTACK(DBMS_AQADM_LIB)",
    kwqa_3gl_DropQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_DropRegistrations="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPREGISTRATIONS(DBMS_AQADM_LIB)",
    kwqa_3gl_EndTrans="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ENDTRANS(DBMS_AQADM_LIB)",
    kwqa_3gl_EventLevel="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EVENTLEVEL(DBMS_AQADM_LIB)",
    kwqa_3gl_ExecuteStmt="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa_3gl_ExecuteStmt_dv="SYS.DBMS_PRVTAQIM.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa_3gl_ExecuteStmtBndDfn="SYS.DBMS_AQADM_SYS.KWQA_3GL_EXECUTESTMTBNDDFN(DBMS_AQADM_LIB)",
    kwqa_3gl_ExecuteStmtCusr="SYS.DBMS_AQADM_INV.KWQA_3GL_EXECUTESTMTCUSR(DBMS_AQADM_LIB)",
    kwqa_3gl_find_date="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_FIND_DATE(DBMS_AQADM_LIB)",
    kwqa_3gl_get_params_in_qkgl="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa_3gl_getPassword="SYS.DBMS_PRVTAQIP.KWQA_3GL_GETPASSWORD(DBMS_AQADM_LIB)",
    kwqa_3gl_Grant="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GRANT(DBMS_AQADM_LIB)",
    kwqa_3gl_InValidateQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_INVALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_IsStreamsCaptureOff="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa_3gl_IsTTSImport="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISTTSIMPORT(DBMS_AQADM_LIB)",
    kwqa_3gl_LockQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_LockQueueTable="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa_3gl_LockQueueTable2="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa_3gl_Mark_Internal_Tables="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_MARK_INTERNAL_TABLES(DBMS_AQADM_LIB)",
    kwqa_3gl_nfynoi="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NFYNOI(DBMS_AQADM_LIB)",
    kwqa_3gl_NtfnTrcChk="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NTFNTRCCHK(DBMS_AQADM_LIB)",
    kwqa_3gl_ParseAQName="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_PARSEAQNAME(DBMS_AQADM_LIB)",
    kwqa_3gl_PrintRemSubList="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PRINTREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa_3gl_purge_cbk_obj="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_CBK_OBJ(DBMS_AQADM_LIB)",
    kwqa_3gl_purge_queue_table="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_QUEUE_TABLE(DBMS_AQADM_LIB)",
    kwqa_3gl_PurgeRemSubList="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGEREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa_3gl_PurgeSchemaSubTab="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGESCHEMASUBTAB(DBMS_AQADM_LIB)",
    kwqa_3gl_qt_compat="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_QT_COMPAT(DBMS_AQADM_LIB)",
    kwqa_3gl_RemoveSubscriber="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REMOVESUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa_3gl_Revoke="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REVOKE(DBMS_AQADM_LIB)",
    kwqa_3gl_ScheduleTMService="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SCHEDULETMSERVICE(DBMS_AQADM_LIB)",
    kwqa_3gl_set_clear_table_flag="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_CLR_TABLE_FLAG(DBMS_AQADM_LIB)",
    kwqa_3gl_set_params_in_qkgl="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa_3gl_set_table_stats_lock="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_TABLE_STATS_LOCK(DBMS_AQADM_LIB)",
    kwqa_3gl_set_view_flag="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_VIEW_FLAG(DBMS_AQADM_LIB)",
    kwqa_3gl_SetMsgWait="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETMSGWAIT(DBMS_AQADM_LIB)",
    kwqa_3gl_SetRegistrationName="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETREGISTRATIONNAME(DBMS_AQADM_LIB)",
    kwqa_3gl_SetStreamsCaptureOff="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa_3gl_spilled_ops="SYS.DBMS_AQADM_SYS.KWQA_3GL_SPILLED_OPS(DBMS_AQADM_LIB)",
    kwqa_3gl_StartQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STARTQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_StopQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STOPQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_unset_params_in_qkgl="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UNSET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa_3gl_UpdKgqm="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDKGQM(DBMS_AQADM_LIB)",
    kwqa_3gl_UpdPerStats="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDPERSTATS(DBMS_AQADM_LIB)",
    kwqa_3gl_ValidateQueue="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_VALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqaacset="SYS.DBMS_AQ_SYS_IMP_INTERNAL.KWQAACSET(C)/SYS.DBMS_AQADM_SYS.KWQAACSET(C)/SYS.DBMS_PRVTAQIS.KWQAACSET(C)",
    kwqaAnalyzeMC="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ANALYZE_MSG_CACHE(DBMS_AQADM_LIB)",
    kwqabqprg="SYS.DBMS_AQADM_SYS.PURGE_BQ(DBMS_AQADM_LIB)",
    kwqaCalculateMC="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CALCULATE_MSG_CACHE(DBMS_AQADM_LIB)",
    kwqaddba="SYS.DBMS_AQADM_SYS.DISABLE_DB_ACCESS(DBMS_AQADM_LIB)",
    kwqadrpq="kernel advanced queuing administration drop queue",
    kwqaedba="SYS.DBMS_AQADM_SYS.ENABLE_DB_ACCESS(DBMS_AQADM_LIB)",
    kwqaGetMaxStreamspool="SYS.DBMS_AQADM_SYSCALLS.GET_MAX_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqaGetMinStreamspool="SYS.DBMS_AQADM_SYSCALLS.GET_MIN_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqaGetPassword="kernel advanced queuing administration DBMS_PRVTAQIP.KWQA_3GL_GETPASSWORD",
    kwqagetwatermark="SYS.DBMS_AQADM_SYSCALLS.GET_WATERMARK(DBMS_AQADM_LIB)",
    kwqaIsLogstby="SYS.DBMS_AQADM_SYSCALLS.IS_LOGICAL_STBY(DBMS_AQADM_LIB)",
    kwqaIsLsby="kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_LOGICAL_STBY",
    kwqaIsOggDest="kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_OGG_DEST",
    kwqaIsOggDestination="SYS.DBMS_AQADM_SYSCALLS.IS_OGG_DEST(DBMS_AQADM_LIB)",
    kwqaIsOggSource="SYS.DBMS_AQADM_SYSCALLS.IS_OGG_SRC(DBMS_AQADM_LIB)",
    kwqaIsOggSrc="kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_OGG_SRC",
    kwqaIsPri="kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_PRIMARY",
    kwqaIsPrimary="SYS.DBMS_AQADM_SYSCALLS.IS_PRIMARY(DBMS_AQADM_LIB)",
    kwqaowner_pls="SYS.DBMS_AQADM_SYSCALLS.GET_OWNER_INSTANCE(DBMS_AQADM_LIB)",
    kwqaownerpls="SYS.DBMS_AQADM_SYSCALLS.GET_OWNER_INSTANCE(DBMS_AQADM_LIB)",
    kwqaqpdlob="SYS.DBMS_AQADM_SYS.KWQAQPDHASLOB(DBMS_AQADM_LIB)",
    kwqaSetMaxStreamspool="SYS.DBMS_AQADM_SYSCALLS.SET_MAX_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqaSetMinStreamspool="SYS.DBMS_AQADM_SYSCALLS.SET_MIN_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqasetwatermark="SYS.DBMS_AQADM_SYSCALLS.SET_WATERMARK(DBMS_AQADM_LIB)",
    kwqaStopMsgForwarding="SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STOP_MSG_FORWARDING(DBMS_AQADM_LIB)",
    kwqauptr="SYS.DBMS_AQADM_SYS.KWQAUPTR(C)",
    kwqd="kernel advanced queuing dequeue",
    kwqi="kernel advanced queuing internal/plsql trusted callouts",
    kwqiaddspilled="SYS.DBMS_AQADM_SYS.ADD_SPILLED_ENTRY(DBMS_AQ_LIB)",
    kwqiadtdeq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQ.DEQUEUE",
    kwqiadtdequeue="SYS.DBMS_AQ.DEQUEUE(DBMS_AQ_LIB)",
    kwqiadtenq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQ.ENQUEUE",
    kwqiadtenqueue="SYS.DBMS_AQ.ENQUEUE(DBMS_AQ_LIB)",
    kwqiautoplsreg="SYS.DBMS_AQ.CREATE_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqiautoplsstart="SYS.DBMS_AQ.ENABLE_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqiautoplsstop="SYS.DBMS_AQ.DISABLE_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqiautoplsunreg="SYS.DBMS_AQ.DROP_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqic="kernel advanced queuing internal/plsql trusted callouts pre-12c notitication",
    kwqicAddNonDurSubShrdque="SYS.DBMS_AQJMS.AQ$_ADD_NONDURABLE_SUB_SQ(DBMS_AQ_LIB)",
    kwqicdelrow="kernel advanced queuing internal/plsql trusted callouts pre-12c notitication delete row from queue table",
    kwqicDrpNonDurSubShrdque="SYS.DBMS_AQJMS.AQ$_DROPNONDURABLE_SUB_SQ(DBMS_AQ_LIB)",
    kwqicgpc="kernel advanced queuing internal/plsql trusted callouts pre-12c notitication common get parsed cursor",
    kwqicgtoid="kernel advanced queuing internal/plsql trusted callouts pre-12c notitication internal common get TOID",
    kwqicheckoption="SYS.DBMS_AQADM_SYS.CHECKOPTION(DBMS_AQ_LIB)",
    kwqichkopt="kernel advanced queuing internal/plsql trusted callouts pre-12c notitication DBMS_AQADM_SYS.CHECKOPTION",
    kwqiclntaddnondursub="SYS.DBMS_AQJMS.AQ$_ADD_NONDURABLE_SUB_INT(DBMS_AQ_LIB)",
    kwqicRepbgCalout="SYS.DBMS_AQ.AQ$_BACKGROUND_OPER_INT(DBMS_AQ_LIB)",
    kwqicRepBgOper="kernel advanced queuing internal/plsql trusted callouts pre-12c notitication DBMS_AQ.AQ$_BACKGROUND_OPER_INT",
    kwqid="kernel advanced queuing internal/plsql trusted callouts dequeue",
    kwqidbinfo="SYS.DBMS_AQADM_SYS.DBLINK_INFO(DBMS_AQ_LIB)",
    kwqideqarr="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQ.DEQUEUE_ARRAY",
    kwqideqarr0="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQ.DEQUEUE_ARRAY 0",
    kwqideqarray="SYS.DBMS_AQ.DEQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqideqarray0="SYS.DBMS_AQ.DEQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqidjqp="SYS.DBMS_AQADM_SYS.DECR_SRVNTFN_PROC(DBMS_AQ_LIB)",
    kwqidx81deq="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQIN.AQ$_DEQUEUE_IN",
    kwqidx81dequeue="SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqidxdeq101="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQ.AQ$_DEQUEUE version 10.1",
    kwqidxdeq102="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQ.AQ$_DEQUEUE version 10.2",
    kwqidxdeq92="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQ.AQ$_DEQUEUE version 9.2",
    kwqidxdeqin="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQIN.AQ$_DEQUEUE_IN",
    kwqidxdeqin102="kernel advanced queuing internal/plsql trusted callouts dequeue DBMS_AQIN.AQ$_DEQUEUE_IN version 10.2",
    kwqidxdequeue101="SYS.DBMS_AQ.AQ$_DEQUEUE(DBMS_AQ_LIB)",
    kwqidxdequeue102="SYS.DBMS_AQ.AQ$_DEQUEUE(DBMS_AQ_LIB)",
    kwqidxdequeue92="SYS.DBMS_AQ.AQ$_DEQUEUE(DBMS_AQ_LIB)",
    kwqidxdequeuein="SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqidxdequeuein102="SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqie="kernel advanced queuing internal/plsql trusted callouts enqueue",
    kwqienqarr="kernel advanced queuing internal/plsql trusted callouts enqueue DBMS_AQ.ENQUEUE_ARRAY",
    kwqienqarr0="kernel advanced queuing internal/plsql trusted callouts enqueue DBMS_AQ.ENQUEUE_ARRAY (in library DBMS_AQ_LIB)",
    kwqienqarray="SYS.DBMS_AQ.ENQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqienqarray0="SYS.DBMS_AQ.ENQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqiexenqueue="SYS.DBMS_AQ.AQ$_ENQUEUE(DBMS_AQ_LIB)",
    kwqiFetchNonPersData="SYS.DBMS_AQJMS.FETCHNONPERSDATA_12C_CALLOUT(DBMS_AQ_LIB)",
    kwqigetcorrsender="SYS.DBMS_AQADM_SYS.GET_CORR_MSG(DBMS_AQ_LIB)",
    kwqigetdeqsort="SYS.DBMS_AQIN.GET_DEQ_SORT_IN(DBMS_AQ_LIB)",
    kwqigeterr="SYS.DBMS_AQADM_SYS.GETERR(DBMS_AQ_LIB)",
    kwqigetpay="SYS.DBMS_AQ_BQVIEW.GET_ADT_PAYLOAD(DBMS_AQ_LIB)",
    kwqigetpayop="SYS.DBMS_AQ_BQVIEW.GET_OPAQUE_PAYLOAD(DBMS_AQ_LIB)",
    kwqigetrawpay="SYS.DBMS_AQ_BQVIEW.GET_RAW_PAYLOAD(DBMS_AQ_LIB)",
    kwqigetreplay="SYS.DBMS_AQADM.GET_REPLAY_INFO(DBMS_AQ_LIB)",
    kwqigetretry="SYS.DBMS_AQIN.GET_MULTI_RETRY_IN(DBMS_AQ_LIB)",
    kwqigpv="SYS.DBMS_AQADM_SYS.GET_PARAMETER_VALUE(DBMS_AQ_LIB)",
    kwqigretry="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.GET_MULTI_RETRY_IN",
    kwqigtusrforagnt="SYS.DBMS_AQJMS_INTERNAL.GET_DB_USERNAME_FOR_AGENT(DBMS_AQ_LIB)",
    kwqiisalive="SYS.DBMS_AQADM_SYS.ISALIVE(DBMS_AQ_LIB)",
    kwqijaddsub="kernel advanced queuing internal/plsql trusted callouts DBMS_AQJMS.AQ$_ADD_SUBSCRIBER_INT",
    kwqijaltsub="kernel advanced queuing internal/plsql trusted callouts DMBS_AQJMS.AQ$_ALTER_SUBSCRIBER",
    kwqijexenq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.AQ$_ENQUEUE_RAW",
    kwqijexenqueue="SYS.DBMS_AQIN.AQ$_ENQUEUE_RAW(DBMS_AQ_LIB)/SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ(DBMS_AQ_LIB)",
    kwqijlisten="SYS.DBMS_AQIN.AQ$_LISTEN(DBMS_AQ_LIB)",
    kwqijmsaddsub="SYS.DBMS_AQJMS.AQ$_ADD_SUBSCRIBER_INT(DBMS_AQ_LIB)",
    kwqijmsaltsub="SYS.DBMS_AQJMS.AQ$_ALTER_SUBSCRIBER_INT(DBMS_AQ_LIB)",
    kwqijmsregops="SYS.DBMS_AQJMS.AQ$_REGOPS(DBMS_AQ_LIB)",
    kwqijmsremsub="SYS.DBMS_AQJMS.AQ$_REMOVE_SUBSCRIBER_INT(DBMS_AQ_LIB)",
    kwqijopdxdeq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.AQ$_DEQUEUE_IN",
    kwqijopdxdeq102="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.AQ$_DEQUEUE_IN version 10.2",
    kwqijopenq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.AQ$_ENQUEUE_OBJ",
    kwqijopqdxdequeue="SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqijopqdxdequeue102="SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqijopqenqueue="SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ(DBMS_AQ_LIB)",
    kwqijops="kernel advanced queuing internal/plsql trusted callouts DBMS_AQJMS.AQ$_REGOPS",
    kwqijqnx="SYS.DBMS_AQADM_SYS.CHECK_FOR_EXIT(DBMS_AQ_LIB)",
    kwqijremsub="kernel advanced queuing internal/plsql trusted callouts DBMS_AQJMS.AQ$_REMOVE_SUBSCRIBER_INT",
    kwqilisten="SYS.DBMS_AQ.LISTEN(DBMS_AQ_LIB)",
    kwqinonaq="SYS.DBMS_AQADM_SYS.SET_PROC_NONAQ(DBMS_AQ_LIB)",
    kwqinrexenq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL",
    kwqinrexenqueue="SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL(DBMS_AQ_LIB)",
    kwqinrjopenq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL",
    kwqinrjopqenqueue="SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL(DBMS_AQ_LIB)",
    kwqinrprcvraw="SYS.DBMS_AQADM.NONREPUDIATE_RECEIVER(DBMS_AQ_LIB)",
    kwqinrpreciever="SYS.DBMS_AQADM.NONREPUDIATE_RECEIVER(DBMS_AQ_LIB)",
    kwqinrpsenderadt="SYS.DBMS_AQADM.NONREPUDIATE_SENDER(DBMS_AQ_LIB)",
    kwqinrpsenderraw="SYS.DBMS_AQADM.NONREPUDIATE_SENDER(DBMS_AQ_LIB)",
    kwqintfncbk="SYS.DBMS_AQADM_SYS.RUN_CALLBACK(DBMS_AQ_LIB)",
    kwqiopqdeq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQ.DEQUEUE",
    kwqiopqdequeue="SYS.DBMS_AQ.DEQUEUE(DBMS_AQ_LIB)",
    kwqiopqenq="kernel advanced queuing internal/plsql trusted callouts DBMS_AQ.ENQUEUE",
    kwqiopqenqueue="SYS.DBMS_AQ.ENQUEUE(DBMS_AQ_LIB)",
    kwqiplsdisablereg="SYS.DBMS_AQADM_SYS.DISABLE_REGISTRATION(DBMS_AQ_LIB)",
    kwqiplsenablereg="SYS.DBMS_AQADM_SYS.ENABLE_REGISTRATION(DBMS_AQ_LIB)",
    kwqiplspost="SYS.DBMS_AQ.POST(DBMS_AQ_LIB)",
    kwqiplsreg="kernel advanced queuing internal/plsql trusted callouts DBMS_AQ.REGISTER",
    kwqiplsregister="SYS.DBMS_AQ.REGISTER(DBMS_AQ_LIB)",
    kwqiplsunreg="kernel advanced queuing internal/plsql trusted callouts DBMS_AQ.UNREGISTER",
    kwqiplsunregister="SYS.DBMS_AQ.UNREGISTER(DBMS_AQ_LIB)",
    kwqiprocname="SYS.DBMS_AQADM_SYS.GET_PROCNAME(DBMS_AQ_LIB)",
    kwqipropaq="SYS.DBMS_AQADM_SYS.PROP_INTERNAL(DBMS_AQ_LIB)",
    kwqipropaq102="SYS.DBMS_AQADM_SYS.PROP_INTERNAL_102(DBMS_AQ_LIB)",
    kwqiprscmt="SYS.DBMS_AQADM_SYS.PRS_CMT(DBMS_AQ_LIB)",
    kwqiprsqtyp="SYS.DBMS_AQADM_SYS.PRS_QTYP(DBMS_AQ_LIB)",
    kwqiprsrbk="SYS.DBMS_AQADM_SYS.PRS_RBK(DBMS_AQ_LIB)",
    kwqiprsseq="SYS.DBMS_AQADM_SYS.PRS_SEQ(DBMS_AQ_LIB)",
    kwqiquest="SYS.DBMS_AQADM_SYS.CREATE_SPILLED_TABLES_IOTS(DBMS_AQ_LIB)",
    kwqiresetreplay="SYS.DBMS_AQADM.RESET_REPLAY_INFO(DBMS_AQ_LIB)",
    kwqisetcorrsender="SYS.DBMS_AQADM_SYS.RESET_CORR_MSG(DBMS_AQ_LIB)",
    kwqisetdeqsort="SYS.DBMS_AQIN.SET_DEQ_SORT_IN(DBMS_AQ_LIB)",
    kwqisetretry="SYS.DBMS_AQIN.SET_MULTI_RETRY_IN(DBMS_AQ_LIB)",
    kwqisretry="kernel advanced queuing internal/plsql trusted callouts DBMS_AQIN.SET_MULTI_RETRY_IN",
    kwqit="kernel advanced queuing internal/plsql trusted callouts time manager",
    kwqitdsbtn="SYS.DBMS_AQADM_SYS.GET_TDSBTN(DBMS_AQ_LIB)",
    kwqithrowerror="SYS.DBMS_AQADM_SYS.THROW_ERROR(DBMS_AQ_LIB)",
    kwqitmmit="kernel advanced queuing internal/plsql trusted callouts time manager calback function which processes tables",
    kwqitmmsgs="kernel advanced queuing internal/plsql trusted callouts time manager messages",
    kwqitnmptme="kernel advanced queuing internal/plsql trusted callouts time manager newstyle multiconsumer queues",
    kwqitptm="kernel advanced queuing internal/plsql trusted callouts time manager perform time management",
    kwqj="kernel advanced queuing job queue scheduler for propagation",
    kwqladdalias="SYS.DBMS_AQADM_SYS.ADD_ALIAS_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdconnection1="SYS.DBMS_AQADM_SYS.ADD_CONNECTION_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdconnection2="SYS.DBMS_AQADM_SYS.ADD_CONNECTION_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdqueue="SYS.DBMS_AQADM_SYS.ADD_QUEUE_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdqueuetab="SYS.DBMS_AQADM_SYS.ADD_QUEUE_TAB_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdsubscriber="SYS.DBMS_AQADM_SYS.ADD_SUBSCRIBER_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlbindagent="SYS.DBMS_AQADM_SYS.I_BIND_AGENT(DBMS_AQ_LDAP_LIB)",
    kwqldelalias="SYS.DBMS_AQADM_SYS.DEL_ALIAS_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelconnection="SYS.DBMS_AQADM_SYS.DEL_CONNECTION_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelqueue="SYS.DBMS_AQADM_SYS.DEL_QUEUE_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelqueuetab="SYS.DBMS_AQADM_SYS.DROP_QUEUE_TAB_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelsubscriber="SYS.DBMS_AQADM_SYS.DEL_SUBSCRIBER_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlmodqueue="SYS.DBMS_AQADM_SYS.MOD_QUEUE_IN_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlmodqueuetab="SYS.DBMS_AQADM_SYS.MOD_QUEUE_TAB_IN_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlmodsubscriber="SYS.DBMS_AQADM_SYS.MOD_SUBSCRIBER_IN_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlunbindagent="SYS.DBMS_AQADM_SYS.I_UNBIND_AGENT(DBMS_AQ_LDAP_LIB)",
    kwqm="kernel advanced queuing multiconsumer queue IOT support",
    kwqmn="kernel advanced queuing multiconsumer queue IOT support time manager",
    kwqmnslv="kernel advanced queuing multiconsumer queue IOT support time manager slave callback called by ksvrdp",
    kwqmnstslv="kernel advanced queuing multiconsumer queue IOT support time manager start AQ slave process",
    kwqmstmgr="kernel advanced queuing multiconsumer queue IOT support scan time manager entries",
    kwqn="kernel advanced queuing queue notifier",
    kwqngetfrommail="SYS.DBMS_AQELM.GET_SENDFROM(DBMS_AQELM_LIB)",
    kwqngethostmail="SYS.DBMS_AQELM.GET_MAILHOST(DBMS_AQELM_LIB)",
    kwqngetportmail="SYS.DBMS_AQELM.GET_MAILPORT(DBMS_AQELM_LIB)",
    kwqngetproxy="SYS.DBMS_AQELM.GET_PROXY(DBMS_AQELM_LIB)",
    kwqngettxtimeout="SYS.DBMS_AQELM.GET_TXTIMEOUT(DBMS_AQELM_LIB)",
    kwqnsetfrommail="SYS.DBMS_AQELM.SET_SENDFROM(DBMS_AQELM_LIB)",
    kwqnsethostmail="SYS.DBMS_AQELM.SET_MAILHOST(DBMS_AQELM_LIB)",
    kwqnsetportmail="SYS.DBMS_AQELM.SET_MAILPORT(DBMS_AQELM_LIB)",
    kwqnsetproxy="SYS.DBMS_AQELM.SET_PROXY(DBMS_AQELM_LIB)",
    kwqo="kernel advanced queuing insttype checking options",
    kwqp="kernel advanced queuing queueing propagation",
    kwqpmodspse="SYS.DBMS_PRVTAQIP.KWQP_3GL_INT_MODPSENTRY(DBMS_AQ_LIB)",
    kwqs="kernel advanced queuing statistics handling",
    kwqu="kernel advanced queuing lob data",
    kwqvdsvc="kernel advanced queuing drop service",
    kwqx="kernel advanced queuing transformations",
    kwqxcreate="kernel advanced queuing transformations DBMS_TRANSFORMATION_INTERNAL.I_CREATE_TRANSFORMATION",
    kwqxcreatetrans="SYS.DBMS_TRANSFORM_INTERNAL.I_CREATE_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwqxdelete="kernel advanced queuing transformations DBMS_TRANSFORMATION_INTERNAL.I_DROP_TRANSFORMATION",
    kwqxdroptrans="SYS.DBMS_TRANSFORM_INTERNAL.I_DROP_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwqxevaltrans="SYS.DBMS_TRANSFORM.COMPUTE_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwqxmodify="kernel advanced queuing transformations DBMS_TRANSFORMATION_INTERNAL.I_MODIFY_TRANSFORMATION",
    kwqxmodifytrans="SYS.DBMS_TRANSFORM_INTERNAL.I_MODIFY_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwrc="kernel rules engine evaluation(?)",
    kwre="kernel rules engine evaluation(?)",
    kwrsrcb="kernel ??",
    kwrxaddrule="SYS.DBMS_RULEADM_INTERNAL.ADD_RULE(DBMS_RULES_LIB)",
    kwrxalterevalctx="SYS.DBMS_RULEADM_INTERNAL.ALTER_EVALUATION_CONTEXT(DBMS_RULES_LIB)/SYS.DBMS_RULEADM_INTERNAL.IN(DBMS_RULES_LIB)",
    kwrxalterrule="SYS.DBMS_RULEADM_INTERNAL.I_ALTER_RULE(DBMS_RULES_LIB)",
    kwrxchkval="SYS.RE$NV_LIST.add_pair(DBMS_RULES_LIB)/SYS.RE$NV_LIST.get_value(DBMS_RULES_LIB)",
    kwrxcloseiter="SYS.DBMS_RULE.CLOSE_ITERATOR(DBMS_RULES_LIB)",
    kwrxcreateevalctx="SYS.DBMS_RULEADM_INTERNAL.I_CREATE_EVAL_CTX(DBMS_RULES_LIB)/SYS.DBMS_RULEADM_INTERNAL.IN(DBMS_RULES_LIB)",
    kwrxcreaterule="SYS.DBMS_RULEADM_INTERNAL.I_CREATE_RULE(DBMS_RULES_LIB)",
    kwrxcreateruleset="SYS.DBMS_RULEADM_INTERNAL.I_CREATE_RULE_SET(DBMS_RULES_LIB)",
    kwrxdropevalctx="SYS.DBMS_RULEADM_INTERNAL.DROP_EVALUATION_CONTEXT(DBMS_RULES_LIB)",
    kwrxdroprule="SYS.DBMS_RULEADM_INTERNAL.DROP_RULE(DBMS_RULES_LIB)",
    kwrxdropruleset="SYS.DBMS_RULEADM_INTERNAL.DROP_RULE_SET(DBMS_RULES_LIB)",
    kwrxevaluate="SYS.DBMS_RULE_INTERNAL.I_EVALUATE(DBMS_RULES_LIB)",
    kwrxevaluateexp="SYS.DBMS_RULE.EVALUATE_EXPRESSION(DBMS_RULES_LIB)",
    kwrxevaluateiter="SYS.DBMS_RULE.EVALUATE(DBMS_RULES_LIB)",
    kwrxevctxaddvar="SYS.DBMS_RULEADM_INTERNAL.I_EVALUATION_CONTEXT_ADD_VAR(DBMS_RULES_LIB)",
    kwrxexpins="SYS.DBMS_RULE_EXP_RL_INTERNAL.POPULATEEXPRULE(DBMS_RULES_LIB)",
    kwrxgetnexthit="SYS.DBMS_RULE.GET_NEXT_HIT(DBMS_RULES_LIB)",
    kwrxgrantobjpriv="SYS.DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxgrantsyspriv="SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxisfastexp="SYS.DBMS_RULE.IS_FAST(DBMS_RULES_LIB)",
    kwrxops_int="SYS.DBMS_RULE_EXP_RL_INTERNAL.KWRXOPS_INT(DBMS_RULES_LIB)",
    kwrxopsint="SYS.DBMS_RULE_EXP_RL_INTERNAL.KWRXOPS_INT(DBMS_RULES_LIB)",
    kwrxpatchrpriv="SYS.DBMS_RULEADM_INTERNAL.PATCH_RULE_PRIV(DBMS_RULES_LIB)",
    kwrxregiactx="SYS.DBMS_RULEADM_INTERNAL.REGISTER_INTERNAL_ACTX(DBMS_RULES_LIB)/SYS.DBMS_RULEADM_INTERNAL.IN(DBMS_RULES_LIB)",
    kwrxremoverule="SYS.DBMS_RULEADM_INTERNAL.REMOVE_RULE(DBMS_RULES_LIB)",
    kwrxrevokobjpriv="SYS.DBMS_RULE_ADM.REVOKE_OBJECT_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxrevoksyspriv="SYS.DBMS_RULE_ADM.REVOKE_SYSTEM_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxunregiactx="SYS.DBMS_RULEADM_INTERNAL.UNREGISTER_INTERNAL_ACTX(DBMS_RULES_LIB)",
    kwrxvalidateobj="SYS.DBMS_RULEADM_INTERNAL.VALIDATE_RE_OBJECT(DBMS_RULES_LIB)",
    kws="kernel streams advanced queuing",
    kwsa3glAddCsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDCSUB(DBMS_SQADM_LIB)",
    kwsa3glAddDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDDSUB(DBMS_SQADM_LIB)",
    kwsa3glAlterDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ALTERDSUB(DBMS_SQADM_LIB)",
    kwsa3glDrpCsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPCSUB(DBMS_SQADM_LIB)",
    kwsa3glDrpDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPDSUB(DBMS_SQADM_LIB)",
    kwsa3gldrpNtfnSub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPNTFNSUB(DBMS_SQADM_LIB)",
    kwsa3glLockDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_LOCKDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_AddCsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDCSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_AddDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_AlterDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ALTERDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_DrpCsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPCSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_DrpDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_drpNtfnSub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPNTFNSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_LockDsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_LOCKDSUB(DBMS_SQADM_LIB)",
    kwsbg="kernel streams advanced queuing background",
    kwsbgshms="kernel streams advanced queuing background shutdown masters (AQ process coordinator)",
    kwsbit="kernel streams advanced queuing time manager for sharded queue",
    kwsbjc="kernel streams advanced queuing time manager for sharded queue",
    kwsbsm="kernel streams advanced queuing background",
    kwsbtm="kernel streams advanced queuing time manager for sharded queue",
    kwscb="kernel streams advanced queuing message cache",
    kwscp="kernel streams advanced queuing cross process",
    kwsdqwm="kernel streams advanced queuing message cache",
    kwsiAdtEnqRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiAdtEqShrdRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsiBlobEnqRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiBlobEqShrdRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsiJmsEqShrdRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_SHARD_JMS(DBMS_AQ_LIB)",
    kwsiOpqEnqRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiOpqEqShrdRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsipc="kernel streams advanced queuing cross process",
    kwsiRawDeqCalout="SYS.DBMS_AQ.DEQUEUE(DBMS_AQ_LIB)",
    kwsiRawDqCalout="kernel streams advanced queuing DBMS_AQ.DEQUEUE",
    kwsiRawEnqCalout="SYS.DBMS_AQ.ENQUEUE(DBMS_AQ_LIB)",
    kwsiRawEnqRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiRawEqShrdRepCalout="SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsiRepDeqCalout="SYS.DBMS_AQ.DEQUEUE_REPL_INT(DBMS_AQ_LIB)",
    kwslb="kernel streams advanced queuing load balancer",
    kwsmb="kernel streams advanced queuing message cache",
    kwsmc="kernel streams advanced queuing message cache",
    kwsmsg="kernel streams advanced queuing message cache",
    kwsnsm="kernel streams advanced queuing subscription",
    kwspt="kernel streams advanced queuing partitioning",
    kwssa="kernel streams advanced queuing subscription",
    kwssb="kernel streams advanced queuing message cache",
    kwssh="kernel streams advanced queuing message cache",
    kwssi="kernel streams advanced queuing subscription",
    kx="kernel execution",
    kxc="kernel execution constraints",
    kxcb="kernel execution constraints backup",
    kxcc="kernel execution constraints catch all",
    kxcs="kernel execution constraints sql statements",
    kxcsnn="kernel execution constraints sql statements signal a not null constraint violation",
    kxd="kernel execution exadata modules",
    kxdam="kernel execution exadata modules disk auto manage",
    kxdbc="kernel execution exadata modules backup compression for backup appliance",
    kxdbio="kernel execution exadata modules block level intelligent operations",
    kxdcm="kernel execution exadata modules metrics fixed table callbacks",
    kxdofl="kernel execution exadata modules offload",
    kxdr="kernel execution exadata modules DML driver entrypoint",
    kxdrs="kernel execution exadata modules DML driver entrypoint resilvering layer",
    kxf="kernel execution parallel query",
    kxfc="kernel execution parallel query coordinator",
    kxfp="kernel execution parallel query process and queue manager",
    kxfpb="kernel execution parallel query process and queue manager buffers",
    kxfpbgpc="kernel execution parallel query process and queue manager buffers get permanent chunks",
    kxfpbgtc="kernel execution parallel query process and queue manager buffers buffer allocation get chunk",
    kxfpclinfo="kernel execution parallel query process and queue manager get load info from instances",
    kxfpcrel="kernel execution parallel query process and queue manager create local query server process",
    kxfpg1sg="kernel execution parallel query process and queue manager get one server group",
    kxfpGetTotalCpuCount="kernel execution parallel query process and queue manager get cpu counts for parallel sql profile recommendation",
    kxfpgsg="kernel execution parallel query process and queue manager get server group (coordinator)",
    kxfpi="kernel execution parallel query process and queue manager instance",
    kxfpiinfo="kernel execution parallel query process and queue manager instance info; get information from instances",
    kxfpldbl="kernel execution parallel query process and queue manager loadbalancing",
    kxfpnfy="kernel execution parallel query process and queue manager notify",
    kxfpProcessError="kernel execution parallel query process and queue manager process error",
    kxfpqdqr="kernel execution parallel query process and queue manager Queue DeQueue queue Reference",
    kxfpqidqr="kernel execution parallel query process and queue manager Queue Internal DeQueue queue Reference",
    kxfpqput="kernel execution parallel query process and queue manager put qb buffer back (create partial)",
    kxfpqrfdb="kernel execution parallel query process and queue manager Queue ref free dequeued buffer",
    kxfpqrsod="kernel execution parallel query process and queue manager queue ref state object delete",
    kxfpqsod="kernel execution parallel query process and queue manager queue state object delete",
    kxfpqsrls="kernel execution parallel query process and queue manager slave release",
    kxfprdp="kernel execution parallel query process and queue manager run detached process",
    kxfprienq="kernel execution parallel query process and queue manager Queue ref internal enqueue message",
    kxfprifdb="kernel execution parallel query process and queue manager Queue ref internal free dequeued buffer",
    kxfq="kernel execution parallel query table queues",
    kxfqira="kernel execution parallel query table queues initialize a TQ range",
    kxfqupp="kernel execution parallel query table queues unpack message and put in sort buffer",
    kxfr="kernel execution parallel query granules",
    kxfrAllocSlaves="kernel execution parallel query granules allocate slaves",
    kxfralo="kernel execution parallel query granules allocate rowid ranges and slave processes",
    kxfrDefaultDOP="kernel execution parallel query granules calculate default DOP",
    kxfs="kernel execution parallel query slave",
    kxft="kernel execution parallel query parallel execution PTL",
    kxftaskload="kernel execution parallel query parallel execution PTL this is the load callback that is called for by qerfxFetch to get ...",
    kxfx="kernel execution parallel query execution",
    kxfxcp="kernel execution parallel query execution client side (qc) interface",
    kxfxcw="kernel execution parallel query execution kxfxrytab yields the (greatest) reply type expected from a",
    kxfxgs="kernel execution parallel query execution get start",
    kxfxmai="kernel execution parallel query execution slave process main entry point",
    kxfxq="kernel execution parallel query execution queueing",
    kxfxse="kernel execution parallel query execution execute",
    kxfxsExecute="kernel execution parallel query execution slave execute",
    kxfxsp="kernel execution parallel query execution open, parse, bind entire DFO",
    kxfxsStmtExecute="kernel execution parallel query execution statement execute",
    kxh="kernel execution hash join",
    kxhf="kernel execution hash join support for hash join and memory management",
    kxhrUnpack="kernel execution hash join unpack a row",
    kxib="kernel execution index buffering operations",
    kxibDoFinish="kernel execution index buffering operations do finish processing for a specified index",
    kxibFinish="kernel execution index buffering operations finish index maintenance processing",
    kxpar="kernel execution partition row sources",
    kxrd="kernel execution row delete",
    kxru="kernel execution row update",
    kxs="kernel execution shared cursor",
    kxsbnddmp="kernel execution shared cursor bind variable dump. master routine per bind for providing bind info in sql trace files.",
    kxsbndinf="kernel execution shared cursor bind variable information. provides actual bind data in sql trace files.",
    kxscln="kernel execution shared cursor cleanup instantiation object",
    kxscls="kernel execution shared cursor close",
    kxsclsr="kernel execution shared cursor close remote",
    kxsDiag8711391="kernel execution shared cursor Check for bug 8711391 (cursor lock user session state object deleted before close of the cursors)",
    KXSDUMP="kernel execution shared cursor ??",
    kxsfbb="kernel execution shared cursor free bind buffers(?)",
    kxsffir="kernel execution shared cursor function fire called when the appropriate heap is going away",
    kxsGetRuntimeLock="kernel execution shared cursor get runtime lock",
    kxsOpenACursor="kernel execution shared cursor open a cursor (local in PGA)",
    kxspoac="kernel execution shared cursor put oacdef into the cursor instantiation",
    kxsSsa="kernel execution shared cursor session state array(?)",
    kxsSsaSetSqlid="kernel execution shared cursor session state array(?) prepare to update X$SUSE with sqlid, updateallssa performs this",
    kxsSsaUpdateAllssa="kernel execution shared cursor session state array(?) update all session state array (X$KSUSE)",
    kxst="kernel execution shared cursor sql trace",
    kxstcls="kernel execution shared cursor sql trace trace cursor closing",
    kxstcol="kernel execution shared cursor sql trace collect. provide parse, execute and fetch statistics.",
    kxstcol2="kernel execution shared cursor sql trace collect. provide parse, execute and fetch statistics. for LOB types",
    kxstper="kernel execution shared cursor sql trace process error",
    kxstsql="kernel execution shared cursor sql trace sql processing. provide SQL information",
    kxstTraceBinds="kernel execution shared cursor sql trace bind variable",
    kxstTraceClose="kernel execution shared cursor sql trace close tracefile",
    kxstTraceWait="kernel execution shared cursor sql trace provide wait information",
    kxtex1="kernel execution execute trigger",
    kxti="kernel execution trigger",
    kxtiget="kernel execution trigger ??",
    kxtivwt="kernel execution trigger view with active trigger for current ML",
    kxto="kernel execution trigger",
    kxtr="kernel execution trigger",
    kxtt="kernel execution temporary table operations",
    kxttClnUp="kernel execution temporary table operations clean up state object",
    kxttIsPTT="SYS.DBMS_STATS.IS_PRIVATE_TEMP_TABLE(DBMS_STATS_LIB)",
    kxwph="kernel execution table/tabpart/cluster segment attribute management",
    kywmabtpln="SYS.DBMS_WLM.IABORT_WLMPLAN(DBMS_WLM_LIB)",
    kywmadclsfr="SYS.DBMS_WLM.IADD_WLMCLASSIFIERS(DBMS_WLM_LIB)",
    kywmchkpln="SYS.DBMS_WLM.ICHECK_WLMPLAN(DBMS_WLM_LIB)",
    kywmchkrmenable="SYS.DBMS_WLM.ICHECK_RM_ENABLE(DBMS_WLM_LIB)",
    kywmchkrmisoff="SYS.DBMS_WLM.ICHECK_RM_ISOFF(DBMS_WLM_LIB)",
    kywmchkrmplan="SYS.DBMS_WLM.ICHECK_RM_PLAN(DBMS_WLM_LIB)",
    kywmcrtpln="SYS.DBMS_WLM.ICREATE_WLMPLAN(DBMS_WLM_LIB)",
    kywmdelpln="SYS.DBMS_WLM.IDELETE_WLMPLAN(DBMS_WLM_LIB)",
    kywmgetcdbsetting="SYS.DBMS_WLM.IGET_CDB_SETTING(DBMS_WLM_LIB)",
    kywmgetdbinfo="SYS.DBMS_WLM.IGET_DB_INFO(DBMS_WLM_LIB)",
    kywmgetpomultiplier="SYS.DBMS_WLM.IGET_PO_MULTIPLIER(DBMS_WLM_LIB)",
    kywmisetpdbrmplan="SYS.DBMS_WLM.ISET_PDB_RM_PLAN(DBMS_WLM_LIB)",
    kywmsbmtpc="SYS.DBMS_WLM.ISUBMIT_WLMPCS(DBMS_WLM_LIB)",
    kywmsbmtpcinfo="SYS.DBMS_WLM.ISUBMIT_WLMPCINFO(DBMS_WLM_LIB)",
    kywmsbmtpln="SYS.DBMS_WLM.ISUBMIT_WLMPLAN(DBMS_WLM_LIB)",
    kywmsetdbidbmap="SYS.DBMS_WLM.ISET_DBI_DBMAP(DBMS_WLM_LIB)",
    kywmsetdbirmplan="SYS.DBMS_WLM.ISET_DBI_RM_PLAN(DBMS_WLM_LIB)",
    kywmsetdbmap="SYS.DBMS_WLM.ISET_DBMAP(DBMS_WLM_LIB)",
    kywmsetrmplan="SYS.DBMS_WLM.ISET_RM_PLAN(DBMS_WLM_LIB)",
    kywmupcggrpmap="SYS.DBMS_WLM.IUPDATE_CG_MAPS(DBMS_WLM_LIB)",
    kywmupcgmaps="SYS.DBMS_WLM.IUP_CG_MAPS(DBMS_WLM_LIB)",
    kywmuppdbcgmap="SYS.DBMS_WLM.IUPDATE_PDBCG_MAPS(DBMS_WLM_LIB)",
    kz="kernel security",
    kza="kernel security audit",
    kzaf_insert_audit_dp="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DP(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_dpapi="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DPAPI(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_dv="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DV(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_fga="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_ksacl="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_KSACL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_ols="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_OLS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_protocol="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_PROTOCOL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_rman="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_RMAN(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_standard="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_STANDARD(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_xs="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_XS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditdp="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DP(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditdpapi="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DPAPI(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditdv="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DV(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditfga="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditksacl="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_KSACL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditols="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_OLS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditprotocol="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_PROTOCOL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditrman="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_RMAN(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditstandard="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_STANDARD(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditxs="AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_XS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_add_hcol="AUDSYS.DBMS_AUDIT_MGMT.ADD_HIDDEN_COLUMNS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_alter_part_interval="AUDSYS.DBMS_AUDIT_MGMT.ALTER_PARTITION_INTERVAL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_check_tablespace_fga="AUDSYS.DBMS_AUDIT_MGMT.CHECK_TABLESPACE_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_clean_atrail="AUDSYS.DBMS_AUDIT_MGMT.CLEAN_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_drop_old_uatrail="AUDSYS.DBMS_AUDIT_MGMT.DROP_OLD_UNIFIED_AUDTABLES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_enqueue_get_rel="AUDSYS.DBMS_AUDIT_MGMT.ENQUEUE_GET_REL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_fga_operation_helper="AUDSYS.DBMS_AUDIT_MGMT.FGA_OPERATION_HELPER(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_flush_ang_trail="AUDSYS.DBMS_AUDIT_MGMT.FLUSH_UNIFIED_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_get_commit_delay="AUDSYS.DBMS_AUDIT_MGMT.GET_AUDIT_COMMIT_DELAY(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_get_lat_in_mem="AUDSYS.DBMS_AUDIT_MGMT.GET_LAST_ARCHIVE_TS_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_get_prop_in_mem="AUDSYS.DBMS_AUDIT_MGMT.GET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_import_audunified="SYS.AMGT$DATAPUMP.IMPORT_AUDUNIFIED_CONTENTS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_load_ang_files="AUDSYS.DBMS_AUDIT_MGMT.LOAD_UNIFIED_AUDIT_FILES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_move_aud_tablespace="AUDSYS.DBMS_AUDIT_MGMT.MOVE_STD_AUD_TABLESPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_atrail_property="AUDSYS.DBMS_AUDIT_MGMT.UPDATE_ATRAIL_PROP_SGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_lat_in_mem="AUDSYS.DBMS_AUDIT_MGMT.SET_LAST_ARCH_TS_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_prop_in_mem="AUDSYS.DBMS_AUDIT_MGMT.SET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_uga_flags="AUDSYS.DBMS_AUDIT_MGMT.UPDATE_KZAM_UGA_FLAGS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_setup_ang_trail="AUDSYS.DBMS_AUDIT_MGMT.SETUP_NG_AUDIT_TSPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_sig_err="AUDSYS.DBMS_AUDIT_MGMT.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)/SYS.AMGT$DATAPUMP.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_trans_uniaud_data="AUDSYS.DBMS_AUDIT_MGMT.TRANSFER_UNIAUD_RECS_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_write_trace="AUDSYS.DBMS_AUDIT_MGMT.WRITE_TRACE_MESSAGE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamaddhcol="AUDSYS.DBMS_AUDIT_MGMT.ADD_HIDDEN_COLUMNS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamalterpartinterval="AUDSYS.DBMS_AUDIT_MGMT.ALTER_PARTITION_INTERVAL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamchecktablespacefga="AUDSYS.DBMS_AUDIT_MGMT.CHECK_TABLESPACE_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamcleanatrail="AUDSYS.DBMS_AUDIT_MGMT.CLEAN_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamdropolduatrail="AUDSYS.DBMS_AUDIT_MGMT.DROP_OLD_UNIFIED_AUDTABLES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamenqueuegetrel="AUDSYS.DBMS_AUDIT_MGMT.ENQUEUE_GET_REL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamfgaoperationhelper="AUDSYS.DBMS_AUDIT_MGMT.FGA_OPERATION_HELPER(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamflushangtrail="AUDSYS.DBMS_AUDIT_MGMT.FLUSH_UNIFIED_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamgetcommitdelay="AUDSYS.DBMS_AUDIT_MGMT.GET_AUDIT_COMMIT_DELAY(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamgetlatinmem="AUDSYS.DBMS_AUDIT_MGMT.GET_LAST_ARCHIVE_TS_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamgetpropinmem="AUDSYS.DBMS_AUDIT_MGMT.GET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamimportaudunified="SYS.AMGT$DATAPUMP.IMPORT_AUDUNIFIED_CONTENTS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamloadangfiles="AUDSYS.DBMS_AUDIT_MGMT.LOAD_UNIFIED_AUDIT_FILES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzammoveaudtablespace="AUDSYS.DBMS_AUDIT_MGMT.MOVE_STD_AUD_TABLESPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetatrailproperty="AUDSYS.DBMS_AUDIT_MGMT.UPDATE_ATRAIL_PROP_SGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetlatinmem="AUDSYS.DBMS_AUDIT_MGMT.SET_LAST_ARCH_TS_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetpropinmem="AUDSYS.DBMS_AUDIT_MGMT.SET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetugaflags="AUDSYS.DBMS_AUDIT_MGMT.UPDATE_KZAM_UGA_FLAGS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetupangtrail="AUDSYS.DBMS_AUDIT_MGMT.SETUP_NG_AUDIT_TSPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsigerr="AUDSYS.DBMS_AUDIT_MGMT.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)/SYS.AMGT$DATAPUMP.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamtransuniauddata="AUDSYS.DBMS_AUDIT_MGMT.TRANSFER_UNIAUD_RECS_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamwritetrace="AUDSYS.DBMS_AUDIT_MGMT.WRITE_TRACE_MESSAGE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzang="kernel security audit next generation",
    kzangins="kernel security audit next generation insert record",
    kzap="kernel security audit policy",
    kzapicsp="SYS.DBMS_ZHELP_IR.CHECK_SYS_PRIV(DBMS_ZHELP_LIB)",
    kzar="kernel security audit application",
    kzc="kernel security Code-Based Access Control",
    kzcicrStatsDecryptNum="SYS.DBMS_CRYPTO_INTERNAL.STATS_DECRYPT_NUM_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrStatsDecryptRaw="SYS.DBMS_CRYPTO_INTERNAL.STATS_DECRYPT_RAW_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrStatsEncryptNum="SYS.DBMS_CRYPTO_INTERNAL.STATS_ENCRYPT_NUM_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrStatsEncryptRaw="SYS.DBMS_CRYPTO_INTERNAL.STATS_ENCRYPT_RAW_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrUpdateSensitiveStats="SYS.DBMS_CRYPTO_INTERNAL.UPDATESENSITIVESTATS(CRYPTO_INTERNAL_LIB)",
    kzck="kernel security Code-Based Access Control encryption support",
    kzctx="kernel security Code-Based Access Control context routines",
    kzctxcdbli="kernel security Code-Based Access Control context routines construct DB link info",
    kzctxecc="SYS.DBMS_SESSION.KZCTXECC(C)",
    kzctxecc1="SYS.DBMS_SESSION.KZCTXECC1(C)",
    kzctxesc="SYS.DBMS_SESSION.KZCTXESC(C)",
    kzctxg="kernel security Code-Based Access Control context routines global_context",
    kzctxgci="SYS.DBMS_SESSION.KZCTXGC(C)",
    kzctxgjcc="SYS.DBMS_APPCTX.CLEAR_CONTEXT(DBMS_APPCTX_LIB)",
    kzctxgjsc="SYS.DBMS_APPCTX.SET_CONTEXT(DBMS_APPCTX_LIB)",
    kzctxgsi="SYS.DBMS_SESSION.KZCTXGSI(C)",
    kzctxscv="kernel security Code-Based Access Control context routines set context value",
    kzd="kernel security dictionary access support",
    kzdlkUpgrade="SYS.DBMS_DBLINK.UPGRADE(DBMS_DBLINK_LIB)",
    kzdopcl="kernel security dictionary access support object privileges check routines?",
    kzdpcrd="SYS.DBMS_TDE_TOOLKIT_FFI.DATAPUMP_DECRYPT(TDE_LIBRARY)",
    kzdpcre="SYS.DBMS_TDE_TOOLKIT_FFI.DATAPUMP_ENCRYPT(TDE_LIBRARY)",
    kzdpepadp="SYS.DBMS_TSDP_PROTECT.ASSOCIATE_POLICY(DBMS_TSDP_LIB)",
    kzdpepalp="SYS.DBMS_TSDP_PROTECT.INTERNAL_ALTER_POLICY(DBMS_TSDP_LIB)",
    kzdpepapo="SYS.DBMS_TSDP_PROTECT.INTERNAL_ADD_POLICY(DBMS_TSDP_LIB)",
    kzdpepdpc="SYS.DBMS_TSDP_PROTECT.DISABLE_PROTECTION_COLUMN(DBMS_TSDP_LIB)",
    kzdpepdpo="SYS.DBMS_TSDP_PROTECT.DROP_POLICY(DBMS_TSDP_LIB)",
    kzdpepdps="SYS.DBMS_TSDP_PROTECT.DISABLE_PROTECTION_SOURCE(DBMS_TSDP_LIB)",
    kzdpepdpt="SYS.DBMS_TSDP_PROTECT.DISABLE_PROTECTION_TYPE(DBMS_TSDP_LIB)",
    kzdpepdsp="SYS.DBMS_TSDP_PROTECT.INTERNAL_DROP_POLICY(DBMS_TSDP_LIB)",
    kzdpepepc="SYS.DBMS_TSDP_PROTECT.ENABLE_PROTECTION_COLUMN(DBMS_TSDP_LIB)",
    kzdpepeps="SYS.DBMS_TSDP_PROTECT.ENABLE_PROTECTION_SOURCE(DBMS_TSDP_LIB)",
    kzdpepept="SYS.DBMS_TSDP_PROTECT.ENABLE_PROTECTION_TYPE(DBMS_TSDP_LIB)",
    kzdpmpalc="SYS.DBMS_TSDP_MANAGE.ALTER_SENSITIVE_COLUMN(DBMS_TSDP_LIB)",
    kzdpmpasc="SYS.DBMS_TSDP_MANAGE.ADD_SENSITIVE_COLUMN(DBMS_TSDP_LIB)",
    kzdpmpast="SYS.DBMS_TSDP_MANAGE.ADD_SENSITIVE_TYPE(DBMS_TSDP_LIB)",
    kzdpmpdst="SYS.DBMS_TSDP_MANAGE.DROP_SENSITIVE_TYPE(DBMS_TSDP_LIB)",
    kzdpmpdts="SYS.DBMS_TSDP_MANAGE.DROP_SENSITIVE_TYPE_SOURCE(DBMS_TSDP_LIB)",
    kzdpmpidx="SYS.DBMS_TSDP_MANAGE.INT_IMPORT_DISCOVERY_RESULT(DBMS_TSDP_LIB)",
    kzdpmpist="SYS.DBMS_TSDP_MANAGE.INT_IMPORT_SENSITIVE_TYPES(DBMS_TSDP_LIB)",
    kzdpmprco="SYS.DBMS_TSDP_MANAGE.DROP_SENSITIVE_COLUMN(DBMS_TSDP_LIB)",
    kzdpmprscs="SYS.DBMS_TSDP_MANAGE.REMOVE_DISCOVERY_RESULT(DBMS_TSDP_LIB)",
    kzekmaptkp="SYS.DBMS_TTS.ADD_PROTECTED_CE_TAB_KEY_INT(DBMS_TTS_LIB)",
    kzekmgptkp="SYS.DBMS_TTS.GET_PROTECTED_CE_TAB_KEY_INT(DBMS_TTS_LIB)",
    kzfa="kernel security fine grained auditing",
    kzfaadp="SYS.DBMS_FGA.ADD_POLICY(DBMS_FGA_LIB)",
    kzfadrp="SYS.DBMS_FGA.DROP_POLICY(DBMS_FGA_LIB)",
    kzfaenp="SYS.DBMS_FGA.ENABLE_POLICY(DBMS_FGA_LIB)",
    kzft="kernel security fine grained auditing",
    kzia="kernel security identification and authentication",
    kziaia="kernel security identification and authentication main identification and authentication function",
    kziavua="kernel security identification and authentication ??",
    kzl="kernel security label",
    kzld="kernel security label ldap",
    kzlg="kernel security label generic directory services integration",
    kzp="kernel security privileges",
    kzpcaobb="kernel security privileges check for access on object using object",
    kzpchkbu="kernel security privileges check for privileges",
    kzpchkc="kernel security privileges check privileges on a object cyclic",
    kzppCapturePLSQL="SYS.DBMS_PRIVILEGE_CAPTURE.CAPTURE_DEPENDENCY_PRIVS(PRIV_PROFILE_LIB)",
    kzppCreateCapture="SYS.DBMS_PRIVILEGE_CAPTURE.CREATE_CAPTURE(PRIV_PROFILE_LIB)",
    kzppDeleteRun="SYS.DBMS_PRIVILEGE_CAPTURE.DELETE_RUN(PRIV_PROFILE_LIB)",
    kzppDisableCapture="SYS.DBMS_PRIVILEGE_CAPTURE.DISABLE_CAPTURE(PRIV_PROFILE_LIB)",
    kzppDropCapture="SYS.DBMS_PRIVILEGE_CAPTURE.DROP_CAPTURE(PRIV_PROFILE_LIB)",
    kzppEnableCapture="SYS.DBMS_PRIVILEGE_CAPTURE.ENABLE_CAPTURE(PRIV_PROFILE_LIB)",
    kzppGenerateResult="SYS.DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT(PRIV_PROFILE_LIB)",
    kzppinsdc="SYS.DBMS_PRIV_CAPTURE.CAPTURE_PRIVILEGE_USE(PRIV_PROFILE_LIB)",
    kzppinsdc_str="SYS.DBMS_PRIV_CAPTURE.CAPTURE_PRIVILEGE_USE(PRIV_PROFILE_LIB)",
    kzppinsdcstr="SYS.DBMS_PRIV_CAPTURE.CAPTURE_PRIVILEGE_USE(PRIV_PROFILE_LIB)",
    kzppIsDVSupported="SYS.IS_DV_SUPPORTED.is_dv_supported(PRIV_PROFILE_LIB)",
    kzppobjpriv="SYS.DBMS_PRIV_CAPTURE.SES_HAS_OBJ_PRIV(PRIV_PROFILE_LIB)",
    kzpprolepriv="SYS.DBMS_PRIV_CAPTURE.SES_HAS_ROLE_PRIV(PRIV_PROFILE_LIB)",
    kzppsyspriv="SYS.DBMS_PRIV_CAPTURE.SES_HAS_SYS_PRIV(PRIV_PROFILE_LIB)",
    kzr="kernel security virtual private database",
    kzra="kernel security virtual private database privileges",
    kzraacx="SYS.DBMS_RLS_INT.ADD_POLICY_CONTEXT(DBMS_RLS_LIB)",
    kzraadp="SYS.DBMS_RLS_INT.ADD_POLICY(DBMS_RLS_LIB)/SYS.DBMS_RLS_INT.IN(DBMS_RLS_LIB)",
    kzracpg="SYS.DBMS_RLS_INT.CREATE_POLICY_GROUP(DBMS_RLS_LIB)",
    kzradcx="SYS.DBMS_RLS_INT.DROP_POLICY_CONTEXT(DBMS_RLS_LIB)",
    kzradm="kernel security virtual private database privileges real-time application-controlled data masking",
    kzradmadd="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.ADD_POLICY",
    kzradmalter="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.ALTER_POLICY",
    kzradmdisable="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.DISABLE_POLICY",
    kzradmdrop="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.DROP_POLICY",
    kzradmenable="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.ENABLE_POLICY",
    kzradmfpmmask="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.FPM_MASK",
    kzradmfpmunmask="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.FPM_UNMASK",
    kzradmupdfull="kernel security virtual private database privileges real-time application-controlled data masking DBMS_REDACT_INT.UPDATE_FULL_REDACTION_VALUES",
    kzradpg="SYS.DBMS_RLS_INT.DELETE_POLICY_GROUP(DBMS_RLS_LIB)",
    kzradrp="SYS.DBMS_RLS_INT.DROP_POLICY(DBMS_RLS_LIB)",
    kzraealgp="SYS.DBMS_RLS_INT.ALTER_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzraealp="SYS.DBMS_RLS_INT.ALTER_POLICY(DBMS_RLS_LIB)",
    kzraenp="SYS.DBMS_RLS_INT.ENABLE_POLICY(DBMS_RLS_LIB)",
    kzraflp="SYS.DBMS_RLS_INT.REFRESH_POLICY(DBMS_RLS_LIB)",
    kzragenp="SYS.DBMS_RLS_INT.ENABLE_GROUPED_POLICY(DBMS_RLS_LIB)/SYS.DBMS_RLS_INT.DISABLE_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzragflp="SYS.DBMS_RLS_INT.REFRESH_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzraiisc="SYS.DBMS_XDSUTL.INVALIDATE_DSD_CACHE(DBMS_XDSUTL_LIB)",
    kzraivba="SYS.DBMS_XDSUTL.INVALIDATE_DSD_CACHE_BY_ACLID(DBMS_XDSUTL_LIB)",
    kzrapfg="SYS.DBMS_RLS_INT.DROP_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzraptg="SYS.DBMS_RLS_INT.ADD_GROUPED_POLICY(DBMS_RLS_LIB)/SYS.DBMS_RLS_INT.IN(DBMS_RLS_LIB)",
    kzraxdsa="SYS.XS_DATA_SECURITY_INT.APPLY_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsa_int="SYS.XS_DIAG_INT.APPLY_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsaint="SYS.XS_DIAG_INT.APPLY_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsd="SYS.DBMS_XDS.DISABLE_XDS(DBMS_XDS_LIB)",
    kzraxdse="SYS.XS_DATA_SECURITY_INT.ENABLE_DISABLE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsf1="SYS.DBMS_XDS.REFRESH_DSD(DBMS_XDS_LIB)",
    kzraxdsf2="SYS.DBMS_XDS.REFRESH_DSD(DBMS_XDS_LIB)",
    kzraxdsr="SYS.XS_DATA_SECURITY_INT.REMOVE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsr_int="SYS.XS_DIAG_INT.REMOVE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsrint="SYS.XS_DIAG_INT.REMOVE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxpnm="SYS.XS_DATA_SECURITY_UTIL.VERIFY_OBJECTNAME(DBMS_XDS_LIB)/SYS.XS_DATA_SECURITY_UTIL_INT.VERIFY_OBJECTNAME(DBMS_XDS_LIB)",
    kzredact_apply_pe_col="SYS.DBMS_REDACT_INT.APPLY_POLICY_EXPR_TO_COL(DBMS_REDACT_LIB)",
    kzredact_create_pe="SYS.DBMS_REDACT_INT.CREATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredact_drop_pe="SYS.DBMS_REDACT_INT.DROP_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredact_update_pe="SYS.DBMS_REDACT_INT.UPDATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactadd="SYS.DBMS_REDACT_INT.ADD_POLICY(DBMS_REDACT_LIB)",
    kzredactadd_v2="SYS.DBMS_REDACT_INT.ADD_POLICY(DBMS_REDACT_LIB)",
    kzredactaddv2="SYS.DBMS_REDACT_INT.ADD_POLICY(DBMS_REDACT_LIB)",
    kzredactalter="SYS.DBMS_REDACT_INT.ALTER_POLICY(DBMS_REDACT_LIB)",
    kzredactalter_v2="SYS.DBMS_REDACT_INT.ALTER_POLICY(DBMS_REDACT_LIB)",
    kzredactalterv2="SYS.DBMS_REDACT_INT.ALTER_POLICY(DBMS_REDACT_LIB)",
    kzredactapplypecol="SYS.DBMS_REDACT_INT.APPLY_POLICY_EXPR_TO_COL(DBMS_REDACT_LIB)",
    kzredactcreatepe="SYS.DBMS_REDACT_INT.CREATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactdisable="SYS.DBMS_REDACT_INT.DISABLE_POLICY(DBMS_REDACT_LIB)",
    kzredactdrop="SYS.DBMS_REDACT_INT.DROP_POLICY(DBMS_REDACT_LIB)",
    kzredactdroppe="SYS.DBMS_REDACT_INT.DROP_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactenable="SYS.DBMS_REDACT_INT.ENABLE_POLICY(DBMS_REDACT_LIB)",
    kzredactfpmmask="SYS.DBMS_REDACT_INT.FPM_MASK(DBMS_REDACT_LIB)",
    kzredactfpmunmask="SYS.DBMS_REDACT_INT.FPM_UNMASK(DBMS_REDACT_LIB)",
    kzredactupdatepe="SYS.DBMS_REDACT_INT.UPDATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactupdfull="SYS.DBMS_REDACT_INT.UPDATE_FULL_REDACTION_VALUES(DBMS_REDACT_LIB)",
    kzrt="kernel security virtual private database privileges",
    kzs="kernel security privileges",
    kzsob_DES3Decrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3DECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_DES3Encrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3ENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_DESDecrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESDECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_DESEncrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_GetKey="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.GETKEY(DBMS_OBFUSCATION_LIB)",
    kzsob_MD5="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.MD5(DBMS_OBFUSCATION_LIB)",
    kzsobDES3Decrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3DECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobDES3Encrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3ENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobDESDecrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESDECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobDESEncrypt="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobGetKey="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.GETKEY(DBMS_OBFUSCATION_LIB)",
    kzsobMD5="SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.MD5(DBMS_OBFUSCATION_LIB)",
    kzsp="kernel security privileges privileges",
    kzsr="kernel security privileges roles/remote password file",
    kzstc="SYS.DBMS_CRYPTO_FFI.COOKIE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstDecrypt="SYS.DBMS_CRYPTO_TOOLKIT_FFI.DECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstDeEnvelope="SYS.DBMS_CRYPTO_TOOLKIT_FFI.DEENVELOPE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstdl="SYS.DBMS_CRYPTO_FFI.DECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstdr="SYS.DBMS_CRYPTO_FFI.DECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteClosePersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.CLOSEPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteCreatePersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.CREATEPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteGetPKCS7Prot="SYS.DBMS_CRYPTO_TOOLKIT_FFI.GETPROTECTION(CRYPTO_TOOLKIT_LIBRARY)/SYS.DBMS_CRYPTO_TOOLKIT_FFI.IN(CRYPTO_TOOLKIT_LIBRARY)",
    kzstel="SYS.DBMS_CRYPTO_FFI.ENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstEncrypt="SYS.DBMS_CRYPTO_TOOLKIT_FFI.ENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstEnvelope="SYS.DBMS_CRYPTO_TOOLKIT_FFI.ENVELOPE(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteOpenPersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.OPENPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzster="SYS.DBMS_CRYPTO_FFI.ENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteRemovePersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.REMOVEPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteSetPKCS7Prot="SYS.DBMS_CRYPTO_TOOLKIT_FFI.SETPROTECTION(CRYPTO_TOOLKIT_LIBRARY)/SYS.DBMS_CRYPTO_TOOLKIT_FFI.IN(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteStorePersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.STOREPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzstgpfw_GetPersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.GETPERSONAFROMWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstgpfwGetPersona="SYS.DBMS_CRYPTO_TOOLKIT_FFI.GETPERSONAFROMWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstHash="SYS.DBMS_CRYPTO_TOOLKIT_FFI.HASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzsthl="SYS.DBMS_CRYPTO_FFI.HASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzsthr="SYS.DBMS_CRYPTO_FFI.HASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiAbortIdentity="SYS.DBMS_CRYPTO_TOOLKIT_FFI.ABORTIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiac="SYS.KUPU$UTILITIES_INT.INTALGCONV(KUPULIB)",
    kzstiCreateIdentity="SYS.DBMS_CRYPTO_TOOLKIT_FFI.CREATEIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstInitialize="SYS.DBMS_CRYPTO_TOOLKIT_FFI.INITIALIZE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiRemoveIdentity="SYS.DBMS_CRYPTO_TOOLKIT_FFI.REMOVEIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiStoreTrustedIdentity="SYS.DBMS_CRYPTO_TOOLKIT_FFI.STORETRUSTEDIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkdc_PKDecrypt="SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKDECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkdcPKDecrypt="SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKDECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkec_PKEncrypt="SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkecPKEncrypt="SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstKeyedHash="SYS.DBMS_CRYPTO_TOOLKIT_FFI.KEYEDHASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzstml="SYS.DBMS_CRYPTO_FFI.MAC(CRYPTO_TOOLKIT_LIBRARY)",
    kzstmr="SYS.DBMS_CRYPTO_FFI.MAC(CRYPTO_TOOLKIT_LIBRARY)",
    kzstr="SYS.DBMS_CRYPTO_FFI.RANDOM(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrb_RandomBytes="SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMBYTES(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrbRandomBytes="SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMBYTES(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrn_RandomNumber="SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMNUMBER(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrnRandomNumber="SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMNUMBER(CRYPTO_TOOLKIT_LIBRARY)",
    kzstsd_SignDetached="SYS.DBMS_CRYPTO_TOOLKIT_FFI.SIGNDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstsdSignDetached="SYS.DBMS_CRYPTO_TOOLKIT_FFI.SIGNDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstSeedRandom="SYS.DBMS_CRYPTO_TOOLKIT_FFI.SEEDRANDOM(CRYPTO_TOOLKIT_LIBRARY)",
    kzstSign="SYS.DBMS_CRYPTO_TOOLKIT_FFI.SIGN(CRYPTO_TOOLKIT_LIBRARY)",
    kzstTerminate="SYS.DBMS_CRYPTO_TOOLKIT_FFI.TERMINATE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstValidate="SYS.DBMS_CRYPTO_TOOLKIT_FFI.VALIDATE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstved_VerifyDetached="SYS.DBMS_CRYPTO_TOOLKIT_FFI.VERIFYDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstvedVerifyDetached="SYS.DBMS_CRYPTO_TOOLKIT_FFI.VERIFYDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstVerify="SYS.DBMS_CRYPTO_TOOLKIT_FFI.VERIFY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwCloseWallet="SYS.DBMS_CRYPTO_TOOLKIT_FFI.CLOSEWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwCreateWallet="SYS.DBMS_CRYPTO_TOOLKIT_FFI.CREATEWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwDestroyWallet="SYS.DBMS_CRYPTO_TOOLKIT_FFI.DESTROYWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwOpenWallet="SYS.DBMS_CRYPTO_TOOLKIT_FFI.OPENWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzsu="kernel security privileges XS principal",
    kzu="kernel security privileges",
    kzvcpfsqltext="DVSYS.DBMS_MACUTL.COPY_SQL_TEXT_FILTERED(DVSYS.KZV$UTL_LIBT)",
    kzvd="kernel security data vault",
    kzvdvedpf="DVSYS.DBMS_MACUTL.CHECK_FULL_DVAUTH(DVSYS.KZV$UTL_LIBT)",
    kzvdvedptb="DVSYS.DBMS_MACUTL.CHECK_TAB_DVAUTH(DVSYS.KZV$UTL_LIBT)",
    kzvdvedptransp="SYS.KUPM$MCP.CHECK_TTS_DVAUTH(DBMS_DATAPUMP_DV_LIB)",
    kzvdvedpts="DVSYS.DBMS_MACUTL.CHECK_TS_DVAUTH(DVSYS.KZV$UTL_LIBT)",
    kzvdversetev="DVSYS.DBMS_MACSEC_RULES.evaluate_tr(DVSYS.KZV$RUL_LIBT)",
    kzvdvexsgr="SYS.XS_PRINCIPAL.DV_ROLE_CHECK(DBMS_RXS_LIB)",
    kzvdvldAddRLToRS="DVSYS.DBMS_MACADM.ADD_RULE_TO_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldCreateRule="DVSYS.DBMS_MACADM.CREATE_RULE(KZV$RSRC_LIBT)",
    kzvdvldCreateRuleset="DVSYS.DBMS_MACADM.CREATE_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldDeleteRLFromRS="DVSYS.DBMS_MACADM.DELETE_RULE_FROM_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldDeleteRule="DVSYS.DBMS_MACADM.DELETE_RULE(KZV$RSRC_LIBT)",
    kzvdvldDeleteRuleset="DVSYS.DBMS_MACADM.DELETE_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldRenameRule="DVSYS.DBMS_MACADM.RENAME_RULE(KZV$RSRC_LIBT)",
    kzvdvldRenameRuleset="DVSYS.DBMS_MACADM.RENAME_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldUpdateRule="DVSYS.DBMS_MACADM.UPDATE_RULE(KZV$RSRC_LIBT)",
    kzvdvldUpdateRuleset="DVSYS.DBMS_MACADM.UPDATE_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvssetup="DVSYS.EVENT.set_c(DVSYS.KZV$RUL_LIBT)",
    kzvfacget="DVSYS.DBMS_MACSEC.GET_FACTOR_EXT_CALLOUT(DVSYS.KZV$FAC_LIBT)",
    kzvfacset="DVSYS.DBMS_MACSEC.SET_FACTOR_EXT(DVSYS.KZV$FAC_LIBT)",
    kzvfactrust="DVSYS.DBMS_MACSEC.GET_TRUST_LEVEL_EXT(DVSYS.KZV$FAC_LIBT)",
    kzvGoldenGateAdminCheck0="DVSYS.DBMS_MACUTL.CHECK_GOLDENGATE_ADMIN(DVSYS.KZV$UTL_LIBT)",
    kzvGoldenGateRedoAXCheck0="DVSYS.DBMS_MACUTL.CHECK_GOLDENGATE_REDO_ACCESS(DVSYS.KZV$UTL_LIBT)",
    kzvIsASDumpAllowed="DVSYS.DBMS_MACUTL.ALTER_SYSTEM_DUMP_ALLOWED(DVSYS.KZV$UTL_LIBT)",
    kzvIsEventEnabled="DVSYS.DBMS_MACUTL.IS_EVENT_ENABLED(DVSYS.KZV$UTL_LIBT)",
    kzvIsRoleEnabled="DVSYS.DBMS_MACUTL.SESSION_ENABLED_ROLE(DVSYS.KZV$UTL_LIBT)/SYS.OLS_ENFORCEMENT.SESSION_ENABLED_ROLE(LBACSYS.LBAC$EVENT_LIBT)",
    kzvradmAddCRToPolicy="DVSYS.DBMS_MACADM.ADD_CMD_RULE_TO_POLICY(KZV$ADM_LIBT)",
    kzvradmAddNLSData="DVSYS.DBMS_MACADM.ADD_NLS_DATA(KZV$ADM_LIBT)",
    kzvradmAddPolicyOwner="DVSYS.DBMS_MACADM.ADD_OWNER_TO_POLICY(KZV$ADM_LIBT)",
    kzvradmAddRealmAuth="DVSYS.DBMS_MACADM.ADD_AUTH_TO_REALM(KZV$ADM_LIBT)",
    kzvradmAddRealmObject="DVSYS.DBMS_MACADM.ADD_OBJECT_TO_REALM(KZV$ADM_LIBT)",
    kzvradmAddRlmToPolicy="DVSYS.DBMS_MACADM.ADD_REALM_TO_POLICY(KZV$ADM_LIBT)",
    kzvradmaud_callout="DVSYS.DBMS_MACAUD.CREATE_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmaudcallout="DVSYS.DBMS_MACAUD.CREATE_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmCheckMacsec="DVSYS.DBMS_MACADM.CHECK_MAINTAIN_MACSEC(KZV$ADM_LIBT)",
    kzvradmCreateCommRule="DVSYS.DBMS_MACADM.CREATE_COMMAND_RULE(KZV$ADM_LIBT)",
    kzvradmCreatePolicy="DVSYS.DBMS_MACADM.CREATE_POLICY(KZV$ADM_LIBT)",
    kzvradmCreateRealm="DVSYS.DBMS_MACADM.CREATE_REALM(KZV$ADM_LIBT)",
    kzvradmDelCRFromPolicy="DVSYS.DBMS_MACADM.DELETE_CMD_RULE_FROM_POLICY(KZV$ADM_LIBT)",
    kzvradmDeleteCommRule="DVSYS.DBMS_MACADM.DELETE_COMMAND_RULE(KZV$ADM_LIBT)",
    kzvradmDeleteRealm="DVSYS.DBMS_MACADM.DELETE_REALM(KZV$ADM_LIBT)",
    kzvradmDeleteRealmAuth="DVSYS.DBMS_MACADM.DELETE_AUTH_FROM_REALM(KZV$ADM_LIBT)",
    kzvradmDeleteRealmObject="DVSYS.DBMS_MACADM.DELETE_OBJECT_FROM_REALM(KZV$ADM_LIBT)",
    kzvradmDelPolicyOwner="DVSYS.DBMS_MACADM.DELETE_OWNER_FROM_POLICY(KZV$ADM_LIBT)",
    kzvradmDelRlmFromPolicy="DVSYS.DBMS_MACADM.DELETE_REALM_FROM_POLICY(KZV$ADM_LIBT)",
    kzvradmDisableDVAccts="DVSYS.DBMS_MACADM.DISABLE_DV_DICTIONARY_ACCTS(KZV$ADM_LIBT)",
    kzvradmDisableDvEnforce="DVSYS.DBMS_MACADM.DISABLE_DV(KZV$ADM_LIBT)",
    kzvradmDisableDVPatchAudit="DVSYS.DBMS_MACADM.DISABLE_DV_PATCH_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmDisableEvent="DVSYS.DBMS_MACADM.DISABLE_EVENT(KZV$ADM_LIBT)",
    kzvradmDisableOradebug="DVSYS.DBMS_MACADM.DISABLE_ORADEBUG(KZV$ADM_LIBT)",
    kzvradmDomainIdentityAdminCB="DVSYS.DBMS_MACADM.DOMAIN_IDENTITY_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmDropPolicy="DVSYS.DBMS_MACADM.DROP_POLICY(KZV$ADM_LIBT)",
    kzvradmEnableDVAccts="DVSYS.DBMS_MACADM.ENABLE_DV_DICTIONARY_ACCTS(KZV$ADM_LIBT)",
    kzvradmEnableDvEnforce="DVSYS.DBMS_MACADM.ENABLE_DV_ENFORCE_INT(KZV$ADM_LIBT)",
    kzvradmEnableDVPatchAudit="DVSYS.DBMS_MACADM.ENABLE_DV_PATCH_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmEnableEvent="DVSYS.DBMS_MACADM.ENABLE_EVENT(KZV$ADM_LIBT)",
    kzvradmEnableOradebug="DVSYS.DBMS_MACADM.ENABLE_ORADEBUG(KZV$ADM_LIBT)",
    kzvradmFactorAdminCB="DVSYS.DBMS_MACADM.FACTOR_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmFactorLinkAdminCB="DVSYS.DBMS_MACADM.FACTOR_LINK_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmFactorTypeAdminCB="DVSYS.DBMS_MACADM.FACTOR_TYPE_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmGrantDVAuth="DVSYS.DBMS_MACADM.AUTHORIZE_DV_AUTH(KZV$ADM_LIBT)",
    kzvradmIdentityAdminCB="DVSYS.DBMS_MACADM.IDENTITY_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmIdentityMapAdminCB="DVSYS.DBMS_MACADM.IDENTITY_MAP_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmMacPolicyAdminCB="DVSYS.DBMS_MACADM.MAC_POLICY_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmPolicyFactorAdminCB="DVSYS.DBMS_MACADM.POLICY_FACTOR_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmPolicyLabelAdminCB="DVSYS.DBMS_MACADM.POLICY_LABEL_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmRenamePolicy="DVSYS.DBMS_MACADM.RENAME_POLICY(KZV$ADM_LIBT)",
    kzvradmRenameRealm="DVSYS.DBMS_MACADM.RENAME_REALM(KZV$ADM_LIBT)",
    kzvradmRevokeDVAuth="DVSYS.DBMS_MACADM.REVOKE_DV_AUTH(KZV$ADM_LIBT)",
    kzvradmSanityCheck="DVSYS.CONFIGURE_DV_INTERNAL.DV_SANITY_CHECK(DVSYS.KZV$ADM_LIBT)/DVSYS.DBMS_MACADM.DV_SANITY_CHECK(KZV$ADM_LIBT)",
    kzvradmSecAppRoleAdminCB="DVSYS.DBMS_MACADM.SECAPP_ROLE_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmSyncMetadata="DVSYS.CONFIGURE_DV_INTERNAL.CONFIG_PART1(DVSYS.KZV$ADM_LIBT)",
    kzvradmUpdateCommRule="DVSYS.DBMS_MACADM.UPDATE_COMMAND_RULE(KZV$ADM_LIBT)",
    kzvradmUpdatePolicyDescr="DVSYS.DBMS_MACADM.UPDATE_POLICY_DESCRIPTION(KZV$ADM_LIBT)",
    kzvradmUpdatePolicyState="DVSYS.DBMS_MACADM.UPDATE_POLICY_STATE(KZV$ADM_LIBT)",
    kzvradmUpdateRealm="DVSYS.DBMS_MACADM.UPDATE_REALM(KZV$ADM_LIBT)",
    kzvradmUpdateRealmAuth="DVSYS.DBMS_MACADM.UPDATE_REALM_AUTH(KZV$ADM_LIBT)",
    kzvsec0="DVSYS.DBMS_MACUTL.RAISE_ERROR0_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec1="DVSYS.DBMS_MACUTL.RAISE_ERROR1_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec2="DVSYS.DBMS_MACUTL.RAISE_ERROR2_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec3="DVSYS.DBMS_MACUTL.RAISE_ERROR3_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec4="DVSYS.DBMS_MACUTL.RAISE_ERROR4_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec5="DVSYS.DBMS_MACUTL.RAISE_ERROR5_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec6="DVSYS.DBMS_MACUTL.RAISE_ERROR6_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvSetConfigMode="DVSYS.CONFIGURE_DV_INTERNAL.CONFIG_PART2(DVSYS.KZV$ADM_LIBT)",
    kzvSetCtxDV="DVSYS.DBMS_MACOLS.CLEAN_DV_SESSION(DVSYS.KZV$UTL_LIBT)",
    kzvStreamsAdminCheck0="DVSYS.DBMS_MACUTL.CHECK_STREAMS_ADMIN(DVSYS.KZV$UTL_LIBT)",
    kzvu_objprivCheck0="DVSYS.DBMS_MACUTL.USER_HAS_OBJECT_PRIVILEGE(DVSYS.KZV$UTL_LIBT)",
    kzvuobjprivCheck0="DVSYS.DBMS_MACUTL.USER_HAS_OBJECT_PRIVILEGE(DVSYS.KZV$UTL_LIBT)",
    kzvUserHasRole0="DVSYS.DBMS_MACUTL.USER_HAS_ROLE(DVSYS.KZV$UTL_LIBT)",
    kzvwrfpl="DVSYS.DBMS_MACOUT.KZVTRACEL(DVSYS.KZV$UTL_LIBT)",
    kzvwrfst="DVSYS.DBMS_MACOUT.KZVTRACEON(DVSYS.KZV$UTL_LIBT)",
    kzvXstreamAdminCheck0="DVSYS.DBMS_MACUTL.CHECK_XSTREAM_ADMIN(DVSYS.KZV$UTL_LIBT)",
    kzx="kernel security XS Fusion Security",
    kzxa="kernel security XS Fusion Security XS ACL",
    kzxaud_tc_admin_audit="SYS.XS_ADMIN_INT.ADMIN_AUDIT_INTERNAL(DBMS_RXS_LIB)",
    kzxaudtcadminaudit="SYS.XS_ADMIN_INT.ADMIN_AUDIT_INTERNAL(DBMS_RXS_LIB)",
    kzxc="kernel security XS Fusion Security XS Security Class",
    kzxc_tc_delsecclass="SYS.DBMS_XS_SECCLASS_INT_FFI.DELETE_SEC_CLASS(DBMS_XSC_LIB)",
    kzxcGetLeafPrivilegesArray="SYS.DBMS_XS_SECCLASS_INT_FFI.GET_LEAF_PRIVILEGES(DBMS_XSC_LIB)",
    kzxctcdelsecclass="SYS.DBMS_XS_SECCLASS_INT_FFI.DELETE_SEC_CLASS(DBMS_XSC_LIB)",
    kzxd="kernel security XS Fusion Security XS Data Security",
    kzxerr="SYS.XS_ADMIN_UTIL.RAISE_ERROR(DBMS_RXS_LIB)",
    kzxh_delete_midtier_cache="SYS.XS_MTCACHE_INT.MIDTIER_CACHE_DELETE(DBMS_RXS_LIB)",
    kzxh_delete_seccls="SYS.DBMS_XS_MTCACHE_FFI.SECCLS_DELETE(DBMS_XSH_LIB)",
    kzxh_set_retention_time="SYS.XS_MTCACHE_INT.SET_RETENTION_TIME(DBMS_RXS_LIB)",
    kzxh_update_midtier_cache="SYS.XS_MTCACHE_INT.MIDTIER_CACHE_UPDATE(DBMS_RXS_LIB)",
    kzxh_update_seccls="SYS.DBMS_XS_MTCACHE_FFI.SECCLS_UPDATE(DBMS_XSH_LIB)",
    kzxhdeletemidtiercache="SYS.XS_MTCACHE_INT.MIDTIER_CACHE_DELETE(DBMS_RXS_LIB)",
    kzxhdeleteseccls="SYS.DBMS_XS_MTCACHE_FFI.SECCLS_DELETE(DBMS_XSH_LIB)",
    kzxhsetretentiontime="SYS.XS_MTCACHE_INT.SET_RETENTION_TIME(DBMS_RXS_LIB)",
    kzxhupdatemidtiercache="SYS.XS_MTCACHE_INT.MIDTIER_CACHE_UPDATE(DBMS_RXS_LIB)",
    kzxhupdateseccls="SYS.DBMS_XS_MTCACHE_FFI.SECCLS_UPDATE(DBMS_XSH_LIB)",
    kzxi="kernel security XS Fusion Security XS Administrative operation",
    kzxm="kernel security XS Fusion Security XS Administrative operation",
    kzxm_check_permission="SYS.XS_ADMIN_INT.CHECK_PERMISSION(DBMS_RXS_LIB)",
    kzxm_create_dependency="SYS.XS_ADMIN_INT.CREATE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxm_create_entity="SYS.XS_ADMIN_INT.CREATE_ENTITY(DBMS_RXS_LIB)",
    kzxm_delete_dependency="SYS.XS_ADMIN_INT.DELETE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxm_delete_entity="SYS.XS_ADMIN_INT.DELETE_ENTITY(DBMS_RXS_LIB)",
    kzxm_get_entity_id="SYS.XS_ADMIN_INT.GET_ENTITY_ID(DBMS_RXS_LIB)",
    kzxm_invalidate_entity="SYS.XS_ADMIN_INT.INVALIDATE_ENTITY(DBMS_RXS_LIB)",
    kzxm_validate_entity_name="SYS.XS_ADMIN_INT.VALIDATE_ENTITY_NAME(DBMS_RXS_LIB)",
    kzxmcheckpermission="SYS.XS_ADMIN_INT.CHECK_PERMISSION(DBMS_RXS_LIB)",
    kzxmcreatedependency="SYS.XS_ADMIN_INT.CREATE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxmcreateentity="SYS.XS_ADMIN_INT.CREATE_ENTITY(DBMS_RXS_LIB)",
    kzxmdeletedependency="SYS.XS_ADMIN_INT.DELETE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxmdeleteentity="SYS.XS_ADMIN_INT.DELETE_ENTITY(DBMS_RXS_LIB)",
    kzxmgetentityid="SYS.XS_ADMIN_INT.GET_ENTITY_ID(DBMS_RXS_LIB)",
    kzxminvalidateentity="SYS.XS_ADMIN_INT.INVALIDATE_ENTITY(DBMS_RXS_LIB)",
    kzxmvalidateentityname="SYS.XS_ADMIN_INT.VALIDATE_ENTITY_NAME(DBMS_RXS_LIB)",
    kzxnt="kernel security XS Fusion Security XS Namespace template",
    kzxp_tc_blockPrncChanges="SYS.DBMS_XS_SYSTEM_FFI.BLOCK_PRINCIPAL_CHANGES(DBMS_XSP_LIB)",
    kzxp_tc_checkXSCallb="SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSCALLBACK(DBMS_XSP_LIB)",
    kzxp_tc_checkXSProv="SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSPROVISION(DBMS_XSP_LIB)",
    kzxp_tc_setXSAclResultSize="SYS.DBMS_XS_SYSTEM_FFI.SET_XS_ACL_RESULT_SIZE(DBMS_XSP_LIB)",
    kzxptcblockPrncChanges="SYS.DBMS_XS_SYSTEM_FFI.BLOCK_PRINCIPAL_CHANGES(DBMS_XSP_LIB)",
    kzxptccheckXSCallb="SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSCALLBACK(DBMS_XSP_LIB)",
    kzxpTcCheckXSCallback="kernel security XS Fusion Security DBMS_XS_SYSTEM_FFI.CHECK_XSCALLBACK",
    kzxpTcCheckXSProv="kernel security XS Fusion Security DBMS_XS_SYSTEM_FFI.CHECK_XSPROVISION",
    kzxptccheckXSProv="SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSPROVISION(DBMS_XSP_LIB)",
    kzxpTcSetXSAclResultSize="kernel security XS Fusion Security DBMS_XS_SYSTEM_FFI.SET_XS_ACL_RESULT_SIZE",
    kzxptcsetXSAclResultSize="SYS.DBMS_XS_SYSTEM_FFI.SET_XS_ACL_RESULT_SIZE(DBMS_XSP_LIB)",
    kzxs="kernel security XS Fusion Security XS Session",
    kzxs_tc_abortattachSession="SYS.DBMS_XS_SESSIONS_FFI.ABORTATTACH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_addGlobalCallback="SYS.DBMS_XS_SESSIONS_FFI.ADD_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxs_tc_assignUser="SYS.DBMS_XS_SESSIONS_FFI.ASSIGN_USER(DBMS_XSS_LIB)",
    kzxs_tc_attachSession="SYS.DBMS_XS_SESSIONS_FFI.ATTACH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_checkRole="SYS.DBMS_XS_SESSIONS_FFI.CHECK_ROLE(DBMS_XSS_LIB)",
    kzxs_tc_checkSession="SYS.DBMS_XS_SESSIONS_FFI.CHECK_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_createAttribute="SYS.DBMS_XS_SESSIONS_FFI.CREATE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_createNamespace="SYS.DBMS_XS_SESSIONS_FFI.CREATE_NAMESPACE(DBMS_XSS_LIB)",
    kzxs_tc_createSession="SYS.DBMS_XS_SESSIONS_FFI.CREATE_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_deleteAttribute="SYS.DBMS_XS_SESSIONS_FFI.DELETE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_deleteNamespace="SYS.DBMS_XS_SESSIONS_FFI.DELETE_NAMESPACE(DBMS_XSS_LIB)",
    kzxs_tc_delGlobalCallback="SYS.DBMS_XS_SESSIONS_FFI.DELETE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxs_tc_destroySession="SYS.DBMS_XS_SESSIONS_FFI.DESTROY_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_detachSession="SYS.DBMS_XS_SESSIONS_FFI.DETACH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_disableRole="SYS.DBMS_XS_SESSIONS_FFI.DISABLE_ROLE(DBMS_XSS_LIB)",
    kzxs_tc_enableRole="SYS.DBMS_XS_SESSIONS_FFI.ENABLE_ROLE(DBMS_XSS_LIB)",
    kzxs_tc_getAttribute="SYS.DBMS_XS_SESSIONS_FFI.GET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_getCookie="SYS.DBMS_XS_SESSIONS_FFI.GET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxs_tc_getSIDforCookie="SYS.DBMS_XS_SESSIONS_FFI.GET_SESSIONID_FROM_COOKIE(DBMS_XSS_LIB)",
    kzxs_tc_reauthenticateSession="SYS.DBMS_XS_SESSIONS_FFI.REAUTH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_resetAttribute="SYS.DBMS_XS_SESSIONS_FFI.RESET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_saveSession="SYS.DBMS_XS_SESSIONS_FFI.SAVE_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_set_default_ws="SYS.XS_ADMIN_UTIL.SET_DEFAULT_WORKSPACE_UGA(DBMS_XSS_LIB)",
    kzxs_tc_setAttribute="SYS.DBMS_XS_SESSIONS_FFI.SET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_setCookie="SYS.DBMS_XS_SESSIONS_FFI.SET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxs_tc_setInactiveTimeout="SYS.DBMS_XS_SESSIONS_FFI.SET_INACTIVITY_TIMEOUT(DBMS_XSS_LIB)",
    kzxs_tc_setNamespaceACL="SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_ACL(DBMS_XSS_LIB)",
    kzxs_tc_setNamespaceHandler="SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_HANDLER(DBMS_XSS_LIB)",
    kzxs_tc_switchUser="SYS.DBMS_XS_SESSIONS_FFI.SWITCH_USER(DBMS_XSS_LIB)",
    kzxs_tc_updGlobalCallback="SYS.DBMS_XS_SESSIONS_FFI.ENABLE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxsidp_tc_doDHExchange="SYS.DBMS_XS_SIDP.DODHEXCHANGE(DBMS_RXS_LIB)",
    kzxsidp_tc_fixDHKeySize="SYS.DBMS_XS_SIDP.FIXDHKEYSIZE(DBMS_RXS_LIB)",
    kzxsidptcdoDHExchange="SYS.DBMS_XS_SIDP.DODHEXCHANGE(DBMS_RXS_LIB)",
    kzxsidptcfixDHKeySize="SYS.DBMS_XS_SIDP.FIXDHKEYSIZE(DBMS_RXS_LIB)",
    kzxsp="kernel security XS Fusion Security XS Session XS Security Class",
    kzxstcabortattachSession="SYS.DBMS_XS_SESSIONS_FFI.ABORTATTACH_SESSION(DBMS_XSS_LIB)",
    kzxstcaddGlobalCallback="SYS.DBMS_XS_SESSIONS_FFI.ADD_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxsTcAddGlobalCallback="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ADD_GLOBAL_CALLBACK",
    kzxstcassignUser="SYS.DBMS_XS_SESSIONS_FFI.ASSIGN_USER(DBMS_XSS_LIB)",
    kzxsTcAssignUser="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ASSIGN_USER",
    kzxsTcAttachSession="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ATTACH_SESSION",
    kzxstcattachSession="SYS.DBMS_XS_SESSIONS_FFI.ATTACH_SESSION(DBMS_XSS_LIB)",
    kzxstccheckRole="SYS.DBMS_XS_SESSIONS_FFI.CHECK_ROLE(DBMS_XSS_LIB)",
    kzxstccheckSession="SYS.DBMS_XS_SESSIONS_FFI.CHECK_SESSION(DBMS_XSS_LIB)",
    kzxsTcCreateAttribute="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.CREATE_ATTRIBUTE",
    kzxstccreateAttribute="SYS.DBMS_XS_SESSIONS_FFI.CREATE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxstccreateNamespace="SYS.DBMS_XS_SESSIONS_FFI.CREATE_NAMESPACE(DBMS_XSS_LIB)",
    kzxsTcCreateNamespace="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.CREATE_NAMESPACE",
    kzxsTcCreateSession="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.CREATE_SESSION",
    kzxstccreateSession="SYS.DBMS_XS_SESSIONS_FFI.CREATE_SESSION(DBMS_XSS_LIB)",
    kzxstcdeleteAttribute="SYS.DBMS_XS_SESSIONS_FFI.DELETE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxsTcDeleteAttribute="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DELETE_ATTRIBUTE",
    kzxstcdeleteNamespace="SYS.DBMS_XS_SESSIONS_FFI.DELETE_NAMESPACE(DBMS_XSS_LIB)",
    kzxsTcDeleteNamespace="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DELETE_NAMESPACE",
    kzxsTcDelGlobalCallback="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DELETE_GLOBAL_CALLBACK",
    kzxstcdelGlobalCallback="SYS.DBMS_XS_SESSIONS_FFI.DELETE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxsTcDestroySession="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DESTROY_SESSION",
    kzxstcdestroySession="SYS.DBMS_XS_SESSIONS_FFI.DESTROY_SESSION(DBMS_XSS_LIB)",
    kzxstcdetachSession="SYS.DBMS_XS_SESSIONS_FFI.DETACH_SESSION(DBMS_XSS_LIB)",
    kzxsTcDetachSession="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DETACH_SESSION",
    kzxsTcDisableRole="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DISABLE_ROLE",
    kzxstcdisableRole="SYS.DBMS_XS_SESSIONS_FFI.DISABLE_ROLE(DBMS_XSS_LIB)",
    kzxsTcEnableRole="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ENABLE_ROLE",
    kzxstcenableRole="SYS.DBMS_XS_SESSIONS_FFI.ENABLE_ROLE(DBMS_XSS_LIB)",
    kzxsTcGetAttribute="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.GET_ATTRIBUTE",
    kzxstcgetAttribute="SYS.DBMS_XS_SESSIONS_FFI.GET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxstcgetCookie="SYS.DBMS_XS_SESSIONS_FFI.GET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxsTcGetSIDforCookie="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.GET_SESSIONID_FROM_COOKIE",
    kzxstcgetSIDforCookie="SYS.DBMS_XS_SESSIONS_FFI.GET_SESSIONID_FROM_COOKIE(DBMS_XSS_LIB)",
    kzxstcreauthenticateSession="SYS.DBMS_XS_SESSIONS_FFI.REAUTH_SESSION(DBMS_XSS_LIB)",
    kzxsTcReauthenticateSession="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.REAUTH_SESSION",
    kzxsTcResetAttribute="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.RESET_ATTRIBUTE",
    kzxstcresetAttribute="SYS.DBMS_XS_SESSIONS_FFI.RESET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxstcsaveSession="SYS.DBMS_XS_SESSIONS_FFI.SAVE_SESSION(DBMS_XSS_LIB)",
    kzxsTcSaveSession="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SAVE_SESSION",
    kzxstcsetAttribute="SYS.DBMS_XS_SESSIONS_FFI.SET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxsTcSetAttribute="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SET_ATTRIBUTE",
    kzxstcsetCookie="SYS.DBMS_XS_SESSIONS_FFI.SET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxsTcSetCookie="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SET_SESSION_COOKIE",
    kzxstcsetdefaultws="SYS.XS_ADMIN_UTIL.SET_DEFAULT_WORKSPACE_UGA(DBMS_XSS_LIB)",
    kzxsTcSetInactiveTimeout="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SET_INACTIVITY_TIMEOUT",
    kzxstcsetInactiveTimeout="SYS.DBMS_XS_SESSIONS_FFI.SET_INACTIVITY_TIMEOUT(DBMS_XSS_LIB)",
    kzxstcsetNamespaceACL="SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_ACL(DBMS_XSS_LIB)",
    kzxstcsetNamespaceHandler="SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_HANDLER(DBMS_XSS_LIB)",
    kzxsTcSwitchUser="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SWITCH_USER",
    kzxstcswitchUser="SYS.DBMS_XS_SESSIONS_FFI.SWITCH_USER(DBMS_XSS_LIB)",
    kzxstcupdGlobalCallback="SYS.DBMS_XS_SESSIONS_FFI.ENABLE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxsTcUpdGlobalCallback="kernel security XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ENABLE_GLOBAL_CALLBACK",
    kzxu_add_proxy_to_schema="SYS.XS_PRINCIPAL_INT.ADD_PROXY_TO_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxu_check_exists_principal="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_EXISTS_PRINCIPAL(DBMS_XSU_LIB)",
    kzxu_check_security_create="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE(DBMS_XSU_LIB)",
    kzxu_check_security_create_rs="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE_RS(DBMS_XSU_LIB)",
    kzxu_check_security_delete="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE(DBMS_XSU_LIB)",
    kzxu_check_security_delete_rs="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE_RS(DBMS_XSU_LIB)",
    kzxu_check_security_update="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE(DBMS_XSU_LIB)",
    kzxu_check_security_update_rs="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE_RS(DBMS_XSU_LIB)",
    kzxu_generate_uid="SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UID(DBMS_XSU_LIB)",
    kzxu_generate_uuid="SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UUID(DBMS_XSU_LIB)",
    kzxu_invalidate_principal="SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_PRINCIPAL(DBMS_XSU_LIB)",
    kzxu_invalidate_rolesets="SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_ROLESETS(DBMS_XSU_LIB)",
    kzxu_remove_proxy_from_schema="SYS.XS_PRINCIPAL_INT.RM_PROXY_FROM_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_password="SYS.XS_PRINCIPAL_INT.SET_PASSWORD_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_profile="SYS.XS_PRINCIPAL_INT.SET_PROFILE_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_user_status="SYS.XS_PRINCIPAL_INT.SET_USER_STATUS_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_verifier="SYS.XS_PRINCIPAL_INT.SET_VERIFIER_INTERNAL(DBMS_RXS_LIB)",
    kzxuaddproxytoschema="SYS.XS_PRINCIPAL_INT.ADD_PROXY_TO_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxucheckexistsprincipal="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_EXISTS_PRINCIPAL(DBMS_XSU_LIB)",
    kzxuchecksecuritycreate="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE(DBMS_XSU_LIB)",
    kzxuchecksecuritycreaters="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE_RS(DBMS_XSU_LIB)",
    kzxuchecksecuritydelete="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE(DBMS_XSU_LIB)",
    kzxuchecksecuritydeleters="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE_RS(DBMS_XSU_LIB)",
    kzxuchecksecurityupdate="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE(DBMS_XSU_LIB)",
    kzxuchecksecurityupdaters="SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE_RS(DBMS_XSU_LIB)",
    kzxugenerateuid="SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UID(DBMS_XSU_LIB)",
    kzxugenerateuuid="SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UUID(DBMS_XSU_LIB)",
    kzxuinvalidateprincipal="SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_PRINCIPAL(DBMS_XSU_LIB)",
    kzxuinvalidaterolesets="SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_ROLESETS(DBMS_XSU_LIB)",
    kzxuremoveproxyfromschema="SYS.XS_PRINCIPAL_INT.RM_PROXY_FROM_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxusetpassword="SYS.XS_PRINCIPAL_INT.SET_PASSWORD_INTERNAL(DBMS_RXS_LIB)",
    kzxusetprofile="SYS.XS_PRINCIPAL_INT.SET_PROFILE_INTERNAL(DBMS_RXS_LIB)",
    kzxusetuserstatus="SYS.XS_PRINCIPAL_INT.SET_USER_STATUS_INTERNAL(DBMS_RXS_LIB)",
    kzxusetverifier="SYS.XS_PRINCIPAL_INT.SET_VERIFIER_INTERNAL(DBMS_RXS_LIB)",
    kzxuTcAddProxyToSchema="kernel security XS Fusion Security XS_PRINCIPAL_INT.ADD_PROXY_TO_SCHEMA_INTERNAL",
    kzxuTcRemoveProxyFromSchema="kernel security XS Fusion Security XS_PRINCIPAL_INT.RM_PROXY_FROM_SCHEMA_INTERNAL",
    kzxuTcSetPassword="kernel security XS Fusion Security XS_PRINCIPAL_INT.SET_PASSWORD_INTERNAL",
    kzxuTcSetProfile="kernel security XS Fusion Security XS_PRINCIPAL_INT.SET_PROFILE_INTERNAL",
    kzxuTcSetUserStatus="kernel security XS Fusion Security XS_PRINCIPAL_INT.SET_USER_STATUS_INTERNAL",
    kzxuTcSetVerifier="kernel security XS Fusion Security XS_PRINCIPAL_INT.SET_VERIFIER_INTERNAL",
    kzxutil_validate_db_user="SYS.XS_ADMIN_UTIL.VALIDATE_DB_USER(DBMS_RXS_LIB)",
    kzxutil_validate_object_name="SYS.XS_ADMIN_UTIL.VALIDATE_DB_OBJECT_NAME(DBMS_RXS_LIB)",
    kzxutilCreateTempTable="SYS.XS_DIAG_INT.CREATE_TEMP_TABLE(DBMS_RXS_LIB)",
    kzxutilDropTempTable="SYS.XS_DIAG_INT.DROP_TEMP_TABLE(DBMS_RXS_LIB)",
    kzxutilErr="kernel security XS Fusion Security XS_ADMIN_UTIL.RAISE_ERROR (?)",
    kzxutilvalidatedbuser="SYS.XS_ADMIN_UTIL.VALIDATE_DB_USER(DBMS_RXS_LIB)",
    kzxutilvalidateobjectname="SYS.XS_ADMIN_UTIL.VALIDATE_DB_OBJECT_NAME(DBMS_RXS_LIB)",
    kzxutilValidateRule="SYS.XS_DIAG_INT.VALIDATE_RULES(DBMS_RXS_LIB)",
    last="SYS.PLITBLM.last(c)",
    Ldi="date/time conversion",
    libc_start_main="(non oracle)libc support for starting the main function",
    limit="SYS.PLITBLM.limit(c)/SYS.SODA_OPERATION_T.LIMIT(DBMS_SODAOPR_LIB)",
    lis="PLSQL_KG_Interface",
    lm="low level math functions",
    lmtdcrel="low level math functions compare two double-precision float-point numbers",
    lnx="LnxLib - Math",
    lnxn2copt="converts an oracle number to a character string with option for padding",
    lnxn2coptg="converts an oracle number to a character string with option for padding with nls global",
    lnxqchk="private number check function",
    lobupdate="CTXSYS.TEXTINDEXMETHODS.ODCIIndexUtilCleanup(dr$lib)/CTXSYS.TEXTINDEXMETHODS.ODCIGetInterfaces(dr$lib)",
    Lpx="xml parser",
    LpxFSM="xml parser FSM parser",
    LpxFSMSaxSE="xml parser FSM parser ??",
    LpxMemFree="xml parser ??",
    ltid_icd="SYS.DBMS_TRANSACTION.LTID_ICD(C)",
    ltidicd="SYS.DBMS_TRANSACTION.LTID_ICD(C)",
    ltx="XDB",
    lxm="native language support",
    main="(non oracle)general c starting function",
    make_table_not_referenceable="SYS.DBMS_DDL.MAKE_TABLE_NOT_REFERENCEABLE(C)",
    make_table_referenceable="SYS.DBMS_DDL.MAKE_TABLE_REFERENCEABLE(C)",
    makeelement="XDB.DBMS_XMLDOM_ICD.MAKEELEMENT(C)",
    maketablenotreferenceable="SYS.DBMS_DDL.MAKE_TABLE_NOT_REFERENCEABLE(C)",
    maketablereferenceable="SYS.DBMS_DDL.MAKE_TABLE_REFERENCEABLE(C)",
    mapdocs="CTXSYS.DRVPARX.INDEXMAPDOCUMENTS2(DR$LIB)",
    md="spatial",
    md_idx_alter="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXALTER(ORDMD_IDX_LIBS)",
    md_idx_check_tts="MDSYS.MDPRVT_IDX.CHECK_TTS(ORDMD_IDX_LIBS)",
    md_idx_close="MDSYS.SDO_INDEX_METHOD_10I.ODCIGetInterfaces(ORDMD_IDX_LIBS)",
    md_idx_cmt_txn="MDSYS.PRVT_IDX.CMT_IDX_CHNGS(ORDMD_IDX_LIBS)",
    md_idx_create="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXCREATE(ORDMD_IDX_LIBS)",
    md_idx_endcvrt="MDSYS.PRVT_IDX.CONVERT_ENDIAN(ORDMD_IDX_LIBS)/MDSYS.SDO_IDX.ENDIANCONVERT(ORDMD_IDX_LIBS)",
    md_idx_exchange_table_ptn="MDSYS.MDPRVT_IDX.EXCHANGE_TABLE_PTN(ORDMD_IDX_LIBS)",
    md_idx_id="MDSYS.SDO_INDEX_METHOD_10I.INSERT_DELETE(ORDMD_IDX_LIBS)",
    md_idx_idrop="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXDROP(ORDMD_IDX_LIBS)",
    md_idx_nndistance="MDSYS.PRVT_IDX.NNDISTANCE(ORDMD_IDX_LIBS)",
    md_idx_prc_prms="MDSYS.SDO_IDX.PROCESS_PARAMS(ORDMD_IDX_LIBS)",
    md_idx_ptn_drp="MDSYS.SDO_INDEX_METHOD_10I.EXECUTE_INDEX_PTN_DROP(ORDMD_IDX_LIBS)",
    md_idx_rewrite="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXREWRITE(ORDMD_IDX_LIBS)",
    md_idx_start="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_2p="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_2ptp="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_2ptpelem="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_qr="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_tp="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_truncate="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXTRUNCATE(ORDMD_IDX_LIBS)",
    md_idx_upd="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDATE(ORDMD_IDX_LIBS)",
    md_idx_upd_part_meta="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDPARTMETADATA(ORDMD_IDX_LIBS)",
    md_lrs_clean_geom="MDSYS.MD_LRS.CLEAN_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    md_lrs_clip_seg="MDSYS.MD_LRS.CLIP_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_con_type="MDSYS.MD_LRS.CONNECTION_TYPE_FUN(ORDMD_LRS_LIBS)",
    md_lrs_concat_seg="MDSYS.MD_LRS.CONCATENATE_GEOM_SEGMENTS_FUN(ORDMD_LRS_LIBS)",
    md_lrs_define_seg="MDSYS.MD_LRS.DEFINE_GEOM_SEGMENT_PROC(ORDMD_LRS_LIBS)",
    md_lrs_is_defined="MDSYS.MD_LRS.IS_DEFINED_FUN(ORDMD_LRS_LIBS)",
    md_lrs_length_3d="MDSYS.MD_LRS.LRS_GEOM_LENGTH_3D(ORDMD_LRS_LIBS)",
    md_lrs_locate_pt="MDSYS.MD_LRS.LOCATE_PT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_offset_seg="MDSYS.MD_LRS.OFFSET_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_project_pt="MDSYS.MD_LRS.PROJECT_PT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_reverse_geom="MDSYS.MD_LRS.REVERSE_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    md_rtree_alter="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXALTER(ORDMD_RTREE_LIBS)",
    md_rtree_close="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCLOSE(ORDMD_RTREE_LIBS)",
    md_rtree_create="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCREATE(ORDMD_RTREE_LIBS)",
    md_rtree_delete="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDELETE(ORDMD_RTREE_LIBS)",
    md_rtree_fetch="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXFETCH(ORDMD_RTREE_LIBS)",
    md_rtree_filter="MDSYS.SDO_RTREE_ADMIN.FILTER(ORDMD_RTREE_LIBS)",
    md_rtree_idrop="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDROP(ORDMD_RTREE_LIBS)",
    md_rtree_insert="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXINSERT(ORDMD_RTREE_LIBS)",
    md_rtree_start="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXSTART(ORDMD_RTREE_LIBS)",
    md_rtree_truncate="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXTRUNCATE(ORDMD_RTREE_LIBS)",
    md_trace="MDSYS.MDPRVT_IDX.MD_TRACE(ORDMD_IDX_LIBS)",
    md_udt="MDSYS.SDO_3GL.REGISTER_UDT(ORDMD_UDT_LIBS)",
    mdalphashape="MDSYS.SDO_3GL.ALPHA_SHAPE_INT(ORDMD_MBR_LIBS)",
    mdbpts="MDSYS.SDO_3GL.BEARING(ORDMD_UTL_LIBS)",
    mdbt_batch_insert="MDSYS.SEM_INDEXTYPE_IM.BT_BATCH_INSERT(ORDMD_SEM_LIBS)",
    mdbt_create="MDSYS.SEM_INDEXTYPE_IM.ODCIGetInterfaces(ORDMD_SEM_LIBS)",
    mdbt_destroy="MDSYS.SDO_SEM_OPERATOR.BT_DESTROY(ORDMD_SEM_LIBS)/MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY(ORDMD_SEM_LIBS)",
    mdbt_destroy_s="MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY_S(ORDMD_SEM_LIBS)",
    mdbt_search="MDSYS.SDO_SEM_OPERATOR.BT_SEARCH(ORDMD_SEM_LIBS)",
    mdbtbatchinsert="MDSYS.SEM_INDEXTYPE_IM.BT_BATCH_INSERT(ORDMD_SEM_LIBS)",
    mdbtcreate="MDSYS.SEM_INDEXTYPE_IM.ODCIGetInterfaces(ORDMD_SEM_LIBS)",
    mdbtdestroy="MDSYS.SDO_SEM_OPERATOR.BT_DESTROY(ORDMD_SEM_LIBS)/MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY(ORDMD_SEM_LIBS)",
    mdbtdestroys="MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY_S(ORDMD_SEM_LIBS)",
    mdbtsearch="MDSYS.SDO_SEM_OPERATOR.BT_SEARCH(ORDMD_SEM_LIBS)",
    mdcentroid="MDSYS.SDO_3GL.CENTROID(ORDMD_MBR_LIBS)",
    mdconcavehull="MDSYS.SDO_3GL.CONCAVEHULL(ORDMD_MBR_LIBS)",
    mdconcavehull_b="MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconcavehulla="MDSYS.SDO_3GL.CONCAVEHULL(ORDMD_MBR_LIBS)",
    mdconcavehulla_b="MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconcavehullab="MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconcavehullb="MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconvexhull="MDSYS.SDO_3GL.CONVEXHULL(ORDMD_MBR_LIBS)",
    mdcross180="MDSYS.SDO_UTIL.CROSS_180(ORDMD_MBR_LIBS)",
    mdcsdistance="MDSYS.SDO_3GL.DISTANCE(ORDMD_MBR_LIBS)",
    mdcsinvalidate="MDSYS.SDO_CS.SDO_CS_CONTEXT_INVALIDATE(ORDMD_CS_LIBS)",
    mdcslenarea="MDSYS.SDO_3GL.LENGTH_AREA(ORDMD_MBR_LIBS)",
    mdcspcadist="MDSYS.SDO_3GL.CLOSEST_POINTS(ORDMD_MBR_LIBS)",
    mdcstrid="MDSYS.SDO_CS.TRANSFORM_ORIG(ORDMD_CS_LIBS)",
    mdcstrid2="MDSYS.SDO_CS.TRANSFORM_ORIG_USING_RULES(ORDMD_CS_LIBS)",
    mdcstrid2_allow_arcs="MDSYS.SDO_CS.TRANSFORM_ORIG_USING_RULES_WA(ORDMD_CS_LIBS)",
    mdcstrid2allowarcs="MDSYS.SDO_CS.TRANSFORM_ORIG_USING_RULES_WA(ORDMD_CS_LIBS)",
    mdcstrid_allow_arcs="MDSYS.SDO_CS.TRANSFORM_ORIG_WITH_ARCS(ORDMD_CS_LIBS)",
    mdcstridallowarcs="MDSYS.SDO_CS.TRANSFORM_ORIG_WITH_ARCS(ORDMD_CS_LIBS)",
    mdcstrlyr="MDSYS.SDO_CS.TRANSFORM_LAYER_ACROSS_DIMS2(ORDMD_CS_LIBS)",
    mdcstrlyr2="MDSYS.SDO_CS.TFM_LAYER_ACROSS_DIMS_INTL(ORDMD_CS_LIBS)",
    mdcstrlyr_allow_arcs="MDSYS.SDO_CS.TRANSFORM_LAYER_ACROSS_DIMS2WA(ORDMD_CS_LIBS)",
    mdcstrlyrallowarcs="MDSYS.SDO_CS.TRANSFORM_LAYER_ACROSS_DIMS2WA(ORDMD_CS_LIBS)",
    mdcstrnm="MDSYS.SDO_CS.TRANSFORM_ORIG2(ORDMD_CS_LIBS)",
    mdcsvwkt="MDSYS.SDO_CS.INTL_VALIDATE_WKT(ORDMD_CS_LIBS)",
    mddconvert="MDSYS.SDO_UTIL.CONVERT_DISTANCE(ORDMD_UTL_LIBS)",
    mddiameter="MDSYS.SDO_3GL.DIAMETER(ORDMD_MBR_LIBS)",
    mddistance="MDSYS.SDO_3GL.DISTANCE(ORDMD_MBR_LIBS)",
    mdextract="MDSYS.SDO_UTIL.EXTRACT_INT(ORDMD_UTL_LIBS)",
    mdextractall="MDSYS.SDO_UTIL.EXTRACT_ALL_INT(ORDMD_UTL_LIBS)",
    mdextractvoids="MDSYS.SDO_UTIL.OCIEXTRACTVOIDS(ORDMD_UTL_LIBS)",
    mdfixselfintx="MDSYS.SDO_UTIL.OCIFIXSELFINTX(ORDMD_UTL_LIBS)",
    mdfromjsonc="MDSYS.SDO_UTIL.FROM_JSON(ORDMD_UTL_LIBS)",
    mdg3dconv="MDSYS.SDO_3GL.G3DCONV(ORDMD_MBR_LIBS)",
    mdgdaloci_dem="MDSYS.SDO_GEOR_GDAL.DEM_INT(SDO_GEOR_GDAL_LIB)",
    mdgdaloci_info="MDSYS.SDO_GEOR_GDAL.INFO_INT(SDO_GEOR_GDAL_LIB)",
    mdgdaloci_translate="MDSYS.SDO_GEOR_GDAL.TRANSLATE_INT(SDO_GEOR_GDAL_LIB)",
    mdgdalocidem="MDSYS.SDO_GEOR_GDAL.DEM_INT(SDO_GEOR_GDAL_LIB)",
    mdgdalociinfo="MDSYS.SDO_GEOR_GDAL.INFO_INT(SDO_GEOR_GDAL_LIB)",
    mdgdalocitranslate="MDSYS.SDO_GEOR_GDAL.TRANSLATE_INT(SDO_GEOR_GDAL_LIB)",
    mdgeomop="MDSYS.SDO_3GL.GEOM_OPERATION_INT(ORDMD_REL_LIBS)",
    mdgetnumelem="MDSYS.SDO_UTIL.OCIGETNUMELEM(ORDMD_UTL_LIBS)",
    mdgmdGetGeomDimInfo="MDSYS.MDPRVT_GMD.GET_GEOM_DIMINFO_INT(ORDMD_GMD_LIBS)",
    mdgmdGetGeomMetadata="MDSYS.MDPRVT_GMD.GET_GEOM_METADATA_INT(ORDMD_GMD_LIBS)",
    mdgmdInvalidateGeomMetaData="MDSYS.MDPRVT_GMD.INVALIDATE_GEOM_INT(ORDMD_GMD_LIBS)",
    mdgnomonic="MDSYS.SDO_UTIL.INT_TOGNOMONIC(ORDMD_UTL_LIBS)",
    mdgr="spatial spatial georaster",
    mdgrcacheOciFetchSysdata="MDSYS.SDO_GEOR_INT.SDO_FETCH_SYSDATA(ORDMD_GEOR_LIBS)",
    mdgrcacheOciFetchSysdataOwner="MDSYS.SDO_GEOR_INT.SDO_FETCH_SYSDATA_OWNER_INT(ORDMD_GEOR_LIBS)",
    mdgrcacheOciInvalidateSysdata="MDSYS.SDO_GEOR_INT.SDO_INVALIDATE_SYSDATA_CACHE(ORDMD_GEOR_LIBS)",
    mdhybridtiles="MDSYS.SDO_UTIL.INTERNAL_HYBRID_TILES(ORDMD_UTL_LIBS)",
    mdibytl="MDSYS.MD.MDIBYTL(C)",
    mdicbit="MDSYS.MD.MDICBIT(C)",
    mdicdf0="MDSYS.MD2.MDICDF0(C)",
    mdicdf1="MDSYS.MD2.MDICDF1(C)",
    mdicdf2="MDSYS.MD2.MDICDF2(C)",
    mdicdsz="MDSYS.MD2.MDICDSZ(C)",
    mdicell="MDSYS.MD.MDICELL(C)",
    mdickrf="MDSYS.MD.MDICKRF(C)",
    mdiclsz="MDSYS.MD.MDICLSZ(C)",
    mdicmcd="MDSYS.MD.MDICMCD(C)",
    mdicmpr="MDSYS.MD.MDICMPR(C)",
    mdicolp="MDSYS.MD.MDICOLP(C)",
    mdicomp="MDSYS.MD.MDICOMP(C)",
    mdidecd="MDSYS.MD.MDIDECD(C)",
    mdidist="MDSYS.MD.MDIDIST(C)",
    mdidxalter="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXALTER(ORDMD_IDX_LIBS)",
    mdidxchecktts="MDSYS.MDPRVT_IDX.CHECK_TTS(ORDMD_IDX_LIBS)",
    mdidxclose="MDSYS.SDO_INDEX_METHOD_10I.ODCIGetInterfaces(ORDMD_IDX_LIBS)",
    mdidxcmttxn="MDSYS.PRVT_IDX.CMT_IDX_CHNGS(ORDMD_IDX_LIBS)",
    mdidxcreate="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXCREATE(ORDMD_IDX_LIBS)",
    mdidxendcvrt="MDSYS.PRVT_IDX.CONVERT_ENDIAN(ORDMD_IDX_LIBS)/MDSYS.SDO_IDX.ENDIANCONVERT(ORDMD_IDX_LIBS)",
    mdidxexchangetableptn="MDSYS.MDPRVT_IDX.EXCHANGE_TABLE_PTN(ORDMD_IDX_LIBS)",
    mdidxGetIdxMetadata="MDSYS.MDPRVT_IDX.GET_INDEX_METADATA_INT(ORDMD_IDX_LIBS)",
    mdidxid="MDSYS.SDO_INDEX_METHOD_10I.INSERT_DELETE(ORDMD_IDX_LIBS)",
    mdidxidrop="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXDROP(ORDMD_IDX_LIBS)",
    mdidxInvalidateCache="MDSYS.MDPRVT_IDX.INVALIDATE_CACHE_INT(ORDMD_IDX_LIBS)",
    mdidxnndistance="MDSYS.PRVT_IDX.NNDISTANCE(ORDMD_IDX_LIBS)",
    mdidxprcprms="MDSYS.SDO_IDX.PROCESS_PARAMS(ORDMD_IDX_LIBS)",
    mdidxptndrp="MDSYS.SDO_INDEX_METHOD_10I.EXECUTE_INDEX_PTN_DROP(ORDMD_IDX_LIBS)",
    mdidxrewrite="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXREWRITE(ORDMD_IDX_LIBS)",
    mdidxstart="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstart2p="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstart2ptp="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstart2ptpelem="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstartqr="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstarttp="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxtruncate="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXTRUNCATE(ORDMD_IDX_LIBS)",
    mdidxupd="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDATE(ORDMD_IDX_LIBS)",
    mdidxupdpartmeta="MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDPARTMETADATA(ORDMD_IDX_LIBS)",
    mdiencd1="MDSYS.MD.MDIENCD1(C)",
    mdiencd2="MDSYS.MD.MDIENCD2(C)",
    mdifbv2dim="MDSYS.MD1.MDIFBV2DIM(C)",
    mdifcompare="MDSYS.MD1.MDIFCOMPARE(C)",
    mdifdat2dim="MDSYS.MD1.MDIFDAT2DIM(C)",
    mdifdecode="MDSYS.MD1.MDIFDECODE(C)",
    mdifdim2bv="MDSYS.MD1.MDIFDIM2BV(C)",
    mdifdim2date="MDSYS.MD1.MDIFDIM2DATE(C)",
    mdifdim2hv="MDSYS.MD1.MDIFDIM2HV(C)",
    mdifdim2lat="MDSYS.MD1.MDIFDIM2LAT(C)",
    mdifdim2lon="MDSYS.MD1.MDIFDIM2LON(C)",
    mdifencode="MDSYS.MD1.MDIFENCODE(C)",
    mdifhv2dim="MDSYS.MD1.MDIFHV2DIM(C)",
    mdifll2dim="MDSYS.MD1.MDIFLL2DIM(C)",
    mdigbit="MDSYS.MD.MDIGBIT(C)",
    mdigcid="MDSYS.MD.MDIGCID(C)",
    mdiglnln="MDSYS.MD2.MDIGLNLN(C)",
    mdigndm="MDSYS.MD.MDIGNDM(C)",
    mdigtid="MDSYS.MD.MDIGTID(C)",
    mdigtpb="MDSYS.MD.MDIGTPB(C)",
    mdihand="MDSYS.MD.MDIHAND(C)",
    mdihhor="MDSYS.MD.MDIHHOR(C)",
    mdihlen1="MDSYS.MD.MDIHLEN1(C)",
    mdihlen2="MDSYS.MD.MDIHLEN2(C)",
    mdihtob="MDSYS.MD.MDIHTOB(C)",
    mdihxor="MDSYS.MD.MDIHXOR(C)",
    mdiidlp="MDSYS.MD.MDIIDLP(C)",
    mdiidlr="MDSYS.MD.MDIIDLR(C)",
    mdiidpp="MDSYS.MD.MDIIDPP(C)",
    mdiidpr="MDSYS.MD.MDIIDPR(C)",
    mdiincl="MDSYS.MD.MDIINCL(C)",
    mdiint="MDSYS.MD2.MDIINT(C)",
    mdiintf="MDSYS.MD2.MDIINTF(C)",
    mdijtos="MDSYS.MD.MDIJTOS(C)",
    mdiltoe="MDSYS.MD.MDILTOE(C)",
    mdimbrll="MDSYS.MD.MDIMBRLL(C)",
    mdimbrur="MDSYS.MD.MDIMBRUR(C)",
    mdimtch="MDSYS.MD.MDIMTCH(C)",
    mdimxcd="MDSYS.MD.MDIMXCD(C)",
    mdincmp="MDSYS.MD.MDINCMP(C)",
    mdinsert_sdo_geom_md="MDSYS.SDO_UTIL.INSERT_SDO_GEOM_METADATA(ORDMD_UTL_LIBS)",
    mdinsertsdogeommd="MDSYS.SDO_UTIL.INSERT_SDO_GEOM_METADATA(ORDMD_UTL_LIBS)",
    mdinslogfilter="MDSYS.SDO_3GL.INSERT_LOG_FILTER(ORDMD_MBR_LIBS)",
    mdiorby="MDSYS.MD.MDIORBY(C)",
    mdipct0="MDSYS.MD2.MDIPCT0(C)",
    mdiptoe="MDSYS.MD.MDIPTOE(C)",
    mdirelf="MDSYS.MD2.MDIRELF(C)",
    mdirmde="MDSYS.MD.MDIRMDE(C)",
    mdirncd="MDSYS.MD.MDIRNCD(C)",
    mdirndm="MDSYS.MD.MDIRNDM(C)",
    mdisbdv="MDSYS.MD.MDISBDV(C)",
    mdisbit="MDSYS.MD.MDISBIT(C)",
    mdisbst="MDSYS.MD.MDISBST(C)",
    mdisc="MDSYS.MD.MDISC(C)",
    mdiscid="MDSYS.MD.MDISCID(C)",
    mdistid="MDSYS.MD.MDISTID(C)",
    mdistoj="MDSYS.MD.MDISTOJ(C)",
    mdistpb="MDSYS.MD.MDISTPB(C)",
    mditess="MDSYS.MD2.MDITESS(C)",
    mdivg="MDSYS.MD2.MDIVG(C)",
    mdjnlOciCacheInvalidate="MDSYS.SDO_UTIL.INVALIDATE_GTT_CACHE(ORDMD_UTL_LIBS)",
    mdleak="MDSYS.SDO_3GL.MEMORY_LEAK(ORDMD_REL_LIBS)",
    mdlenarea="MDSYS.SDO_3GL.LENGTH_AREA(ORDMD_MBR_LIBS)",
    mdlrscleangeom="MDSYS.MD_LRS.CLEAN_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    mdlrsclipseg="MDSYS.MD_LRS.CLIP_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    mdlrsconcatseg="MDSYS.MD_LRS.CONCATENATE_GEOM_SEGMENTS_FUN(ORDMD_LRS_LIBS)",
    mdlrscontype="MDSYS.MD_LRS.CONNECTION_TYPE_FUN(ORDMD_LRS_LIBS)",
    mdlrsdefineseg="MDSYS.MD_LRS.DEFINE_GEOM_SEGMENT_PROC(ORDMD_LRS_LIBS)",
    mdlrsisdefined="MDSYS.MD_LRS.IS_DEFINED_FUN(ORDMD_LRS_LIBS)",
    mdlrslength3d="MDSYS.MD_LRS.LRS_GEOM_LENGTH_3D(ORDMD_LRS_LIBS)",
    mdlrslocatept="MDSYS.MD_LRS.LOCATE_PT_FUN(ORDMD_LRS_LIBS)",
    mdlrsoffsetseg="MDSYS.MD_LRS.OFFSET_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    mdlrsprojectpt="MDSYS.MD_LRS.PROJECT_PT_FUN(ORDMD_LRS_LIBS)",
    mdlrsreversegeom="MDSYS.MD_LRS.REVERSE_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    mdmaxdistance="MDSYS.SDO_3GL.MAXDISTANCE(ORDMD_MBR_LIBS)",
    mdmbb="MDSYS.SDO_3GL.MBB_RAW(ORDMD_MBR_LIBS)",
    mdmbr="MDSYS.SDO_3GL.EXTENT_OF_OBJECT(ORDMD_MBR_LIBS)",
    mdmbrgeom="MDSYS.SDO_3GL.MBR_GEOMETRY(ORDMD_MBR_LIBS)",
    mdmem_check_memleak="MDSYS.SDO_MEMORY.CHECK_MEMORY_LEAK(ORDMD_MEM_LIBS)",
    mdmem_end_memory_check="MDSYS.SDO_MEMORY.END_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmem_start_memory_check="MDSYS.SDO_MEMORY.START_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmemcheckmemleak="MDSYS.SDO_MEMORY.CHECK_MEMORY_LEAK(ORDMD_MEM_LIBS)",
    mdmemendmemorycheck="MDSYS.SDO_MEMORY.END_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmemstartmemorycheck="MDSYS.SDO_MEMORY.START_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmig="MDSYS.SDO_MIGRATE.MDMIG(ORDMD_MIG_LIBS)",
    mdmige="MDSYS.SDO_MIGRATE.MDMIGE(ORDMD_MIG_LIBS)",
    mdminbndcircle="MDSYS.SDO_3GL.MINBNDCIRCLE(ORDMD_MBR_LIBS)",
    mDNS="multicast dns",
    mdnurbsapprox="MDSYS.SDO_UTIL.OCINURBSAPPROX(ORDMD_UTL_LIBS)",
    mdouterln="MDSYS.SDO_UTIL.OCIOUTERLN(ORDMD_UTL_LIBS)",
    mdpbd="MDSYS.SDO_UTIL.POINT_AT_BEARING_INTERNAL(ORDMD_UTL_LIBS)",
    mdpcclp="MDSYS.PRVT_PC.CLIP_PC_INTL(ORDMD_TNPC_LIBS)",
    mdpccrt="MDSYS.PRVT_PC.OCI_CREATE_PC(ORDMD_TNPC_LIBS)",
    mdpchilbert="MDSYS.SDO_PC_PKG.GET_HILBERT(ORDMD_TNPC_LIBS)",
    mdpchilberts="MDSYS.SDO_PC_PKG.GET_HILBERT(ORDMD_TNPC_LIBS)",
    mdpcp32bi="MDSYS.SDO_PC_PKG.PARSE_32BIT_INTS(ORDMD_TNPC_LIBS)",
    mdpcp64bd="MDSYS.SDO_PC_PKG.PARSE_64BIT_DOUBLES(ORDMD_TNPC_LIBS)",
    mdpcptid="MDSYS.PRVT_PC.GET_PT_IDS_INTL(ORDMD_TNPC_LIBS)",
    mdpctogm="MDSYS.PRVT_PC.TO_GEOMETRY_INTL(ORDMD_TNPC_LIBS)",
    mdpntonsurface="MDSYS.SDO_3GL.POINTONSURFACE(ORDMD_MBR_LIBS)",
    mdprcluster="MDSYS.SDO_PRIDX.MDPRCLUSTER(ORDMD_PRIDX_LIBS)",
    mdprtessellate="MDSYS.SDO_PRIDX.MDPRTESSELLATE(ORDMD_PRIDX_LIBS)",
    mdprtxfergm="MDSYS.SDO_PRIDX.MDPRTXFERGM(ORDMD_PRIDX_LIBS)",
    mdptn_table="MDSYS.SDO_UTIL.PARTITION_TABLE(ORDMD_RTREE_LIBS)",
    mdptntable="MDSYS.SDO_UTIL.PARTITION_TABLE(ORDMD_RTREE_LIBS)",
    mdquadtiles="MDSYS.SDO_UTIL.INTERNAL_QUAD_TILES(ORDMD_UTL_LIBS)",
    mdr="spatial spatial indexing",
    mdrcnccom="spatial spatial indexing ??",
    mdrefinemgon="MDSYS.SDO_UTIL.OCIREFINEMGON(ORDMD_UTL_LIBS)",
    mdrelate="MDSYS.SDO_3GL.RELATE(ORDMD_REL_LIBS)",
    mdrelate_func="MDSYS.SDO_3GL.RELATE(ORDMD_REL_LIBS)",
    mdrelatefunc="MDSYS.SDO_3GL.RELATE(ORDMD_REL_LIBS)",
    mdrelproc="MDSYS.SDO_3GL.RELATE_PROCESS(ORDMD_REL_LIBS)",
    mdremdups="MDSYS.SDO_UTIL.REMOVE_DUPLICATES(ORDMD_UTL_LIBS)",
    mdrtreealter="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXALTER(ORDMD_RTREE_LIBS)",
    mdrtreeclose="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCLOSE(ORDMD_RTREE_LIBS)",
    mdrtreecreate="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCREATE(ORDMD_RTREE_LIBS)",
    mdrtreedelete="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDELETE(ORDMD_RTREE_LIBS)",
    mdrtreefetch="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXFETCH(ORDMD_RTREE_LIBS)",
    mdrtreefilter="MDSYS.SDO_RTREE_ADMIN.FILTER(ORDMD_RTREE_LIBS)",
    mdrtreeidrop="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDROP(ORDMD_RTREE_LIBS)",
    mdrtreeinsert="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXINSERT(ORDMD_RTREE_LIBS)",
    mdrtreestart="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXSTART(ORDMD_RTREE_LIBS)",
    mdrtreetruncate="MDSYS.RTREE_INDEX_METHOD.ODCIINDEXTRUNCATE(ORDMD_RTREE_LIBS)",
    mdsamiratio="MDSYS.SDO_SAM.INTERSECTION_RATIO(ORDMD_SAM_LIBS)",
    mdsimpgeom="MDSYS.SDO_UTIL.OCISIMPGEOM(ORDMD_UTL_LIBS)",
    mdsridOciGetCrsDims="MDSYS.MDPRVT_SRID.GET_DIMS(ORDMD_SRID_LIBS)",
    mdsridOciGetCrsRefKind="MDSYS.MDPRVT_SRID.GET_REF_KIND(ORDMD_SRID_LIBS)",
    mdsridOciGetSridTolerance="MDSYS.MDPRVT_SRID.GET_TOLERANCE(ORDMD_SRID_LIBS)",
    mdsridOciGetSridUnit="MDSYS.MDPRVT_SRID.GET_UNIT_INT(ORDMD_SRID_LIBS)",
    mdsridOciInvalidateSrid="MDSYS.MDPRVT_SRID.SDO_INVALIDATE_SRID_INT(ORDMD_SRID_LIBS)",
    mdsridOciIsSridGeodetic="MDSYS.MDPRVT_SRID.IS_GEODETIC_INT(ORDMD_SRID_LIBS)",
    mdstats_coll="MDSYS.SDO_STATISTICS.ODCISTATSCOLLECT(ORDMD_EXOP_LIBS)",
    mdstats_del="MDSYS.SDO_STATISTICS.ODCISTATSDELETE(ORDMD_EXOP_LIBS)",
    mdstats_func="MDSYS.SDO_STATISTICS.ODCISTATSFUNCTIONCOST(ORDMD_EXOP_LIBS)",
    mdstats_idxc="MDSYS.SDO_STATISTICS.ODCISTATSINDEXCOST(ORDMD_EXOP_LIBS)",
    mdstats_selv="MDSYS.SDO_STATISTICS.ODCISTATSSELECTIVITY(ORDMD_EXOP_LIBS)",
    mdstatscoll="MDSYS.SDO_STATISTICS.ODCISTATSCOLLECT(ORDMD_EXOP_LIBS)",
    mdstatsdel="MDSYS.SDO_STATISTICS.ODCISTATSDELETE(ORDMD_EXOP_LIBS)",
    mdstatsfunc="MDSYS.SDO_STATISTICS.ODCISTATSFUNCTIONCOST(ORDMD_EXOP_LIBS)",
    mdstatsidxc="MDSYS.SDO_STATISTICS.ODCISTATSINDEXCOST(ORDMD_EXOP_LIBS)",
    mdstatsselv="MDSYS.SDO_STATISTICS.ODCISTATSSELECTIVITY(ORDMD_EXOP_LIBS)",
    mdtnclp="MDSYS.PRVT_TIN.CLIP_TIN_INTL(ORDMD_TNPC_LIBS)",
    mdtncrt="MDSYS.PRVT_TIN.OCI_CREATE_TIN(ORDMD_TNPC_LIBS)",
    mdtnDeleteSeqMetaData="MDSYS.SDO_GEOR_DEF.DELETETINSEQMETAENTRY(ORDMD_GEOR_LIBS)",
    mdtnDeleteTinMetaData="MDSYS.SDO_GEOR_DEF.DELETETINPCMETAENTRY(ORDMD_GEOR_LIBS)",
    mdtntogm="MDSYS.PRVT_TIN.TO_GEOMETRY_INTL(ORDMD_TNPC_LIBS)",
    mdtojsonc="MDSYS.SDO_UTIL.TO_JSON_INT(ORDMD_UTL_LIBS)",
    mdtojsonv="MDSYS.SDO_UTIL.TO_JSON_VARCHAR_INT(ORDMD_UTL_LIBS)",
    mdtowktgeomc="MDSYS.SDO_UTIL.TO_WKBGEOMETRY_INT(ORDMD_UTL_LIBS)/MDSYS.SDO_UTIL.TO_WKTGEOMETRY_INT(ORDMD_UTL_LIBS)",
    mdtowktgeoms="MDSYS.SDO_UTIL.TO_WKTGEOMETRY_VARCHAR_INT(ORDMD_UTL_LIBS)",
    mdtrace="MDSYS.MDPRVT_IDX.MD_TRACE(ORDMD_IDX_LIBS)",
    mdtriangulate="MDSYS.SDO_3GL.TRIANGULATE(ORDMD_MBR_LIBS)",
    mdudt="MDSYS.SDO_3GL.REGISTER_UDT(ORDMD_UDT_LIBS)",
    mdusageOciInvalidateFeature="MDSYS.MDPRVT_FEATURE.SDO_INVALIDATE_FEATURE(ORDMD_FEATURE_LIBS)",
    mdusageOciRegisterFeature="MDSYS.MDPRVT_FEATURE.SDO_REGISTER_FEATURE(ORDMD_FEATURE_LIBS)",
    mdutl_get_cpu_count="MDSYS.SDO_3GL.MDUTL_GET_CPU_COUNT(ORDMD_UTL_LIBS)",
    mdutl_get_event="MDSYS.SDO_3GL.GET_EVENT(ORDMD_UTL_LIBS)",
    mdutl_get_max_id="MDSYS.MD_NET.GET_MAX_ID(ORDMD_UTL_LIBS)",
    mdutl_is_int_rename="MDSYS.SDO_UTIL.IS_INTERNAL_RENAME(ORDMD_UTL_LIBS)",
    mdutl_is_numeric="MDSYS.SDO_UTIL.MDUTL_IS_NUMERIC(ORDMD_UTL_LIBS)",
    mdutl_is_spatial_enabled="MDSYS.SDO_UTIL.IS_INTERNAL_SPATIAL_ENABLED(ORDMD_UTL_LIBS)",
    mdutl_reset_event="MDSYS.SDO_3GL.RESET_EVENT(ORDMD_UTL_LIBS)",
    mdutl_set_event="MDSYS.SDO_3GL.SET_EVENT(ORDMD_UTL_LIBS)",
    mdutlgetcpucount="MDSYS.SDO_3GL.MDUTL_GET_CPU_COUNT(ORDMD_UTL_LIBS)",
    mdutlgetevent="MDSYS.SDO_3GL.GET_EVENT(ORDMD_UTL_LIBS)",
    mdutlgetmaxid="MDSYS.MD_NET.GET_MAX_ID(ORDMD_UTL_LIBS)",
    mdutlisintrename="MDSYS.SDO_UTIL.IS_INTERNAL_RENAME(ORDMD_UTL_LIBS)",
    mdutlisnumeric="MDSYS.SDO_UTIL.MDUTL_IS_NUMERIC(ORDMD_UTL_LIBS)",
    mdutlisspatialenabled="MDSYS.SDO_UTIL.IS_INTERNAL_SPATIAL_ENABLED(ORDMD_UTL_LIBS)",
    mdutlresetevent="MDSYS.SDO_3GL.RESET_EVENT(ORDMD_UTL_LIBS)",
    mdutlsetevent="MDSYS.SDO_3GL.SET_EVENT(ORDMD_UTL_LIBS)",
    mdvalgeom="MDSYS.SDO_3GL.VALIDATE_GEOM(ORDMD_REL_LIBS)",
    mdvalgeom_wc="MDSYS.SDO_3GL.VALIDATE_GEOM_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdvalgeomwc="MDSYS.SDO_3GL.VALIDATE_GEOM_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdvallayer_wc="MDSYS.SDO_3GL.VALIDATE_LAYER_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdvallayerwc="MDSYS.SDO_3GL.VALIDATE_LAYER_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdwdarcdensify="MDSYS.SDO_3GL.ARC_DENSIFY(ORDMD_WD_LIBS)",
    mdwdbuf="MDSYS.SDO_3GL.GENERATE_BUFFER_C(ORDMD_WD_LIBS)",
    mdwdist="MDSYS.SDO_3GL.WITHIN_DISTANCE(ORDMD_WD_LIBS)",
    mdwdist_func="MDSYS.SDO_3GL.WITHIN_DISTANCE(ORDMD_WD_LIBS)",
    mdwdistfunc="MDSYS.SDO_3GL.WITHIN_DISTANCE(ORDMD_WD_LIBS)",
    mdwidth="MDSYS.SDO_3GL.WIDTH(ORDMD_MBR_LIBS)",
    mergeLayers="MDSYS.SDO_GEOR_INT.MERGELAYERS(ORDMD_GEOR_LIBS)",
    mergePatchPls="SYS.JDOM_T.mergepatch(DBMS_JDOM_LIB)",
    mergePatchStr="SYS.JDOM_T.mergepatch(DBMS_JDOM_LIB)",
    message="CTXSYS.DRUE.GETMSG(DR$LIB)",
    migrate80to81="SYS.MIGRATE_80SYSIMAGES_TO_81.migrate_80sysimages_to_81(UTL_OBJECTS_LIB)",
    migrate_80_to_81="SYS.MIGRATE_80SYSIMAGES_TO_81.migrate_80sysimages_to_81(UTL_OBJECTS_LIB)",
    msq="generating sql statements",
    msqcol="generating sql statements append column name",
    msqrxq="generating sql statements make sql for remote execution",
    n="network",
    na="network authentication",
    Name="Description",
    nau_ctl="network authentication aUthentication ConTroL",
    nazslon="network authentication Zecurity Log ON",
    nb="network buffer",
    nbi="network buffer incoming",
    nbiCreate="network buffer incoming create buffer",
    nbiRead="network buffer incoming read",
    nbiReadLine="network buffer incoming read a line",
    nbiReadLineMB="network buffer incoming read a line multiple buffers(?)",
    nbiReadLineSB="network buffer incoming read a line single buffer(?)",
    nbo="network buffer outgoing",
    nboCreate="network buffer outgoing create buffer",
    nboFlush="network buffer outgoing flush buffer",
    nboWrite="network buffer outgoing write (to socket?)",
    nco="network network connection",
    ncodfa="network network connection definition allocation, allocate a new ncodef",
    ncrorou="network receive OUT arguments for specified procedure",
    ncroxrend="network xfr record end",
    ncrsrend="network end record",
    ncrsrwrt="network Record WRiTe output buffer",
    new="network ??",
    next="SYS.PLITBLM.next(c)/SYS.SODA_CURSOR_T.NEXT(DBMS_SODACUR_LIB)",
    ngine="network ??",
    nhp="network http",
    nhpDestroyConnection="network http remove connection",
    nhpEndConnection="network http end connection",
    nhpGetConnection="network http start connection",
    nhpNewConnection="network http create new connection",
    nhpReadLine="network http read a line",
    nhpReadResponse="network http read response",
    nhpReqBegin="network http begin request",
    nhpRespEnd="network http end response",
    nhpRespGet="network http get response",
    nhpRespGet0="network http get response 0 (?)",
    nhpReturnConnection="network http return connection",
    nhpSendRequest="network http send request",
    nhpSockAvail="network http is socket available",
    nhpSockRecv="network http receive via network socket",
    nhpSockSend="network http send via network socket",
    nhpStartRequest="network http start request",
    ni="network interface",
    nImpl="network ??",
    nio="network interface operating system dependent networking",
    nioqer="network interface operating system dependent networking error",
    nioqrc="network interface operating system dependent networking receive",
    nioqsn="network interface operating system dependent networking send",
    nioqwa="network interface operating system dependent networking wait",
    nl="network library",
    nldatxt="network library put current date/time into string",
    nn="network names",
    normalize_and_convert_icd="SYS.DBMS_STATS.NORMALIZE_AND_CONVERT_ICD(C)",
    normalizeandconverticd="SYS.DBMS_STATS.NORMALIZE_AND_CONVERT_ICD(C)",
    npi="network network program interface",
    npiall="network network program interface use bundled execution",
    npiane="network network program interface add new nco entry",
    npibeg="network network program interface maybe begin a distributed transaction branch, release local DX",
    npicom="network network program interface old style commit",
    npicon="network network program interface connect; connect and log on to an external database",
    npidri="network network program interface driver common",
    npidsa="network network program interface disconnect all",
    npidsc="network network program interface DiSConnect connection",
    npierr="network network program interface check for errors requiring ksesec, also reacquire DX lock",
    npil="network network program interface local",
    npisnl="network network program interface set network link",
    npitcc="network network program interface Test/Clear connections",
    npixfr="network network program interface transfer",
    ns="network session",
    nsb="network session block(?)",
    nsbasic="network session block(?) basic",
    nsbasic_brc="network session block(?) basic block receive",
    nsbasic_bsd="network session block(?) basic block send",
    nsbrecv="network session block(?) receive",
    nsbsend="network session block(?) send",
    nscon="network session connect",
    nsdo="network session execute network session operation. NS protocol engine",
    nsevdansw="network session event deferred: complete deferred nsanswer operation",
    nsevrec="network session record: record event occurence",
    nsevwait="network session wait: wait for event notification on all registered connections",
    nsmal="network session memory allocate",
    nsntwrn="network session ??",
    nso="network session nest optimisation (sql transformation)",
    nsoqbc="network session nest optimisation (sql transformation) on query block",
    nsotruns="network session nest optimisation (sql transformation) traverse and unnest subquery",
    nsprecv="network session receive packet from network transport layer",
    nspsend="network session ??",
    nsrdr="network session packet reader",
    nstimexp="network session expire function. invoked by LTM with these specific arguments",
    nt="network transport",
    ntevque="network transport event vector query",
    ntm="network transport mailbox",
    ntp="network transport ipc",
    ntpfp="network transport ipc ?",
    ntpfprd="network transport ipc ? read",
    ntpfpwr="network transport ipc ? write",
    ntprd="network transport ipc read",
    ntt="network transport tcp/ip",
    ntt2err="network transport tcp/ip error procedure",
    nttctl="network transport tcp/ip control",
    nttfp="network transport tcp/ip ?",
    nttfprd="network transport tcp/ip ? read",
    nttfpwr="network transport tcp/ip ? write",
    nttrd="network transport tcp/ip basic read",
    nttwr="network transport tcp/ip ??",
    ntus="network transport unix domain sockets",
    ntz="network transport SSL",
    nu="network trace route utility",
    nz="network security",
    oba="operator buffer allocation",
    oci="oracle call interface",
    ociepacm="oracle call interface ??",
    ociextp="oracle call interface PLSQL External proc",
    OCILobCreateTemporary="DBMS_LOB.KKXL_CREATETEMPORARY",
    OCILobFileCloseAll="DBMS_LOB.KKXL_FILECLOSEALL",
    OCILobFileExists="DBMS_LOB.KKXL_FILEEXISTS",
    OCILobFileGetName="DBMS_LOB.KKXL_FILEGETNAME",
    OCILobFileIsOpen="DBMS_LOB.KKXL_FILEISOPEN",
    OCILobFreeTemporary="DBMS_LOB.KKXL_FREETEMPORARY",
    OCILobGetChunkSize="DBMS_LOB.KKXL_GETCHUNKSIZE",
    OCILobGetLength="DBMS_LOB.KKXL_GETLENGTH",
    OCILobGetOptions="DBMS_LOB.KKXL_GETOPTIONS",
    OCILobIsOpen="DBMS_LOB.KKXL_ISOPEN",
    OCILobIsTemporary="DBMS_LOB.KKXL_ISTEMPORARY",
    OCILobLoadFromFile="DBMS_LOB.KKXL_LOADFROMFILE",
    OCILobSetOptions="DBMS_LOB.KKXL_SETOPTIONS",
    OCIStmtExecute="execute",
    OCIStmtFetch="fetch",
    ODCITableDescribe="SYS.ORA_FI_RIMP_T.ODCITableDescribe(ora_fi_lib)",
    ODCITableFetch="SYS.HIVEMETADATA.ODCITABLESTART(DBMSHADOOPLIB)",
    odm="oracle disk manager",
    odm_io="oracle disk manager IO",
    ofs="oracle filesystem (ACFS)?",
    oid2int_name="XDB.DBMS_XMLSCHEMA_INT.XDB$OID2INTNAME(XMLSCHEMA_LIB)",
    oid2intname="XDB.DBMS_XMLSCHEMA_INT.XDB$OID2INTNAME(XMLSCHEMA_LIB)",
    onError="SYS.JDOM_T.on_Error(DBMS_JDOM_LIB)",
    oper_spec="SYS.DBMS_EXPORT_EXTENSION.GET_OBJECT_SOURCE(EXTIDX_IMP_LIB)",
    operspec="SYS.DBMS_EXPORT_EXTENSION.GET_OBJECT_SOURCE(EXTIDX_IMP_LIB)",
    opi="oracle program interface",
    opiaba="oracle program interface access bind (variable) array?",
    opiabt="oracle program interface abort instance",
    opiamr="oracle program interface archival and media recovery",
    opibnd="oracle program interface bind",
    opibnd0="oracle program interface bind 0",
    opibrn="oracle program interface bind reference numeric",
    opicca="oracle program interface clear context area",
    opiclo="oracle program interface close cursor",
    opicom="oracle program interface oracle side, commit current transaction",
    opidcl="oracle program interface cleanup after the sqlnet connection is terminated",
    opiDeferredSem="oracle program interface perform deferred semantic analysis",
    opidr="oracle program interface route current request",
    opidrv="oracle program interface route current request driver, entry side into two task interface",
    opidsa="oracle program interface array describe locals",
    opiefn="oracle program interface execute function (?)",
    opiexe="oracle program interface execute",
    opifch="oracle program interface oracle side of the fetch interface",
    opifch2="oracle program interface oracle side of the fetch interface main routine",
    opifcr="oracle program interface fetch callback - fetch a row?",
    opifcs="oracle program interface free cursors by session close",
    opigln="oracle program interface get long column",
    opiierr="oracle program interface internal error",
    opiino="oracle program interface initialize opi",
    opikndf1="oracle program interface OPIINO: Kernel route which sits on top of the SQL*Net driver. we asusme that only MTS uses this function right before it detaches the session.",
    opikndf2="oracle program interface OPIINO: Kernel route which sits on top of the SQL*Net driver",
    opilof="oracle program interface log off",
    opilon="oracle program interface log on",
    opimai="oracle program interface main",
    opimai_real="oracle program interface main real oracle start point",
    opiNeedDeferredSem="oracle program interface is deferred semantic analysis needed (if so (r1), returns from kksParseChildCursor and starts kksFullTypeCheck)",
    opiobv="oracle program interface bind a variable",
    opiodr="oracle program interface oracle code request driver, route the current request",
    opiomc="oracle program interface map cursor",
    opiope="oracle program interface open cursor",
    opiopr="oracle program interface open cursor",
    opiosq="oracle program interface prepare to parse a sql command",
    opiosq0="oracle program interface prepare to parse a sql command 0",
    opiParse="oracle program interface parse",
    opipbr="oracle program interface process bind by reference chain",
    opipls="oracle program interface contains opi bundled call executor and support routines",
    opiprs="oracle program interface parse",
    opirip="oracle program interface run independent process. invoked from special function sou2o direct call in opimai of detached process invocation. initializes fixed-PGA in RAM and SQL layers.",
    opiSem="oracle program interface semantic analysis driver",
    opistp="oracle program interface stop oracle",
    opistr="oracle program interface start oracle",
    opitca="oracle program interface sets up context area",
    opitsk="oracle program interface two task function dispatcher",
    opiul="oracle program interface direct loader",
    opix="oracle program interface transfer to remote",
    opixrb="oracle program interface ??",
    opixrm="oracle program interface transfer to remote check remote cursor",
    oprReplaceOne="SYS.SODA_OPERATION_T.REPLACE_ONE(DBMS_SODAOPR_LIB)",
    oprReplaceOneAndGet="SYS.SODA_OPERATION_T.REPLACE_ONE_AND_GET(DBMS_SODAOPR_LIB)",
    ora_max_name_len_supported="SYS.DBMS_STANDARD.ora_max_name_len_supported(C)",
    oramaxnamelensupported="SYS.DBMS_STANDARD.ora_max_name_len_supported(C)",
    orp="oracle external pickler/opaque type interface",
    ort="OBJECTS Types",
    osn="Two Task",
    oss="oracle storage server",
    ossconf="oracle storage server configuration",
    osssec="oracle storage server security",
    owner_migrate_hc="SYS.DBMS_OBJECTS_APPS_UTILS.owner_migrate_update_hashcode(UTL_OBJECTS_LIB)",
    owner_migrate_tdo="SYS.DBMS_OBJECTS_APPS_UTILS.recompile_types(UTL_OBJECTS_LIB)",
    ownermigratehc="SYS.DBMS_OBJECTS_APPS_UTILS.owner_migrate_update_hashcode(UTL_OBJECTS_LIB)",
    ownermigratetdo="SYS.DBMS_OBJECTS_APPS_UTILS.recompile_types(UTL_OBJECTS_LIB)",
    p2c="PLSQL PSD standalones",
    par="PLSQL KG interface",
    parse="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    parseBlob="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    parseBlobFrm="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    parseClob="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    patchPls="SYS.JDOM_T.patch(DBMS_JDOM_LIB)",
    patchStr="SYS.JDOM_T.patch(DBMS_JDOM_LIB)",
    path_func1_xdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC1(XDB.RESOURCE_VIEW_LIB)",
    path_func_xdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    path_xdbhi="XDB.XDB_ANCOP.PATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    pathfunc1xdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC1(XDB.RESOURCE_VIEW_LIB)",
    pathfuncxdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    pathxdbhi="XDB.XDB_ANCOP.PATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    pb="PLSQL code execution",
    pbbbl="SYS.PBREAK.PBBBL(C)",
    pbbdb="SYS.PBREAK.PBBDB(C)",
    pbbeb="SYS.PBREAK.PBBEB(C)",
    pbbevent="SYS.PBREAK.PBBEVENT(C)",
    pbbglm="SYS.PBREAK.PBBGLM(C)",
    pbbgln="SYS.PBREAK.PBBGLN(C)",
    pbbgpf="SYS.PBREAK.PBBGPF(C)",
    pbbhs="SYS.PBREAK.PBBHS(C)",
    pbbibacktrace="SYS.PBREAK.PBBIBACKTRACE(C)",
    pbbibreakpoints="SYS.PBREAK.PBBIBREAKPOINTS(C)",
    pbbicdisexe="SYS.PBREAK.PBBICDISEXE(C)",
    pbbicdvck="SYS.PBREAK.PBBICDVCK(C)",
    pbbiget="SYS.PBREAK.PBBIGET(C)",
    pbbigindexes="SYS.PBREAK.PBBIGINDEXES(C)",
    pbbilspkgs="SYS.PBREAK.PBBILSPKGS(C)",
    pbbioer="SYS.PBREAK.PBBIOER(C)",
    pbbiset="SYS.PBREAK.PBBISET(C)",
    pbbopt="SYS.PBREAK.PBBOPT(C)",
    pbbpbs="SYS.PBREAK.PBBPBS(C)",
    pbbpsl="SYS.PBREAK.PBBPSL(C)",
    pbbpslf="SYS.PBREAK.PBBPSLF(C)",
    pbbrb="SYS.PBREAK.PBBRB(C)",
    pbbsd="SYS.PBREAK.PBBSD(C)",
    pbbspf="SYS.PBREAK.PBBSPF(C)",
    pbcov3gsct="PLSQL code execution DBMS_PLSQL_CODE_COVERAGE.PBCOV3GSCT START_COVERAGE",
    pbcov3gstt="PLSQL code execution DBMS_PLSQL_CODE_COVERAGE.PBCOV3GSTT STOP_COVERAGE",
    pbmsg="PLSQL code execution ??",
    pbp3g="PLSQL code execution dbms_profiler",
    pbp3gfpd="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GFPD FLUSH_PROFILER FLUSH_DATA",
    pbp3gkcb="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GKCB GET_VERSION",
    pbp3gpp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GPP PAUSE_PROFILER",
    pbp3grp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GRP RESUME_PROFILER",
    pbp3gsrp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GSRP START_PROFILER",
    pbp3gstp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GSTP STOP_PROFILER",
    pbp3gvck="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GVCK INTERNAL_VERSION_CHECK",
    pbs="PLSQL code execution KNLDE",
    pbt3g="PLSQL code execution dbms_trace",
    pbt3gco="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GCO COMMENT_PLSQL_TRACE",
    pbt3glm="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GLM LIMIT_PLSQL_TRACE",
    pbt3gmt="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GMT SET_OR_CLEAR_TRACE",
    pbt3grn="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GRN GET_PLSQL_TRACE_RUNNUMBER",
    pbt3gtl="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GTL GET_PLSQL_TRACE_LEVEL",
    pbt3gvck="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GVCK INTERNAL_VERSION_CHECK",
    pci="PLSQL infrastructure",
    pckl="dbms_pickler",
    pcklfdo="SYS.DBMS_PICKLER.GET_FORMAT_BUFFER(DBMS_PICKLER_LIB)",
    pcklfun="SYS.DBMS_JAVA_TEST.CALL_STATIC_JAVA_METHOD(DBMS_PICKLER_LIB)",
    pckltds="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pckltds2="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pckltds3="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pckltds4="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pcklupd="SYS.DBMS_PICKLER.UPDATE_THRU_REF(DBMS_PICKLER_LIB)",
    pcm="PLSQL infrastructure",
    pd="PLSQL code execution",
    pdlifu="PLSQL code execution internal entrypoint for the PL/SQL code generator",
    pdn="PLSQL code execution codegen native",
    pdt="PLSQL code execution IDL; type generator",
    pdtidc="PLSQL code execution IDL; type generator PL/SQL Diana IDL to PL/SQL intermediate code IDL translator",
    pdtimb="PLSQL code execution IDL; type generator PL/SQL intermediate code IDL translator block module",
    pdtist="PLSQL code execution IDL; type generator PL/SQL intermediate code IDL translator statement support",
    pdtitf="PLSQL code execution IDL; type generator interested in finding the base",
    pdw="PLSQL code execution codegen IDL gen",
    pdx="PLSQL code execution codegen optimizer",
    pdy="PLSQL code execution codegen MCode gen",
    pdz="PLSQL code execution codegen infrastructure",
    pe="PLSQL code execution",
    pef="PLSQL code execution external proc",
    peftrusted="PLSQL code execution external proc execute a trusted callout",
    peibp="PLSQL code execution PLSQL KNLDE",
    peicnt="PLSQL code execution PL/SQL Controlled execution",
    pes="PLSQL code execution Shared Object Manager",
    pesacos="SYS.STANDARD.pesacos(c)",
    pesasin="SYS.STANDARD.pesasin(c)",
    pesatn2="SYS.STANDARD.pesatn2(c)",
    pesblt="PLSQL code execution Shared Object Manager built in interpreter",
    pesdbtz="SYS.STANDARD.pesdbtz(c)",
    pesguid="SYS.STANDARD.pesguid(c)",
    pesld="PLSQL code execution Shared Object Manager Native Code Loader",
    pesn2dsi="SYS.STANDARD.pesn2dsi(c)",
    pesn2ymi="SYS.STANDARD.pesn2ymi(c)",
    pessdt="SYS.STANDARD.pessdt(c)",
    pessdx="SYS.STANDARD.pessdx(c)",
    pessts="SYS.STANDARD.pessts(c)",
    pessysctx2="SYS.STANDARD.pessysctx2(c)",
    pessysctx3="SYS.STANDARD.pessysctx3(c)",
    pesuen="SYS.STANDARD.pesuen(c)",
    pesxco="SYS.STANDARD.pesxco(c)",
    pesxcp="SYS.STANDARD.pesxcp(c)",
    pesxlo="SYS.STANDARD.pesxlo(c)",
    pesxlt="SYS.STANDARD.pesxlt(c)",
    pesxup="SYS.STANDARD.pesxup(c)",
    pextproc="PLSQL code execution pefm call external procedure",
    pf="PLSQL Code Execution",
    pfr="PLSQL Code Execution runtime",
    pfrba_bind_array="PLSQL Code Execution runtime bind array",
    pfrci_compute_index="PLSQL Code Execution runtime compute index",
    pfrecl_excp_caught_locally="PLSQL Code Execution runtime exception caught locally",
    pfrexc="PLSQL Code Execution runtime plsql interpreter exception support",
    pfrfeb_format_error_backtrace="PLSQL Code Execution runtime format error backtrace",
    pfrfi_find_index="PLSQL Code Execution runtime find index",
    pfrfoe_flush_oci_error="PLSQL Code Execution runtime flush oci error",
    pfrfxh="PLSQL Code Execution runtime finds an exception handler",
    pfrrbt_record_backtrace="PLSQL Code Execution runtime record backtrace",
    pfrrun="PLSQL Code Execution runtime Interpreter Main Instruction Loop",
    pfrrun_no_tool="PLSQL Code Execution runtime Interpreter Main Instruction Loop fast interpretation loop",
    pfrsi_sort_index="PLSQL Code Execution runtime sort index",
    pfrsim_sort_index_main="PLSQL Code Execution runtime sort index main",
    pfrsqc="PLSQL Code Execution runtime callbacks for array sql and dml with returning",
    pfrstk="PLSQL Code Execution runtime runtime stack frame",
    pfrtcs="PLSQL Code Execution runtime trace call stack(?) calls kgitrc on each kgiob on the stack",
    pgm="PLSQL ILMS",
    ph="PLSQL infrastructure",
    ph1="PLSQL infrastructure syntax",
    ph2="PLSQL infrastructure semantics phase 2",
    ph2blo="PLSQL infrastructure semantics phase 2 idl node D_BLOCK, D_DECL",
    ph2exp="PLSQL infrastructure semantics phase 2 process IDL class EXP",
    ph2ext="PLSQL infrastructure semantics phase 2 process IDL class EXP - top level",
    ph2gbi="PLSQL infrastructure semantics phase 2 initialize bind variable type information",
    ph2ima="PLSQL infrastructure semantics phase 2 images a",
    ph2its="PLSQL infrastructure semantics phase 2 process items",
    ph2obl="PLSQL infrastructure semantics phase 2 outermost block, outermost D_BLOCK in a body",
    ph2of1="PLSQL infrastructure semantics phase 2 D_F_CALL or D_PARM_C",
    ph2qlb="PLSQL infrastructure semantics phase 2 perform a schema.table lookup",
    ph2qlk="PLSQL infrastructure semantics phase 2 lookup the set of tables in a from clause in a database",
    ph2qqx="PLSQL infrastructure semantics phase 2 IDL node Q_EXP",
    ph2qs2="PLSQL infrastructure semantics phase 2 sql routines",
    ph2qst="PLSQL infrastructure semantics phase 2 main routine for sql statements, IDL node Q_SQL_ST",
    ph2qtx="PLSQL infrastructure semantics phase 2 IDL class TAB_EXP",
    ph2sbo="PLSQL infrastructure semantics phase 2 IDL node D_S_BODY",
    ph2sms="PLSQL infrastructure semantics phase 2 process statements",
    ph2stm="PLSQL infrastructure semantics phase 2 statement(?)",
    ph2uni="PLSQL infrastructure semantics phase 2 IDL class UNIT_BODY",
    pha="PLSQL infrastructure semantics",
    phdite="PLSQL infrastructure immediate type (S_OBJ_TY) of expressions",
    phdr="PLSQL infrastructure KG interface",
    phn="PLSQL infrastructure semantics",
    pi="PLSQL apps",
    pico="PLSQL apps utl_compress support",
    picomplz="SYS.UTL_COMPRESS.LZ_COMPRESS_I(UTL_CMP_LIB)",
    picompulz="SYS.UTL_COMPRESS.LZ_UNCOMPRESS(UTL_CMP_LIB)",
    picstk_actual_edition="SYS.UTL_CALL_STACK.PICSTK_ACTUAL_EDITION(C)",
    picstk_backtrace_depth="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_DEPTH(C)",
    picstk_backtrace_line="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_LINE(C)",
    picstk_backtrace_unit="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_UNIT(C)",
    picstk_dynamic_depth="SYS.UTL_CALL_STACK.PICSTK_DYNAMIC_DEPTH(C)",
    picstk_error_depth="SYS.UTL_CALL_STACK.PICSTK_ERROR_DEPTH(C)",
    picstk_error_msg="SYS.UTL_CALL_STACK.PICSTK_ERROR_MSG(C)",
    picstk_error_number="SYS.UTL_CALL_STACK.PICSTK_ERROR_NUMBER(C)",
    picstk_lexical_depth="SYS.UTL_CALL_STACK.PICSTK_LEXICAL_DEPTH(C)",
    picstk_owner="SYS.UTL_CALL_STACK.PICSTK_OWNER(C)",
    picstk_subprogram="SYS.UTL_CALL_STACK.PICSTK_SUBPROGRAM(C)",
    picstk_unit_line="SYS.UTL_CALL_STACK.PICSTK_UNIT_LINE(C)",
    picstk_unit_type="SYS.UTL_CALL_STACK.PICSTK_UNIT_TYPE(C)",
    picstkactualedition="SYS.UTL_CALL_STACK.PICSTK_ACTUAL_EDITION(C)",
    picstkbacktracedepth="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_DEPTH(C)",
    picstkbacktraceline="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_LINE(C)",
    picstkbacktraceunit="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_UNIT(C)",
    picstkdynamicdepth="SYS.UTL_CALL_STACK.PICSTK_DYNAMIC_DEPTH(C)",
    picstkerrordepth="SYS.UTL_CALL_STACK.PICSTK_ERROR_DEPTH(C)",
    picstkerrormsg="SYS.UTL_CALL_STACK.PICSTK_ERROR_MSG(C)",
    picstkerrornumber="SYS.UTL_CALL_STACK.PICSTK_ERROR_NUMBER(C)",
    picstklexicaldepth="SYS.UTL_CALL_STACK.PICSTK_LEXICAL_DEPTH(C)",
    picstkowner="SYS.UTL_CALL_STACK.PICSTK_OWNER(C)",
    picstksubprogram="SYS.UTL_CALL_STACK.PICSTK_SUBPROGRAM(C)",
    picstkunitline="SYS.UTL_CALL_STACK.PICSTK_UNIT_LINE(C)",
    picstkunittype="SYS.UTL_CALL_STACK.PICSTK_UNIT_TYPE(C)",
    pidacn="SYS.PIDL.pidacn(c)",
    pidanm="SYS.PIDL.pidanm(c)",
    pidaty="SYS.PIDL.pidaty(c)",
    pidbty="SYS.PIDL.pidbty(c)",
    pidkin="SYS.PIDL.pidkin(c)",
    pidnnm="SYS.PIDL.pidnnm(c)",
    pidrty="SYS.PIDL.pidrty(c)",
    pien="PLSQL apps utl_encode support",
    pienc264="SYS.UTL_ENCODE.BASE64_ENCODE_I(UTL_ENC_LIB)",
    pienc2m="SYS.UTL_ENCODE.MIMEHEADER_ENCODE_I(UTL_ENC_LIB)",
    pienc2qp="SYS.UTL_ENCODE.QUOTED_PRINTABLE_ENCODE_I(UTL_ENC_LIB)",
    pienc2t="SYS.UTL_ENCODE.TEXT_ENCODE_I(UTL_ENC_LIB)",
    pienc2uu="SYS.UTL_ENCODE.UUENCODE_I(UTL_ENC_LIB)",
    piencf64="SYS.UTL_ENCODE.BASE64_DECODE_I(UTL_ENC_LIB)",
    piencfm="SYS.UTL_ENCODE.MIMEHEADER_DECODE_I(UTL_ENC_LIB)",
    piencfqp="SYS.UTL_ENCODE.QUOTED_PRINTABLE_DECODE_I(UTL_ENC_LIB)",
    piencft="SYS.UTL_ENCODE.TEXT_DECODE_I(UTL_ENC_LIB)",
    piencfuu="SYS.UTL_ENCODE.UUDECODE_I(UTL_ENC_LIB)",
    pifi="PLSQL apps utl_file support",
    pifiat="SYS.UTL_FILE.FGETATTR_I(UTL_FIL_LIB)",
    pifica="SYS.UTL_FILE.FCLOSE_ALL_I(UTL_FIL_LIB)",
    pificl="SYS.UTL_FILE.FCLOSE_I(UTL_FIL_LIB)",
    pificp="SYS.UTL_FILE.FCOPY_I(UTL_FIL_LIB)",
    pififl="SYS.UTL_FILE.FFLUSH_I(UTL_FIL_LIB)",
    pifigch="SYS.UTL_FILE.FOPEN_NCHAR_I(UTL_FIL_LIB)",
    pifigl="SYS.UTL_FILE.GET_LINE_I(UTL_FIL_LIB)",
    pifigr="SYS.UTL_FILE.GET_LINE_RAW_I(UTL_FIL_LIB)",
    pifiio="SYS.UTL_FILE.FIS_OPEN_I(UTL_FIL_LIB)",
    pifimv="SYS.UTL_FILE.FRENAME_I(UTL_FIL_LIB)",
    pifinl="SYS.UTL_FILE.NEW_LINE_I(UTL_FIL_LIB)",
    pifiop="SYS.UTL_FILE.FOPEN_I(UTL_FIL_LIB)",
    pifipo="SYS.UTL_FILE.FGETPOS_I(UTL_FIL_LIB)",
    pifipr="SYS.UTL_FILE.PUT_RAW_I(UTL_FIL_LIB)",
    pifipu="SYS.UTL_FILE.PUT_BUFFER_I(UTL_FIL_LIB)",
    pifirm="SYS.UTL_FILE.FREMOVE_I(UTL_FIL_LIB)",
    pifisk="SYS.UTL_FILE.FSEEK_I(UTL_FIL_LIB)",
    pig_nd="SYS.PIDL.pig_nd(c)",
    pig_pt="SYS.PIDL.pig_pt(c)",
    pig_s2="SYS.PIDL.pig_s2(c)",
    pig_s4="SYS.PIDL.pig_s4(c)",
    pig_tx="SYS.PIDL.pig_tx(c)",
    pig_u1="SYS.PIDL.pig_u1(c)",
    pig_u2="SYS.PIDL.pig_u2(c)",
    pig_u4="SYS.PIDL.pig_u4(c)",
    pigd="PLSQL apps utl_gdk support",
    pigdkmn="SYS.UTL_GDK.MAP_NAME_I(UTL_GDK_LIB)",
    pigend="SYS.PIDL.pigend(c)",
    pigept="SYS.PIDL.pigept(c)",
    piges2="SYS.PIDL.piges2(c)",
    piges4="SYS.PIDL.piges4(c)",
    pigetx="SYS.PIDL.pigetx(c)",
    pigeu1="SYS.PIDL.pigeu1(c)",
    pigeu2="SYS.PIDL.pigeu2(c)",
    pigeu4="SYS.PIDL.pigeu4(c)",
    pignd="SYS.PIDL.pig_nd(c)",
    pigpt="SYS.PIDL.pig_pt(c)",
    pigs2="SYS.PIDL.pig_s2(c)",
    pigs4="SYS.PIDL.pig_s4(c)",
    pigsln="SYS.PIDL.pigsln(c)",
    pigsnd="SYS.PIDL.pigsnd(c)",
    pigtx="SYS.PIDL.pig_tx(c)",
    pigu1="SYS.PIDL.pig_u1(c)",
    pigu2="SYS.PIDL.pig_u2(c)",
    pigu4="SYS.PIDL.pig_u4(c)",
    piht="PLSQL apps utl_http support",
    pihtAvailable="PLSQL apps utl_http support is connection available",
    pihtca="SYS.UTL_HTTP.ADD_COOKIE(UTL_HTT_LIB)",
    pihtcc="SYS.UTL_HTTP.GET_COOKIE_COUNT(UTL_HTT_LIB)",
    pihtcf="SYS.UTL_HTTP.GET_FIRST_COOKIE(UTL_HTT_LIB)",
    pihtcn="SYS.UTL_HTTP.GET_NEXT_COOKIE(UTL_HTT_LIB)",
    pihtConnect="PLSQL apps utl_http support setup tcp connection",
    pihtcrc="SYS.UTL_HTTP.CREATE_REQUEST_CONTEXT(UTL_HTT_LIB)",
    pihtcx="SYS.UTL_HTTP.CLEAR_COOKIES(UTL_HTT_LIB)",
    pihtDisconnect="PLSQL apps utl_http support disconnect tcp connection",
    pihtdrc="SYS.UTL_HTTP.DESTROY_REQUEST_CONTEXT(UTL_HTT_LIB)",
    pihtgbcs="SYS.UTL_HTTP.GET_BODY_CHARSET(UTL_HTT_LIB)",
    pihtgbcsf="SYS.UTL_HTTP.GET_BODY_CHARSET(UTL_HTT_LIB)",
    pihtgces="SYS.UTL_HTTP.GET_CONTENT_ENCODING_SUPPORT(UTL_HTT_LIB)",
    pihtgcksp="SYS.UTL_HTTP.GET_COOKIE_SUPPORT(UTL_HTT_LIB)",
    pihtgdc="SYS.UTL_HTTP.GET_DETAILED_SQLCODE(UTL_HTT_LIB)",
    pihtgdm="SYS.UTL_HTTP.GET_DETAILED_SQLERRM(UTL_HTT_LIB)",
    pihtgec="SYS.UTL_HTTP.GET_RESPONSE_ERROR_CHECK(UTL_HTT_LIB)",
    pihtges="SYS.UTL_HTTP.GET_DETAILED_EXCP_SUPPORT(UTL_HTT_LIB)",
    pihtgfrd="SYS.UTL_HTTP.GET_FOLLOW_REDIRECT(UTL_HTT_LIB)",
    pihtgpcsp="SYS.UTL_HTTP.GET_PERSISTENT_CONN_SUPPORT(UTL_HTT_LIB)",
    pihtgpxy="SYS.UTL_HTTP.GET_PROXY(UTL_HTT_LIB)",
    pihtgtxto="SYS.UTL_HTTP.GET_TRANSFER_TIMEOUT(UTL_HTT_LIB)",
    pihtgw="SYS.UTL_HTTP.GET_WALLET(UTL_HTT_LIB)",
    pihtinit="SYS.UTL_HTTP.INITIALIZE(UTL_HTT_LIB)",
    pihtMalloc="PLSQL apps utl_http support allocate memory",
    pihtnc="SYS.UTL_HTTP.GET_PERSISTENT_CONN_COUNT(UTL_HTT_LIB)",
    pihtnf="SYS.UTL_HTTP.GET_FIRST_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtnn="SYS.UTL_HTTP.GET_NEXT_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtnx="SYS.UTL_HTTP.CLOSE_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtpa="SYS.UTL_HTTP.GET_AUTHENTICATION(UTL_HTT_LIB)",
    pihtpbcs="SYS.UTL_HTTP.SET_RESP_BODY_CHARSET(UTL_HTT_LIB)",
    pihtpc="SYS.UTL_HTTP.GET_HEADER_COUNT(UTL_HTT_LIB)",
    pihtpe="SYS.UTL_HTTP.END_RESPONSE(UTL_HTT_LIB)",
    pihtpg="SYS.UTL_HTTP.GET_RESPONSE(UTL_HTT_LIB)",
    pihtph="SYS.UTL_HTTP.GET_HEADER(UTL_HTT_LIB)",
    pihtpl="SYS.UTL_HTTP.READ_LINE(UTL_HTT_LIB)",
    pihtpn="SYS.UTL_HTTP.GET_HEADER_BY_NAME(UTL_HTT_LIB)",
    pihtpr="SYS.UTL_HTTP.READ_RAW(UTL_HTT_LIB)",
    pihtpr_ptr="SYS.UTL_HTTP.READ_RAW_PTR(UTL_HTT_LIB)",
    pihtprptr="SYS.UTL_HTTP.READ_RAW_PTR(UTL_HTT_LIB)",
    pihtpt="SYS.UTL_HTTP.READ_TEXT(UTL_HTT_LIB)",
    pihtqa="SYS.UTL_HTTP.SET_AUTHENTICATION(UTL_HTT_LIB)",
    pihtqbcs="SYS.UTL_HTTP.SET_REQ_BODY_CHARSET(UTL_HTT_LIB)",
    pihtqces="SYS.UTL_HTTP.SET_REQ_CONTENT_ENC_SUPPORT(UTL_HTT_LIB)",
    pihtqcksp="SYS.UTL_HTTP.SET_COOKIE_SUPPORT(UTL_HTT_LIB)",
    pihtqe="SYS.UTL_HTTP.END_REQUEST(UTL_HTT_LIB)",
    pihtqec="SYS.UTL_HTTP.SET_REQ_RESPONSE_ERROR_CHECK(UTL_HTT_LIB)",
    pihtqfrd="SYS.UTL_HTTP.SET_FOLLOW_REDIRECT(UTL_HTT_LIB)",
    pihtqg="SYS.UTL_HTTP.BEGIN_REQUEST_I(UTL_HTT_LIB)",
    pihtqh="SYS.UTL_HTTP.SET_HEADER(UTL_HTT_LIB)",
    pihtql="SYS.UTL_HTTP.WRITE_LINE(UTL_HTT_LIB)",
    pihtqp="SYS.UTL_HTTP.SET_PROPERTY(UTL_HTT_LIB)",
    pihtqpc="SYS.UTL_HTTP.SET_REQ_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtqt="SYS.UTL_HTTP.WRITE_TEXT(UTL_HTT_LIB)",
    pihtqtxto="SYS.UTL_HTTP.SET_REQ_TRANSFER_TIMEOUT(UTL_HTT_LIB)",
    pihtqw="SYS.UTL_HTTP.WRITE_RAW(UTL_HTT_LIB)",
    pihtsbcs="SYS.UTL_HTTP.SET_BODY_CHARSET(UTL_HTT_LIB)",
    pihtsces="SYS.UTL_HTTP.SET_CONTENT_ENCODING_SUPPORT(UTL_HTT_LIB)",
    pihtscksp="SYS.UTL_HTTP.SET_COOKIE_SUPPORT(UTL_HTT_LIB)",
    pihtsec="SYS.UTL_HTTP.SET_RESPONSE_ERROR_CHECK(UTL_HTT_LIB)",
    pihtSend="PLSQL apps utl_http support send tcp request",
    pihtses="SYS.UTL_HTTP.SET_DETAILED_EXCP_SUPPORT(UTL_HTT_LIB)",
    pihtsfrd="SYS.UTL_HTTP.SET_FOLLOW_REDIRECT(UTL_HTT_LIB)",
    pihtspcsp="SYS.UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(UTL_HTT_LIB)",
    pihtspxy="SYS.UTL_HTTP.SET_PROXY(UTL_HTT_LIB)",
    pihtstxto="SYS.UTL_HTTP.SET_TRANSFER_TIMEOUT(UTL_HTT_LIB)",
    pihtsw="SYS.UTL_HTTP.SET_WALLET(UTL_HTT_LIB)",
    pii18n="PLSQL apps utl_i18n support",
    pii18n_common_list="SYS.UTL_I18N.COMMON_LIST_I(UTL_I18_LIB)",
    pii18n_get_max_character_size="SYS.UTL_I18N.GET_MAX_CHARACTER_SIZE(UTL_I18_LIB)",
    pii18n_get_translation="SYS.UTL_I18N.GET_TRANSLATION_I(UTL_I18_LIB)",
    pii18nc2="SYS.UTL_I18N.CONVERT2_CHAR(UTL_I18_LIB)/SYS.UTL_I18N.CONVERT2_NCHAR(UTL_I18_LIB)",
    pii18ncc="SYS.UTL_I18N.CONVERT_CHAR(UTL_I18_LIB)/SYS.UTL_I18N.CONVERT_NCHAR(UTL_I18_LIB)",
    pii18nch="SYS.UTL_I18N.GET_CHARSET_HANDLE(UTL_I18_LIB)",
    pii18ncommonlist="SYS.UTL_I18N.COMMON_LIST_I(UTL_I18_LIB)",
    pii18ncr="SYS.UTL_I18N.CONVERT_RAW(UTL_I18_LIB)",
    pii18ncv="SYS.UTL_I18N.CNV_XML_SQL(UTL_I18_LIB)",
    pii18ndc="SYS.UTL_I18N.GET_DEFCHARSET(UTL_I18_LIB)",
    pii18ner="SYS.UTL_I18N.ESCAPE_REF_I(UTL_I18_LIB)",
    pii18ngetmaxcharactersize="SYS.UTL_I18N.GET_MAX_CHARACTER_SIZE(UTL_I18_LIB)",
    pii18ngettranslation="SYS.UTL_I18N.GET_TRANSLATION_I(UTL_I18_LIB)",
    pii18ninit="SYS.UTL_I18N.INITIALIZE(UTL_I18_LIB)",
    pii18nm2="SYS.UTL_I18N.MAP_NAME_II(UTL_I18_LIB)",
    pii18nme="SYS.UTL_I18N.MAP_EMAIL(UTL_I18_LIB)",
    pii18nmn="SYS.UTL_I18N.MAP_NAME_I(UTL_I18_LIB)",
    pii18ntr="SYS.UTL_I18N.TRANSLITERATE(UTL_I18_LIB)",
    pii18nue="SYS.UTL_I18N.UNESCAPE_REFERENCE(UTL_I18_LIB)",
    pii18nvce="SYS.UTL_I18N.VALIDATE_CHARACTER_ENCODING(UTL_I18_LIB)",
    pii18nvce_clob="SYS.UTL_I18N.VALIDATE_CHARACTER_ENCODING(UTL_I18_LIB)",
    pii18nvceclob="SYS.UTL_I18N.VALIDATE_CHARACTER_ENCODING(UTL_I18_LIB)",
    pii18nvd="SYS.UTL_I18N.VALIDATE_SQLNAME(UTL_I18_LIB)",
    piin="PLSQL apps utl_inaddr support",
    piinadgha="SYS.UTL_INADDR.GET_HOST_ADDRESS_I(UTL_INA_LIB)",
    piinadghn="SYS.UTL_INADDR.GET_HOST_NAME_I(UTL_INA_LIB)",
    pilm="PLSQL apps utl_lms support",
    pilmsfm="SYS.UTL_LMS.FORMAT_MESSAGE(UTL_LMS_LIB)",
    pilmsgm="SYS.UTL_LMS.GET_MESSAGE(UTL_LMS_LIB)",
    pinl="PLSQL apps utl_nla support",
    pinlaB_dasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlaB_daxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlaB_dcopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlaB_ddot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlaB_dgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlaB_dgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlaB_dgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlaB_dger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlaB_dnrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlaB_drot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlaB_drotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlaB_dsbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlaB_dscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlaB_dspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlaB_dspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlaB_dspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlaB_dswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlaB_dsymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlaB_dsymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlaB_dsyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlaB_dsyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlaB_dsyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlaB_dsyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlaB_dtbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlaB_dtbsm="PLSQL apps utl_nla support UTL_NLA.BLAS_TBMV_",
    pinlaB_dtbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlaB_dtpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlaB_dtprv="PLSQL apps utl_nla support UTL_NLA.BLAS_TPMV_",
    pinlaB_dtpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlaB_dtrmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlaB_dtrmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlaB_dtrsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlaB_dtrsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlaB_idamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlaB_isamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlaB_sasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlaB_saxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlaB_scopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlaB_sdot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlaB_sgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlaB_sgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlaB_sgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlaB_sger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlaB_snrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlaB_srot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlaB_srotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlaB_ssbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlaB_sscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlaB_sspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlaB_sspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlaB_sspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlaB_sswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlaB_ssymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlaB_ssymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlaB_ssyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlaB_ssyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlaB_ssyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlaB_ssyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlaB_stbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlaB_stbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlaB_stpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlaB_stpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlaB_strmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlaB_strmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlaB_strsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlaB_strsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlaBdasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlaBdaxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlaBdcopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlaBddot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlaBdgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlaBdgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlaBdgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlaBdger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlaBdnrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlaBdrot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlaBdrotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlaBdsbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlaBdscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlaBdspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlaBdspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlaBdspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlaBdswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlaBdsymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlaBdsymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlaBdsyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlaBdsyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlaBdsyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlaBdsyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlaBdtbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlaBdtbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlaBdtpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlaBdtpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlaBdtrmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlaBdtrmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlaBdtrsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlaBdtrsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlaBidamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlaBisamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlaBsasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlaBsaxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlaBscopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlaBsdot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlaBsgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlaBsgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlaBsgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlaBsger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlaBsnrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlaBsrot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlaBsrotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlaBssbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlaBsscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlaBsspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlaBsspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlaBsspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlaBsswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlaBssymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlaBssymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlaBssyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlaBssyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlaBssyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlaBssyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlaBstbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlaBstbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlaBstpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlaBstpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlaBstrmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlaBstrmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlaBstrsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlaBstrsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlaL_dgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlaL_dgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlaL_dgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlaL_dgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlaL_dgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlaL_dgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlaL_dgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlaL_dgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlaL_dpbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlaL_dposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlaL_dppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlaL_dptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlaL_dsbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlaL_dsbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlaL_dspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlaL_dspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlaL_dspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlaL_dstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlaL_dstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlaL_dsyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlaL_dsyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlaL_dsysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pinlaL_sgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlaL_sgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlaL_sgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlaL_sgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlaL_sgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlaL_sgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlaL_sgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlaL_sgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlaL_spbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlaL_sposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlaL_sppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlaL_sptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlaL_ssbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlaL_ssbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlaL_sspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlaL_sspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlaL_sspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlaL_sstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlaL_sstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlaL_ssyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlaL_ssyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlaL_ssysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pinlaLdgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlaLdgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlaLdgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlaLdgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlaLdgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlaLdgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlaLdgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlaLdgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlaLdpbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlaLdposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlaLdppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlaLdptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlaLdsbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlaLdsbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlaLdspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlaLdspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlaLdspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlaLdstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlaLdstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlaLdsyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlaLdsyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlaLdsysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pinlaLsgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlaLsgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlaLsgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlaLsgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlaLsgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlaLsgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlaLsgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlaLsgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlaLspbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlaLsposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlaLsppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlaLsptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlaLssbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlaLssbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlaLsspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlaLsspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlaLsspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlaLsstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlaLsstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlaLssyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlaLssyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlaLssysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pip_nd="SYS.PIDL.pip_nd(c)",
    pip_pt="SYS.PIDL.pip_pt(c)",
    pip_s2="SYS.PIDL.pip_s2(c)",
    pip_s4="SYS.PIDL.pip_s4(c)",
    pip_tx="SYS.PIDL.pip_tx(c)",
    pip_u1="SYS.PIDL.pip_u1(c)",
    pip_u2="SYS.PIDL.pip_u2(c)",
    pip_u4="SYS.PIDL.pip_u4(c)",
    pipnd="SYS.PIDL.pip_nd(c)",
    pippt="SYS.PIDL.pip_pt(c)",
    pips2="SYS.PIDL.pip_s2(c)",
    pips4="SYS.PIDL.pip_s4(c)",
    piptx="SYS.PIDL.pip_tx(c)",
    pipu1="SYS.PIDL.pip_u1(c)",
    pipu2="SYS.PIDL.pip_u2(c)",
    pipu4="SYS.PIDL.pip_u4(c)",
    pirg="PLSQL apps utl_raw support",
    pirg2bd="SYS.UTL_RAW.PIRG2BD(C)",
    pirg2bf="SYS.UTL_RAW.PIRG2BF(C)",
    pirg2bi="SYS.UTL_RAW.PIRG2BI(C)",
    pirg2mn="PLSQL apps utl_raw support UTL_RAW.PIRG2MN CAST_TO_NUMBER",
    pirg2nm="SYS.UTL_RAW.PIRG2NM(C)",
    pirg2nvc="SYS.UTL_RAW.PIRG2NVC(C)",
    pirg2rw="SYS.UTL_RAW.PIRG2RW(C)",
    pirg2vc="SYS.UTL_RAW.PIRG2VC(C)",
    pirgcmp="SYS.UTL_RAW.PIRGCMP(C)",
    pirgcnr="SYS.UTL_RAW.PIRGCNR(C)",
    pirgcom="SYS.UTL_RAW.PIRGCOM(C)",
    pirgcon="SYS.UTL_RAW.PIRGCON(C)",
    pirgcop="SYS.UTL_RAW.PIRGCOP(C)",
    pirgfbd="SYS.UTL_RAW.PIRGFBD(C)",
    pirgfbf="SYS.UTL_RAW.PIRGFBF(C)",
    pirgfbi="SYS.UTL_RAW.PIRGFBI(C)",
    pirgfnm="SYS.UTL_RAW.PIRGFNM(C)",
    pirglen="SYS.UTL_RAW.PIRGLEN(C)",
    pirgopr="SYS.UTL_RAW.PIRGOPR(C)",
    pirgovr="SYS.UTL_RAW.PIRGOVR(C)",
    pirgrev="SYS.UTL_RAW.PIRGREV(C)",
    pirgsub="SYS.UTL_RAW.PIRGSUB(C)",
    pirgtrn="SYS.UTL_RAW.PIRGTRN(C)",
    pirgtrs="SYS.UTL_RAW.PIRGTRS(C)",
    pirgxra="SYS.UTL_RAW.PIRGXRA(C)",
    pism="PLSQL apps utl_smtp support",
    pismescdot="SYS.UTL_SMTP.ESCAPE_DOT_I(UTL_SMT_LIB)",
    pismmacmd5="SYS.UTL_SMTP.MAC_MD5_I(UTL_SMT_LIB)",
    pismraise="SYS.UTL_SMTP.RAISE_I(UTL_SMT_LIB)",
    pitc="PLSQL apps utl_tcp support",
    pitcct="SYS.UTL_TCP.CONNECT_I(UTL_TCP_LIB)",
    pitcda="SYS.UTL_TCP.DISCONNECT_ALL_I(UTL_TCP_LIB)",
    pitcdct="SYS.UTL_TCP.DISCONNECT_I(UTL_TCP_LIB)",
    pitcfl="SYS.UTL_TCP.FLUSH_I(UTL_TCP_LIB)",
    pitcinit="SYS.UTL_TCP.INITIALIZE_I(UTL_TCP_LIB)",
    pitcr="SYS.UTL_TCP.READ_I(UTL_TCP_LIB)",
    pitcra="SYS.UTL_TCP.AVAILABLE_I(UTL_TCP_LIB)",
    pitcrl="SYS.UTL_TCP.READ_LINE_I(UTL_TCP_LIB)",
    pitcrt="SYS.UTL_TCP.READ_TEXT_I(UTL_TCP_LIB)",
    pitcssl="SYS.UTL_TCP.START_SSL_I(UTL_TCP_LIB)",
    pitcw="SYS.UTL_TCP.WRITE_I(UTL_TCP_LIB)",
    pitcwl="SYS.UTL_TCP.WRITE_LINE_I(UTL_TCP_LIB)",
    pitcwt="SYS.UTL_TCP.WRITE_TEXT_I(UTL_TCP_LIB)",
    pitrig_delete="XDB.XDB_PITRIG_PKG_01.PITRIG_DEL_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_delete_metadata="XDB.XDB_PITRIG_PKG_01.PITRIG_DELMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_drop="XDB.XDB_PITRIG_PKG.PITRIG_DROP_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_drop_metadata="XDB.XDB_PITRIG_PKG.PITRIG_DROPMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_update="XDB.XDB_PITRIG_PKG_01.PITRIG_UPD_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_update_metadata="XDB.XDB_PITRIG_PKG_01.PITRIG_UPDMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdelete="XDB.XDB_PITRIG_PKG_01.PITRIG_DEL_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdeletemetadata="XDB.XDB_PITRIG_PKG_01.PITRIG_DELMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdrop="XDB.XDB_PITRIG_PKG.PITRIG_DROP_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdropmetadata="XDB.XDB_PITRIG_PKG.PITRIG_DROPMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigupdate="XDB.XDB_PITRIG_PKG_01.PITRIG_UPD_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigupdatemetadata="XDB.XDB_PITRIG_PKG_01.PITRIG_UPDMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitsk="PLSQL apps ??",
    piur="PLSQL apps utl_url support",
    piuriesc="SYS.UTL_URL.ESCAPE_I(UTL_URL_LIB)",
    piuriune="SYS.UTL_URL.UNESCAPE_I(UTL_URL_LIB)",
    pk="PLSQL KG interface",
    pkrdi="PLSQL KG interface ??",
    pl="PLSQL infrastructure",
    plck="PLSQL infrastructure ??",
    plio="PLSQL infrastructure object instantiation",
    pliodl="PLSQL infrastructure object instantiation delete function",
    plitblm="PLSQL infrastructure PLSQL apps",
    pls="PLSQL infrastructure PLSQL PSD standalones",
    plslm="PLSQL infrastructure PLSQL PSD standalones ncomp processing",
    plsm="PLSQL infrastructure PLSQL PSD standalones plsql handling collections",
    plsql_run="PLSQL infrastructure PLSQL PSD standalones single entry point for top level pfrrun and penrun",
    plst="PLSQL infrastructure PLSQL PSD standalones PLSQL code execution",
    plswa="PLSQL infrastructure PLSQL PSD standalones Programmatic Interfaces to/from PL/SQL",
    plzsql="SYS.STANDARD.plzsql(c)",
    pmuc="plsql handling collections",
    pmuo="plsql handling collections",
    pmux="plsql handling collections",
    pncutil="PLSQL infrastructure",
    pp="PLSQL infrastructure",
    pri="PLSQL remote interface",
    pricbr="PLSQL remote interface callback, remote",
    prient="PLSQL remote interface run given (rpc) entrypoint",
    prient2="PLSQL remote interface run given (rpc) entrypoint common code to run given entrypoint, could be rpc or non-rpc",
    prifold="PLSQL remote interface rpc forwarding to older releases",
    priold="PLSQL remote interface rpc forwarding to older releases",
    prior="SYS.PLITBLM.prior(c)",
    prm="parameter handling with sql layer",
    prs="parse",
    prsase="parse initialisation parameter names",
    prscmd="parse SQL command (syntax check)",
    prsctc="parse create table/cluster",
    prsdel="parse delete",
    prsdrv="parse driver (?)",
    prspo_proc_opts="parse (or only validate) PHysical Attribute specification",
    prsrss="parse recursive alter system or session",
    prssz="parse parse context to be saved",
    prsxpl="parse explain statement",
    ps="PLSQL infrastructure",
    psd="PLSQL infrastructure programmatic interfaces to/from",
    psd_asct="PLSQL infrastructure programmatic interfaces to/from DBMS_SESSION.PSD_ASCT ADD_SQL_CONNECTION_TEST",
    psd_catet="SYS.DBMS_UTILITY.PSD_CATET(C)",
    psd_dct="PLSQL infrastructure programmatic interfaces to/from DBMS_SESSION.PSD_DCT DISABLE_CONNECTION_TEST",
    psd_dsct="PLSQL infrastructure programmatic interfaces to/from DBMS_SESSION.PSD_DSCT DELETE_SQL_CONNECTION_TEST",
    psd_ect="PLSQL infrastructure programmatic interfaces to/from DBMS_SESSION.ECT ENABLE_CONNECTION_TEST",
    psd_expand_sql_text="SYS.DBMS_UTILITY.PSD_EXPAND_SQL_TEXT(C)",
    psd_invalidate="SYS.DBMS_UTILITY.PSD_INVALIDATE(C)",
    psd_package_memory_utilizatio2="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATIO2(C)",
    psd_package_memory_utilization="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATION(C)",
    psd_set_schema_deferred="SYS.DBMS_SESSION.PSD_SET_SCHEMA_DEFERRED(C)",
    psd_validate="SYS.DBMS_UTILITY.PSD_VALIDATE(C)",
    psd_wait_on_pending_dml="SYS.DBMS_UTILITY.PSD_WAIT_ON_PENDING_DML(C)",
    psdanam="SYS.DBMS_UTILITY.PSDANAM(C)",
    psdart="SYS.DBMS_SHARED_POOL.PSDART(C)",
    psdasct="SYS.DBMS_SESSION.PSD_ASCT(C)",
    psdbcomp="SYS.DBMS_ASSERT.PSDBCOMP(C)",
    psdbinstr="SYS.DBMS_ASSERT.PSDBINSTR(C)",
    psdbnd="PLSQL infrastructure programmatic interfaces to/from manage bind variables",
    psdcatet="SYS.DBMS_UTILITY.PSD_CATET(C)",
    psdcire="SYS.DBMS_SESSION.PSDCIRE(C)",
    psdcln="SYS.DBMS_SNAPSHOT_UTL.PSDCLN(C)",
    psdcnam="SYS.DBMS_UTILITY.PSDCNAM(C)",
    psddbv="SYS.DBMS_UTILITY.PSDDBV(C)",
    psddbvfull="SYS.DBMS_UTILITY.PSDDBVFULL(C)",
    psddct="SYS.DBMS_SESSION.PSD_DCT(C)",
    psdddl="PLSQL infrastructure programmatic interfaces to/from execute DDL",
    psddin="SYS.DBMS_SESSION.PSDDI(C)",
    psddr0="PLSQL infrastructure programmatic interfaces to/from Null pointer definitions for ttcdrv callback and context.",
    psddsct="SYS.DBMS_SESSION.PSD_DSCT(C)",
    psddsm="SYS.DBMS_SNAPSHOT_UTL.PSDDSM(C)",
    psdect="SYS.DBMS_SESSION.PSD_ECT(C)",
    psdevn="PLSQL infrastructure programmatic interfaces to/from plsql debugger",
    psdexpandsqltext="SYS.DBMS_UTILITY.PSD_EXPAND_SQL_TEXT(C)",
    psdfmr="SYS.DBMS_SESSION.PSDFMR(C)",
    psdgbt="PLSQL infrastructure programmatic interfaces to/from get bind info",
    psdgcscn="SYS.DBMS_TRANSACTION_INTERNAL_SYS.PSDGCSCN(C)",
    psdgtr="SYS.DBMS_UTILITY.PSDGTR(C)",
    psdhot="SYS.DBMS_SHARED_POOL.PSDHOT(C)",
    psdicd="PLSQL infrastructure programmatic interfaces to/from plsql call c",
    psdinvalidate="SYS.DBMS_UTILITY.PSD_INVALIDATE(C)",
    psdire="SYS.DBMS_SESSION.PSDIRE(C)",
    psdisa="SYS.DBMS_SESSION.PSDISA(C)",
    psdkep="SYS.DBMS_SHARED_POOL.PSDKEP(C)",
    psdkepnew="SYS.DBMS_SHARED_POOL.PSDKEPNEW(C)",
    psdlcv="SYS.DBMS_LOCK.PSDLCV(C)",
    psdlgt="SYS.DBMS_LOCK.PSDLGT(C)",
    psdlrl="SYS.DBMS_LOCK.PSDLRL(C)",
    psdmsc="PLSQL infrastructure programmatic interfaces to/from system dependent misc functions",
    psdmsu="SYS.DBMS_SNAPSHOT_UTL.PSDMSU(C)",
    psdmwu="SYS.DBMS_SNAPSHOT_UTL.PSDMWU(C)",
    psdnal="PLSQL infrastructure programmatic interfaces to/from ??",
    psdnohot="SYS.DBMS_SHARED_POOL.PSDNOHOT(C)",
    psdocs="SYS.DBMS_UTILITY.PSDOCS(C)",
    psdocu="SYS.DBMS_UTILITY.PSDOCU(C)",
    psdpackagememoryutilizatio2="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATIO2(C)",
    psdpackagememoryutilization="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATION(C)",
    psdpgi="PLSQL infrastructure programmatic interfaces to/from open and close cursor support",
    psdplg="SYS.DBMS_SNAPSHOT_KKXRCA.PSDPLG(C)",
    psdpor="SYS.DBMS_UTILITY.PSDPOR(C)",
    psdpur="SYS.DBMS_SHARED_POOL.PSDPUR(C)",
    psdpurnew="SYS.DBMS_SHARED_POOL.PSDPURNEW(C)",
    psdrgs="SYS.DBMS_SNAPSHOT_UTL.PSDRGS(C)",
    psdrin="SYS.DBMS_SESSION.PSDRI(C)",
    psdsetschemadeferred="SYS.DBMS_SESSION.PSD_SET_SCHEMA_DEFERRED(C)",
    psdsire="SYS.DBMS_SESSION.PSDSIRE(C)",
    psdstfp="SYS.DBMS_DDL.PSDSTFP(C)",
    psduis="SYS.DBMS_SESSION.PSDUIS(C)",
    psdurs="SYS.DBMS_SNAPSHOT_UTL.PSDURS(C)",
    psdvalidate="SYS.DBMS_UTILITY.PSD_VALIDATE(C)",
    psdwaitonpendingdml="SYS.DBMS_UTILITY.PSD_WAIT_ON_PENDING_DML(C)",
    psdwat="SYS.DBMS_DG.PSDWAT(C)/SYS.DBMS_DRS.PSDWAT(C)/SYS.DBMS_LOCK.PSDWAT(C)/SYS.DBMS_SESSION.PSDWAT(C)",
    psf="PLSQL infrastructure instantiating plsql in library cache",
    pso="PLSQL infrastructure PLSQL PSD generic",
    psu="PLSQL infrastructure PLSQL PSD generic",
    psx="PLSQL infrastructure PLSQL PSD standalones",
    pt="PLSQL IDL",
    ptdadh="PLSQL IDL ??",
    ptf="PLSQL IDL polymorphic table functions",
    ptkin="PLSQL IDL ??",
    pu="PLSQL infrastructure",
    purge_schema="XDB.DBMS_XMLSCHEMA.PURGESCHEMA(XMLSCHEMA_LIB)",
    purgeschema="XDB.DBMS_XMLSCHEMA.PURGESCHEMA(XMLSCHEMA_LIB)",
    Put_Col="SYS.DBMS_TF.Put_Col(c)",
    PutCol="SYS.DBMS_TF.Put_Col(c)",
    q="query",
    qba="query buffer allocation",
    qbadrv="query buffer allocation create control structures",
    qbaopn="query buffer allocation create control structures",
    qc="query compile",
    qccchks="SYS.DBMS_CDC_UTILITY.CHK_SECURITY(DBMS_CDCAPI_LIB)",
    qccdtp_bumpSCN="SYS.DBMS_CDC_IMPDPV.BUMP_SCN(DBMS_CDCAPI_LIB)",
    qccdtp_bumpSequence="SYS.DBMS_CDC_IMPDPV.BUMP_SEQUENCE(DBMS_CDCAPI_LIB)",
    qccdtp_getErrorText="SYS.DBMS_CDC_DPUTIL.GET_ERROR_TEXT(DBMS_CDCAPI_LIB)",
    qccdtp_getNewHandle="SYS.DBMS_CDC_IMPDP.GET_NEW_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtp_getSubHandle="SYS.DBMS_CDC_IMPDP.GET_SUB_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtp_getTabviewObjno="SYS.DBMS_CDC_DPUTIL.GET_TABVIEW_OBJNO(DBMS_CDCAPI_LIB)",
    qccdtp_hasSynccdcTrigger="SYS.DBMS_CDC_IMPDP.HAS_SYNCCDC_TRIGGER(DBMS_CDCAPI_LIB)",
    qccdtpbumpSCN="SYS.DBMS_CDC_IMPDPV.BUMP_SCN(DBMS_CDCAPI_LIB)",
    qccdtpbumpSequence="SYS.DBMS_CDC_IMPDPV.BUMP_SEQUENCE(DBMS_CDCAPI_LIB)",
    qccdtpgetErrorText="SYS.DBMS_CDC_DPUTIL.GET_ERROR_TEXT(DBMS_CDCAPI_LIB)",
    qccdtpgetNewHandle="SYS.DBMS_CDC_IMPDP.GET_NEW_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtpgetSubHandle="SYS.DBMS_CDC_IMPDP.GET_SUB_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtpgetTabviewObjno="SYS.DBMS_CDC_DPUTIL.GET_TABVIEW_OBJNO(DBMS_CDCAPI_LIB)",
    qccdtphasSynccdcTrigger="SYS.DBMS_CDC_IMPDP.HAS_SYNCCDC_TRIGGER(DBMS_CDCAPI_LIB)",
    qccgelvl="SYS.DBMS_CDC_UTILITY.QCCGELVL(DBMS_CDCAPI_LIB)",
    qccgetee="SYS.DBMS_CDC_UTILITY.QCCGETEE(DBMS_CDCAPI_LIB)",
    qccgscn="SYS.DBMS_CDC_UTILITY.QCCGSCN(DBMS_CDCAPI_LIB)",
    qccprg_setPurgeBoundarySub="SYS.DBMS_CDC_UTILITY.SET_PURGEBOUNDARY(DBMS_CDCAPI_LIB)",
    qccprgsetPurgeBoundarySub="SYS.DBMS_CDC_UTILITY.SET_PURGEBOUNDARY(DBMS_CDCAPI_LIB)",
    qccpub_alterALSourceEP="SYS.DBMS_CDC_PUBLISH.INT_ALTER_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpub_alterChangeSetEP="SYS.DBMS_CDC_PUBLISH.INT_ALTER_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_alterHLSourceEP="SYS.DBMS_CDC_IPUBLISH.ALTER_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpub_changeTableCacheEP="SYS.DBMS_CDC_IPUBLISH.CHGTAB_CACHE(DBMS_CDCPUB_LIB)",
    qccpub_checkDistHLCompEP="SYS.DBMS_CDC_IPUBLISH.CHECK_10GR2_COMPATIBILITY(DBMS_CDCPUB_LIB)",
    qccpub_checkPubPrivEP="SYS.DBMS_CDC_IPUBLISH.CHECK_PUBLISHER_REQ(DBMS_CDCPUB_LIB)",
    qccpub_checkSubPriv="SYS.DBMS_CDC_ISUBSCRIBE.CHECK_SUB_PRIV(DBMS_CDCPUB_LIB)",
    qccpub_createALSourceEP="SYS.DBMS_CDC_PUBLISH.INT_CREATE_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpub_createChangeSetEP="SYS.DBMS_CDC_PUBLISH.INT_CREATE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_createHLSourceEP="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpub_createMapTableEP="SYS.DBMS_CDC_IPUBLISH.CREATE_MAP_TABLE(DBMS_CDCPUB_LIB)",
    qccpub_createStreamsPropEP="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpub_createTableStreamsEP="SYS.DBMS_CDC_IPUBLISH.CREATE_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpub_dropChangeSetEP="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_dropChangeSourceEP="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SOURCE(DBMS_CDCPUB_LIB)",
    qccpub_dropHLCaptureEP="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpub_dropStreamsPropEP="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpub_dropTableStreamsEP="SYS.DBMS_CDC_IPUBLISH.DROP_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpub_get_cso="SYS.DBMS_CDC_ISUBSCRIBE.GET_CSO_NAME(DBMS_CDCPUB_LIB)",
    qccpub_isTabColEncryptedEP="SYS.DBMS_CDC_IPUBLISH.IS_COLUMN_ENCRYPTED(DBMS_CDCPUB_LIB)",
    qccpub_purgeEP="SYS.DBMS_CDC_PUBLISH.PURGE(DBMS_CDCPUB_LIB)",
    qccpub_purgeLogicalSubEP="SYS.DBMS_CDC_IPUBLISH.PURGE_LOGICAL_SUB(DBMS_CDCPUB_LIB)",
    qccpub_purgeSetEP="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_purgeTableEP="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_TABLE(DBMS_CDCPUB_LIB)",
    qccpubalterALSourceEP="SYS.DBMS_CDC_PUBLISH.INT_ALTER_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpubalterChangeSetEP="SYS.DBMS_CDC_PUBLISH.INT_ALTER_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubalterHLSourceEP="SYS.DBMS_CDC_IPUBLISH.ALTER_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpubchangeTableCacheEP="SYS.DBMS_CDC_IPUBLISH.CHGTAB_CACHE(DBMS_CDCPUB_LIB)",
    qccpubcheckDistHLCompEP="SYS.DBMS_CDC_IPUBLISH.CHECK_10GR2_COMPATIBILITY(DBMS_CDCPUB_LIB)",
    qccpubcheckPubPrivEP="SYS.DBMS_CDC_IPUBLISH.CHECK_PUBLISHER_REQ(DBMS_CDCPUB_LIB)",
    qccpubcheckSubPriv="SYS.DBMS_CDC_ISUBSCRIBE.CHECK_SUB_PRIV(DBMS_CDCPUB_LIB)",
    qccpubcreateALSourceEP="SYS.DBMS_CDC_PUBLISH.INT_CREATE_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpubcreateChangeSetEP="SYS.DBMS_CDC_PUBLISH.INT_CREATE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubcreateHLSourceEP="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpubcreateMapTableEP="SYS.DBMS_CDC_IPUBLISH.CREATE_MAP_TABLE(DBMS_CDCPUB_LIB)",
    qccpubcreateStreamsPropEP="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpubcreateTableStreamsEP="SYS.DBMS_CDC_IPUBLISH.CREATE_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpubdropChangeSetEP="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubdropChangeSourceEP="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SOURCE(DBMS_CDCPUB_LIB)",
    qccpubdropHLCaptureEP="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpubdropStreamsPropEP="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpubdropTableStreamsEP="SYS.DBMS_CDC_IPUBLISH.DROP_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpubgetcso="SYS.DBMS_CDC_ISUBSCRIBE.GET_CSO_NAME(DBMS_CDCPUB_LIB)",
    qccpubisTabColEncryptedEP="SYS.DBMS_CDC_IPUBLISH.IS_COLUMN_ENCRYPTED(DBMS_CDCPUB_LIB)",
    qccpubpurgeEP="SYS.DBMS_CDC_PUBLISH.PURGE(DBMS_CDCPUB_LIB)",
    qccpubpurgeLogicalSubEP="SYS.DBMS_CDC_IPUBLISH.PURGE_LOGICAL_SUB(DBMS_CDCPUB_LIB)",
    qccpubpurgeSetEP="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubpurgeTableEP="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_TABLE(DBMS_CDCPUB_LIB)",
    qccsgnbs="SYS.DBMS_CDC_UTILITY.QCCSGNBS(DBMS_CDCAPI_LIB)",
    qccsicst="SYS.DBMS_CDC_UTILITY.CLEANUP_SYNC_TABLE(DBMS_CDCAPI_LIB)",
    qccsiero="SYS.DBMS_CDC_UTILITY.EXTEND_WINDOW_LIST(DBMS_CDCAPI_LIB)",
    qccsifst="SYS.DBMS_CDC_UTILITY.FIXUP_SYNC_TABLE(DBMS_CDCAPI_LIB)",
    qccsisst="SYS.DBMS_CDC_UTILITY.SETUP_SYNC_TABLE(DBMS_CDCAPI_LIB)",
    qcdl="query compile dictionary lookup",
    qcdldtin="query compile dictionary lookup dependency table insert",
    qcdlgui="query compile dictionary lookup get user id",
    qcdlSynonymTranslation="query compile dictionary lookup translate synonym to object",
    qcdo="query compile dictionary support for objects",
    qcdoloi="query compile dictionary support for objects load object specific information",
    qci="query compile language parser and semantic analyser",
    qciSetPlSqlCtx="query compile language parser and semantic analyser set plsql context during a compile",
    qcop="query compile parse",
    qcp="query compile parse",
    qcpi="query compile parse interim",
    qcpia="query compile parse interim arithmetic",
    qcpiaex="query compile parse interim arithmetic expression",
    qcpib="query compile parse interim boolean",
    qcpibex="query compile parse interim boolean expression",
    qcpibfa="query compile parse interim boolean factor",
    qcpibte="query compile parse interim boolean term",
    qcpicmd="query compile parse interim command",
    qcpiere="query compile parse interim expression relop expression",
    qcpierr="query compile parse interim raise error",
    qcpiidn="query compile parse interim identifier",
    qcpilcl="query compile parse interim logical clause",
    qcpilcl0="query compile parse interim logical clause (private)",
    qcpiltb="query compile parse interim lock table command",
    qcpiq="query compile parse interim query(?)",
    qcpisqt="query compile parse interim sql text",
    qcpitnam="query compile parse interim table name",
    qcpitnm="query compile parse interim table name",
    qcpl="query compile parse lexer",
    qcplgnt="query compile parse lexer get next token",
    qcplgte="query compile parse lexer group SQL text (?)",
    qcs="query compile semantic analysis (parser)",
    qcsbxl="query compile semantic analysis (parser) first round of privilege checking",
    qcsCheckPriv="query compile semantic analysis (parser) check privileges",
    qcse="query compile semantic analysis (parser) expand",
    qcsevw="query compile semantic analysis (parser) expand view",
    qcsfccc="query compile semantic analysis ??",
    qcsIsColInFro="query compile semantic analysis ??",
    qcsj="query compile semantic analysis (parser) java(?)",
    qcso="query compile semantic analysis (parser) OBJECTS",
    qcsp="query compile semantic analysis (parser) process",
    qcspafq="query compile semantic analysis (parser) process all frodefs in query block",
    qcsphnt="query compile semantic analysis (parser) process hint?",
    qcspqb="query compile semantic analysis (parser) process query blocks",
    qcspqbDescendents="query compile semantic analysis (parser) process query blocks and descendents (this processes qbc and its inner qbc's, but not its sibling (qbcnxt) query blocks)",
    qcsprfro="query compile semantic analysis (parser) process frodef",
    qcsprfro_tree="query compile semantic analysis (parser) process frodef tree (handles ANSI join frodefs)",
    qcsraic="query compile semantic analysis ??",
    qcsridn="query compile semantic analysis ??",
    qcsRslvColWithinQbc="query compile semantic analysis ??",
    qcsRslvName="query compile semantic analysis ??",
    qcsWeakColRslv="query compile semantic analysis ??",
    qct="query compile type check operations",
    qctcopn="query compile type check operations typechecks the query block and its descendant",
    qctErr932="query compile type check operations raise ORA 932 (inconsistent data types)",
    qctErrConvertDataType="query compile type check operations error routine for data type conversions",
    qcto="query compile type check operations operators",
    qctopls="query compile type check operations operators typecheck OPTPLS operator",
    qcu="query compile utility",
    qcuErr="query compile utility error",
    qcuErroep="query compile utility error oracle error position",
    qcuSigErr="query compile utility error raised by signal",
    qe="query execute",
    qeae="query execute aggregate (order by) elimination (?)",
    qeaeCn1Serial="query execute aggregate (order by) elimination (?) count function",
    qec="query execute (edit) checks",
    qecdrv="query execute (edit) checks driver",
    qecgoc="query execute (edit) checks group operand check",
    qecrlssub="query execute (edit) checks release resources subroutine",
    qecsel="query execute (edit) checks select list",
    qecvdm="query execute (edit) checks view dml",
    qee="query execute SQL execution",
    qer="query execute rowsource",
    qerae="query execute rowsource and equal",
    qeraeMax="query execute rowsource and equal max",
    qeraeMinmax="query execute rowsource and equal min/max",
    qerandv="query execute rowsource approximate NDV",
    qerandvFetch="query execute rowsource approximate NDV fetch",
    qerandvRop="query execute rowsource approximate NDV row procedure callback",
    qerba="query execute rowsource bitmap index and",
    qerbc="query execute rowsource bitmap index compaction",
    qerbi="query execute rowsource bitmap index creation",
    qerbl="query execute rowsource Bloom Filter",
    qerbm="query execute rowsource minus",
    qerbo="query execute rowsource bitmap index or",
    qerbu="query execute rowsource bitmap index unlimited or",
    qerbx="query execute rowsource bitmap index access",
    qercb="query execute rowsource connect by",
    qercbi="query execute rowsource connect by support functions",
    qerco="query execute rowsource count",
    qercoFetch="query execute rowsource count fetch",
    qerdl="query execute rowsource delete",
    qerep="query execute rowsource explosion",
    qerf="query execute rowsource first row",
    qerff="query execute rowsource first row fifo buffer",
    qerfl="query execute rowsource first row filter definition",
    qerflFetchOutside="query execute rowsource first row filter definition fetch row from a row source",
    qerfu="query execute rowsource first row update",
    qerfx="query execute rowsource first row fixed table",
    qerfxArrayMaxSize="query execute rowsource first row fixed table array max size",
    qerfxFetch="query execute rowsource first row fixed table fetch",
    qerfxGCol="query execute rowsource first row fixed table get column",
    qerfxGConId="query execute rowsource first row fixed table get container id",
    qergh="query execute rowsource hash group by",
    qerghStart="query execute rowsource hash group by start",
    qergi="query execute rowsource granule iterator (partitioning? or PX granules?)",
    qergiFetch="query execute rowsource granule iterator (partitioning? or PX granules?) Fetch procedure of PX granule Iterator Row source Rowid",
    qergr="query execute rowsource group by rollup",
    qergs="query execute rowsource group by sort",
    qergsFetch="query execute rowsource group by sort fetch",
    qergv="query execute rowsource vector aggregate",
    qerhc="query execute rowsource hash clusters",
    qerhj="query execute rowsource hash join",
    qerhjadf="query execute rowsource hash join ??",
    qerhjAllocate="query execute rowsource hash join allocate",
    qerhjFetch="query execute rowsource hash join fetch",
    qerhjInnerProbeHashTable="query execute rowsource hash join inner probe hash table",
    qerhjWalkHashBucket="query execute rowsource hash join walk a list of pointers in a hash bucket and check for a match",
    qeril="query execute rowsource in list",
    qerim="query execute rowsource index maintenance",
    qerix="query execute rowsource index",
    qerixFetchFastFullScan="query execute rowsource index index fast full scan",
    qerixFetchSkipScan="query execute rowsource index index skip scan",
    qerixtFetch="query execute rowsource index fetch operation for index range scan",
    qerjo="query execute rowsource nested loop outer",
    qerjoFetch="query execute rowsource nested loop outer fetch from join rowsource",
    qerjot="query execute rowsource nested loop outer join tunneling",
    qerjotFetch="query execute rowsource nested loop outer join tunneling fetch",
    qerjotRowProc="query execute rowsource nested loop outer join tunneling ??",
    qerle="query execute rowsource linear execution implementation",
    qerli="query execute rowsource parallel create index",
    qerlt="query execute rowsource load table",
    qerlt_olev="query execute rowsource load table out-of-line columns, evaluate and stash away",
    qerlt_snv="query execute rowsource load table stash away and new values",
    qerltc="query execute rowsource load table conventional",
    qerltcFetch="query execute rowsource load table conventional main processing function",
    qerltcFreeMemory="query execute rowsource load table conventional free memory",
    qerltcPostInsertProcessing="query execute rowsource load table conventional post single row load processing",
    qerltcSingleRowLoad="query execute rowsource load table conventional main single row insertion function",
    qerltcStart="query execute rowsource load table conventional initialising function",
    qerltFetch="query execute rowsource load table fetch",
    qerltRop="query execute rowsource load table row procedure callback",
    qerns="query execute rowsource group by nosort",
    qeroc="query execute rowsource object collection iterator",
    qerocStart="query execute rowsource object collection iterator create a collection iterator row-source to iterate",
    qeroi="query execute rowsource extensibel indexing query component",
    qeroifcc="query execute rowsource extensibel indexing query component fast call close",
    qeroifcsu="query execute rowsource extensibel indexing query component fast call switch user",
    qeroiirc="query execute rowsource extensibel indexing query component invoke rowsource close",
    qerpa="query execute rowsource partition",
    qerpf="query execute rowsource query execution prefetch",
    qerpfFetch="query execute rowsource query execution prefetch fetch",
    qerpsel="query execute rowsource parallel execution PX selector",
    qerptf="query execute rowsource polymorphic table function execution",
    qerpx="query execute rowsource parallel execution",
    qerpxFetch="query execute rowsource parallel execution fetch method for parallelizer row source",
    qerpxSlaveFetch="query execute rowsource parallel execution fetch method row source",
    qerpxStart="query execute rowsource parallel execution start",
    qerrc="query execute rowsource vector translate",
    qerrm="query execute rowsource remote",
    qersc="query execute rowsource AQP",
    qerse="query execute rowsource set implementation",
    qerso="query execute rowsource sort",
    qersoFetch="query execute rowsource sort fetch from from a sort row source",
    qersoProcessULS="query execute rowsource sort process underlying row source",
    qersq="query execute rowsource sequence number",
    qerst="query execute rowsource statistics",
    qerstFetch="query execute rowsource statistics row source fetch",
    qertb="query execute rowsource table access",
    qertbFetch="query execute rowsource table access fetch",
    qertbFetchByRowId="query execute rowsource table access fetch using inderlying row source fetch by rowid or cluster key",
    qertbItOpen="query execute rowsource table access ??",
    qertbSaveMethod="query execute rowsource table access save IO request for batching(?)",
    qertbStart="query execute rowsource table access ??",
    qertq="query execute rowsource table queue (px)",
    qertqoFetch="query execute rowsource table queue (px) output table queue fetch method",
    qertqoInitRowDesc="query execute rowsource table queue (px) use tqo row vector to determine the partitioning columns",
    qerua="query execute rowsource union all",
    qeruaFetch="query execute rowsource union all fetch",
    qeruaStart="query execute rowsource union all start",
    qerup="query execute rowsource update",
    qerupFetch="query execute rowsource update fetch",
    qerus="query execute rowsource upsert",
    qerusAllocateX="query execute rowsource upsert allocate row source",
    qervw="query execute rowsource view",
    qervwFetch="query execute rowsource view fetch",
    qervwRowProcedure="query execute rowsource view row procedure",
    qerwn="query execute rowsource window",
    qerwnFetch="query execute rowsource window fetch",
    qerxj="query execute rowsource json",
    qerxl="query execute rowsource vector translate",
    qerxp="query execute rowsource XDB query",
    qerxt="query execute rowsource external table",
    qerxtAllocate="query execute rowsource external table row source allocate",
    qes="query execute services",
    qesaAggNonDist="query execute services create/compute non-distinct aggregates",
    qesaPackCols="query execute services pack columns into queue buffer",
    qesbl="query execute services bloom filter",
    qesblAlo="query execute services bloom filter allocate memory",
    qesblGetFilter="query execute services bloom filter get filter",
    qesblStart="query execute services bloom filter start",
    qesdp="query execute services adaptive features?",
    qesdpi="query execute services adaptive features? internationalisation (timezones)?",
    qesdpiBeginPrepare="SYS.DBMS_DST.BEGIN_PREPARE_KERNEL(DBMS_DST_LIB)",
    qesdpiBeginUpgrade="SYS.DBMS_DST.BEGIN_UPGRADE_KERNEL(DBMS_DST_LIB)",
    qesdpiChkPrivs="SYS.DBMS_DST.CHECK_PRIVILEGES(DBMS_DST_LIB)",
    qesdpiChkTZVer="SYS.DBMS_DST.CHECK_TZ_VERSION(DBMS_DST_LIB)",
    qesdpiEndPrepare="SYS.DBMS_DST.END_PREPARE_KERNEL(DBMS_DST_LIB)",
    qesdpiEndUpgrade="SYS.DBMS_DST.END_UPGRADE_KERNEL(DBMS_DST_LIB)",
    qesdpiFindAffTabs="SYS.DBMS_DST.FIND_AFFECTED_TABLES_KERNEL(DBMS_DST_LIB)",
    qesdpiGetAndLockDSTProp="SYS.DBMS_DST.GET_AND_LOCK_DST_PROPERTY(DBMS_DST_LIB)",
    qesdpiGetLatestTZVer="SYS.DBMS_DST.GET_LATEST_TIMEZONE_VERSION(DBMS_DST_LIB)",
    qesdpiGetSGAUpStateTyp="SYS.DBMS_DST.SGA_UPGRADE_STATE(DBMS_DST_LIB)",
    qesdpiLoadSecTZ="SYS.DBMS_DST.LOAD_SECONDARY_KERNEL(DBMS_DST_LIB)",
    qesdpiUnLoadSecTZ="SYS.DBMS_DST.UNLOAD_SECONDARY_KERNEL(DBMS_DST_LIB)",
    qesdpiUpgradeTable="SYS.DBMS_DST.UPGRADE_TABLE_KERNEL(DBMS_DST_LIB)",
    qesgv="query execute services vector aggregate",
    qesltc="query execute services load table conventional",
    qesma="query execute services partitioning",
    qesmaIsInterval="query execute services partitioning ??",
    qesmm="query execute services memory manager (pga)",
    qesmmCGetCurSize="query execute services memory manager (pga) ??",
    qesmmIPgaFreeCb="query execute services memory manager (pga) pga free callback",
    qespc="query execute services partitioning",
    qesrc="query execute services result cache",
    qesrcCM="query execute services result cache commit?",
    qesrcPS_BKDrv="SYS.DBMS_RESULT_CACHE.BK_DRV(DBMS_RC_LIB)",
    qesrcPS_BKLst="SYS.DBMS_RESULT_CACHE.BK_LST(DBMS_RC_LIB)",
    qesrcPS_Byp="SYS.DBMS_RESULT_CACHE.BYPASS_(DBMS_RC_LIB)",
    qesrcPS_Del="SYS.DBMS_RESULT_CACHE.DELETE_DEPENDENCY_(DBMS_RC_LIB)",
    qesrcPS_Flush="SYS.DBMS_RESULT_CACHE.FLUSH_(DBMS_RC_LIB)",
    qesrcPS_Inv="SYS.DBMS_RESULT_CACHE.INVALIDATE_(DBMS_RC_LIB)",
    qesrcPS_InvObj0="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT0(DBMS_RC_LIB)",
    qesrcPS_InvObj1="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT1(DBMS_RC_LIB)",
    qesrcPS_MemSta="SYS.DBMS_RESULT_CACHE.MEMSTA(DBMS_RC_LIB)",
    qesrcPS_MemSum="SYS.DBMS_RESULT_CACHE.MEMSUMMARY(DBMS_RC_LIB)",
    qesrcPS_NspCnt="SYS.DBMS_RESULT_CACHE.NAMESPACES(DBMS_RC_LIB)",
    qesrcPS_ReliesOn="SYS.DBMS_RESULT_CACHE_INTERNAL.RELIES_ON(DBMS_RC_LIB)",
    qesrcPS_Status="SYS.DBMS_RESULT_CACHE.STATUS_(DBMS_RC_LIB)",
    qesrcPSBKDrv="SYS.DBMS_RESULT_CACHE.BK_DRV(DBMS_RC_LIB)",
    qesrcPSBKLst="SYS.DBMS_RESULT_CACHE.BK_LST(DBMS_RC_LIB)",
    qesrcPSByp="SYS.DBMS_RESULT_CACHE.BYPASS_(DBMS_RC_LIB)",
    qesrcPSDel="SYS.DBMS_RESULT_CACHE.DELETE_DEPENDENCY_(DBMS_RC_LIB)",
    qesrcPSFlush="SYS.DBMS_RESULT_CACHE.FLUSH_(DBMS_RC_LIB)",
    qesrcPSInv="SYS.DBMS_RESULT_CACHE.INVALIDATE_(DBMS_RC_LIB)",
    qesrcPSInvObj0="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT0(DBMS_RC_LIB)",
    qesrcPSInvObj1="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT1(DBMS_RC_LIB)",
    qesrcPSMemSta="SYS.DBMS_RESULT_CACHE.MEMSTA(DBMS_RC_LIB)",
    qesrcPSMemSum="SYS.DBMS_RESULT_CACHE.MEMSUMMARY(DBMS_RC_LIB)",
    qesrcPSNspCnt="SYS.DBMS_RESULT_CACHE.NAMESPACES(DBMS_RC_LIB)",
    qesrcPSReliesOn="SYS.DBMS_RESULT_CACHE_INTERNAL.RELIES_ON(DBMS_RC_LIB)",
    qesrcPSStatus="SYS.DBMS_RESULT_CACHE.STATUS_(DBMS_RC_LIB)",
    qesSageEnabled="query execute services test if exadata storage servers are used",
    qesst="query execute services statistic functions",
    qesstPIncBeta="SYS.DBMS_STAT_FUNCS_AUX.INC_BETA_CALLOUT(DBMS_STAT_FUNCS_AUX_LIB)",
    qesstPIncGamma="SYS.DBMS_STAT_FUNCS.INC_GAMMA_CALLOUT(DBMS_STAT_FUNCS_LIB)",
    qesstPIncGammaC="SYS.DBMS_STAT_FUNCS_AUX.INC_GAMMA_C_CALLOUT(DBMS_STAT_FUNCS_AUX_LIB)",
    qesstPKSSig="SYS.DBMS_STAT_FUNCS.SIG_KS_CALLOUT(DBMS_STAT_FUNCS_LIB)",
    qesxl="query execute services vector translate",
    qesxlp="query execute services vector translate PX",
    qjsn="query json",
    qk="query kernel",
    qka="query kernel allocation",
    qkadrv="query kernel allocation allocate query structures",
    qkadrv2="query kernel allocation allocate query structures 2",
    qkadrv2Post="query kernel allocation allocate query structures 2 post processing",
    qkaffsindex="query kernel allocation fast full scan index",
    qkagby="query kernel allocation group by",
    qkajoi="query kernel allocation join processing",
    qkanindex="query kernel allocation analyzes the usage of the argument non-clustered index",
    qkaqkn="query kernel allocation row source allocation",
    qkaset="query kernel allocation set expression",
    qkatab="query kernel allocation runtime allocation for base table row sources",
    qkatrv="query kernel allocation traverse set expression tree",
    qkauna="query kernel allocation union or union all",
    qke="query kernel expressions",
    qkexl="query kernel expressions vector translate",
    qkk="query kernel allocate",
    qkn="query kernel allocate",
    qknr="query kernel allocate rowsets setup",
    qks="query kernel sql",
    qks3t="query kernel sql temp table transformation",
    qksan="query kernel sql analyze",
    qksbg="query kernel sql bind (variable) management(?)",
    qksbgGetDefault_Callout="SYS.DBMS_FIX_CONTROL_PERSISTENCE.GET_DEFAULT(DBMS_FCP_LIB)",
    qksbgGetDefaultCallout="SYS.DBMS_FIX_CONTROL_PERSISTENCE.GET_DEFAULT(DBMS_FCP_LIB)",
    qksce="query kernel sql cursor evaluation",
    qksctx="query kernel sql MPGE",
    qksds="query kernel sql Dynamic Sampling Services (ADS)",
    qksdsCheckPreds="query kernel sql Dynamic Sampling Services (ADS) check and find usable predicates",
    qksdsDumpResult="query kernel sql Dynamic Sampling Services (ADS) dump results (to trace file); trace[ADS]",
    qksdsExecute="query kernel sql Dynamic Sampling Services (ADS) execute",
    qksdsExeStmt="query kernel sql Dynamic Sampling Services (ADS) execute sql for actual sampling",
    qksdsFindSampleTable="query kernel sql Dynamic Sampling Services (ADS) find tables to sample",
    qksdsInitCtx="query kernel sql Dynamic Sampling Services (ADS) start and initialize ADS",
    qksfroIsFastDual="query kernel sql frolist is fast dual",
    qksht="query kernel sql hints",
    qksmm="query kernel sql compiler memory management",
    qksmms="query kernel sql compiler memory management simulation",
    qksop="query kernel sql compilter operand processing",
    qkspm="query kernel sql plan management",
    qksptf="query kernel sql polymorphic table functions compilation",
    qksqb="query kernel sql Query compilation for query blocks",
    qksqbApplyToQbc="query kernel sql Query compilation for query blocks apply to QB",
    qksqbApplyToQbcLoc="query kernel sql Query compilation for query blocks apply to QB local implementation",
    qksqbCreateName="query kernel sql Query compilation for query blocks create name",
    qksqbGenerateName="query kernel sql Query compilation for query blocks generate name",
    qksqbRegister="query kernel sql Query compilation for query blocks register",
    qksrc="query kernel sql result cache",
    qkssa="query kernel sql sampling",
    qksSage="query kernel sql exadata",
    qkssm="query kernel sql string mapping",
    qksvc="query kernel sql Virtual Column",
    qkswc="query kernel sql with clause",
    qkswcDriver="query kernel sql with clause Recursively traverse through all query blocks",
    qkx="query kernel SQL code generator",
    qkxa="query kernel SQL code generator annotations",
    qm="query XDB",
    qmcx="query XDB CSX",
    qmcxd="query XDB CSX DECODING",
    qmcxe="query XDB CSX ENCODING",
    qmcxm="query XDB CSX ENCODING",
    qme="query XDB repository",
    qmevsCheckin="XDB.DBMS_XDB_VERSION.checkin_int(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsCheckout="XDB.DBMS_XDB_VERSION.checkout(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsCreateBranch="XDB.DBMS_XDB_VERSION.CreateBranch(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsCreateRealWS="XDB.DBMS_XDB_VERSION.CreateRealWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsCreateVCR="XDB.DBMS_XDB_VERSION.CreateVCR(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsCreateVirtualWS="XDB.DBMS_XDB_VERSION.CreateVirtualWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsDeleteVerHist="XDB.DBMS_XDB_VERSION.DeleteVersionHistory(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsDeleteWS="XDB.DBMS_XDB_VERSION.DeleteWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsDelVersion="XDB.DBMS_XDB_VERSION.DeleteVersion(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetCtsBlobByResId="XDB.DBMS_XDB_VERSION.GetContentsBlobByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetCtsClobByResId="XDB.DBMS_XDB_VERSION.GetContentsClobByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetCtsXmlByResId="XDB.DBMS_XDB_VERSION.GetContentsXmlByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetPredsByResId="XDB.DBMS_XDB_VERSION.GetPredsByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetResByResId="XDB.DBMS_XDB_VERSION.GetResourceByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetResID="XDB.DBMS_XDB_VERSION.getresid(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetSuccsByResId="XDB.DBMS_XDB_VERSION.GetSuccsByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetVerHist="XDB.DBMS_XDB_VERSION.GetVersionHistory(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetVerHistID="XDB.DBMS_XDB_VERSION.GetVersionHistoryID(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetVerHistRoot="XDB.DBMS_XDB_VERSION.GetVersionHistoryRoot(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsGetWS="XDB.DBMS_XDB_VERSION.GetWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsIsResCheckedOut="XDB.DBMS_XDB_VERSION.ischeckedout(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsMakeShared="XDB.DBMS_XDB_VERSION.MakeShared(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsMakeVersioned="XDB.DBMS_XDB_VERSION.makeversioned_int(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsPublishWS="XDB.DBMS_XDB_VERSION.PublishWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsSetWS="XDB.DBMS_XDB_VERSION.SetWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsUncheckout="XDB.DBMS_XDB_VERSION.uncheckout_int(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsUnPublishWS="XDB.DBMS_XDB_VERSION.UnPublishWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsUpdateVCR="XDB.DBMS_XDB_VERSION.UpdateVCRVersion(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsUpdateWS="XDB.DBMS_XDB_VERSION.UpdateWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmf="query XDB ftp server",
    qmh="query XDB protocols",
    qmix_dateindex="XDB.DBMS_XMLINDEX0.CREATEDATEINDEX(XDB.XMLINDEX_LIB)",
    qmix_drop_param="XDB.DBMS_XMLINDEX.DROPPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_get_param="XDB.DBMS_XMLINDEX.GETPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_get_paramname="XDB.DBMS_XMLINDEX0.GETPARAMETERNAME(XDB.XMLINDEX_LIB)",
    qmix_gettabnames="XDB.XMLINDEXMETHODS.ODCIGetInterfaces(XDB.XMLINDEX_LIB)",
    qmix_loadclose="XDB.XMLINDEXLOAD_IMP_T.ODCITableStart(XDB.XMLINDEX_LIB)",
    qmix_modify_param="XDB.DBMS_XMLINDEX.MODIFYPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_numberindex="XDB.DBMS_XMLINDEX0.CREATENUMBERINDEX(XDB.XMLINDEX_LIB)",
    qmix_process_pending="XDB.DBMS_XMLINDEX.PROCESS_PENDING_INT(XDB.XMLINDEX_LIB)",
    qmix_register_param="XDB.DBMS_XMLINDEX.REGISTERPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_reload_sxi_leaf="XDB.DBMS_XMLINDEX0.RELOAD_SXI_LEAF(XDB.XMLINDEX_LIB)",
    qmix_sync_index="XDB.DBMS_XMLINDEX.SYNCINDEX(XDB.XMLINDEX_LIB)",
    qmix_tableutils="XDB.XIMETADATA_PKG.utlgettablenames(XDB.XMLINDEX_LIB)",
    qmix_upd_partmeta="XDB.XMLINDEXMETHODS.ODCIIndexUpdPartMetadata(XDB.XMLINDEX_LIB)",
    qmix_upd_partstats="XDB.XMLIDXSTATSMETHODS.cost(XDB.XMLINDEX_LIB)",
    qmix_xmetadata="XDB.XIMETADATA_PKG.getIndexMetadataCallback(XDB.XMLINDEX_LIB)",
    qmixdateindex="XDB.DBMS_XMLINDEX0.CREATEDATEINDEX(XDB.XMLINDEX_LIB)",
    qmixdropparam="XDB.DBMS_XMLINDEX.DROPPARAMETER(XDB.XMLINDEX_LIB)",
    qmixgetparam="XDB.DBMS_XMLINDEX.GETPARAMETER(XDB.XMLINDEX_LIB)",
    qmixgetparamname="XDB.DBMS_XMLINDEX0.GETPARAMETERNAME(XDB.XMLINDEX_LIB)",
    qmixgettabnames="XDB.XMLINDEXMETHODS.ODCIGetInterfaces(XDB.XMLINDEX_LIB)",
    qmixloadclose="XDB.XMLINDEXLOAD_IMP_T.ODCITableStart(XDB.XMLINDEX_LIB)",
    qmixmodifyparam="XDB.DBMS_XMLINDEX.MODIFYPARAMETER(XDB.XMLINDEX_LIB)",
    qmixnumberindex="XDB.DBMS_XMLINDEX0.CREATENUMBERINDEX(XDB.XMLINDEX_LIB)",
    qmixprocesspending="XDB.DBMS_XMLINDEX.PROCESS_PENDING_INT(XDB.XMLINDEX_LIB)",
    qmixq="query XDB XMLIndex",
    qmixregisterparam="XDB.DBMS_XMLINDEX.REGISTERPARAMETER(XDB.XMLINDEX_LIB)",
    qmixreloadsxileaf="XDB.DBMS_XMLINDEX0.RELOAD_SXI_LEAF(XDB.XMLINDEX_LIB)",
    qmixsyncindex="XDB.DBMS_XMLINDEX.SYNCINDEX(XDB.XMLINDEX_LIB)",
    qmixtableutils="XDB.XIMETADATA_PKG.utlgettablenames(XDB.XMLINDEX_LIB)",
    qmixupdpartmeta="XDB.XMLINDEXMETHODS.ODCIIndexUpdPartMetadata(XDB.XMLINDEX_LIB)",
    qmixupdpartstats="XDB.XMLIDXSTATSMETHODS.cost(XDB.XMLINDEX_LIB)",
    qmixxmetadata="XDB.XIMETADATA_PKG.getIndexMetadataCallback(XDB.XMLINDEX_LIB)",
    qmn="query XDB protocols",
    qmpxCreateCrossConFldr="XDB.DBMS_XDBUTIL_INT.CREATECROSSCONFOLDER(DBMS_XDB_LIB)",
    qmpxGetWalletOsdPathExt="XDB.DBMS_XDB_ADMIN.GETWALLETDEFAULTOSDPATH(DBMS_XDB_LIB)",
    qmpxInstallWalletExt="XDB.DBMS_XDB_ADMIN.INSTALLDEFAULTWALLETEXT(DBMS_XDB_LIB)",
    qmr="query XDB hierarchical resolver",
    qms="query XDB XOB storage and retrieval",
    qmtm="query XDB CSX tokenmgr",
    qmudxClearBindValues="SYS.DBMS_XMLGEN.CLEARBINDVALUES(DBMS_XMLGEN_LIB)",
    qmudxClose="SYS.DBMS_XMLGEN.CLOSECONTEXT(DBMS_XMLGEN_LIB)",
    qmudxConvert_clob="SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxConvert_varchar2="SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxConvertclob="SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxConvertvarchar2="SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxGetCtx="SYS.DBMS_XMLGEN.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    qmudxGetCtxFromHQ="SYS.DBMS_XMLGEN.NEWCONTEXTFROMHIERARCHY(DBMS_XMLGEN_LIB)",
    qmudxGetCursorCtx="SYS.DBMS_XMLGEN.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    qmudxGetNumRowsProcessed="SYS.DBMS_XMLGEN.GETNUMROWSPROCESSED(DBMS_XMLGEN_LIB)",
    qmudxGetXMLClob="SYS.DBMS_XMLGEN.GETXMLWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxGetXMLType="SYS.DBMS_XMLGEN.GETXMLTYPEWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxGetXMLTypePro="SYS.DBMS_XMLGEN.GETXMLTYPEPROWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxIndWidth="SYS.DBMS_XMLGEN.SETINDENTATIONWIDTH(DBMS_XMLGEN_LIB)",
    qmudxPrettyPrint="SYS.DBMS_XMLGEN.SETPRETTYPRINTING(DBMS_XMLGEN_LIB)",
    qmudxRemoveXSLTParam="SYS.DBMS_XMLGEN.REMOVEXSLTPARAM(DBMS_XMLGEN_LIB)",
    qmudxRestartQuery="SYS.DBMS_XMLGEN.RESTARTQUERY(DBMS_XMLGEN_LIB)",
    qmudxSetBindValue="SYS.DBMS_XMLGEN.SETBINDVALUE(DBMS_XMLGEN_LIB)",
    qmudxSetChkInvdChrs="SYS.DBMS_XMLGEN.SETCHECKINVALIDCHARS(DBMS_XMLGEN_LIB)",
    qmudxSetMaxRows="SYS.DBMS_XMLGEN.SETMAXROWS(DBMS_XMLGEN_LIB)",
    qmudxSetNullHandling="SYS.DBMS_XMLGEN.SETNULLHANDLING(DBMS_XMLGEN_LIB)",
    qmudxSetReplSplChars="SYS.DBMS_XMLGEN.SETCONVERTSPECIALCHARS(DBMS_XMLGEN_LIB)",
    qmudxSetRowSetTagName="SYS.DBMS_XMLGEN.SETROWSETTAG(DBMS_XMLGEN_LIB)",
    qmudxSetRowTagName="SYS.DBMS_XMLGEN.SETROWTAG(DBMS_XMLGEN_LIB)",
    qmudxSetSkipRows="SYS.DBMS_XMLGEN.SETSKIPROWS(DBMS_XMLGEN_LIB)",
    qmudxSetXSLT="SYS.DBMS_XMLGEN.SETXSLT(DBMS_XMLGEN_LIB)",
    qmudxSetXSLTParam="SYS.DBMS_XMLGEN.SETXSLTPARAM(DBMS_XMLGEN_LIB)",
    qmudxUseItemTagsForColl="SYS.DBMS_XMLGEN.USEITEMTAGSFORCOLL(DBMS_XMLGEN_LIB)",
    qmurdGetBlob="SYS.DBURITYPE.GETBLOB(DBURI_LIB)",
    qmurdGetClob="SYS.DBURITYPE.GETCLOB(DBURI_LIB)",
    qmurdXDBGetBlob="SYS.XDBURITYPE.GETBLOB(DBURI_LIB)",
    qmurdXDBGetClob="SYS.XDBURITYPE.GETCLOB(DBURI_LIB)",
    qmurdXDBGetContentType="SYS.XDBURITYPE.GETCONTENTTYPE(DBURI_LIB)",
    qmurdXDBGetResource="SYS.XDBURITYPE.GETRESOURCE(DBURI_LIB)",
    qmurdXDBGetXMLType="SYS.XDBURITYPE.GETXML(DBURI_LIB)",
    qmurs="query XDB handling URIs",
    qmx="query XDB XML Objects",
    qmxiManifestVArray="query XDB xml support ??",
    qmxp="query XDB XML Objects CSX print",
    qmxq="query XDB XML Objects XML",
    qmxrs="query XDB XML Objects CSX print",
    qmxsax="query XDB XML Objects SAX processing",
    qmxt="query XDB XML Objects XML",
    qmxtc="query XDB XML Objects XML ddl and other operator support sql XML support",
    qmxtcDxsClearKeyCols="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.CLEARKEYCOLUMNLIST",
    qmxtcDxsClearUpdCols="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.CLEARUPDATECOLUMNLIST",
    qmxtcDxsClose="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.CLOSECONTEXT",
    qmxtcDxsDeleteC="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.DELETEXML",
    qmxtcDxsDeleteV="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.DELETEXML",
    qmxtcDxsGetCtx="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.NEWCONTEXT",
    qmxtcDxsInsertC="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.INSERTXML",
    qmxtcDxsInsertV="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.INSERTXML",
    qmxtcDxsSetKeyCol="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETKEYCOLUMN",
    qmxtcDxsSetPreserveWS="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETPRESERVEWHITESPACE",
    qmxtcDxsSetRowTagName="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETROWTAG",
    qmxtcDxsSetUpdCol="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETUPDATECOLUMN",
    qmxtcDxsUpdateC="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.UPDATEXML",
    qmxtcDxsUpdateV="query XDB XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.UPDATEXML",
    qmxtgx="query XDB XML Objects XML ADT to XML transformation",
    qmxtra="query XDB XML Objects XML query",
    qmxtri="query XDB XML Objects XML schema/XMLindex",
    qmxtsk="query XDB XML Objects XML xmltype support functions",
    qo="query optimizer",
    qolclrevu="SYS.OUTLN_PKG.CLEAR_USED(DBMS_OUTLN_LIB)",
    qolgenol="SYS.OUTLN_PKG_INTERNAL.I_CREATE_OUTLINE_CALLOUT(DBMS_OUTLN_LIB)",
    qolgensig="SYS.DBMS_SQLTCB_INTERNAL.I_TCB_GENERATE_SIGNATURE(DBMS_OUTLN_LIB)",
    qolrfcache="SYS.OUTLN_PKG.REFRESH_OUTLINE_CACHE(DBMS_OUTLN_LIB)",
    qolsigupd="SYS.OUTLN_PKG.UPDATE_SIGNATURES(DBMS_OUTLN_LIB)",
    qolsigxct="SYS.OUTLN_PKG.EXACT_TEXT_SIGNATURES(DBMS_OUTLN_LIB)",
    qos="query optimizer statistics",
    qosadv="query optimizer statistics SQL optimizer statistics advisor",
    qosadvExecuteTaskDrv="SYS.DBMS_STATS_ADVISOR.I_EXECUTE_TASK_CALLOUT(DBMS_STATS_LIB)",
    qosd="query optimizer statistics sql plan directive",
    qosdAlterSPD="SYS.DBMS_SPD_INTERNAL.ALTER_SPD_CALLOUT(DBMS_SPD_LIB)",
    qosdCheckWindowMode="SYS.DBMS_STATS_INTERNAL.CHECK_WINDOW_CAPTURE_MODE(DBMS_STATS_LIB)",
    qosdDelExprStats="SYS.DBMS_STATS_INTERNAL.DELETE_EXPR_STATS_CALLOUT(DBMS_STATS_LIB)",
    qosdDSResExternal="SYS.DBMS_SPD_INTERNAL.DS_RES_EXTERNAL(DBMS_SPD_LIB)",
    qosdFlushSPD="SYS.DBMS_SPD_INTERNAL.FLUSH_SPD_CALLOUT(DBMS_SPD_LIB)",
    qosdgelc="SYS.DBMS_STATS_INTERNAL.GET_EXP_LIST_CALLOUT(DBMS_STATS_LIB)",
    qosdGetFObjKeyFromStmt="query optimizer statistics sql plan directive get stat/DS(?) results using sql text (stmt)?",
    qosdImportSPD="SYS.DBMS_SPD_INTERNAL.IMPORT_SPD_CALLOUT(DBMS_SPD_LIB)",
    qosdInitDirCtx="query optimizer statistics sql plan directive initialize directives context",
    qosdUB8ToSqlId="SYS.DBMS_SPD_INTERNAL.UB8_TO_SQLID(DBMS_SPD_LIB)",
    qosdVecbit="SYS.DBMS_SPD_INTERNAL.VECBIT(DBMS_SPD_LIB)",
    qoshgshrc="SYS.DBMS_STATS.GET_STATS_RETENTION_CALLOUT(DBMS_STATS_LIB)",
    qoshposc="SYS.DBMS_STATS_INTERNAL.PURGE_OLD_STATS_CALLOUT(DBMS_STATS_LIB)",
    qoshrsoc="SYS.DBMS_STATS.REPORTING_MAN_LOG_OP(DBMS_STATS_LIB)",
    qoshrstc="SYS.DBMS_STATS.REPORTING_MAN_LOG_TASK_CALLOUT(DBMS_STATS_LIB)",
    qoshsavsys="SYS.DBMS_STATS.SAVE_SYSTEM_STATS(DBMS_STATS_LIB)",
    qoshsshrc="SYS.DBMS_STATS.SET_STATS_RETENTION_CALLOUT(DBMS_STATS_LIB)",
    qosp_odci_inprogress="SYS.DBMS_STATS.ODCI_INPROGRESS(DBMS_STATS_LIB)",
    qosp_odci_reset_ugafsc="SYS.DBMS_STATS.ODCI_RESET_UGAFSC(DBMS_STATS_LIB)",
    qosp_odci_set_privs="SYS.DBMS_STATS.ODCI_SET_PRIVS(DBMS_STATS_LIB)",
    qosp_odci_set_ugafsc="SYS.DBMS_STATS.ODCI_SET_UGAFSC(DBMS_STATS_LIB)",
    qosp_odci_set_ugaqxob="SYS.DBMS_STATS.ODCI_SET_UGAQXOB(DBMS_STATS_LIB)",
    qospAggregateIndexStats="SYS.DBMS_STATS_INTERNAL.AGG_IND_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospCheckMMONPolicyViolation="SYS.DBMS_STATS_ADVISOR.I_CHKMPOLICY_VIOLATION_CALLOUT(DBMS_STATS_LIB)",
    qospClearMonModInfo="SYS.DBMS_STATS.CLEARMONMODINFO(DBMS_STATS_LIB)",
    qospClearStStatus="SYS.DBMS_STATS_INTERNAL.CLEAR_ST_STATUS_CALLOUT(DBMS_STATS_LIB)",
    qospColNormalConv2Raw="SYS.DBMS_STATS_INTERNAL.NORM_AND_CONV(DBMS_STATS_LIB)",
    qospdefdop="SYS.DBMS_STATS_INTERNAL.GET_DEFAULT_DOP(DBMS_STATS_LIB)",
    qospDelRealtimeColSt="SYS.DBMS_STATS.DELETE_REALTIME_COLSTATS(DBMS_STATS_LIB)",
    qospDelRealtimeTabSt="SYS.DBMS_STATS.DELETE_REALTIME_TABSTATS(DBMS_STATS_LIB)",
    qospdvexempt="SYS.DBMS_STATS_INTERNAL_AGG.SET_DVSECURITY_MODE(DBMS_STATS_LIB)/SYS.DBMS_STATS_INTERNAL.SET_DVSECURITY_MODE(DBMS_STATS_LIB)/SYS.DBMS_STATS.SET_DVSECURITY_MODE(DBMS_STATS_LIB)",
    qospfcl="SYS.DBMS_STATS.FIXED_COL_LENGTHS_CALLOUT(DBMS_STATS_LIB)",
    qospFlushMonModInfo="SYS.DBMS_STATS.FLUSHMONMODINFO(DBMS_STATS_LIB)",
    qospfreq="SYS.DBMS_STATS.GET_CPU_FREQUENCY_CALLOUT(DBMS_STATS_LIB)",
    qospGetCurRows="SYS.DBMS_STATS_ADVISOR.I_GET_CURRENT_ROWS_CALLOUT(DBMS_STATS_LIB)",
    qospGetExtnName="SYS.DBMS_STATS.GET_EXTENSION_NAME_CALLOUT(DBMS_STATS_LIB)",
    qospGetNoworkStat="SYS.DBMS_STATS.GET_NOWORK_CALLOUT(DBMS_STATS_LIB)",
    qospGetScn="SYS.DBMS_STATS.GET_CURRENT_SCN_CALLOUT(DBMS_STATS_LIB)",
    qospgetthr="SYS.DBMS_STATS.GET_THROUGHPUT_CALLOUT(DBMS_STATS_LIB)",
    qospgev="SYS.DBMS_STATS.GET_EVENT_LEVEL(DBMS_STATS_LIB)",
    qospgflg="SYS.DBMS_STATS.QOSPSETGFLG(DBMS_STATS_LIB)",
    qospgibc="SYS.DBMS_STATS_INTERNAL.GET_INDEX_BLOCK_COUNT_CALLOUT(DBMS_STATS_LIB)",
    qospgmveqCallBack="SYS.DBMS_STATS_INTERNAL.GET_MV_ENQUE(DBMS_STATS_LIB)",
    qospgtbc="SYS.DBMS_STATS_INTERNAL.GET_TABLE_BLOCK_COUNT_CALLOUT(DBMS_STATS_LIB)",
    qosphnc="SYS.DBMS_STATS.NORM_AND_CONV_HISTOGRAMS(DBMS_STATS_LIB)",
    qospmfal="SYS.DBMS_STATS.FLUSH_ALL_MON_INFO(DBMS_STATS_LIB)",
    qospmfcuo="SYS.DBMS_STATS.FLUSH_OBJ_COLU_INFO(DBMS_STATS_LIB)",
    qospMinMaxPartCol="SYS.DBMS_STATS.GET_PART_MINMAX(DBMS_STATS_LIB)",
    qospNormalizeDensity="SYS.DBMS_STATS.NORMALIZE_DENSITY_CALLOUT(DBMS_STATS_LIB)",
    qospodciinprogress="SYS.DBMS_STATS.ODCI_INPROGRESS(DBMS_STATS_LIB)",
    qospodciresetugafsc="SYS.DBMS_STATS.ODCI_RESET_UGAFSC(DBMS_STATS_LIB)",
    qospodcisetprivs="SYS.DBMS_STATS.ODCI_SET_PRIVS(DBMS_STATS_LIB)",
    qospodcisetugafsc="SYS.DBMS_STATS.ODCI_SET_UGAFSC(DBMS_STATS_LIB)",
    qospodcisetugaqxob="SYS.DBMS_STATS.ODCI_SET_UGAQXOB(DBMS_STATS_LIB)",
    qosppgaflg="SYS.DBMS_STATS_INTERNAL.QOSPSETPGAFLG(DBMS_STATS_LIB)",
    qospprv="SYS.DBMS_STATS_ADVISOR.I_CHECK_PRIVS_CALLOUT(DBMS_STATS_LIB)/SYS.DBMS_STATS.CHECK_PRIVS_CALLOUT(DBMS_STATS_LIB)",
    qospRecColUsage="SYS.DBMS_STATS.REC_COLU_INFO(DBMS_STATS_LIB)",
    qospresetthr="SYS.DBMS_STATS.RESET_THROUGHPUT_INFO(DBMS_STATS_LIB)",
    qospscs="SYS.DBMS_STATS.SET_COLUMN_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospsec="SYS.DBMS_STATS.SET_SECURITY_MODE(DBMS_STATS_LIB)",
    qospSetRealtimeColSt="SYS.DBMS_STATS.SET_REALTIME_COLSTATS(DBMS_STATS_LIB)",
    qospSetRealtimeTabSt="SYS.DBMS_STATS.SET_REALTIME_TABSTATS(DBMS_STATS_LIB)",
    qospsgaflg="SYS.DBMS_STATS_INTERNAL.QOSPSETSGAFLG(DBMS_STATS_LIB)",
    qospsis="SYS.DBMS_STATS.SET_INDEX_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospslck="SYS.DBMS_STATS.SET_LOCK_MODE_CALLOUT(DBMS_STATS_LIB)",
    qospsts="SYS.DBMS_STATS.SET_TABLE_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospsys="SYS.DBMS_STATS.SET_SYSTEM_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospTestMmon="SYS.DBMS_STATS_INTERNAL.TEST_MMON_AUTOJOB(DBMS_STATS_LIB)",
    qosptrc="SYS.DBMS_AUTO_INDEX_INTERNAL.KSD_TRACE(DBMS_STATS_LIB)/SYS.DBMS_SPM_INTERNAL.I_NON_TERM_DUMP(DBMS_STATS_LIB)/SYS.DBMS_STATS_INTERNAL.KSD_TRACE(DBMS_STATS_LIB)",
    qs="query system",
    qsfcAlterExt1="SYS.DBMS_SQLCONTROL_INTERNAL.I_ALTER_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcAlterExt2="SYS.DBMS_SQLCONTROL_INTERNAL.I_ALTER_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcCreateExt="SYS.DBMS_SQLCONTROL_INTERNAL.I_CREATE_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcDropExt1="SYS.DBMS_SQLCONTROL_INTERNAL.I_DROP_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcDropExt2="SYS.DBMS_SQLCONTROL_INTERNAL.I_DROP_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcFlushQuarantineExt="SYS.DBMS_SQLQ_INTERNAL.I_FLUSH_QUARANTINE(DBMS_SQLCONTROL_LIB)",
    qsm="query system management",
    qsme="query system management expression processing",
    qsmg_generate_checksum="SYS.PRVT_TUNE_MVIEW.GENERATE_CHECKSUM(DBMS_TUNEMV_LIB)",
    qsmg_mvlog_advisor="SYS.PRVT_SYS_TUNE_MVIEW.ANALYZE_MVLOGS(DBMS_TUNEMV_LIB)",
    qsmg_rewrite_query="SYS.PRVT_TUNE_MVIEW.REWRITE_QUERY_INTERNAL(DBMS_TUNEMV_LIB)",
    qsmggeneratechecksum="SYS.PRVT_TUNE_MVIEW.GENERATE_CHECKSUM(DBMS_TUNEMV_LIB)",
    qsmgmvlogadvisor="SYS.PRVT_SYS_TUNE_MVIEW.ANALYZE_MVLOGS(DBMS_TUNEMV_LIB)",
    qsmgrewritequery="SYS.PRVT_TUNE_MVIEW.REWRITE_QUERY_INTERNAL(DBMS_TUNEMV_LIB)",
    qsmka="query system management determine if summary would be useful",
    qsmkz="query system management create/alter summary semantic analysis",
    qsmmcd="query system management access advisor",
    qsmmcdGetTaskScript="SYS.PRVT_ACCESS_ADVISOR.GET_TASK_SCRIPT(DBMS_SUMA_LIB)",
    qsmmcdImplementTask="SYS.PRVT_ACCESS_ADVISOR.X_IMPLEMENT_TASK(DBMS_SUMA_LIB)",
    qsmmcdMain="SYS.PRVT_ACCESS_ADVISOR.AA_MAIN(DBMS_SUMA_LIB)",
    qsmmcdParamValidate="SYS.PRVT_ACCESS_ADVISOR.PARAM_VALIDATE_EXT(DBMS_SUMA_LIB)/SYS.PRVT_WORKLOAD.PARAM_VALIDATE_EXT(DBMS_SUMA_LIB)",
    qsmmhwghw="SYS.PRVT_WORKLOAD.GEN_HYP_WKD(DBMS_SUMA_LIB)",
    qsmmutlGetNewName="SYS.PRVT_ACCESS_ADVISOR.GET_NEW_NAME(DBMS_SUMA_LIB)",
    qsmmwrkDeleteStatement="SYS.PRVT_WORKLOAD.DELETE_ST(DBMS_SUMA_LIB)",
    qsmmwrkImportSqlCache="SYS.PRVT_WORKLOAD.IMPORT_SQLCACHE(DBMS_SUMA_LIB)",
    qsmmwrkImportSqlTuningSet="SYS.PRVT_WORKLOAD.IMPORT_STS(DBMS_SUMA_LIB)",
    qsmmwrkImportSumadv="SYS.PRVT_WORKLOAD.IMPORT_SUMADV(DBMS_SUMA_LIB)",
    qsmmwrkImportUser="SYS.PRVT_WORKLOAD.IMPORT_USER(DBMS_SUMA_LIB)",
    qsmmwrkInsertStatement="SYS.PRVT_WORKLOAD.SQLW_INSERT(DBMS_SUMA_LIB)",
    qsmmwrkRecordJournal="SYS.PRVT_WORKLOAD.RECORD_JNL_ENTRY(DBMS_SUMA_LIB)",
    qsmmwrkResetWorkload="SYS.PRVT_WORKLOAD.X_RESET_WORKLOAD(DBMS_SUMA_LIB)",
    qsmmwrkUpdateStatement="SYS.PRVT_WORKLOAD.UPDATE_ST(DBMS_SUMA_LIB)",
    qsmo="query system management optimizer",
    qsmoAcceptAdaptivePlanExt="SYS.DBMS_SPM_INTERNAL.I_ACCEPT_ADAPTIVE_PLAN(DBMS_SPM_LIB)",
    qsmoAlterPlans="query system management optimizer alter plans driver",
    qsmoAlterPlansExt="SYS.DBMS_SPM.I_ALTER_SQL_PLAN_BASELINE(DBMS_SPM_LIB)",
    qsmoAutocapNotifierExt="SYS.DBMS_SPM_INTERNAL.I_NOTIFY_SMB_CONFIG_UPDATE(DBMS_SPM_LIB)",
    qsmoCreatePlanBaselineExt="SYS.DBMS_SPM_INTERNAL.I_CREATE_SQL_PLAN_BASELINE(DBMS_SPM_LIB)",
    qsmoDropPlansExt="SYS.DBMS_SPM.I_DROP_SQL_PLAN_BASELINE(DBMS_SPM_LIB)",
    qsmoGenSqlHandleExt="SYS.DBMS_SPM_INTERNAL.I_GENERATE_SQL_HANDLE_FROM_SIG(DBMS_SPM_LIB)/SYS.DBMS_SPM.I_GENERATE_SQL_HANDLE_FROM_SIG(DBMS_SPM_LIB)",
    qsmoLoadPlansExt="SYS.DBMS_SPM_INTERNAL.LOAD_PLANS_SET(DBMS_SPM_LIB)",
    qsmoMigrateOutlnsExt="SYS.DBMS_SPM.I_MIGRATE_STORED_OUTLINE(DBMS_SPM_LIB)",
    qsmoSPMAllowedExt="SYS.DBMS_SPM_INTERNAL.CHECK_SPM_ALLOWED(DBMS_SPM_LIB)",
    qsmoUnMigrateOutlnsExt="SYS.DBMS_SPM_INTERNAL.I_UNMIGRATE_STORED_OUTLINE(DBMS_SPM_LIB)",
    qsmoVerifyPlanExt="SYS.DBMS_SPM.I_EVOLVE_PLAN_VERIFY_CALLOUT(DBMS_SPM_LIB)",
    qsmp="query system management partition processing",
    qsmq="query system management dictionary access",
    qsmqcsm="query system management dictionary access create/drop/alter summary",
    qsmqutl="query system management dictionary access support",
    qsms="query system management advisor",
    qsmssql="SYS.PRVT_WORKLOAD.ANALYZE_SQL(DBMS_SUMAPI_LIB)",
    qsoda="query system DBMS_SODA",
    qsodaplsCreateColl="query system DBMS_SODA DBMS_SODA.CREATE_COLLECTION",
    qsodaplsDropColl="query system DBMS_SODA DBMS_SODA.DROP_COLLECTION",
    qsodaplsOpenColl="query system DBMS_SODA DBMS_SODA.OPEN_COLLECTION",
    qx="query query execution",
    qxdid="query query execution domain index ddl operations",
    qxdid_odci_check_privs="SYS.DBMS_ODCI.ODCI_CHECK_PRIVS(ODCI_EXTOPT_LIB)",
    qxdid_odci_get_impltype_num="SYS.DBMS_ODCI.GET_IMPLTYPE_NUM(ODCI_INDEX_LIB)",
    qxdid_odci_set_privs="SYS.DBMS_ODCI.ODCI_SET_PRIVS(ODCI_INDEX_LIB)",
    qxdidodcicheckprivs="SYS.DBMS_ODCI.ODCI_CHECK_PRIVS(ODCI_EXTOPT_LIB)",
    qxdidodcigetimpltypenum="SYS.DBMS_ODCI.GET_IMPLTYPE_NUM(ODCI_INDEX_LIB)",
    qxdidodcisetprivs="SYS.DBMS_ODCI.ODCI_SET_PRIVS(ODCI_INDEX_LIB)",
    qxidm="query query execution extensible index dml operations",
    qxidp="query query execution domain index ddl partition operations",
    qxim="query query execution support for objects",
    qximcom="query query execution support for objects create operator for type method",
    qximeop="query query execution support for objects evaluate operand",
    qxitex="query query execution support for create/drop indextype",
    qxopc="query query execution time operator callbacks",
    qxope="query query execution support for operator ddl",
    qxopq="query query execution support for user-defined operators",
    qxuag="query query execution support for user-defined aggragate processing",
    qxxm="query query execution support external tables",
    qxxq_close="SYS.ORACLE_BIGDATA.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLECLOSE(QXXQLIB)",
    qxxq_fetch="SYS.ORACLE_BIGDATA.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEFETCH(QXXQLIB)",
    qxxq_open="SYS.ORACLE_BIGDATA.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEOPEN(QXXQLIB)",
    qxxq_populate="SYS.ORACLE_BIGDATA.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEPOPULATE(QXXQLIB)",
    qxxqclose="SYS.ORACLE_BIGDATA.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLECLOSE(QXXQLIB)",
    qxxqfetch="SYS.ORACLE_BIGDATA.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEFETCH(QXXQLIB)",
    qxxqopen="SYS.ORACLE_BIGDATA.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEOPEN(QXXQLIB)",
    qxxqpopulate="SYS.ORACLE_BIGDATA.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEPOPULATE(QXXQLIB)",
    raise_application_error="SYS.DBMS_STANDARD.raise_application_error(C)",
    raiseapplicationerror="SYS.DBMS_STANDARD.raise_application_error(C)",
    rbfima="rowsource buffer implementation a",
    rcoima="rowsource count implementation a",
    read_ev_icd="SYS.DBMS_SYSTEM.READ_EV_ICD(C)",
    readevicd="SYS.DBMS_SYSTEM.READ_EV_ICD(C)",
    receivepipe="SYS.DBMS_PIPE.RECEIVEPIPE(C)",
    reg_gen_schema_bean="XDB.DBMS_XMLSCHEMA_INT.GENERATEBEAN(XMLSCHEMA_LIB)",
    reg_schema_blob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_BLOB(DBMSXSCHLSB_LIB)",
    reg_schema_clob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_CLOB(DBMSXSCHLSB_LIB)",
    reg_schema_oid="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_OID(DBMSXSCHLSB_LIB)",
    reg_schema_str="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_STR(DBMSXSCHLSB_LIB)",
    reg_schema_xml="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_XML(DBMSXSCHLSB_LIB)",
    reggenschemabean="XDB.DBMS_XMLSCHEMA_INT.GENERATEBEAN(XMLSCHEMA_LIB)",
    regschemablob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_BLOB(DBMSXSCHLSB_LIB)",
    regschemaclob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_CLOB(DBMSXSCHLSB_LIB)",
    regschemaoid="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_OID(DBMSXSCHLSB_LIB)",
    regschemastr="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_STR(DBMSXSCHLSB_LIB)",
    regschemaxml="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_XML(DBMSXSCHLSB_LIB)",
    remove="SYS.SODA_OPERATION_T.REMOVE(DBMS_SODAOPR_LIB)",
    remove_Arr="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    remove_Obj="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    removeArr="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    removeObj="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    removepipe="SYS.DBMS_PIPE.REMOVEPIPE(C)",
    renameKey_Obj="SYS.JDOM_T.rename_Key(DBMS_JDOM_LIB)",
    renameKeyObj="SYS.JDOM_T.rename_Key(DBMS_JDOM_LIB)",
    replaceOneAndGet="SYS.SODA_COLLECTION_T.REPLACE_ONE_AND_GET(DBMS_SODACOLL_LIB)",
    rfa="data guard (?)",
    rfmon="data guard broker monitor",
    rfra="data guard broker monitor",
    rfrdb="data guard broker monitor",
    rfrla="data guard broker monitor",
    rfrm="data guard broker monitor",
    rfrxpt="data guard broker monitor",
    rfs_add_database="SYS.DBMS_DG.RFS_ADD_DATABASE(C)/SYS.DBMS_DRS.RFS_ADD_DATABASE(C)",
    rfs_add_far_sync="SYS.DBMS_DG.RFS_ADD_FAR_SYNC(C)/SYS.DBMS_DRS.RFS_ADD_FAR_SYNC(C)",
    rfs_check_connect="SYS.DBMS_DG.RFS_CHECK_CONNECT(C)/SYS.DBMS_DRS.RFS_CHECK_CONNECT(C)",
    rfs_create_configuration="SYS.DBMS_DG.RFS_CREATE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_CREATE_CONFIGURATION(C)",
    rfs_disable_fsfo="SYS.DBMS_DG.RFS_DISABLE_FSFO(C)/SYS.DBMS_DRS.RFS_DISABLE_FSFO(C)",
    rfs_do_observe="SYS.DBMS_DG.RFS_DO_OBSERVE(C)/SYS.DBMS_DRS.RFS_DO_OBSERVE(C)",
    rfs_dump_broker="SYS.DBMS_DG.RFS_DUMP_BROKER(C)/SYS.DBMS_DRS.RFS_DUMP_BROKER(C)",
    rfs_dump_observer="SYS.DBMS_DG.RFS_DUMP_OBSERVER(C)/SYS.DBMS_DRS.RFS_DUMP_OBSERVER(C)",
    rfs_enable_configuration="SYS.DBMS_DG.RFS_ENABLE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_ENABLE_CONFIGURATION(C)",
    rfs_enable_fsfo="SYS.DBMS_DG.RFS_ENABLE_FSFO(C)/SYS.DBMS_DRS.RFS_ENABLE_FSFO(C)",
    rfs_enable_member="SYS.DBMS_DG.RFS_ENABLE_MEMBER(C)/SYS.DBMS_DRS.RFS_ENABLE_MEMBER(C)",
    rfs_fs_failover_for_hc_cond="SYS.DBMS_DG.RFS_FS_FAILOVER_FOR_HC_COND(C)/SYS.DBMS_DRS.RFS_FS_FAILOVER_FOR_HC_COND(C)",
    rfs_initiate_fs_failover="SYS.DBMS_DG.RFS_INITIATE_FS_FAILOVER(C)/SYS.DBMS_DRS.RFS_INITIATE_FS_FAILOVER(C)",
    rfs_metadata_file="SYS.DBMS_DG.RFS_METADATA_FILE(C)/SYS.DBMS_DRS.RFS_METADATA_FILE(C)",
    rfs_remove_configuration="SYS.DBMS_DG.RFS_REMOVE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_REMOVE_CONFIGURATION(C)",
    rfs_remove_member="SYS.DBMS_DG.RFS_REMOVE_MEMBER(C)/SYS.DBMS_DRS.RFS_REMOVE_MEMBER(C)",
    rfs_replace_name_in_props="SYS.DBMS_DG.RFS_REPLACE_NAME_IN_PROPS(C)/SYS.DBMS_DRS.RFS_REPLACE_NAME_IN_PROPS(C)",
    rfs_reset_config_property="SYS.DBMS_DG.RFS_RESET_CONFIG_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_CONFIG_PROPERTY(C)",
    rfs_reset_member_property="SYS.DBMS_DG.RFS_RESET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_MEMBER_PROPERTY(C)",
    rfs_set_configuration_property="SYS.DBMS_DG.RFS_SET_CONFIGURATION_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_CONFIGURATION_PROPERTY(C)",
    rfs_set_member_property="SYS.DBMS_DG.RFS_SET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_MEMBER_PROPERTY(C)",
    rfs_set_protection_mode="SYS.DBMS_DG.RFS_SET_PROTECTION_MODE(C)/SYS.DBMS_DRS.RFS_SET_PROTECTION_MODE(C)",
    rfs_startup_for_relocate="SYS.DBMS_DG.RFS_STARTUP_FOR_RELOCAT(C)/SYS.DBMS_DRS.RFS_STARTUP_FOR_RELOCAT(C)",
    rfs_stop_observer="SYS.DBMS_DG.RFS_STOP_OBSERVER(C)/SYS.DBMS_DRS.RFS_STOP_OBSERVER(C)",
    rfs_wait="SYS.DBMS_DG.RFS_WAIT(C)/SYS.DBMS_DRS.RFS_WAIT(C)",
    rfs_wait_sync="SYS.DBMS_DG.RFS_WAIT_SYNC(C)/SYS.DBMS_DRS.RFS_WAIT_SYNC(C)",
    rfsadddatabase="SYS.DBMS_DG.RFS_ADD_DATABASE(C)/SYS.DBMS_DRS.RFS_ADD_DATABASE(C)",
    rfsaddfarsync="SYS.DBMS_DG.RFS_ADD_FAR_SYNC(C)/SYS.DBMS_DRS.RFS_ADD_FAR_SYNC(C)",
    rfsafping="SYS.DBMS_DG.RFSAFPING(C)/SYS.DBMS_DRS.RFSAFPING(C)",
    rfsafreadytofailover="SYS.DBMS_DG.RFSAFREADYTOFAILOVER(C)/SYS.DBMS_DRS.RFSAFREADYTOFAILOVER(C)",
    rfsafstatechangerecorded="SYS.DBMS_DG.RFSAFSTATECHANGERECORDED(C)/SYS.DBMS_DRS.RFSAFSTATECHANGERECORDED(C)",
    rfsbrq="SYS.DBMS_DG.RFSBRQ(C)/SYS.DBMS_DRS.RFSBRQ(C)",
    rfsc2r="SYS.DBMS_DG.RFSC2R(C)/SYS.DBMS_DRS.RFSC2R(C)",
    rfscheckconnect="SYS.DBMS_DG.RFS_CHECK_CONNECT(C)/SYS.DBMS_DRS.RFS_CHECK_CONNECT(C)",
    rfscnl="SYS.DBMS_DG.RFSCNL(C)/SYS.DBMS_DRS.RFSCNL(C)",
    rfscreateconfiguration="SYS.DBMS_DG.RFS_CREATE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_CREATE_CONFIGURATION(C)",
    rfsdel="SYS.DBMS_DG.RFSDEL(C)/SYS.DBMS_DRS.RFSDEL(C)",
    rfsdisablefsfo="SYS.DBMS_DG.RFS_DISABLE_FSFO(C)/SYS.DBMS_DRS.RFS_DISABLE_FSFO(C)",
    rfsdoobserve="SYS.DBMS_DG.RFS_DO_OBSERVE(C)/SYS.DBMS_DRS.RFS_DO_OBSERVE(C)",
    rfsdumpbroker="SYS.DBMS_DG.RFS_DUMP_BROKER(C)/SYS.DBMS_DRS.RFS_DUMP_BROKER(C)",
    rfsdumpobserver="SYS.DBMS_DG.RFS_DUMP_OBSERVER(C)/SYS.DBMS_DRS.RFS_DUMP_OBSERVER(C)",
    rfsenableconfiguration="SYS.DBMS_DG.RFS_ENABLE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_ENABLE_CONFIGURATION(C)",
    rfsenablefsfo="SYS.DBMS_DG.RFS_ENABLE_FSFO(C)/SYS.DBMS_DRS.RFS_ENABLE_FSFO(C)",
    rfsenablemember="SYS.DBMS_DG.RFS_ENABLE_MEMBER(C)/SYS.DBMS_DRS.RFS_ENABLE_MEMBER(C)",
    rfsfsfailoverforhccond="SYS.DBMS_DG.RFS_FS_FAILOVER_FOR_HC_COND(C)/SYS.DBMS_DRS.RFS_FS_FAILOVER_FOR_HC_COND(C)",
    rfsgprp="SYS.DBMS_DG.RFSGPRP(C)/SYS.DBMS_DRS.RFSGPRP(C)",
    rfsinfo="SYS.DBMS_DG.RFSINFO(C)/SYS.DBMS_DRS.RFSINFO(C)",
    rfsinitiatefsfailover="SYS.DBMS_DG.RFS_INITIATE_FS_FAILOVER(C)/SYS.DBMS_DRS.RFS_INITIATE_FS_FAILOVER(C)",
    rfsmetadatafile="SYS.DBMS_DG.RFS_METADATA_FILE(C)/SYS.DBMS_DRS.RFS_METADATA_FILE(C)",
    rfspmeta="SYS.DBMS_DG.RFSPMETA(C)/SYS.DBMS_DRS.RFSPMETA(C)",
    rfsr2c="SYS.DBMS_DG.RFSR2C(C)/SYS.DBMS_DRS.RFSR2C(C)",
    rfsremoveconfiguration="SYS.DBMS_DG.RFS_REMOVE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_REMOVE_CONFIGURATION(C)",
    rfsremovemember="SYS.DBMS_DG.RFS_REMOVE_MEMBER(C)/SYS.DBMS_DRS.RFS_REMOVE_MEMBER(C)",
    rfsreplacenameinprops="SYS.DBMS_DG.RFS_REPLACE_NAME_IN_PROPS(C)/SYS.DBMS_DRS.RFS_REPLACE_NAME_IN_PROPS(C)",
    rfsreq="SYS.DBMS_DG.RFSREQ(C)/SYS.DBMS_DRS.RFSREQ(C)",
    rfsresetconfigproperty="SYS.DBMS_DG.RFS_RESET_CONFIG_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_CONFIG_PROPERTY(C)",
    rfsresetmemberproperty="SYS.DBMS_DG.RFS_RESET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_MEMBER_PROPERTY(C)",
    rfsrsp="SYS.DBMS_DG.RFSRSP(C)/SYS.DBMS_DRS.RFSRSP(C)",
    rfssetconfigurationproperty="SYS.DBMS_DG.RFS_SET_CONFIGURATION_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_CONFIGURATION_PROPERTY(C)",
    rfssetmemberproperty="SYS.DBMS_DG.RFS_SET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_MEMBER_PROPERTY(C)",
    rfssetprotectionmode="SYS.DBMS_DG.RFS_SET_PROTECTION_MODE(C)/SYS.DBMS_DRS.RFS_SET_PROTECTION_MODE(C)",
    rfsstartupforrelocate="SYS.DBMS_DG.RFS_STARTUP_FOR_RELOCAT(C)/SYS.DBMS_DRS.RFS_STARTUP_FOR_RELOCAT(C)",
    rfsstopobserver="SYS.DBMS_DG.RFS_STOP_OBSERVER(C)/SYS.DBMS_DRS.RFS_STOP_OBSERVER(C)",
    rfswait="SYS.DBMS_DG.RFS_WAIT(C)/SYS.DBMS_DRS.RFS_WAIT(C)",
    rfswaitsync="SYS.DBMS_DG.RFS_WAIT_SYNC(C)/SYS.DBMS_DRS.RFS_WAIT_SYNC(C)",
    rfuima="rowsource for update implementation a",
    rixima="rowsource index implementation a",
    rnm="rename statement operation",
    rollback="SYS.DBMS_TRANSACTION.rollbac(C)",
    rollback_nr="SYS.DBMS_STANDARD.rollback_n(C)",
    rollback_savepoint="SYS.DBMS_TRANSACTION.rollback_savepoint(C)",
    rollback_sv="SYS.DBMS_STANDARD.rollback_sv(C)",
    rollbacknr="SYS.DBMS_STANDARD.rollback_n(C)",
    rollbacksavepoint="SYS.DBMS_TRANSACTION.rollback_savepoint(C)",
    rollbacksv="SYS.DBMS_STANDARD.rollback_sv(C)",
    rowidafn="SYS.DBMS_ROWID.ROWIDAFN(C)",
    rowidbuild="SYS.DBMS_ROWID.ROWIDBUILD(C)",
    rowidcnvte="SYS.DBMS_ROWID.ROWIDCNVTE(C)",
    rowidcnvtr="SYS.DBMS_ROWID.ROWIDCNVTR(C)",
    rowidinfo="SYS.DBMS_ROWID.ROWIDINFO(C)",
    rpi="recursive program interface",
    rpibnn="recursive program interface bind by number",
    rpicls="recursive program interface close",
    rpidec="recursive program interface describe with callback",
    rpidrr="recursive program interface error handler for setup memory for the recursive session (dru)",
    rpidru="recursive program interface setup memory for recursive session",
    rpidrus="recursive program interface setup memory for recursive session recursive program handling",
    rpidrv="recursive program interface recursive program interface driver",
    rpiexe="recursive program interface execute",
    rpispl="recursive program interface switch user and parse",
    rpiswu2="recursive program interface switch user in recursive sql",
    rtb="rowsource table",
    rtree_analyze="MDSYS.SDO_RTREE_ADMIN.RTREE_ANALYZE(ORDMD_RTREE_LIBS)",
    rtree_childmbrs="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDMBRS(ORDMD_RTREE_LIBS)",
    rtree_childrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDRIDS(ORDMD_RTREE_LIBS)",
    rtree_count="MDSYS.SDO_RTREE_ADMIN.DATA_COUNT(ORDMD_RTREE_LIBS)",
    rtree_descrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_DESCRIDS(ORDMD_RTREE_LIBS)",
    rtree_ndextent="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_NDEXTENT(ORDMD_RTREE_LIBS)",
    rtree_qltydeg="MDSYS.SDO_TUNE.QUALITY_DEGRADATION(ORDMD_RTREE_LIBS)",
    rtree_quality="MDSYS.SDO_TUNE.RTREE_QUALITY(ORDMD_RTREE_LIBS)",
    rtreeanalyze="MDSYS.SDO_RTREE_ADMIN.RTREE_ANALYZE(ORDMD_RTREE_LIBS)",
    rtreechildmbrs="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDMBRS(ORDMD_RTREE_LIBS)",
    rtreechildrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDRIDS(ORDMD_RTREE_LIBS)",
    rtreecount="MDSYS.SDO_RTREE_ADMIN.DATA_COUNT(ORDMD_RTREE_LIBS)",
    rtreedescrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_DESCRIDS(ORDMD_RTREE_LIBS)",
    rtreendextent="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_NDEXTENT(ORDMD_RTREE_LIBS)",
    rtreeqltydeg="MDSYS.SDO_TUNE.QUALITY_DEGRADATION(ORDMD_RTREE_LIBS)",
    rtreequality="MDSYS.SDO_TUNE.RTREE_QUALITY(ORDMD_RTREE_LIBS)",
    ruleclose="CTXSYS.RULEINDEXMETHODS.ODCIGetInterfaces(dr$lib)",
    rulematches="CTXSYS.CTX_MATCHES.matches(dr$lib)/CTXSYS.DRISCORR.RuleScore(dr$lib)",
    rw="row",
    rw_equivalence_cleanup="SYS.DBMS_ADVANCED_REWRITE.CLEANUP_CONTEXT(DBMS_RWEQUIV_LIB)",
    rwequivalencecleanup="SYS.DBMS_ADVANCED_REWRITE.CLEANUP_CONTEXT(DBMS_RWEQUIV_LIB)",
    rwo="row operand",
    rwoima="row operand vector implementation a",
    rwoupo="row operand unpack row from buffer queue (px)",
    rws="row source",
    rwsaid="row source allocate new identity source",
    rwsdef="row source definitions",
    rwsfcd="row source fetch from rowsource",
    rwsima="row source retrieval according to defining query",
    rwsstd="row source start row source",
    sage="exadata specific",
    sagebkcomp="exadata specific block(or backup?) compression",
    sagebxfer="exadata specific block transfer",
    sageCache="exadata specific cache layer",
    sagecell="exadata specific cell",
    sageData="exadata specific data layer",
    sageIndex="exadata specific index layer",
    sagesql="exadata specific sql",
    sageTxn="exadata specific transaction layer",
    savepoint="SYS.DBMS_STANDARD.savepoint(C)/SYS.DBMS_TRANSACTION.savepoint(C)",
    scg="concurrency global locks",
    schemaValidate="SYS.XMLTYPE.SCHEMAVALIDATE(XMLTYPE_LIB)",
    scl="latches",
    sclfr="latches free",
    sclgtf="latches fast get with no spin",
    sclgts="latches slow get with spin (if CPU greater than 1)",
    scls="latches operating system dependent clusterware integration",
    scm="PLSQL apps",
    scu="operating system concurrency unique(?)",
    scuinst="operating system concurrency unique(?) instance",
    sculkget="operating system concurrency unique(?) lockfile (lk DB_UNIQUE_NAME )",
    scumnt="operating system concurrency unique(?) mount",
    scurls="operating system concurrency unique(?) release",
    sdataupd="CTXSYS.DRVDML.TRUSTED_SDATA_CC(DR$LIB)/CTXSYS.DRVDDL.TRUSTED_SDATA_CC(DR$LIB)",
    sdbgrf="Diagnostic directory and file services",
    sdbgrfwf_write_file="Diagnostic directory and file services write to tracefile",
    sdbima="sort operation",
    security_get_acloid="XDB.DBMS_XDBZ.GET_ACLOID(SECURITY_LIB)",
    security_get_table_oid="XDB.DBMS_XDBZ0.GET_TABLE_OID(SECURITY_LIB)",
    security_get_userid="XDB.DBMS_XDBZ.GET_USERID(SECURITY_LIB)",
    security_get_username="XDB.DBMS_XDBZ0.GET_USERNAME(SECURITY_LIB)",
    security_get_valid_acl="XDB.DBMS_XDBZ0.GET_VALID_ACL(SECURITY_LIB)",
    security_init="XDB.DBMS_XDBZ0.INITXDBSECURITY(SECURITY_LIB)",
    security_purgeldapcache="XDB.DBMS_XDBZ.PURGELDAPCACHE(SECURITY_LIB)",
    security_raise_error="XDB.DBMS_XDBZ0.RAISE_ERROR(SECURITY_LIB)",
    security_validate_fusion_acl="XDB.DBMS_XDBZ.VALIDATEFUSIONACL(SECURITY_LIB)",
    security_validateacl="XDB.DBMS_XDBZ.VALIDATEACL(SECURITY_LIB)",
    securitygetacloid="XDB.DBMS_XDBZ.GET_ACLOID(SECURITY_LIB)",
    securitygettableoid="XDB.DBMS_XDBZ0.GET_TABLE_OID(SECURITY_LIB)",
    securitygetuserid="XDB.DBMS_XDBZ.GET_USERID(SECURITY_LIB)",
    securitygetusername="XDB.DBMS_XDBZ0.GET_USERNAME(SECURITY_LIB)",
    securitygetvalidacl="XDB.DBMS_XDBZ0.GET_VALID_ACL(SECURITY_LIB)",
    securityinit="XDB.DBMS_XDBZ0.INITXDBSECURITY(SECURITY_LIB)",
    securitypurgeldapcache="XDB.DBMS_XDBZ.PURGELDAPCACHE(SECURITY_LIB)",
    securityraiseerror="XDB.DBMS_XDBZ0.RAISE_ERROR(SECURITY_LIB)",
    securityvalidateacl="XDB.DBMS_XDBZ.VALIDATEACL(SECURITY_LIB)",
    securityvalidatefusionacl="XDB.DBMS_XDBZ.VALIDATEFUSIONACL(SECURITY_LIB)",
    sel="select",
    select="select ??",
    selectPls="SYS.JDOM_T.redact(DBMS_JDOM_LIB)",
    selectStr="SYS.JDOM_T.redact(DBMS_JDOM_LIB)",
    selexe="select execute: prepare area for fetch",
    semtimedop="Linux: perform atomically an array of semaphore operations",
    sendpipe="SYS.DBMS_PIPE.SENDPIPE(C)",
    seq="sequence numbers",
    Set="SYS.DBMS_RESULT_CACHE_API.Set(C)",
    set_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    set_ev_icd="SYS.DBMS_SYSTEM.SET_EV_ICD(C)",
    set_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    set_sesspar_icd="SYS.DBMS_SYSTEM.SET_SESSPAR_ICD(C)",
    set_transaction_use="SYS.DBMS_STANDARD.set_transaction_use(C)",
    set_warning_setting_string="SYS.DBMS_WARNING.SET_WARNING_SETTING_STRING()",
    setArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBlob_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBlob_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBlobArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBlobObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBoolean_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBoolean_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBooleanArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setBooleanObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    SetC="SYS.DBMS_RESULT_CACHE_API.SetC(C)",
    setClob_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setClob_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setClobArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setClobObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setDate_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setDateObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setevicd="SYS.DBMS_SYSTEM.SET_EV_ICD(C)",
    setNull_Arr="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setNull_Obj="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setNullArr="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setNullObj="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setNumber_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setNumber_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setNumberArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setNumberObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setSchemaValidated="SYS.XMLTYPE.SETSCHEMAVALIDATED(XMLTYPE_LIB)",
    setsessparicd="SYS.DBMS_SYSTEM.SET_SESSPAR_ICD(C)",
    setString_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setString_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setStringArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setStringObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    settransactionuse="SYS.DBMS_STANDARD.set_transaction_use(C)",
    setTStamp_Arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setTStamp_Obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setTStampArr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setTStampObj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setwarningsettingstring="SYS.DBMS_WARNING.SET_WARNING_SETTING_STRING()",
    sgipc="operatign system dependent grid inter process calls",
    sk="operating system dependent kernel",
    skdstdst="operating system dependent kernel dump a stack trace",
    skg="operating system dependent kernel generic",
    skgf="operating system dependent kernel generic file",
    skgfalo="operating system dependent kernel generic file allocate sequential device",
    skgfcls="operating system dependent kernel generic file close device",
    skgfgiod="operating system dependent kernel generic file get IO done (?)",
    skgfnxtio="operating system dependent kernel generic file next IO",
    skgfofi="operating system dependent kernel generic file open file",
    skgfospo="operating system dependent kernel generic file operating system poll for IO completion",
    skgfqio="operating system dependent kernel generic file queue I/O request(s)",
    skgfr="operating system dependent kernel generic file requests",
    skgfr_error64="operating system dependent kernel generic file requests check for errors",
    skgfr_lio_listio64="operating system dependent kernel generic file requests perform listio (AIO) 64 bits",
    skgfr_open64="operating system dependent kernel generic file requests open file 64 bits",
    skgfrciohdlr="operating system dependent kernel generic file requests concurrent IO handler",
    skgfrdup="operating system dependent kernel generic file requests duplicate file handle",
    skgfrgsz="operating system dependent kernel generic file requests get size",
    skgfrliopo="operating system dependent kernel generic file requests listio (AIO) poll",
    skgfrls="operating system dependent kernel generic file requests release a sequential device previously allocated",
    skgfrvldtrq="operating system dependent kernel generic file requests validate requests",
    skgfrwat="operating system dependent kernel generic file requests wait for IO to complete",
    skgm="operating system dependent kernel generic memory (os dependent)",
    skgmattach="operating system dependent kernel generic memory (os dependent) attach to shared memory realm",
    skgmlocate="operating system dependent kernel generic memory (os dependent) locate a primary segment from a realm",
    skgmrf="operating system dependent kernel generic memory (os dependent) real free heap",
    skgmrf_alloc="operating system dependent kernel generic memory (os dependent) real free heap allocate memory",
    skgmrf_blknotoaddr="operating system dependent kernel generic memory (os dependent) real free heap calculate memory address for mmap",
    skgmrf_free="operating system dependent kernel generic memory (os dependent) real free heap calculate memory ranges to be freed",
    skgmrf_release="operating system dependent kernel generic memory (os dependent) real free heap release memory",
    skgmstack="operating system dependent kernel generic memory (os dependent) call specified function with extra stack space",
    skgnfs="operating system dependent kernel generic network file system",
    skgnfs_poll_channels="operating system dependent kernel generic network file system poll network paths",
    skgpnumcpu="operating system dependent kernel generic return number of cpus in system",
    skgptalive="operating system dependent kernel generic thread alive (check if process or thread is alive)",
    skgpw="operating system dependent kernel generic post/wait",
    skgpwinit="operating system dependent kernel generic post/wait initialization",
    skgpwpost="operating system dependent kernel generic post/wait post",
    skgpwwait="operating system dependent kernel generic post/wait wait",
    skgs="operating system dependent kernel generic service",
    skgsl="operating system dependent kernel generic service latches",
    skgslcas="operating system dependent kernel generic service latches get latch fast with no spin (SPARC 11g)",
    skgslgf="operating system dependent kernel generic service latches get latch fast with no spin (SPARC 8i-10g)",
    skgslgts="operating system dependent kernel generic service latches 8i-10g spin get of exclusive latch (SPARC)",
    skgstm="operating system dependent kernel generic service time",
    skgstmGetEpochTs="operating system dependent kernel generic service time get epoch timestamp (gettimeofday)",
    skgvm="operating system dependent kernel generic virtual machine",
    skgvm_cpuid="operating system dependent kernel generic virtual machine detect cpuid",
    skgvm_detect_vmware="operating system dependent kernel generic virtual machine detect vmware",
    skgvm_detect_xen="operating system dependent kernel generic virtual machine detect xen",
    skgx="operating system dependent kernel generic communication",
    skgxn="operating system dependent kernel generic communication node monitor",
    skgxncin="operating system dependent kernel generic communication node monitor defines an OSD context and returns a handle",
    skgxnpstat="operating system dependent kernel generic communication node monitor polls/waits for process group status",
    skgxnreg="operating system dependent kernel generic communication node monitor registers with process group as primary member (LMON)",
    skgxnsrg="operating system dependent kernel generic communication node monitor registers with process group as slave member",
    skgxp="operating system dependent kernel generic communication IPC",
    skgxpdmpmem="operating system dependent kernel generic IPC communication ??",
    skgxpfragsnd="operating system dependent kernel generic IPC communication ??",
    skgxpimcpy="operating system dependent kernel generic IPC communication ??",
    skgxpiwait="operating system dependent kernel generic IPC communication ??",
    skgxpmcpy="operating system dependent kernel generic IPC communication ??",
    skgxppost="operating system dependent kernel generic communication IPC post the owner of a contact out of a blocking call",
    skgxpprcrcv="operating system dependent kernel generic IPC communication ??",
    skgxprusr="operating system dependent kernel generic IPC communication ??",
    skgxpsegsnda="operating system dependent kernel generic IPC communication ??",
    skgxpwait="operating system dependent kernel generic IPC communication ??",
    skgxpwaiti="operating system dependent kernel generic IPC communication ??",
    skgxpxmit="operating system dependent kernel generic IPC communication ??",
    skip="SYS.SODA_OPERATION_T.SKIP(DBMS_SODAOPR_LIB)",
    skip_acl_11g_compatible_check="SYS.DBMS_NETWORK_ACL_ADMIN.SKIP_ACL_11G_COMPATIBLE_CHECK(C)",
    skipacl11gcompatiblecheck="SYS.DBMS_NETWORK_ACL_ADMIN.SKIP_ACL_11G_COMPATIBLE_CHECK(C)",
    skofs="operating system dependent kernel OFS file system implementation",
    skuz="operating system dependent kernel security (orapwd)",
    skuzfbs="operating system dependent kernel security (orapwd) determine orapw file block size",
    sl="operating system (dependent) library",
    slave="operating system dependent call ??",
    slcpu="operating system (dependent) library get cpu usage",
    slcpums="operating system (dependent) library get cpu usage measurement (for getrusage)",
    slcra="operating system (dependent) library we trip here if someone else other than ssexhd() calls us",
    slgei="operating system (dependent) library call function with the oracle error code and arguments",
    slgts="operating system (dependent) library get time stamp (for gettimeofday)",
    slmecpy="operating system dependent call ??",
    slmsrd="operating system (dependent) library message file read, reads .msb file",
    slrac="operating system (dependent) library verify (memory) read access",
    sltrgatime64="operating system (dependent) library arbitrary time lookup",
    sltrgftime64="operating system (dependent) library time lookup main (for clock_gettime)",
    sltrgftime64_cgt="operating system (dependent) library time lookup main (for clock_gettime) clock_gettime",
    sltrusleep="operating system (dependent) library true (?) sleep (calls nanosleep)",
    slts="operating system (dependent) library threading services",
    sltsm="operating system (dependent) library threading services mutex",
    sltsmda="operating system (dependent) library threading services mutex directed acquire. wrapper for ssOswPthread_mutex_lock",
    sltsmdi="operating system (dependent) library threading services mutex directed insert memory? calls ssMemAlloc",
    sltsmdr="operating system (dependent) library threading services mutex directed release. wrapper for ssOswPthread_mutex_unlock",
    sltsmdt="operating system (dependent) library threading services mutex directed try. wrapper for ssOswPthread_mutex_trylock",
    sltsmdta="operating system (dependent) library threading services mutex directed try. wrapper for ssOswPthread_mutex_trylock directed timed acquire. calls sltsmnta",
    sltsmna="operating system (dependent) library threading services mutex named acquire. wrapper for ssOswPthread_mutex_lock",
    sltsmnr="operating system (dependent) library threading services mutex named release. wrapper for ssOswPthread_mutex_unlock",
    sltsmnt="operating system (dependent) library threading services mutex named try. wrapper for ssOswPthread_mutex_trylock",
    sltsmnta="operating system (dependent) library threading services mutex named try. wrapper for ssOswPthread_mutex_trylock named timed acquire. calls pthread_mutex_timedlock",
    sltsmxd="operating system (dependent) library threading services mutex 'exchange' destroy. destroy a mutex",
    sltsmxi="operating system (dependent) library threading services mutex 'exchange' insert. insert a mutex",
    slz="operating system (dependent) library zoned (NLS)",
    slzgetevar="operating system (dependent) library zoned (NLS) get environment variable",
    slzsetevar="operating system (dependent) library zoned (NLS) set environment variable",
    sm="operating system dependent memory",
    smb="operating system dependent memory buffer",
    smbalo="operating system dependent memory buffer allocate an smkdef from specified storage bin",
    smbeod="operating system dependent memory buffer signal end of data for memory buffer",
    smboCkaGetPivot="operating system dependent memory buffer ??",
    smbput="operating system dependent memory buffer put a record into the memory buffer",
    sn="operating system dependent network",
    sndmsg="operating system dependent network ??",
    snltmdf="operating system dependent network timer driver: called by SIGALRM",
    snt="operating system dependent network transport",
    sntp="operating system dependent network transport ipc",
    sntpread="operating system dependent network transport ipc issue read",
    sntpwrite="operating system dependent network transport ipc issue write",
    sntt="operating system dependent network transport tcp/ip",
    snttread="operating system dependent network transport tcp/ip read data on a socket",
    snttwrite="operating system dependent network transport tcp/ip write data to a socket",
    sor="sort operation",
    soreod="sort operation end of data: close data input for sort",
    sorputqb="sort operation insert record into sort",
    sou2o="main oracle executable entry point",
    sp="operating system dependent process functions",
    sp_sigset_raise_signal="operating system dependent process functions obtain process ID and send signal",
    spefcmpa="operating system dependent process functions marshall procedure arguments",
    spefmccallstd="operating system dependent process functions c calling standard",
    sqn="sequence",
    sqnprs="sequence reference parsing",
    sr="sort operation",
    ss="operating system dependent system",
    ssexhd="operating system dependent system dump routine",
    ssk="operating system dependent system kernel",
    sskg="operating system dependent system kernel generic",
    sskgm="operating system dependent system kernel generic memory",
    sskgmrf="operating system dependent system kernel generic memory real free heap",
    sskgmrf_unmaprange="operating system dependent system kernel generic memory real free heap unmap memory range",
    sskgmrf_validaterange="operating system dependent system kernel generic memory real free heap mmap memory range",
    sskgp="operating system dependent system kernel generic process",
    sskgp_gettid="operating system dependent system kernel generic process get thread id",
    sskgp_tgkill="operating system dependent system kernel generic process thread get and kill. send a signal to a process/thread",
    sskgpw="operating system dependent system kernel generic process post/wait",
    sskgpwidcmp="operating system dependent system kernel generic process post/wait compare semid of semaphores to be posted",
    sskgpwpost="operating system dependent system kernel generic process post/wait post a single semaphore",
    sskgpwvectorpost="operating system dependent system kernel generic process post/wait post multiple semaphores",
    sskgpwwait="operating system dependent system kernel generic process post/wait wait",
    sskgslgf="operating system dependent system kernel generic immediate latch get (X86, 8i-10g)",
    sskgslspin="operating system dependent system kernel generic spin for a latch",
    sskgxp="operating system dependent system kernel generic ipc communication",
    sskgxp_select="operating system dependent system kernel generic ipc communication waits \"timeout\" microseconds for an asynchronous request/event associated with context. if zero, return immediately",
    sskgxph="operating system dependent system kernel generic ipc communication hmp implementation (hpux)",
    sskgxpu="operating system dependent system kernel generic ipc communication udp",
    sslnx="LnxLib - Math",
    sslsshandler="operating system dependent system SSLS signal handler for all signals",
    sslssSynchHdlr="operating system dependent system SSLS signal handler for synch. signals",
    ssMem="operating system dependent system memory",
    ssMemCalloc="operating system dependent system memory calls ksmem_calloc or calloc",
    ssMemCalloc_shared="operating system dependent system memory calls ksmem_calloc or calloc calls calloc",
    ssMemFree="operating system dependent system memory calls ksmem_free or free",
    ssMemFree_shared="operating system dependent system memory calls ksmem_free or free calls free",
    ssMemMalloc="operating system dependent system memory calls ksmem_malloc or malloc",
    ssMemMalloc_shared="operating system dependent system memory calls ksmem_malloc or malloc calls malloc",
    ssMemRealloc="operating system dependent system memory calls ksmem_realloc or realloc",
    ssMemRealloc_shared="operating system dependent system memory calls ksmem_realloc or realloc calls realloc",
    ssMemStrdup="operating system dependent system memory calls ksmem_strdup or __intel_sse2_strdup",
    ssMemStrdup_shared="operating system dependent system memory calls ksmem_strdup or __intel_sse2_strdup calls __intel_sse2_strdup",
    ssOsw="operating system dependent system operating system (call) wrapper (?)",
    ssOswClose="operating system dependent system operating system (call) wrapper (?) close. close a file descriptor",
    ssOswCreat="operating system dependent system operating system (call) wrapper (?) creat. open and possibly create a file or device",
    ssOswDlclose="operating system dependent system operating system (call) wrapper (?) dlclose. decrements dynamic library file handle count, on zero is unloaded",
    ssOswDlopen="operating system dependent system operating system (call) wrapper (?) dlopen. load dynamic library file",
    ssOswDup="operating system dependent system operating system (call) wrapper (?) dup. duplicate a file descriptor",
    ssOswDup2="operating system dependent system operating system (call) wrapper (?) dup. duplicate a file descriptor dup2. duplicate a file descriptor",
    ssOswFclose="operating system dependent system operating system (call) wrapper (?) fclose. close file",
    ssOswFdopen="operating system dependent system operating system (call) wrapper (?) fdopen. associate a stream with a file descriptor",
    ssOswFopen="operating system dependent system operating system (call) wrapper (?) fopen. open file",
    ssOswFreopen="operating system dependent system operating system (call) wrapper (?) freopen. open file and associate stream with it",
    ssOswOpen="operating system dependent system operating system (call) wrapper (?) open64. open a file",
    ssOswPclose="operating system dependent system operating system (call) wrapper (?) pclose. close pipe",
    ssOswPipe="operating system dependent system operating system (call) wrapper (?) pipe. create pipe",
    ssOswPopen="operating system dependent system operating system (call) wrapper (?) popen. pipe stream to process",
    ssOswPthread_mutex_lock="operating system dependent system operating system (call) wrapper (?) pthread_mutex_lock",
    ssOswPthread_mutex_trylock="operating system dependent system operating system (call) wrapper (?) pthread_mutex_trylock",
    ssOswPthread_mutex_unlock="operating system dependent system operating system (call) wrapper (?) pthread_mutex_unlock",
    ssOswSocket="operating system dependent system operating system (call) wrapper (?) socket. create an endpoint for communication",
    sspuser="operating system dependent system handle SIGUSR2 for Oracle",
    ssthrdmain="operating system dependent system main for every thread in a threaded oracle",
    st_icost_clob="CTXSYS.TEXTOPTSTATS.ODCIGetInterfaces(dr$lib)",
    stack="sort operation ??",
    start="(non oracle)c program entry point",
    statssel1_xdbhi="XDB.FUNCSTATS.cost(XDB.RESOURCE_VIEW_LIB)",
    statssel1xdbhi="XDB.FUNCSTATS.cost(XDB.RESOURCE_VIEW_LIB)",
    std="PLSQL apps",
    step_icd="SYS.DBMS_TRANSACTION.STEP_ICD(C)",
    stepicd="SYS.DBMS_TRANSACTION.STEP_ICD(C)",
    sticostclob="CTXSYS.TEXTOPTSTATS.ODCIGetInterfaces(dr$lib)",
    stragg_terminate="SYS.STRING_AGG_TYPE.ODCIAggregateInitialize(xmltype_lib)",
    straggterminate="SYS.STRING_AGG_TYPE.ODCIAggregateInitialize(xmltype_lib)",
    stringify="SYS.JDOM_T.stringify(DBMS_JDOM_LIB)",
    stsima="sort support implementation",
    subex1="evaluate subquery; exists subquery method 1",
    subsr1="evaluate subquery; single row subquery method 1",
    subsr3="evaluate subquery; single row subquery method 3",
    swap_bootstrap_icd="SYS.DBMS_DDL_INTERNAL.SWAP_BOOTSTRAP_ICD(C)",
    swapbootstrapicd="SYS.DBMS_DDL_INTERNAL.SWAP_BOOTSTRAP_ICD(C)",
    sxorchk="system xor check",
    Sys_GetTriggerState="SYS.DBMS_STANDARD.sys_GetTriggerState(C)",
    SysGetTriggerState="SYS.DBMS_STANDARD.sys_GetTriggerState(C)",
    tablefunc="CTXSYS.DRVDISP.TRUSTED_TABLEFUNC(DR$LIB)",
    tbl_contains_adt="MDSYS.TBLCONTAINSADT.TblContainsAdt(ORDMD_UTL_LIBS)",
    tblcontainsadt="MDSYS.TBLCONTAINSADT.TblContainsAdt(ORDMD_UTL_LIBS)",
    tbsdrv="create/alter/drop tablespace function support",
    to_geojson_int="MDSYS.SDO_UTIL.TO_GEOJSON_INT(ORDMD_UTL_LIBS)",
    toBlob="SYS.JDOM_T.to_Blob(DBMS_JDOM_LIB)",
    toBoolean="SYS.JDOM_T.to_Boolean(DBMS_JDOM_LIB)",
    toClob="SYS.JDOM_T.to_Clob(DBMS_JDOM_LIB)",
    toDate="SYS.JDOM_T.to_Date(DBMS_JDOM_LIB)",
    togeojsonint="MDSYS.SDO_UTIL.TO_GEOJSON_INT(ORDMD_UTL_LIBS)",
    toNumber="SYS.JDOM_T.to_Number(DBMS_JDOM_LIB)",
    toObject="SYS.XMLTYPE.TOOBJECT(XMLTYPE_LIB)",
    toString="SYS.JDOM_T.to_String(DBMS_JDOM_LIB)",
    toTStamp="SYS.JDOM_T.to_Timestamp(DBMS_JDOM_LIB)",
    transform_xmltype="SYS.XMLTYPE.TRANSFORM(XMLTYPE_LIB)",
    transformxmltype="SYS.XMLTYPE.TRANSFORM(XMLTYPE_LIB)",
    tre="PLSQL infrastructure",
    trim="SYS.PLITBLM.trim(c)",
    ttc="two task common",
    ttcacr="two task common read into a user data area",
    ttcbur="two task common burst record",
    ttcc2u="two task common convert type x to type y",
    ttcclr="two task common send/receive without conversion",
    ttcdrv="two task common called when message received",
    ttcgcshnd="two task common get character set handle(?): oracle is checking that the remote character set id is valid to do type conversions with different character sets",
    ttci2u="two task common integer type to universal representation",
    ttcpip="two task common pipe read/write",
    ttcrd2r="two task common rowid descriptor to rowid conversion routine",
    ttcrs2c="two task common result set to cursor conversion routine",
    ttp="Database Audit Next Generation",
    ub8_to_kscn_impl="convert ub8 to kernel SCN",
    uixexe="index maintenance operations",
    ul="SQLLDR Load",
    unique_session_id="SYS.DBMS_PIPE.UNIQUE_SESSION_ID(C)",
    uniquesessionid="SYS.DBMS_PIPE.UNIQUE_SESSION_ID(C)",
    upd="update",
    updAfterRowTrigger="update ??",
    update="CTXSYS.DRVDDL.ContextOldUpdate(dr$lib)/CTXSYS.RULEINDEXMETHODS.TRUSTED_UPDATE(DR$LIB)/CTXSYS.XPATHINDEXMETHODS.TRUSTED_UPDATE(DR$LIB)",
    update_endian="MDSYS.SDO_UTIL.UPDATE_ENDIAN(ORDMD_UTL_LIBS)",
    update_xdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_upd(xdb.PATH_VIEW_LIB)",
    update_xdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    updateendian="MDSYS.SDO_UTIL.UPDATE_ENDIAN(ORDMD_UTL_LIBS)",
    updateRaster="MDSYS.SDO_GEOR_INT.UPDATERASTER(ORDMD_GEOR_LIBS)",
    updatexdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_upd(xdb.PATH_VIEW_LIB)",
    updatexdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    updating="SYS.DBMS_STANDARD.updating(C)",
    updaul="update Attempt Update of all rows or Lock all rows",
    updauw="update get the values of the update columns",
    upderh="update evaluate right hand side expressions in order to get values",
    updexe="update update execute",
    updgrh="update ??",
    updpcr="update perform constraint operations for each row updated",
    updrow="update Row Procedure used by KXRD to update or lock a row",
    updThreePhaseExe="update ??",
    upduaw="update ??",
    upi="user program interface",
    upirtrc="user program interface router with callback",
    ups="upsert",
    upseq="upsert ??",
    upsexe="upsert execute",
    utl_dispatch="CTXSYS.DRIUTL.TRUSTED_CALLOUT(DR$LIB)",
    utldispatch="CTXSYS.DRIUTL.TRUSTED_CALLOUT(DR$LIB)",
    valid_ip_address="SYS.DBMS_NETWORK_ACL_ADMIN.VALID_IP_ADDRESS(C)",
    validate_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.VALIDATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    validaterwequivalence="SYS.DBMS_ADVANCED_REWRITE.VALIDATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    validipaddress="SYS.DBMS_NETWORK_ACL_ADMIN.VALID_IP_ADDRESS(C)",
    variable_value="SYS.DBMS_SQL.variable_value(c)",
    variable_value_pkg="SYS.DBMS_SQL.variable_value_pkg(c)/SYS.DBMS_SYS_SQL.VARIABLE_VALUE_PKG(C)",
    variablevalue="SYS.DBMS_SQL.variable_value(c)",
    variablevaluepkg="SYS.DBMS_SQL.variable_value_pkg(c)/SYS.DBMS_SYS_SQL.VARIABLE_VALUE_PKG(C)",
    version="SYS.SODA_OPERATION_T.VERSION(DBMS_SODAOPR_LIB)",
    vop="view optimisation",
    vopdrv="view optimisation driver",
    vopqbc="view optimisation query block",
    vsn="version (?)",
    wait_for_event_icd="SYS.DBMS_SYSTEM.WAIT_FOR_EVENT_ICD(C)",
    waitforeventicd="SYS.DBMS_SYSTEM.WAIT_FOR_EVENT_ICD(C)",
    wpezauth="SYS.DBMS_EPG.WPEZAUTH(C)",
    wpezdeauth="SYS.DBMS_EPG.WPEZDEAUTH(C)",
    wpiu="PLSQL apps",
    wrap_coll="SYS.DBMS_DDL.WRAP_COLL(C)",
    wrap_vc2="SYS.DBMS_DDL.WRAP_VC2(C)",
    wrapcoll="SYS.DBMS_DDL.WRAP_COLL(C)",
    wrapvc2="SYS.DBMS_DDL.WRAP_VC2(C)",
    xct="transaction management",
    xctcom="transaction management commit: commit the current tranaction of the current session",
    xctctl="transaction management commit top level transaction in a transaction tree",
    xctend="transaction management end",
    xctrol="transaction management rollback: rollback current transaction of the current session",
    XMLSeqCurFetchStub="SYS.XMLSEQCUR_IMP_T.ODCITableStart(XMLtype_lib)/SYS.XMLSEQCUR2_IMP_T.ODCITableStart(XMLtype_lib)",
    XMLSeqFetchStub="SYS.XMLSEQ_IMP_T.ODCITableStart(XMLtype_lib)",
    xpl="SQL explain plan",
    xplCompareQueryPlansExt="SYS.DBMS_SQLTUNE_INTERNAL.TEST_COMPARE_QUERY_PLANS(DBMS_XPLAN_LIB)",
    xplComputePlanHashExt="SYS.DBMS_SPM_INTERNAL.I_COMPUTE_PLAN_HASH_VALUE(DBMS_XPLAN_LIB)/SYS.DBMS_SPM.I_COMPUTE_PLAN_HASH_VALUE(DBMS_XPLAN_LIB)",
    xplDumpSqlTrace="SQL explain plan produce STAT lines in sql trace",
    xplFetchRow="SQL explain plan ??",
    xplGenXpl="SQL explain plan generate explain plan",
    xplGetPredicates="SQL explain plan ??",
    xplMakeRow="SQL explain plan ??",
    xplnmv_cleanup="SYS.DBMS_XRWMV.CLEANUP_3GL(DBMS_XMV_LIB)",
    xplnmv_clob_array="SYS.DBMS_XRWMV.XPLNMV_3GLCA(DBMS_XMV_LIB)",
    xplnmv_clob_table="SYS.DBMS_XRWMV.XPLNMV_3GLCT(DBMS_XMV_LIB)",
    xplnmv_with_array="SYS.DBMS_XRWMV.XPLNMV_3GLA(DBMS_XMV_LIB)",
    xplnmv_with_table="SYS.DBMS_XRWMV.XPLNMV_3GLTI(DBMS_XMV_LIB)",
    xplnmvcleanup="SYS.DBMS_XRWMV.CLEANUP_3GL(DBMS_XMV_LIB)",
    xplnmvclobarray="SYS.DBMS_XRWMV.XPLNMV_3GLCA(DBMS_XMV_LIB)",
    xplnmvclobtable="SYS.DBMS_XRWMV.XPLNMV_3GLCT(DBMS_XMV_LIB)",
    xplnmvwitharray="SYS.DBMS_XRWMV.XPLNMV_3GLA(DBMS_XMV_LIB)",
    xplnmvwithtable="SYS.DBMS_XRWMV.XPLNMV_3GLTI(DBMS_XMV_LIB)",
    xplnrw_clob_array="SYS.DBMS_XRWMV.XPLNRW_3GLCA(DBMS_XRW_LIB)",
    xplnrw_clob_table="SYS.DBMS_XRWMV.XPLNRW_3GLCT(DBMS_XRW_LIB)",
    xplnrw_table_em="SYS.DBMS_XRWMV.XPLNRW_EM_3GLT(DBMS_XRW_LIB)",
    xplnrw_with_array="SYS.DBMS_XRWMV.XPLNRW_3GLA(DBMS_XRW_LIB)",
    xplnrw_with_table="SYS.DBMS_XRWMV.XPLNRW_3GLT(DBMS_XRW_LIB)",
    xplnrwclobarray="SYS.DBMS_XRWMV.XPLNRW_3GLCA(DBMS_XRW_LIB)",
    xplnrwclobtable="SYS.DBMS_XRWMV.XPLNRW_3GLCT(DBMS_XRW_LIB)",
    xplnrwtableem="SYS.DBMS_XRWMV.XPLNRW_EM_3GLT(DBMS_XRW_LIB)",
    xplnrwwitharray="SYS.DBMS_XRWMV.XPLNRW_3GLA(DBMS_XRW_LIB)",
    xplnrwwithtable="SYS.DBMS_XRWMV.XPLNRW_3GLT(DBMS_XRW_LIB)",
    xplPredToText="SQL explain plan ??",
    xplProcessPeekedBind="SYS.DBMS_XPLAN.PROCESS_PEEKED_BIND_DATA(DBMS_XPLAN_LIB)",
    XQAggAvgWrap="SYS.AGGXQAVGIMP.ODCIAggregateInitialize(xmltype_lib)",
    XQAggSumWrap="SYS.AGGXQSUMIMP.ODCIAggregateInitialize(xmltype_lib)",
    XQAggWrap="SYS.AGGXQIMP.ODCIAggregateInitialize(xmltype_lib)",
    XQSeqFetchStub="SYS.XQSEQ_IMP_T.ODCITableStart(XMLtype_lib)",
    XQWindowSeqFetchStub="SYS.XQWINDOWSEQ_IMP_T.ODCITableStart(XMLtype_lib)",
    xs="olap analytic workspace",
    xsAdvSparse="SYS.DBMS_AW.XSADVSPARSE(DBMS_AW_LIB)",
    xsagAdvCube="SYS.DBMS_AW.ADVISE_CUBE(DBMS_AW_LIB)",
    xsagAdvRel="SYS.DBMS_AW.ADVISE_REL(DBMS_AW_LIB)",
    xsAnalyze="SYS.DBMS_AW_STATS.XSANALYZE(DBMS_AW_LIB)",
    xsAWNameOk="olap analytic workspace DBMS_AW.XSAWNAMEOK",
    xsAWNameOK="SYS.DBMS_AW.XSAWNAMEOK(DBMS_AW_LIB)",
    xsAWOlapBit="SYS.DBMS_AW_INTERNAL.XSAWOLAPBIT(DBMS_AW_LIB)",
    xsawRename="SYS.DBMS_AW.INT_AW_RENAME(DBMS_AW_LIB)",
    xsawUpgrade="SYS.DBMS_AW.XSAWUPGRADE(DBMS_AW_LIB)",
    xscatClean="SYS.DBMS_AW.CLEAN_ACCESS_TRACKING(DBMS_AW_LIB)",
    xscatDisable="SYS.DBMS_AW.DISABLE_ACCESS_TRACKING(DBMS_AW_LIB)",
    xscatEnable="SYS.DBMS_AW.ENABLE_ACCESS_TRACKING(DBMS_AW_LIB)",
    xsClearStats="SYS.DBMS_AW_STATS.XSCLEARSTATS(DBMS_AW_LIB)",
    xsCmdExcKL="SYS.DBMS_AW.XSCMDEXCKL(DBMS_AW_LIB)",
    xsCmdExcKN="SYS.DBMS_AW.XSCMDEXCKN(DBMS_AW_LIB)",
    xsCmdExcLL="SYS.DBMS_AW.XSCMDEXCLL(DBMS_AW_LIB)",
    xscoadGetAtrExpr="SYS.DBMS_CUBE_ADVISE.GETATREXPRTCO(DBMS_AW_LIB)",
    xscoadGetLvlName="SYS.DBMS_CUBE_ADVISE.GETLVLNAMETCO(DBMS_AW_LIB)",
    xscoadGetMVObjName="SYS.DBMS_CUBE_ADVISE.GETMVOBJNAMETCO(DBMS_AW_LIB)/SYS.DBMS_CUBE.GETMVOBJNAMETCO(DBMS_AW_LIB)",
    xscoadIsMDClass="SYS.DBMS_CUBE_ADVISE.IS_MD_CLASSTCO(DBMS_AW_LIB)",
    xscu_get_dflt_msr="SYS.DBMS_CUBE_UTIL.GET_DFLT_MSR(DBMS_AW_LIB)",
    xscu_get_ext_md="SYS.DBMS_CUBE_UTIL.GET_EXT_MD(DBMS_AW_LIB)",
    xscugetdfltmsr="SYS.DBMS_CUBE_UTIL.GET_DFLT_MSR(DBMS_AW_LIB)",
    xscugetextmd="SYS.DBMS_CUBE_UTIL.GET_EXT_MD(DBMS_AW_LIB)",
    xsdb="olap analytic workspace paging manager",
    xseifExportBLOB="SYS.DBMS_AW.INT_EIF_BLOB_OUT(DBMS_AW_LIB)",
    xseifExportTable="SYS.DBMS_AW.INT_EIF_TABLE_OUT(DBMS_AW_LIB)",
    xseifImportBLOB="SYS.DBMS_AW.INT_EIF_BLOB_IN(DBMS_AW_LIB)",
    xseifImportTable="SYS.DBMS_AW.INT_EIF_TABLE_IN(DBMS_AW_LIB)",
    xsevalnum="SYS.DBMS_AW.XSEVALNUM(DBMS_AW_LIB)",
    xsevaltxt="SYS.DBMS_AW.EVAL_TEXT(DBMS_AW_LIB)",
    xsFileNameOK="SYS.DBMS_AW.XSFILENAMEOK(DBMS_AW_LIB)",
    xsGetCompat="SYS.DBMS_AW.XSGETCOMPAT(DBMS_AW_LIB)",
    xsiculog_disable="SYS.DBMS_CUBE_LOG.DISABLE(DBMS_AW_LIB)",
    xsiculog_enable_loc="SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculog_enable_text="SYS.DBMS_CUBE_LOG.ENABLE_TEXT(DBMS_AW_LIB)",
    xsiculog_enable_txt="SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculog_flush="SYS.DBMS_CUBE_LOG.FLUSH(DBMS_AW_LIB)",
    xsiculog_get_log="SYS.DBMS_CUBE_LOG.GET_LOG(DBMS_AW_LIB)",
    xsiculog_get_log_spec="SYS.DBMS_CUBE_LOG.GET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculog_get_param="SYS.DBMS_CUBE_LOG.GET_PARAMETER(DBMS_AW_LIB)",
    xsiculog_set_log_spec="SYS.DBMS_CUBE_LOG.SET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculog_set_param="SYS.DBMS_CUBE_LOG.SET_PARAMETER(DBMS_AW_LIB)",
    xsiculogdisable="SYS.DBMS_CUBE_LOG.DISABLE(DBMS_AW_LIB)",
    xsiculogenableloc="SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculogenabletext="SYS.DBMS_CUBE_LOG.ENABLE_TEXT(DBMS_AW_LIB)",
    xsiculogenabletxt="SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculogflush="SYS.DBMS_CUBE_LOG.FLUSH(DBMS_AW_LIB)",
    xsiculoggetlog="SYS.DBMS_CUBE_LOG.GET_LOG(DBMS_AW_LIB)",
    xsiculoggetlogspec="SYS.DBMS_CUBE_LOG.GET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculoggetparam="SYS.DBMS_CUBE_LOG.GET_PARAMETER(DBMS_AW_LIB)",
    xsiculogsetlogspec="SYS.DBMS_CUBE_LOG.SET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculogsetparam="SYS.DBMS_CUBE_LOG.SET_PARAMETER(DBMS_AW_LIB)",
    xsInAWCleanup="SYS.DBMS_AW.IN_AW_CLEANUP(DBMS_AW_LIB)",
    xsinitdriver="SYS.DBMS_AW.STARTUP(DBMS_AW_LIB)",
    xsinitdrv="olap analytic workspace DBMS_AW.STARTUP",
    xsisactive="SYS.DBMS_AW.OLAP_ACTIVE(DBMS_AW_LIB)",
    xskditalp="(xs)kditalp - olap analytic workspace ??",
    xskilldriver="SYS.DBMS_AW.SHUTDOWN(DBMS_AW_LIB)",
    xskilldrv="olap analytic workspace DBMS_AW.SHUTDOWN",
    xsLobVWrite="SYS.DBMS_AW_EXP.LOB_WRITE(DBMS_AW_LIB)",
    xsociClean="SYS.DBMS_AW.OCI_CLEAN(DBMS_AW_LIB)",
    xsoplog_complete_tco="SYS.DBMS_CUBE_LOG.COMPLETEOPLOGTCO(DBMS_AW_LIB)",
    xsoplog_start_tco="SYS.DBMS_CUBE_LOG.STARTOPLOGTCO(DBMS_AW_LIB)",
    xsoplog_write_tco="SYS.DBMS_CUBE_LOG.WRITEOPLOGTCO(DBMS_AW_LIB)",
    xsoplogcompletetco="SYS.DBMS_CUBE_LOG.COMPLETEOPLOGTCO(DBMS_AW_LIB)",
    xsoplogstarttco="SYS.DBMS_CUBE_LOG.STARTOPLOGTCO(DBMS_AW_LIB)",
    xsoplogwritetco="SYS.DBMS_CUBE_LOG.WRITEOPLOGTCO(DBMS_AW_LIB)",
    xspg="olap analytic workspace paging manager",
    xspgPValClob="SYS.DBMS_AW.XSPVALCLOB(DBMS_AW_LIB)",
    xspgPValGet="SYS.DBMS_AW.PROP_VAL(DBMS_AW_LIB)",
    xspgPValLen="SYS.DBMS_AW.XSPGPVALLEN(DBMS_AW_LIB)",
    xsRunKK="SYS.DBMS_AW.XSRUNKK(DBMS_AW_LIB)",
    xsRunKL="SYS.DBMS_AW.XSRUNKL(DBMS_AW_LIB)",
    xsRunKN="SYS.DBMS_AW.XSRUNKN(DBMS_AW_LIB)",
    xsRunLK="SYS.DBMS_AW.XSRUNLK(DBMS_AW_LIB)",
    xsRunLL="SYS.DBMS_AW.XSRUNLL(DBMS_AW_LIB)",
    xsRunLN="SYS.DBMS_AW.XSRUNLN(DBMS_AW_LIB)",
    xsrunning="SYS.DBMS_AW.OLAP_RUNNING(DBMS_AW_LIB)",
    xssamGetMVFilterExpr="SYS.DBMS_CUBE.GETMVFILTEREXPRTCO(DBMS_AW_LIB)",
    xssamGetMVInfoFlags="SYS.DBMS_CUBE.GETMVINFOFLAGSTCO(DBMS_AW_LIB)",
    xssamGetMVJoinCheck="SYS.DBMS_CUBE.GETMVJOINCHECKTCO(DBMS_AW_LIB)",
    xssamGetMVMeasRel="SYS.DBMS_CUBE.GETMVMEASRELSTCO(DBMS_AW_LIB)",
    xssamGetMVMeasures="SYS.DBMS_CUBE.GETMVMEASURESTCO(DBMS_AW_LIB)",
    xssamGetMVRelAlias="SYS.DBMS_CUBE.GETMVRELALIASTCO(DBMS_AW_LIB)",
    xsSmplGetObjProtect="SYS.DBMS_AW.GET_OBJ_PROTECT(DBMS_AW_LIB)",
    xsSmplSetObjProtect="SYS.DBMS_AW_EXP.SET_OBJ_PROTECT(DBMS_AW_LIB)",
    xssrfBool="SYS.OLAP_BOOL_SRF.OLAP_BOOL_SRF(DBMS_AW_LIB)",
    xssrfDat="SYS.OLAP_DATE_SRF.OLAP_DATE_SRF(DBMS_AW_LIB)",
    xssrfNum="SYS.OLAP_NUMBER_SRF.OLAP_NUMBER_SRF(DBMS_AW_LIB)",
    xssrfTxt="SYS.OLAP_TEXT_SRF.OLAP_TEXT_SRF(DBMS_AW_LIB)",
    xstco_check_olap="SYS.DBMS_CUBE_LOG.CHECK_OLAP(DBMS_AW_LIB)",
    xstcocheckolap="SYS.DBMS_CUBE_LOG.CHECK_OLAP(DBMS_AW_LIB)",
    xstfRCFetch="SYS.OLAPRANCURIMPL_T.ODCITABLEDESCRIBE(DBMS_AW_LIB)",
    xsttsfreeze="SYS.DBMS_AW_EXP.TTS_AW_FREEZE(DBMS_AW_LIB)",
    xsttsthaw="SYS.DBMS_AW_EXP.TTS_AW_THAW(DBMS_AW_LIB)",
    xty="expression type check",
    xtydrv="expression type check driver",
    xtyginf="expression type check get character set id and form",
    xtyinpr="expression type check insert numeric precision operator",
    xtyopn="expression type check operand",
    xtypls="expression type check check plsql functions",
    z="security",
    zlke="security label error handling",
    zlkere0="LBACSYS.LBAC_STANDARD.RAISE_FACILITY_ERROR(LBACSYS.LBAC$STD_LIBT)",
    zlkere1="LBACSYS.LBAC_STANDARD.RAISE_FACILITY_ERROR(LBACSYS.LBAC$STD_LIBT)",
    zlkere2="LBACSYS.LBAC_STANDARD.RAISE_FACILITY_ERROR(LBACSYS.LBAC$STD_LIBT)",
    zlkertp="LBACSYS.LBAC_STANDARD.RESET_TRUSTED_PROG(LBACSYS.LBAC$STD_LIBT)",
    zlkestp="LBACSYS.LBAC_STANDARD.SET_TRUSTED_PROG(LBACSYS.LBAC$STD_LIBT)",
    zll="security label security",
    zllalgeel="LBACSYS.LBAC_LABEL_LIST.GET(LBACSYS.LBAC$LABLT_LIBT)",
    zllalinit="LBACSYS.LBAC_LABEL_LIST.NEW_LBAC_LABEL_LIST(LBACSYS.LBAC$LABLT_LIBT)",
    zllalpuel="LBACSYS.LBAC_LABEL_LIST.PUT(LBACSYS.LBAC$LABLT_LIBT)",
    zllaltt="LBACSYS.LBAC_LABEL.TO_TAG(LBACSYS.LBAC$LABEL_LIBT)",
    zllanlab="LBACSYS.LBAC_LABEL.NEW_LBAC_LABEL(LBACSYS.LBAC$LABEL_LIBT)",
    zllanprv="LBACSYS.LBAC_PRIVS.NEW_LBAC_PRIVS(LBACSYS.LBAC$PRIVS_LIBT)",
    zllappid="LBACSYS.LBAC_PRIVS.POLICY_ID(LBACSYS.LBAC$PRIVS_LIBT)",
    zllapset="LBACSYS.LBAC_PRIVS.SET_PRIV(LBACSYS.LBAC$PRIVS_LIBT)",
    zllaptst="LBACSYS.LBAC_PRIVS.TEST_PRIV(LBACSYS.LBAC$PRIVS_LIBT)",
    zllaudaa="LBACSYS.LBAC_SERVICES.AUDIT_ACTION(LBACSYS.LBAC$USER_LIBT)",
    zllaudalt="LBACSYS.SA_AUDIT_ADMIN.PDB_EXEC_SQL(LBACSYS.LBAC$USER_LIBT)",
    zllaudchk="LBACSYS.LBAC_SERVICES.CHECK_AUDIT(LBACSYS.LBAC$USER_LIBT)",
    zllaudGetErrNum="LBACSYS.SA_COMPONENTS.GET_ERROR_NUMBER(LBACSYS.LBAC$USER_LIBT)",
    zllaudSetUGANG="LBACSYS.LBAC_SERVICES.SET_UGA(LBACSYS.LBAC$USER_LIBT)",
    zllcba="LBACSYS.LBAC_CACHE.BYPASSALL(LBACSYS.LBAC$CACHE_LIBT)",
    zllcbr="LBACSYS.LBAC_CACHE.BYPASSREAD(LBACSYS.LBAC$CACHE_LIBT)",
    zllcccinv="LBACSYS.LBAC_CACHE.CACHE_TAGS_INV(LBACSYS.LBAC$CACHE_LIBT)",
    zllccctags="LBACSYS.LBAC_CACHE.CACHE_TAGS(LBACSYS.LBAC$CACHE_LIBT)",
    zllccol="LBACSYS.LBAC_CACHE.COLUMN_NAME(LBACSYS.LBAC$CACHE_LIBT)",
    zllccpa="LBACSYS.LBAC_CACHE.CHECK_POLICYADMIN(LBACSYS.LBAC$CACHE_LIBT)",
    zllccpr="LBACSYS.LBAC_CACHE.CHECK_POLICYROLE(LBACSYS.LBAC$CACHE_LIBT)",
    zllccps="LBACSYS.LBAC_CACHE.CHECK_POLICYSUBSCRIBED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcgui="LBACSYS.LBAC_CACHE.GET_UNIQUE_ID(LBACSYS.LBAC$CACHE_LIBT)",
    zllcidip="LBACSYS.LBAC_CACHE.IS_DIP_SET(LBACSYS.LBAC$CACHE_LIBT)",
    zllcifo="LBACSYS.LBAC_CACHE.IS_FAILOVER(LBACSYS.LBAC$CACHE_LIBT)",
    zllcing="LBACSYS.LBAC_CACHE.INVERSE_GROUP(LBACSYS.LBAC$CACHE_LIBT)",
    zllcire="LBACSYS.LBAC_CACHE.IS_RAC_ENABLED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcIsOLSEnabled="LBACSYS.LBAC_CACHE.IS_OLS_ENABLED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcIsOpAllowed="LBACSYS.LBAC_CACHE.IS_OP_ALLOWED_LOGICAL(LBACSYS.LBAC$CACHE_LIBT)",
    zllcIsRootOIDConf="LBACSYS.LBAC_CACHE.IS_OID_CONFIGURED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcmspi="LBACSYS.LBAC_CACHE.MAX_SES_POLICY_ID(LBACSYS.LBAC$CACHE_LIBT)",
    zllcoide="LBACSYS.LBAC_CACHE.OID_ENABLED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcon="LBACSYS.LBAC_CACHE.OPTION_NUMBER(LBACSYS.LBAC$CACHE_LIBT)",
    zllcos="LBACSYS.LBAC_CACHE.OPTION_STRING(LBACSYS.LBAC$CACHE_LIBT)",
    zllcosi="LBACSYS.LBAC_CACHE.OPTION_STRING_IMP(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpe="LBACSYS.LBAC_CACHE.POLICYEXISTS(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpkg="LBACSYS.LBAC_CACHE.PACKAGE(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpn="LBACSYS.LBAC_CACHE.POLICY_NAME(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpon="LBACSYS.LBAC_CACHE.POL_NUMBER(LBACSYS.LBAC$CACHE_LIBT)",
    zllcsdip="LBACSYS.LBAC_CACHE.SET_DIP_FLAG(LBACSYS.LBAC$CACHE_LIBT)",
    zllcsdo="LBACSYS.LBAC_CACHE.STORE_DEFAULT_OPTIONS(LBACSYS.LBAC$CACHE_LIBT)",
    zllcsoid="LBACSYS.LBAC_CACHE.OID_SUBSCRIBE(LBACSYS.LBAC$CACHE_LIBT)",
    zllcstpf="LBACSYS.LBAC_CACHE.FAILEDSTARTUP(LBACSYS.LBAC$CACHE_LIBT)",
    zllcuoid="LBACSYS.LBAC_CACHE.OID_UNSUBSCRIBE(LBACSYS.LBAC$CACHE_LIBT)",
    zllcupt="LBACSYS.LBAC_CACHE.UPDATE_PROPS_TABLE(LBACSYS.LBAC$CACHE_LIBT)",
    zlleacc="LBACSYS.LBAC_EVENTS.ALTER_COLUMN_CHECK(LBACSYS.LBAC$EVENT_LIBT)",
    zlleacr="LBACSYS.LBAC_EVENTS.AFTER_CREATE(LBACSYS.LBAC$EVENT_LIBT)",
    zllebat="LBACSYS.LBAC_EVENTS.BEFORE_ALTER(LBACSYS.LBAC$EVENT_LIBT)",
    zlleConfigureOLS="LBACSYS.LBAC_LGSTNDBY_UTIL.CONFIGURE_OLS(LBACSYS.LBAC$USER_LIBT)",
    zlleDisableOLS="LBACSYS.LBAC_LGSTNDBY_UTIL.DISABLE_INT(LBACSYS.LBAC$USER_LIBT)",
    zlleEnableOLS="LBACSYS.LBAC_LGSTNDBY_UTIL.ENABLE_INT(LBACSYS.LBAC$USER_LIBT)",
    zlleGetDVEnforceStatus="SYS.OLS_ENFORCEMENT.GET_DV_ENFORCE_STATUS(LBACSYS.LBAC$EVENT_LIBT)",
    zlleins="LBACSYS.LBAC_EVENTS.COMP_INSTALL(LBACSYS.LBAC$EVENT_LIBT)",
    zlleIsOLSSupported="SYS.IS_OLS_SUPPORTED.is_ols_supported(LBACSYS.LBAC$EVENT_LIBT)",
    zlliccn="LBACSYS.LBAC_SYSDBA.CHECK_COLUMN_NAME(LBACSYS.LBAC$USER_LIBT)",
    zlllaballt="LBACSYS.SA_LABEL_ADMIN.ALTER_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllaballv="LBACSYS.SA_LABEL_ADMIN.ALTER_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabaltgrppar="LBACSYS.SA_COMPONENTS.ALTER_GROUP_PARENT_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabcrtgrp="LBACSYS.SA_COMPONENTS.CREATE_GROUP_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabcrtilbl="LBACSYS.CREATE_OR_FETCH_ILABEL.create_or_fetch_ilabel(LBACSYS.OLS$LAB_LIBT)",
    zlllabcrtlbl="LBACSYS.SA_LABEL_ADMIN.CREATE_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabcutd="LBACSYS.LBAC_LGSTNDBY_UTIL.CONVERT_USER_TO_DATA_LABEL(LBACSYS.OLS$LAB_LIBT)",
    zlllabdrlt="LBACSYS.SA_LABEL_ADMIN.DROP_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabdrlv="LBACSYS.SA_LABEL_ADMIN.DROP_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabdrpgrp="LBACSYS.SA_COMPONENTS.DROP_GROUP_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabfetilbl="LBACSYS.FETCH_ILABEL.fetch_ilabel(LBACSYS.OLS$LAB_LIBT)",
    zlllabgen="LBACSYS.SA_UTL.DOMINATES(LBACSYS.OLS$LAB_LIBT)",
    zlllabgtn="LBACSYS.SA_UTL.STRICTLY_DOMINATES(LBACSYS.OLS$LAB_LIBT)",
    zlllabinsli="LBACSYS.LBAC_LGSTNDBY_UTIL.INSERT_LABEL(LBACSYS.OLS$LAB_LIBT)",
    zlllablcinv="LBACSYS.SA_COMPONENTS.INV_COMPONENT_IN(LBACSYS.OLS$LAB_LIBT)",
    zlllabtdl="LBACSYS.TO_LBAC_DATA_LABEL_INTERNAL.to_lbac_data_label_internal(LBACSYS.OLS$LAB_LIBT)",
    zlllabtll="LBACSYS.TO_LBAC_LABEL_INTERNAL.to_lbac_label_internal(LBACSYS.OLS$LAB_LIBT)",
    zlllabtnl="LBACSYS.TO_NUMERIC_LABEL_INTERNAL.to_numeric_label_internal(LBACSYS.OLS$LAB_LIBT)",
    zlllabtsl="LBACSYS.NUMERIC_LABEL_TO_CHAR.numeric_label_to_char(LBACSYS.OLS$LAB_LIBT)",
    zllrClearHT="LBACSYS.LBAC_RLS.CLEARHT(LBACSYS.LBAC$RLS_LIBT)",
    zllrInvKzscoForPol="LBACSYS.LBAC_RLS.INVKZSCO(LBACSYS.LBAC$RLS_LIBT)",
    zllses_check_ksys_login="LBACSYS.SA_SESSION.CHECK_KSYS_LOGIN(LBACSYS.OLS$SESSION_LIBT)",
    zllses_comp_read="LBACSYS.SA_SESSION.COMP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllses_comp_write="LBACSYS.SA_SESSION.COMP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllses_EnfLblUpd="LBACSYS.LBAC$SA.ENFORCE_LABEL_UPDATE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_enforce_read="LBACSYS.LBAC$SA.ENFORCE_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllses_enforce_write="LBACSYS.LBAC$SA.WRITE_ALLOWED(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_cached_bypass="LBACSYS.LBAC$SA.GET_CACHED_BYPASS(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_cached_privileges="LBACSYS.LBAC$SA.GET_CACHED_PRIVILEGES(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_label="LBACSYS.SA_SESSION.GET_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_read_nlabel="LBACSYS.SA_UTL.NUMERIC_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_row_nlabel="LBACSYS.LBAC$SA.GET_ROW_NLABEL(LBACSYS.OLS$SESSION_LIBT)/LBACSYS.SA_UTL.NUMERIC_ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_unexpanded_seslabel="LBACSYS.SA_SESSION.GET_UNEXPANDED_SESLABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_write_nlabel="LBACSYS.SA_UTL.NUMERIC_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_group_read="LBACSYS.SA_SESSION.GROUP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllses_group_write="LBACSYS.SA_SESSION.GROUP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllses_is_policy_cached="LBACSYS.LBAC$SA.IS_POLICY_CACHED(LBACSYS.OLS$SESSION_LIBT)",
    zllses_label="LBACSYS.SA_SESSION.LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_max_level="LBACSYS.SA_SESSION.MAX_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_max_read_label="LBACSYS.SA_SESSION.MAX_READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_max_write_label="LBACSYS.SA_SESSION.MAX_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_min_level="LBACSYS.SA_SESSION.MIN_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_privs="LBACSYS.SA_SESSION.PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllses_read_label="LBACSYS.SA_SESSION.READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_restore_default_labels="LBACSYS.SA_SESSION.RESTORE_DEFAULT_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_row_label="LBACSYS.SA_SESSION.ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_sa_user_name="LBACSYS.SA_SESSION.SA_USER_NAME(LBACSYS.OLS$SESSION_LIBT)",
    zllses_set_access_profile="LBACSYS.SA_SESSION.SET_ACCESS_PROFILE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_set_label="LBACSYS.SA_SESSION.SET_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_set_row_label="LBACSYS.SA_SESSION.SET_ROW_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_store_union_privs="LBACSYS.LBAC$SA.STORE_UNION_PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllses_write_label="LBACSYS.SA_SESSION.WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsescheckksyslogin="LBACSYS.SA_SESSION.CHECK_KSYS_LOGIN(LBACSYS.OLS$SESSION_LIBT)",
    zllsescompread="LBACSYS.SA_SESSION.COMP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllsescompwrite="LBACSYS.SA_SESSION.COMP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllsesEnfLblUpd="LBACSYS.LBAC$SA.ENFORCE_LABEL_UPDATE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesenforceread="LBACSYS.LBAC$SA.ENFORCE_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllsesenforcewrite="LBACSYS.LBAC$SA.WRITE_ALLOWED(LBACSYS.OLS$SESSION_LIBT)",
    zllsesFedChk="LBACSYS.SA_USER_ADMIN.CHECK_COMMON(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetcachedbypass="LBACSYS.LBAC$SA.GET_CACHED_BYPASS(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetcachedprivileges="LBACSYS.LBAC$SA.GET_CACHED_PRIVILEGES(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetlabel="LBACSYS.SA_SESSION.GET_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetreadnlabel="LBACSYS.SA_UTL.NUMERIC_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetrownlabel="LBACSYS.LBAC$SA.GET_ROW_NLABEL(LBACSYS.OLS$SESSION_LIBT)/LBACSYS.SA_UTL.NUMERIC_ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetunexpandedseslabel="LBACSYS.SA_SESSION.GET_UNEXPANDED_SESLABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetwritenlabel="LBACSYS.SA_UTL.NUMERIC_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgroupread="LBACSYS.SA_SESSION.GROUP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgroupwrite="LBACSYS.SA_SESSION.GROUP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllsesispolicycached="LBACSYS.LBAC$SA.IS_POLICY_CACHED(LBACSYS.OLS$SESSION_LIBT)",
    zllseslabel="LBACSYS.SA_SESSION.LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesmaxlevel="LBACSYS.SA_SESSION.MAX_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesmaxreadlabel="LBACSYS.SA_SESSION.MAX_READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesmaxwritelabel="LBACSYS.SA_SESSION.MAX_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesminlevel="LBACSYS.SA_SESSION.MIN_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesprivs="LBACSYS.SA_SESSION.PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllsesreadlabel="LBACSYS.SA_SESSION.READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesrestoredefaultlabels="LBACSYS.SA_SESSION.RESTORE_DEFAULT_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesrowlabel="LBACSYS.SA_SESSION.ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsessausername="LBACSYS.SA_SESSION.SA_USER_NAME(LBACSYS.OLS$SESSION_LIBT)",
    zllsessetaccessprofile="LBACSYS.SA_SESSION.SET_ACCESS_PROFILE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsessetlabel="LBACSYS.SA_SESSION.SET_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsessetrowlabel="LBACSYS.SA_SESSION.SET_ROW_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesstoreunionprivs="LBACSYS.LBAC$SA.STORE_UNION_PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllseswritelabel="LBACSYS.SA_SESSION.WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllualtpolInt="LBACSYS.LBAC_SYSDBA.ALTER_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluasp="LBACSYS.LBAC_POLICY_ADMIN.APPLY_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluatp="LBACSYS.LBAC_POLICY_ADMIN.APPLY_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)/LBACSYS.LBAC_POLICY_ADMIN.IN(LBACSYS.LBAC$USER_LIBT)",
    zlluaud="LBACSYS.SA_AUDIT_ADMIN.AUDIT_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluChkCDBRoot="LBACSYS.LBAC_SYSDBA.CHECK_CDB_ROOT(LBACSYS.LBAC$USER_LIBT)",
    zlluChkLbacRole="LBACSYS.LBAC_SYSDBA.CHECK_LBACROLE(LBACSYS.LBAC$USER_LIBT)",
    zllucrp="LBACSYS.LBAC_SYSDBA.CREATE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludip="LBACSYS.LBAC_SYSDBA.DISABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludrp="LBACSYS.LBAC_SYSDBA.DROP_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludsp="LBACSYS.LBAC_POLICY_ADMIN.DISABLE_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludtp="LBACSYS.LBAC_POLICY_ADMIN.DISABLE_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluenp="LBACSYS.LBAC_SYSDBA.ENABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluesa="LBACSYS.LBAC_SERVICES.EXECUTE_SYS_ACTION_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluesp="LBACSYS.LBAC_POLICY_ADMIN.ENABLE_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluetp="LBACSYS.LBAC_POLICY_ADMIN.ENABLE_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllunau="LBACSYS.SA_AUDIT_ADMIN.NOAUDIT_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllunsb="LBACSYS.LBAC_UTL.NLS_SUBSTRB(LBACSYS.LBAC$USER_LIBT)",
    zllunvn="LBACSYS.LBAC_UTL.NLS_VALIDNAME(LBACSYS.LBAC$USER_LIBT)",
    zllupd="LBACSYS.LBAC_SESSION.POLICY_DISABLED(LBACSYS.LBAC$USER_LIBT)",
    zllurcrt_ugd="LBACSYS.LBAC_SERVICES.RECREATE_TRIGGERS_UPGRADE(LBACSYS.LBAC$USER_LIBT)",
    zllurcrtugd="LBACSYS.LBAC_SERVICES.RECREATE_TRIGGERS_UPGRADE(LBACSYS.LBAC$USER_LIBT)",
    zllursp="LBACSYS.LBAC_POLICY_ADMIN.REMOVE_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllurtp="LBACSYS.LBAC_POLICY_ADMIN.REMOVE_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusr_invusr="LBACSYS.LBAC_EVENTS.INV_USR(LBACSYS.LBAC$EVENT_LIBT)",
    zllusr_store_usr="LBACSYS.LBAC$SA_LABELS.STORE_USER(LBACSYS.LBAC$USER_LIBT)",
    zllusr_sul="LBACSYS.LBAC$SA_LABELS.SET_USER_LABELS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusr_sup="LBACSYS.SA_USER_ADMIN.SET_USER_PRIVS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusrinvusr="LBACSYS.LBAC_EVENTS.INV_USR(LBACSYS.LBAC$EVENT_LIBT)",
    zllusrstoreusr="LBACSYS.LBAC$SA_LABELS.STORE_USER(LBACSYS.LBAC$USER_LIBT)",
    zllusrsul="LBACSYS.LBAC$SA_LABELS.SET_USER_LABELS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusrsup="LBACSYS.SA_USER_ADMIN.SET_USER_PRIVS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zt="security encryption",
}