return {
    abspath1_xdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    abspath1xdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    abspath_xdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    abspathxdbhi="XDB.XDB_ANCOP.ABSPATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    ad1="SYS.ANYDATA.CONVERTNUMBER(DBMS_ANYDATA_LIB)",
    ad10="SYS.ANYDATA.CONVERTOBJECT(DBMS_ANYDATA_LIB)",
    ad11="SYS.ANYDATA.CONVERTREF(DBMS_ANYDATA_LIB)",
    ad12="SYS.ANYDATA.CONVERTCOLLECTION(DBMS_ANYDATA_LIB)",
    ad13="SYS.ANYDATA.BEGINCREATE(DBMS_ANYDATA_LIB)",
    ad14="SYS.ANYDATA.PIECEWISE(DBMS_ANYDATA_LIB)",
    ad15="SYS.ANYDATA.SETNUMBER(DBMS_ANYDATA_LIB)",
    ad16="SYS.ANYDATA.SETDATE(DBMS_ANYDATA_LIB)",
    ad17="SYS.ANYDATA.SETCHAR(DBMS_ANYDATA_LIB)",
    ad18="SYS.ANYDATA.SETVARCHAR(DBMS_ANYDATA_LIB)",
    ad19="SYS.ANYDATA.SETVARCHAR2(DBMS_ANYDATA_LIB)",
    ad2="SYS.ANYDATA.CONVERTDATE(DBMS_ANYDATA_LIB)",
    ad20="SYS.ANYDATA.SETRAW(DBMS_ANYDATA_LIB)",
    ad21="SYS.ANYDATA.SETBLOB(DBMS_ANYDATA_LIB)",
    ad22="SYS.ANYDATA.SETCLOB(DBMS_ANYDATA_LIB)",
    ad23="SYS.ANYDATA.SETBFILE(DBMS_ANYDATA_LIB)",
    ad24="SYS.ANYDATA.SETOBJECT(DBMS_ANYDATA_LIB)",
    ad25="SYS.ANYDATA.SETREF(DBMS_ANYDATA_LIB)",
    ad26="SYS.ANYDATA.SETCOLLECTION(DBMS_ANYDATA_LIB)",
    ad27="SYS.ANYDATA.ENDCREATE(DBMS_ANYDATA_LIB)",
    ad28="SYS.ANYDATA.GETTYPENAME(DBMS_ANYDATA_LIB)",
    ad29="SYS.ANYDATA.GETTYPE(DBMS_ANYDATA_LIB)",
    ad3="SYS.ANYDATA.CONVERTCHAR(DBMS_ANYDATA_LIB)",
    ad30="SYS.ANYDATA.GETNUMBER(DBMS_ANYDATA_LIB)",
    ad31="SYS.ANYDATA.GETDATE(DBMS_ANYDATA_LIB)",
    ad32="SYS.ANYDATA.GETCHAR(DBMS_ANYDATA_LIB)",
    ad33="SYS.ANYDATA.GETVARCHAR(DBMS_ANYDATA_LIB)",
    ad34="SYS.ANYDATA.GETVARCHAR2(DBMS_ANYDATA_LIB)",
    ad35="SYS.ANYDATA.GETRAW(DBMS_ANYDATA_LIB)",
    ad36="SYS.ANYDATA.GETBLOB(DBMS_ANYDATA_LIB)",
    ad37="SYS.ANYDATA.GETCLOB(DBMS_ANYDATA_LIB)",
    ad38="SYS.ANYDATA.GETBFILE(DBMS_ANYDATA_LIB)",
    ad39="SYS.ANYDATA.GETOBJECT(DBMS_ANYDATA_LIB)",
    ad4="SYS.ANYDATA.CONVERTVARCHAR(DBMS_ANYDATA_LIB)",
    ad40="SYS.ANYDATA.GETREF(DBMS_ANYDATA_LIB)",
    ad41="SYS.ANYDATA.GETCOLLECTION(DBMS_ANYDATA_LIB)",
    ad42="SYS.ANYDATA.CONVERTOBJECT(DBMS_ANYDATA_LIB)",
    ad43="SYS.ANYDATA.SETOBJECT(DBMS_ANYDATA_LIB)",
    ad44="SYS.ANYDATA.GETOBJECT(DBMS_ANYDATA_LIB)",
    ad45="SYS.ANYDATA.CONVERTTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad46="SYS.ANYDATA.CONVERTTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad47="SYS.ANYDATA.CONVERTTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad48="SYS.ANYDATA.CONVERTINTERVALYM(DBMS_ANYDATA_LIB)",
    ad49="SYS.ANYDATA.CONVERTINTERVALDS(DBMS_ANYDATA_LIB)",
    ad5="SYS.ANYDATA.CONVERTVARCHAR2(DBMS_ANYDATA_LIB)",
    ad50="SYS.ANYDATA.CONVERTNCHAR(DBMS_ANYDATA_LIB)",
    ad51="SYS.ANYDATA.CONVERTNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad52="SYS.ANYDATA.CONVERTNCLOB(DBMS_ANYDATA_LIB)",
    ad53="SYS.ANYDATA.SETTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad54="SYS.ANYDATA.SETTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad55="SYS.ANYDATA.SETTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad56="SYS.ANYDATA.SETINTERVALYM(DBMS_ANYDATA_LIB)",
    ad57="SYS.ANYDATA.SETINTERVALDS(DBMS_ANYDATA_LIB)",
    ad58="SYS.ANYDATA.SETNCHAR(DBMS_ANYDATA_LIB)",
    ad59="SYS.ANYDATA.SETNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad6="SYS.ANYDATA.CONVERTRAW(DBMS_ANYDATA_LIB)",
    ad60="SYS.ANYDATA.SETNCLOB(DBMS_ANYDATA_LIB)",
    ad61="SYS.ANYDATA.GETTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad62="SYS.ANYDATA.GETTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad63="SYS.ANYDATA.GETTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad64="SYS.ANYDATA.GETINTERVALYM(DBMS_ANYDATA_LIB)",
    ad65="SYS.ANYDATA.GETINTERVALDS(DBMS_ANYDATA_LIB)",
    ad66="SYS.ANYDATA.GETNCHAR(DBMS_ANYDATA_LIB)",
    ad67="SYS.ANYDATA.GETNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad68="SYS.ANYDATA.GETNCLOB(DBMS_ANYDATA_LIB)",
    ad69="SYS.ANYDATA.ACCESSNUMBER(DBMS_ANYDATA_LIB)",
    ad7="SYS.ANYDATA.CONVERTBLOB(DBMS_ANYDATA_LIB)",
    ad70="SYS.ANYDATA.ACCESSDATE(DBMS_ANYDATA_LIB)",
    ad71="SYS.ANYDATA.ACCESSCHAR(DBMS_ANYDATA_LIB)",
    ad72="SYS.ANYDATA.ACCESSVARCHAR(DBMS_ANYDATA_LIB)",
    ad73="SYS.ANYDATA.ACCESSVARCHAR2(DBMS_ANYDATA_LIB)",
    ad74="SYS.ANYDATA.ACCESSRAW(DBMS_ANYDATA_LIB)",
    ad75="SYS.ANYDATA.ACCESSBLOB(DBMS_ANYDATA_LIB)",
    ad76="SYS.ANYDATA.ACCESSCLOB(DBMS_ANYDATA_LIB)",
    ad77="SYS.ANYDATA.ACCESSBFILE(DBMS_ANYDATA_LIB)",
    ad78="SYS.ANYDATA.ACCESSTIMESTAMP(DBMS_ANYDATA_LIB)",
    ad79="SYS.ANYDATA.ACCESSTIMESTAMPTZ(DBMS_ANYDATA_LIB)",
    ad8="SYS.ANYDATA.CONVERTCLOB(DBMS_ANYDATA_LIB)",
    ad80="SYS.ANYDATA.ACCESSTIMESTAMPLTZ(DBMS_ANYDATA_LIB)",
    ad81="SYS.ANYDATA.ACCESSINTERVALYM(DBMS_ANYDATA_LIB)",
    ad82="SYS.ANYDATA.ACCESSINTERVALDS(DBMS_ANYDATA_LIB)",
    ad83="SYS.ANYDATA.ACCESSNCHAR(DBMS_ANYDATA_LIB)",
    ad84="SYS.ANYDATA.ACCESSNVARCHAR2(DBMS_ANYDATA_LIB)",
    ad85="SYS.ANYDATA.ACCESSNCLOB(DBMS_ANYDATA_LIB)",
    ad86="SYS.SYS$RAWTOANY.sys$rawtoany(DBMS_ANYDATA_LIB)",
    ad87="SYS.ANYDATA.CONVERTBDOUBLE(DBMS_ANYDATA_LIB)",
    ad88="SYS.ANYDATA.CONVERTUROWID(DBMS_ANYDATA_LIB)",
    ad89="SYS.ANYDATA.SETBFLOAT(DBMS_ANYDATA_LIB)",
    ad9="SYS.ANYDATA.CONVERTBFILE(DBMS_ANYDATA_LIB)",
    ad90="SYS.ANYDATA.SETBDOUBLE(DBMS_ANYDATA_LIB)",
    ad91="SYS.ANYDATA.GETBFLOAT(DBMS_ANYDATA_LIB)",
    ad92="SYS.ANYDATA.GETBDOUBLE(DBMS_ANYDATA_LIB)",
    ad93="SYS.ANYDATA.ACCESSBFLOAT(DBMS_ANYDATA_LIB)",
    ad94="SYS.ANYDATA.ACCESSBDOUBLE(DBMS_ANYDATA_LIB)",
    ad95="SYS.ANYDATA.ACCESSUROWID(DBMS_ANYDATA_LIB)",
    ad96="SYS.ANYDATA.CONVERTBFLOAT(DBMS_ANYDATA_LIB)",
    adbdrv="alter database driver",
    add_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addarr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addblob_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addblobarr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addboolean_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addbooleanarr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addclob_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addclobarr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    adddate_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    adddatearr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addnull_arr="SYS.JDOM_T.append_Null(DBMS_JDOM_LIB)",
    addnullarr="SYS.JDOM_T.append_Null(DBMS_JDOM_LIB)",
    addnumber_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addnumberarr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addstring_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addstringarr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addtstamp_arr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    addtstamparr="SYS.JDOM_T.append(DBMS_JDOM_LIB)",
    aggwrap="SYS.AGGXMLIMP.ODCIAggregateInitialize(xmltype_lib)",
    ain="alter index",
    ainpdrop="alter index drop an index partition",
    allpath1_xdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC(XDB.PATH_VIEW_LIB)",
    allpath1xdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC(XDB.PATH_VIEW_LIB)",
    allpath_xdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC_INT(XDB.PATH_VIEW_LIB)",
    allpathxdbhi="XDB.XDB_ANCOP.ALLPATH_FUNC_INT(XDB.PATH_VIEW_LIB)",
    alter_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.ALTER_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    alterrwequivalence="SYS.DBMS_ADVANCED_REWRITE.ALTER_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    anydata2str="CTXSYS.DRVDML.MDATAANYDATA2STR(DR$LIB)",
    aop="[Alter index] ",
    apa="[SQL Access Path Analysis] ",
    apacb="[SQL Access Path Analysis] connect by",
    apadrv="[SQL Access Path Analysis] drive access path selection for a sql command",
    apaimc="[SQL Access Path Analysis] in-memory column store",
    apakkoqb="[SQL Access Path Analysis] drive access path analysis for every query block",
    apaqbd="[SQL Access Path Analysis] drive access path analysis for every query block",
    apastmtaddxplannotations="[SQL Access Path Analysis] add explain annotations",
    appendchildxml="SYS.XMLTYPE.APPENDCHILDXML(XMLTYPE_LIB)",
    applying_crossedition_trigger="SYS.DBMS_STANDARD.applying_crossedition_trigger(C)",
    applyingcrosseditiontrigger="SYS.DBMS_STANDARD.applying_crossedition_trigger(C)",
    aq_internal_exestmt="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYSCALLS.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_INV.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_VAR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQJMS_INTERNAL.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQ_IMPORT_INTERNAL_DR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)",
    aqinternalexestmt="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYSCALLS.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_INV.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQADM_VAR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQJMS_INTERNAL.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)/SYS.DBMS_AQ_IMPORT_INTERNAL_DR.AQ_INTERNAL_EXESTMT(DBMS_AQINT_LIB)",
    as1="SYS.ANYDATASET.BEGINCREATE(DBMS_ANYDATASET_LIB)",
    as10="SYS.ANYDATASET.SETBLOB(DBMS_ANYDATASET_LIB)",
    as11="SYS.ANYDATASET.SETCLOB(DBMS_ANYDATASET_LIB)",
    as12="SYS.ANYDATASET.SETBFILE(DBMS_ANYDATASET_LIB)",
    as13="SYS.ANYDATASET.SETOBJECT(DBMS_ANYDATASET_LIB)",
    as14="SYS.ANYDATASET.SETREF(DBMS_ANYDATASET_LIB)",
    as15="SYS.ANYDATASET.SETCOLLECTION(DBMS_ANYDATASET_LIB)",
    as16="SYS.ANYDATASET.ENDCREATE(DBMS_ANYDATASET_LIB)",
    as17="SYS.ANYDATASET.GETTYPENAME(DBMS_ANYDATASET_LIB)",
    as18="SYS.ANYDATASET.GETTYPE(DBMS_ANYDATASET_LIB)",
    as19="SYS.ANYDATASET.GETNUMBER(DBMS_ANYDATASET_LIB)",
    as2="SYS.ANYDATASET.ADDINSTANCE(DBMS_ANYDATASET_LIB)",
    as20="SYS.ANYDATASET.GETDATE(DBMS_ANYDATASET_LIB)",
    as21="SYS.ANYDATASET.GETCHAR(DBMS_ANYDATASET_LIB)",
    as22="SYS.ANYDATASET.GETVARCHAR(DBMS_ANYDATASET_LIB)",
    as23="SYS.ANYDATASET.GETVARCHAR2(DBMS_ANYDATASET_LIB)",
    as24="SYS.ANYDATASET.GETRAW(DBMS_ANYDATASET_LIB)",
    as25="SYS.ANYDATASET.GETBLOB(DBMS_ANYDATASET_LIB)",
    as26="SYS.ANYDATASET.GETCLOB(DBMS_ANYDATASET_LIB)",
    as27="SYS.ANYDATASET.GETBFILE(DBMS_ANYDATASET_LIB)",
    as28="SYS.ANYDATASET.GETOBJECT(DBMS_ANYDATASET_LIB)",
    as29="SYS.ANYDATASET.GETREF(DBMS_ANYDATASET_LIB)",
    as3="SYS.ANYDATASET.PIECEWISE(DBMS_ANYDATASET_LIB)",
    as30="SYS.ANYDATASET.GETCOLLECTION(DBMS_ANYDATASET_LIB)",
    as31="SYS.ANYDATASET.GETCOUNT(DBMS_ANYDATASET_LIB)",
    as32="SYS.ANYDATASET.GETINSTANCE(DBMS_ANYDATASET_LIB)",
    as33="SYS.ANYDATASET.SETOBJECT(DBMS_ANYDATASET_LIB)",
    as34="SYS.ANYDATASET.GETOBJECT(DBMS_ANYDATASET_LIB)",
    as35="SYS.ANYDATASET.SETTIMESTAMP(DBMS_ANYDATASET_LIB)",
    as36="SYS.ANYDATASET.SETTIMESTAMPTZ(DBMS_ANYDATASET_LIB)",
    as37="SYS.ANYDATASET.SETTIMESTAMPLTZ(DBMS_ANYDATASET_LIB)",
    as38="SYS.ANYDATASET.SETINTERVALYM(DBMS_ANYDATASET_LIB)",
    as39="SYS.ANYDATASET.SETINTERVALDS(DBMS_ANYDATASET_LIB)",
    as4="SYS.ANYDATASET.SETNUMBER(DBMS_ANYDATASET_LIB)",
    as40="SYS.ANYDATASET.SETNCHAR(DBMS_ANYDATASET_LIB)",
    as41="SYS.ANYDATASET.SETNVARCHAR2(DBMS_ANYDATASET_LIB)",
    as42="SYS.ANYDATASET.SETNCLOB(DBMS_ANYDATASET_LIB)",
    as43="SYS.ANYDATASET.GETTIMESTAMP(DBMS_ANYDATASET_LIB)",
    as44="SYS.ANYDATASET.GETTIMESTAMPTZ(DBMS_ANYDATASET_LIB)",
    as45="SYS.ANYDATASET.GETTIMESTAMPLTZ(DBMS_ANYDATASET_LIB)",
    as46="SYS.ANYDATASET.GETINTERVALYM(DBMS_ANYDATASET_LIB)",
    as47="SYS.ANYDATASET.GETINTERVALDS(DBMS_ANYDATASET_LIB)",
    as48="SYS.ANYDATASET.GETNCHAR(DBMS_ANYDATASET_LIB)",
    as49="SYS.ANYDATASET.GETNVARCHAR2(DBMS_ANYDATASET_LIB)",
    as5="SYS.ANYDATASET.SETDATE(DBMS_ANYDATASET_LIB)",
    as50="SYS.ANYDATASET.GETNCLOB(DBMS_ANYDATASET_LIB)",
    as51="SYS.ANYDATASET.SETBFLOAT(DBMS_ANYDATASET_LIB)",
    as52="SYS.ANYDATASET.SETBDOUBLE(DBMS_ANYDATASET_LIB)",
    as53="SYS.ANYDATASET.SETUROWID(DBMS_ANYDATASET_LIB)",
    as54="SYS.ANYDATASET.GETBFLOAT(DBMS_ANYDATASET_LIB)",
    as55="SYS.ANYDATASET.GETBDOUBLE(DBMS_ANYDATASET_LIB)",
    as56="SYS.ANYDATASET.GETUROWID(DBMS_ANYDATASET_LIB)",
    as6="SYS.ANYDATASET.SETCHAR(DBMS_ANYDATASET_LIB)",
    as7="SYS.ANYDATASET.SETVARCHAR(DBMS_ANYDATASET_LIB)",
    as8="SYS.ANYDATASET.SETVARCHAR2(DBMS_ANYDATASET_LIB)",
    as9="SYS.ANYDATASET.SETRAW(DBMS_ANYDATASET_LIB)",
    at1="SYS.ANYTYPE.BEGINCREATE(DBMS_ANYTYPE_LIB)",
    at2="SYS.ANYTYPE.SETINFO(DBMS_ANYTYPE_LIB)",
    at3="SYS.ANYTYPE.ADDATTR(DBMS_ANYTYPE_LIB)",
    at4="SYS.ANYTYPE.ENDCREATE(DBMS_ANYTYPE_LIB)",
    at5="SYS.ANYTYPE.GETPERSISTENT(DBMS_ANYTYPE_LIB)",
    at6="SYS.ANYTYPE.GETINFO(DBMS_ANYTYPE_LIB)",
    at7="SYS.ANYTYPE.GETATTRELEMINFO(DBMS_ANYTYPE_LIB)",
    at8="SYS.GETANYTYPEFROMPERSISTENT.GetAnyTypeFromPersistent(DBMS_ANYTYPE_LIB)",
    atb="[Alter TaBle] ",
    atbdrv="[Alter TaBle] driver",
    atbedml="[Alter TaBle] enable dml locks",
    aud="[AUDit implementation file] ",
    audbeg="[AUDit implementation file] audit begin",
    auddel="[AUDit implementation file] audit delete",
    auddft="[AUDit implementation file] audit default function",
    audend="[AUDit implementation file] audit end (commit) transaction",
    audfro="[AUDit implementation file] audit top level objects",
    audins="[AUDit implementation file] audit insert audit record",
    audtar="[AUDit implementation file] audit audit create/alter/drop tablespace,rollback segment and alter system",
    aus="audit statement",
    ausdrv="audit statement driver",
    bam="PLSQL_KG_Interface",
    begin_discrete_transaction="SYS.DBMS_TRANSACTION.begin_discrete_transactio(C)",
    begindiscretetransaction="SYS.DBMS_TRANSACTION.begin_discrete_transactio(C)",
    bind_variable="SYS.DBMS_SQL.bind_variable(c)",
    bind_variable_pkg="SYS.DBMS_SQL.bind_variable_pkg(c)/SYS.DBMS_SYS_SQL.BIND_VARIABLE_PKG(C)",
    bindvariable="SYS.DBMS_SQL.bind_variable(c)",
    bindvariablepkg="SYS.DBMS_SQL.bind_variable_pkg(c)/SYS.DBMS_SYS_SQL.BIND_VARIABLE_PKG(C)",
    bintrfileconvert="SYS.DBMS_SERVER_TRACE.CONVERT_BINARY_TRACE_FILE(DBMS_SERVER_TRACE_LIB)",
    bz2="bzip2",
    bz2_decompress="bzip2 decompress",
    c_domattr_getexpandedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getlocalname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getnamespace="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    c_domattr_getownerelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETOWNERELEMENT(DBMS_XMLDOM_LIB)",
    c_domattr_getqualifiedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    c_domattr_getspecified="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETSPECIFIED(DBMS_XMLDOM_LIB)",
    c_domattr_getvalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETVALUE(DBMS_XMLDOM_LIB)",
    c_domattr_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_ISNULL(DBMS_XMLDOM_LIB)",
    c_domattr_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domattr_setvalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETVALUE(DBMS_XMLDOM_LIB)",
    c_domcdata_appenddata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_APPENDDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_deletedata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DELETEDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_getdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_GETDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_getlength="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_GETLENGTH(DBMS_XMLDOM_LIB)",
    c_domcdata_insertdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_INSERTDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_ISNULL(DBMS_XMLDOM_LIB)",
    c_domcdata_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domcdata_replacedata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REPLACEDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_setdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_SETDATA(DBMS_XMLDOM_LIB)",
    c_domcdata_substringdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SUBSTRINGDATA(DBMS_XMLDOM_LIB)",
    c_domcdatasection_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATASECTION_ISNULL(DBMS_XMLDOM_LIB)",
    c_domcdatasection_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATASECTION_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domcomment_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_COMMENT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domcomment_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_COMMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domdoc_adoptnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ADOPTNODE(DBMS_XMLDOM_LIB)",
    c_domdoc_create="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domdoc_createcdatasection="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATECDATASECTION(DBMS_XMLDOM_LIB)",
    c_domdoc_createcomment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATECOMMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createdocfragment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEELEMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_createentityref="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    c_domdoc_createfromclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NEWDOCUMENTFROMCLOB(DBMS_XMLDOM_LIB)",
    c_domdoc_createfromxmltype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENTFROMXMLTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_createpi="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEPI(DBMS_XMLDOM_LIB)",
    c_domdoc_createtextnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATETEXTNODE(DBMS_XMLDOM_LIB)",
    c_domdoc_getcset="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCSET(DBMS_XMLDOM_LIB)",
    c_domdoc_getdoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETDOCTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_getdocumentelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETDOCUMENTELEMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_getelementsbytagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOC_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    c_domdoc_getimplementation="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETIMPLEMENTATION(DBMS_XMLDOM_LIB)",
    c_domdoc_getstdaln="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETSTDALN(DBMS_XMLDOM_LIB)",
    c_domdoc_getversion="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETVERSION(DBMS_XMLDOM_LIB)",
    c_domdoc_getxmltype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETXMLTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_importnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_IMPORTNODE(DBMS_XMLDOM_LIB)",
    c_domdoc_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domdoc_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domdoc_remove="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREEDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domdoc_setcset="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETCSET(DBMS_XMLDOM_LIB)",
    c_domdoc_setdoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETDOCTYPE(DBMS_XMLDOM_LIB)",
    c_domdoc_setstdaln="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETSTANDALONE(DBMS_XMLDOM_LIB)",
    c_domdoc_setversion="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETVERSION(DBMS_XMLDOM_LIB)",
    c_domdoc_writetobuffer="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    c_domdoc_writetoclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    c_domdocfrag_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCFRAG_ISNULL(DBMS_XMLDOM_LIB)",
    c_domdocfrag_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCFRAG_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domdocfrag_writetobuffer="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCFRAG_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    c_domdoctype_freedoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREEDOCTYPE(DBMS_XMLDOM_LIB)",
    c_domdoctype_getentities="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETENTITIES(DBMS_XMLDOM_LIB)",
    c_domdoctype_getname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETNAME(DBMS_XMLDOM_LIB)",
    c_domdoctype_getnotations="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNOTATIONS(DBMS_XMLDOM_LIB)",
    c_domdoctype_getpublicid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETPUBLICID(DBMS_XMLDOM_LIB)",
    c_domdoctype_getsystemid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    c_domdoctype_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_ISNULL(DBMS_XMLDOM_LIB)",
    c_domdoctype_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domelement_freeelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREEELEMENT(DBMS_XMLDOM_LIB)",
    c_domelement_getattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_getattributenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    c_domelement_getchldbytagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getchldbytagns="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    c_domelement_getelbytagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getelbytagnamens="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    c_domelement_getexpandedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getlocalname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    c_domelement_getnamespace="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    c_domelement_getqualifiedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    c_domelement_gettagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETTAGNAME(DBMS_XMLDOM_LIB)",
    c_domelement_hasattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domelement_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domelement_normalize="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_NORMALIZE(DBMS_XMLDOM_LIB)",
    c_domelement_removeattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_removeattrnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    c_domelement_resolvensprefix="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_RESOLVENAMESPACEPREFIX(DBMS_XMLDOM_LIB)",
    c_domelement_setattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTE(DBMS_XMLDOM_LIB)",
    c_domelement_setattributenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    c_domentity_getnotationname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNOTATIONNAME(DBMS_XMLDOM_LIB)",
    c_domentity_getpublicid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_GETPUBLICID(DBMS_XMLDOM_LIB)",
    c_domentity_getsystemid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    c_domentity_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_ISNULL(DBMS_XMLDOM_LIB)",
    c_domentity_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domentityref_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITYREF_ISNULL(DBMS_XMLDOM_LIB)",
    c_domentityref_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITYREF_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domimpl_createdocument="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domimpl_hasfeature="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASFEATURE(DBMS_XMLDOM_LIB)",
    c_domnnm_getlength="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_GETLENGTH(DBMS_XMLDOM_LIB)",
    c_domnnm_getnameditem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNAMEDITEM(DBMS_XMLDOM_LIB)",
    c_domnnm_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnnm_item="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ITEM(DBMS_XMLDOM_LIB)",
    c_domnnm_removenameditem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVENAMEDITEM(DBMS_XMLDOM_LIB)",
    c_domnnm_setnameditem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETNAMEDITEM(DBMS_XMLDOM_LIB)",
    c_domnode_appendchild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_APPENDCHILD(DBMS_XMLDOM_LIB)",
    c_domnode_bisavailable="[XMLDOM] XDB.DBMS_XMLDOM.BINARYINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    c_domnode_cisavailable="[XMLDOM] XDB.DBMS_XMLDOM.CHARACTERINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    c_domnode_clonenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CLONENODE(DBMS_XMLDOM_LIB)",
    c_domnode_closestream="[XMLDOM] XDB.DBMS_XMLDOM.CLOSESTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlbis="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLBINARYINPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlbos="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLBINARYOUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlcis="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLCHARACTERINPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_createxmlcos="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLCHARACTEROUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_flushstream="[XMLDOM] XDB.DBMS_XMLDOM.FLUSHSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_freenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREENODE(DBMS_XMLDOM_LIB)",
    c_domnode_getattributes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTES(DBMS_XMLDOM_LIB)",
    c_domnode_getchildnodes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCHILDNODES(DBMS_XMLDOM_LIB)",
    c_domnode_getexpandedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    c_domnode_getfirstchild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETFIRSTCHILD(DBMS_XMLDOM_LIB)",
    c_domnode_getlastchild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETLASTCHILD(DBMS_XMLDOM_LIB)",
    c_domnode_getlocalname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    c_domnode_getnamespace="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    c_domnode_getnextsibling="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNEXTSIBLING(DBMS_XMLDOM_LIB)",
    c_domnode_getnodefromfragment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODEFROMFRAGMENT(DBMS_XMLDOM_LIB)",
    c_domnode_getnodename="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODENAME(DBMS_XMLDOM_LIB)",
    c_domnode_getnodetype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODETYPE(DBMS_XMLDOM_LIB)",
    c_domnode_getnodevalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODEVALUE(DBMS_XMLDOM_LIB)",
    c_domnode_getownerdocument="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETOWNERDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domnode_getparentnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETPARENTNODE(DBMS_XMLDOM_LIB)",
    c_domnode_getprefix="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETPREFIX(DBMS_XMLDOM_LIB)",
    c_domnode_getprevioussibling="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETPREVIOUSSIBLING(DBMS_XMLDOM_LIB)",
    c_domnode_getpushasbinstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASBINSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_getpushascharstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASCHARSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_getschemanode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETSCHEMANODE(DBMS_XMLDOM_LIB)",
    c_domnode_hasattributes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTES(DBMS_XMLDOM_LIB)",
    c_domnode_haschildnodes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASCHILDNODES(DBMS_XMLDOM_LIB)",
    c_domnode_insertbefore="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_INSERTBEFORE(DBMS_XMLDOM_LIB)",
    c_domnode_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnode_makeattr="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEATTR(DBMS_XMLDOM_LIB)",
    c_domnode_makecdatasection="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKECDATASECTION(DBMS_XMLDOM_LIB)",
    c_domnode_makechardata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKECHARACTERDATA(DBMS_XMLDOM_LIB)",
    c_domnode_makecomment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKECOMMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makedocfrag="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makedoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTTYPE(DBMS_XMLDOM_LIB)",
    c_domnode_makedocument="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makeelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEELEMENT(DBMS_XMLDOM_LIB)",
    c_domnode_makeentity="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEENTITY(DBMS_XMLDOM_LIB)",
    c_domnode_makeentityref="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    c_domnode_makenotation="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKENOTATION(DBMS_XMLDOM_LIB)",
    c_domnode_makepi="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEPROCESSINGINSTRUCTION(DBMS_XMLDOM_LIB)",
    c_domnode_maketext="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKETEXT(DBMS_XMLDOM_LIB)",
    c_domnode_readbytesfrombis="[XMLDOM] XDB.DBMS_XMLDOM.READBYTESFROMBIS(DBMS_XMLDOM_LIB)",
    c_domnode_readbytesfrombis1="[XMLDOM] XDB.DBMS_XMLDOM.READBYTESFROMBIS1(DBMS_XMLDOM_LIB)",
    c_domnode_readcharsfromcis="[XMLDOM] XDB.DBMS_XMLDOM.READCHARSFROMCIS(DBMS_XMLDOM_LIB)",
    c_domnode_removechild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVECHILD(DBMS_XMLDOM_LIB)",
    c_domnode_replacechild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REPLACECHILD(DBMS_XMLDOM_LIB)",
    c_domnode_setdeferredbfile="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBFILE(DBMS_XMLDOM_LIB)",
    c_domnode_setdeferredblob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBLOB(DBMS_XMLDOM_LIB)",
    c_domnode_setdeferredclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDCLOB(DBMS_XMLDOM_LIB)",
    c_domnode_setnodevalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETNODEVALUE(DBMS_XMLDOM_LIB)",
    c_domnode_setprefix="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETPREFIX(DBMS_XMLDOM_LIB)",
    c_domnode_setpullasbinstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASBINSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_setpullascharstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASCHARSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_usebinarystream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_USEBINSTREAM(DBMS_XMLDOM_LIB)",
    c_domnode_writebytestobos="[XMLDOM] XDB.DBMS_XMLDOM.WRITEBYTESTOBOS(DBMS_XMLDOM_LIB)",
    c_domnode_writecharstocos="[XMLDOM] XDB.DBMS_XMLDOM.WRITECHARSTOCOS(DBMS_XMLDOM_LIB)",
    c_domnode_writetobuffer="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    c_domnode_writetoclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    c_domnodel_freenodelist="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREENODELIST(DBMS_XMLDOM_LIB)",
    c_domnodel_getlength="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODELIST_GETLENGTH(DBMS_XMLDOM_LIB)",
    c_domnodel_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODELIST_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnodel_item="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODELIST_ITEM(DBMS_XMLDOM_LIB)",
    c_domnotation_getpublicid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_GETPUBLICID(DBMS_XMLDOM_LIB)",
    c_domnotation_getsystemid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    c_domnotation_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_ISNULL(DBMS_XMLDOM_LIB)",
    c_domnotation_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_MAKENODE(DBMS_XMLDOM_LIB)",
    c_dompi_getdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_GETDATA(DBMS_XMLDOM_LIB)",
    c_dompi_gettarget="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETTARGET(DBMS_XMLDOM_LIB)",
    c_dompi_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_ISNULL(DBMS_XMLDOM_LIB)",
    c_dompi_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_MAKENODE(DBMS_XMLDOM_LIB)",
    c_dompi_setdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_SETDATA(DBMS_XMLDOM_LIB)",
    c_domstr_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_STR_ISNULL(DBMS_XMLDOM_LIB)",
    c_domtext_isnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_TEXT_ISNULL(DBMS_XMLDOM_LIB)",
    c_domtext_makenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_TEXT_MAKENODE(DBMS_XMLDOM_LIB)",
    c_domtext_splittext="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SPLITTEXT(DBMS_XMLDOM_LIB)",
    c_getbomoffset="XDB.DBMS_CLOBUTIL.GETBOMOFFSET(XDB.DBMS_XSLPROCESSOR_LIB)",
    c_getoracharsetname="XDB.DBMS_XMLDOM.XMLD_GETORACLECHARSET(DBMS_XMLDOM_LIB)",
    c_newparser="XDB.DBMS_XMLPARSER.XMLP_NEWPARSER(XDB.DBMS_XMLPARSER_LIB)",
    c_newprocessor="XDB.DBMS_XSLPROCESSOR.XSLP_NEWPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    c_newstylesheetfromdoc="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMDOC(DBMS_XSLPROCESSOR_LIB)",
    c_newstylesheetfromstring="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMSTR(DBMS_XSLPROCESSOR_LIB)",
    c_parser_freeparser="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_FREEPARSER(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getbasedir="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getdoctype="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getdocument="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETDOCUMENT(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_geterrorlog="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_getvalidationmode="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parsebuffer="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSEBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parseclob="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSECLOB(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parsedtdbuffer="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSEDTDBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_parsedtdclob="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSEDTDCLOB(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setbasedir="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setdoctype="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_seterrorlog="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setpreservewsp="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETPRESERVEWHITESPACE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_setvalidationmode="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    c_parser_showwarnings="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SHOWWARNINGS(XDB.DBMS_XMLPARSER_LIB)",
    c_processor_free="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_FREEPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxslclob="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLCLOB(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc2buf="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2BUF(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc2clob="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOB(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldoc2clobxslout="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOBXSLOUT(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldocf2buf="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2BUF(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldocf2clob="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2CLOB(DBMS_XSLPROCESSOR_LIB)",
    c_processor_pxsldocfrag="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCFRAG(DBMS_XSLPROCESSOR_LIB)",
    c_processor_seterrorlog="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_SETERRORLOG(DBMS_XSLPROCESSOR_LIB)",
    c_processor_showwarnings="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_SHOWWARNINGS(DBMS_XSLPROCESSOR_LIB)",
    c_rmbomandwrite="XDB.DBMS_XSLPROCESSOR.RMBOMANDWRITE(XDB.DBMS_XSLPROCESSOR_LIB)",
    c_selectnodes="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTNODES(DBMS_XSLPROCESSOR_LIB)",
    c_selectsinglenode="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTSINGLENODE(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_free="XDB.DBMS_XSLPROCESSOR.XSLP_FREESTYLESHEET(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_removeparam="XDB.DBMS_XSLPROCESSOR.XSLP_REMOVEPARAM(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_resetparams="XDB.DBMS_XSLPROCESSOR.XSLP_RESETPARAMS(DBMS_XSLPROCESSOR_LIB)",
    c_stylesheet_setparam="XDB.DBMS_XSLPROCESSOR.XSLP_SETPARAM(DBMS_XSLPROCESSOR_LIB)",
    c_transformnode="XDB.DBMS_XSLPROCESSOR.XSLP_TRANSFORMNODE(DBMS_XSLPROCESSOR_LIB)",
    c_valueof="XDB.DBMS_XSLPROCESSOR.XSLP_VALUEOF(DBMS_XSLPROCESSOR_LIB)",
    catclose="CTXSYS.CATINDEXMETHODS.ODCIGetInterfaces(dr$lib)",
    catsearch="CTXSYS.CTX_CATSEARCH.catsearch(dr$lib)",
    catsearch_clob="CTXSYS.CTX_CATSEARCH.catsearch(dr$lib)",
    catsearchclob="CTXSYS.CTX_CATSEARCH.catsearch(dr$lib)",
    cdb="create database",
    cdbdrv="create database driver",
    cdom="[XMLDOM] ",
    cdomattrgetexpandedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetlocalname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetnamespace="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    cdomattrgetownerelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETOWNERELEMENT(DBMS_XMLDOM_LIB)",
    cdomattrgetqualifiedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    cdomattrgetspecified="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETSPECIFIED(DBMS_XMLDOM_LIB)",
    cdomattrgetvalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETVALUE(DBMS_XMLDOM_LIB)",
    cdomattrisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_ISNULL(DBMS_XMLDOM_LIB)",
    cdomattrmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ATTR_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomattrsetvalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETVALUE(DBMS_XMLDOM_LIB)",
    cdomcdataappenddata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_APPENDDATA(DBMS_XMLDOM_LIB)",
    cdomcdatadeletedata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DELETEDATA(DBMS_XMLDOM_LIB)",
    cdomcdatagetdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_GETDATA(DBMS_XMLDOM_LIB)",
    cdomcdatagetlength="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_GETLENGTH(DBMS_XMLDOM_LIB)",
    cdomcdatainsertdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_INSERTDATA(DBMS_XMLDOM_LIB)",
    cdomcdataisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_ISNULL(DBMS_XMLDOM_LIB)",
    cdomcdatamakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomcdatareplacedata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REPLACEDATA(DBMS_XMLDOM_LIB)",
    cdomcdatasectionisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATASECTION_ISNULL(DBMS_XMLDOM_LIB)",
    cdomcdatasectionmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATASECTION_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomcdatasetdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CDATA_SETDATA(DBMS_XMLDOM_LIB)",
    cdomcdatasubstringdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SUBSTRINGDATA(DBMS_XMLDOM_LIB)",
    cdomcommentisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_COMMENT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomcommentmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_COMMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocadoptnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ADOPTNODE(DBMS_XMLDOM_LIB)",
    cdomdoccreate="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreateattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomdoccreatecdatasection="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATECDATASECTION(DBMS_XMLDOM_LIB)",
    cdomdoccreatecomment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATECOMMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreatedocfragment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreateelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEELEMENT(DBMS_XMLDOM_LIB)",
    cdomdoccreateentityref="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    cdomdoccreatefromclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NEWDOCUMENTFROMCLOB(DBMS_XMLDOM_LIB)",
    cdomdoccreatefromxmltype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NEWDOMDOCUMENTFROMXMLTYPE(DBMS_XMLDOM_LIB)",
    cdomdoccreatepi="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEPI(DBMS_XMLDOM_LIB)",
    cdomdoccreatetextnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATETEXTNODE(DBMS_XMLDOM_LIB)",
    cdomdocfragisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCFRAG_ISNULL(DBMS_XMLDOM_LIB)",
    cdomdocfragmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCFRAG_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocfragwritetobuffer="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCFRAG_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    cdomdocgetcset="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCSET(DBMS_XMLDOM_LIB)",
    cdomdocgetdoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETDOCTYPE(DBMS_XMLDOM_LIB)",
    cdomdocgetdocumentelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETDOCUMENTELEMENT(DBMS_XMLDOM_LIB)",
    cdomdocgetelementsbytagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOC_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    cdomdocgetimplementation="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETIMPLEMENTATION(DBMS_XMLDOM_LIB)",
    cdomdocgetstdaln="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETSTDALN(DBMS_XMLDOM_LIB)",
    cdomdocgetversion="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETVERSION(DBMS_XMLDOM_LIB)",
    cdomdocgetxmltype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETXMLTYPE(DBMS_XMLDOM_LIB)",
    cdomdocimportnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_IMPORTNODE(DBMS_XMLDOM_LIB)",
    cdomdocisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomdocmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocremove="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREEDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomdocsetcset="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETCSET(DBMS_XMLDOM_LIB)",
    cdomdocsetdoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETDOCTYPE(DBMS_XMLDOM_LIB)",
    cdomdocsetstdaln="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETSTANDALONE(DBMS_XMLDOM_LIB)",
    cdomdocsetversion="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETVERSION(DBMS_XMLDOM_LIB)",
    cdomdoctypefreedoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREEDOCTYPE(DBMS_XMLDOM_LIB)",
    cdomdoctypegetentities="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETENTITIES(DBMS_XMLDOM_LIB)",
    cdomdoctypegetname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETNAME(DBMS_XMLDOM_LIB)",
    cdomdoctypegetnotations="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNOTATIONS(DBMS_XMLDOM_LIB)",
    cdomdoctypegetpublicid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETPUBLICID(DBMS_XMLDOM_LIB)",
    cdomdoctypegetsystemid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    cdomdoctypeisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_ISNULL(DBMS_XMLDOM_LIB)",
    cdomdoctypemakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCTYPE_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomdocwritetobuffer="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    cdomdocwritetoclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_DOCUMENT_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    cdomelementfreeelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREEELEMENT(DBMS_XMLDOM_LIB)",
    cdomelementgetattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementgetattributenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    cdomelementgetchldbytagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetchldbytagns="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCHILDRENBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    cdomelementgetelbytagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetelbytagnamens="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_EL_GETELEMENTSBYTAGNAMENS(DBMS_XMLDOM_LIB)",
    cdomelementgetexpandedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetlocalname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    cdomelementgetnamespace="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    cdomelementgetqualifiedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_GETQUALIFIEDNAME(DBMS_XMLDOM_LIB)",
    cdomelementgettagname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETTAGNAME(DBMS_XMLDOM_LIB)",
    cdomelementhasattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomelementmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomelementnormalize="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ELEMENT_NORMALIZE(DBMS_XMLDOM_LIB)",
    cdomelementremoveattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementremoveattrnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVEATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    cdomelementresolvensprefix="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_RESOLVENAMESPACEPREFIX(DBMS_XMLDOM_LIB)",
    cdomelementsetattribute="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTE(DBMS_XMLDOM_LIB)",
    cdomelementsetattributenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETATTRIBUTENODE(DBMS_XMLDOM_LIB)",
    cdomentitygetnotationname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNOTATIONNAME(DBMS_XMLDOM_LIB)",
    cdomentitygetpublicid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_GETPUBLICID(DBMS_XMLDOM_LIB)",
    cdomentitygetsystemid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    cdomentityisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_ISNULL(DBMS_XMLDOM_LIB)",
    cdomentitymakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITY_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomentityrefisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITYREF_ISNULL(DBMS_XMLDOM_LIB)",
    cdomentityrefmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_ENTITYREF_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomimplcreatedocument="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CREATEDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomimplhasfeature="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASFEATURE(DBMS_XMLDOM_LIB)",
    cdomnnmgetlength="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_GETLENGTH(DBMS_XMLDOM_LIB)",
    cdomnnmgetnameditem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNAMEDITEM(DBMS_XMLDOM_LIB)",
    cdomnnmisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnnmitem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NAMEDNODEMAP_ITEM(DBMS_XMLDOM_LIB)",
    cdomnnmremovenameditem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVENAMEDITEM(DBMS_XMLDOM_LIB)",
    cdomnnmsetnameditem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETNAMEDITEM(DBMS_XMLDOM_LIB)",
    cdomnodeappendchild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_APPENDCHILD(DBMS_XMLDOM_LIB)",
    cdomnodebisavailable="[XMLDOM] XDB.DBMS_XMLDOM.BINARYINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    cdomnodecisavailable="[XMLDOM] XDB.DBMS_XMLDOM.CHARACTERINPUTSTREAMAVAILABLE(DBMS_XMLDOM_LIB)",
    cdomnodeclonenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_CLONENODE(DBMS_XMLDOM_LIB)",
    cdomnodeclosestream="[XMLDOM] XDB.DBMS_XMLDOM.CLOSESTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlbis="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLBINARYINPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlbos="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLBINARYOUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlcis="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLCHARACTERINPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodecreatexmlcos="[XMLDOM] XDB.DBMS_XMLDOM.CREATEXMLCHARACTEROUTPUTSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodeflushstream="[XMLDOM] XDB.DBMS_XMLDOM.FLUSHSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodefreenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREENODE(DBMS_XMLDOM_LIB)",
    cdomnodegetattributes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETATTRIBUTES(DBMS_XMLDOM_LIB)",
    cdomnodegetchildnodes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETCHILDNODES(DBMS_XMLDOM_LIB)",
    cdomnodegetexpandedname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETEXPANDEDNAME(DBMS_XMLDOM_LIB)",
    cdomnodegetfirstchild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETFIRSTCHILD(DBMS_XMLDOM_LIB)",
    cdomnodegetlastchild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETLASTCHILD(DBMS_XMLDOM_LIB)",
    cdomnodegetlocalname="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETLOCALNAME(DBMS_XMLDOM_LIB)",
    cdomnodegetnamespace="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETNAMESPACE(DBMS_XMLDOM_LIB)",
    cdomnodegetnextsibling="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNEXTSIBLING(DBMS_XMLDOM_LIB)",
    cdomnodegetnodefromfragment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODEFROMFRAGMENT(DBMS_XMLDOM_LIB)",
    cdomnodegetnodename="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODENAME(DBMS_XMLDOM_LIB)",
    cdomnodegetnodetype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODETYPE(DBMS_XMLDOM_LIB)",
    cdomnodegetnodevalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETNODEVALUE(DBMS_XMLDOM_LIB)",
    cdomnodegetownerdocument="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETOWNERDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomnodegetparentnode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETPARENTNODE(DBMS_XMLDOM_LIB)",
    cdomnodegetprefix="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETPREFIX(DBMS_XMLDOM_LIB)",
    cdomnodegetprevioussibling="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETPREVIOUSSIBLING(DBMS_XMLDOM_LIB)",
    cdomnodegetpushasbinstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASBINSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodegetpushascharstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_GETPUSHASCHARSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodegetschemanode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETSCHEMANODE(DBMS_XMLDOM_LIB)",
    cdomnodehasattributes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASATTRIBUTES(DBMS_XMLDOM_LIB)",
    cdomnodehaschildnodes="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_HASCHILDNODES(DBMS_XMLDOM_LIB)",
    cdomnodeinsertbefore="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_INSERTBEFORE(DBMS_XMLDOM_LIB)",
    cdomnodeisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnodelfreenodelist="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_FREENODELIST(DBMS_XMLDOM_LIB)",
    cdomnodelgetlength="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODELIST_GETLENGTH(DBMS_XMLDOM_LIB)",
    cdomnodelisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODELIST_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnodelitem="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODELIST_ITEM(DBMS_XMLDOM_LIB)",
    cdomnodemakeattr="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEATTR(DBMS_XMLDOM_LIB)",
    cdomnodemakecdatasection="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKECDATASECTION(DBMS_XMLDOM_LIB)",
    cdomnodemakechardata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKECHARACTERDATA(DBMS_XMLDOM_LIB)",
    cdomnodemakecomment="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKECOMMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakedocfrag="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTFRAGMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakedoctype="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENTTYPE(DBMS_XMLDOM_LIB)",
    cdomnodemakedocument="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEDOCUMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakeelement="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEELEMENT(DBMS_XMLDOM_LIB)",
    cdomnodemakeentity="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEENTITY(DBMS_XMLDOM_LIB)",
    cdomnodemakeentityref="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEENTITYREFERENCE(DBMS_XMLDOM_LIB)",
    cdomnodemakenotation="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKENOTATION(DBMS_XMLDOM_LIB)",
    cdomnodemakepi="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKEPROCESSINGINSTRUCTION(DBMS_XMLDOM_LIB)",
    cdomnodemaketext="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_MAKETEXT(DBMS_XMLDOM_LIB)",
    cdomnodereadbytesfrombis="[XMLDOM] XDB.DBMS_XMLDOM.READBYTESFROMBIS(DBMS_XMLDOM_LIB)",
    cdomnodereadbytesfrombis1="[XMLDOM] XDB.DBMS_XMLDOM.READBYTESFROMBIS1(DBMS_XMLDOM_LIB)",
    cdomnodereadcharsfromcis="[XMLDOM] XDB.DBMS_XMLDOM.READCHARSFROMCIS(DBMS_XMLDOM_LIB)",
    cdomnoderemovechild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REMOVECHILD(DBMS_XMLDOM_LIB)",
    cdomnodereplacechild="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_REPLACECHILD(DBMS_XMLDOM_LIB)",
    cdomnodesetdeferredbfile="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBFILE(DBMS_XMLDOM_LIB)",
    cdomnodesetdeferredblob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDBLOB(DBMS_XMLDOM_LIB)",
    cdomnodesetdeferredclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETDEFERREDCLOB(DBMS_XMLDOM_LIB)",
    cdomnodesetnodevalue="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETNODEVALUE(DBMS_XMLDOM_LIB)",
    cdomnodesetprefix="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SETPREFIX(DBMS_XMLDOM_LIB)",
    cdomnodesetpullasbinstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASBINSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodesetpullascharstream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_SETPULLASCHARSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodeusebinarystream="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_USEBINSTREAM(DBMS_XMLDOM_LIB)",
    cdomnodewritebytestobos="[XMLDOM] XDB.DBMS_XMLDOM.WRITEBYTESTOBOS(DBMS_XMLDOM_LIB)",
    cdomnodewritecharstocos="[XMLDOM] XDB.DBMS_XMLDOM.WRITECHARSTOCOS(DBMS_XMLDOM_LIB)",
    cdomnodewritetobuffer="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOBUFFER(DBMS_XMLDOM_LIB)",
    cdomnodewritetoclob="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NODE_WRITETOCLOB(DBMS_XMLDOM_LIB)",
    cdomnotationgetpublicid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_GETPUBLICID(DBMS_XMLDOM_LIB)",
    cdomnotationgetsystemid="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_GETSYSTEMID(DBMS_XMLDOM_LIB)",
    cdomnotationisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_ISNULL(DBMS_XMLDOM_LIB)",
    cdomnotationmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_NOTATION_MAKENODE(DBMS_XMLDOM_LIB)",
    cdompigetdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_GETDATA(DBMS_XMLDOM_LIB)",
    cdompigettarget="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_GETTARGET(DBMS_XMLDOM_LIB)",
    cdompiisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_ISNULL(DBMS_XMLDOM_LIB)",
    cdompimakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_MAKENODE(DBMS_XMLDOM_LIB)",
    cdompisetdata="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_PI_SETDATA(DBMS_XMLDOM_LIB)",
    cdomstrisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_STR_ISNULL(DBMS_XMLDOM_LIB)",
    cdomtextisnull="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_TEXT_ISNULL(DBMS_XMLDOM_LIB)",
    cdomtextmakenode="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_TEXT_MAKENODE(DBMS_XMLDOM_LIB)",
    cdomtextsplittext="[XMLDOM] XDB.DBMS_XMLDOM.XMLD_SPLITTEXT(DBMS_XMLDOM_LIB)",
    cgetbomoffset="XDB.DBMS_CLOBUTIL.GETBOMOFFSET(XDB.DBMS_XSLPROCESSOR_LIB)",
    cgetoracharsetname="XDB.DBMS_XMLDOM.XMLD_GETORACLECHARSET(DBMS_XMLDOM_LIB)",
    check_dep="XDB.DBMS_XMLSCHEMA_INT.CHECKUSERDEPENDENTS(XMLSCHEMA_LIB)",
    check_endian="MDSYS.SDO_UTIL.CHECK_ENDIAN(ORDMD_UTL_LIBS)",
    check_privilege_aclid_i="SYS.DBMS_NETWORK_ACL_ADMIN.CHECK_PRIVILEGE_ACLID_I(C)",
    checkdep="XDB.DBMS_XMLSCHEMA_INT.CHECKUSERDEPENDENTS(XMLSCHEMA_LIB)",
    checkendian="MDSYS.SDO_UTIL.CHECK_ENDIAN(ORDMD_UTL_LIBS)",
    checkprivilegeaclidi="SYS.DBMS_NETWORK_ACL_ADMIN.CHECK_PRIVILEGE_ACLID_I(C)",
    clone="SYS.JDOM_T.clone(DBMS_JDOM_LIB)",
    close="SYS.SODA_CURSOR_T.CLOSE(DBMS_SODACUR_LIB)",
    close_xdbhi="XDB.XDBHI_IM.ODCIGETINTERFACES(XDB.RESOURCE_VIEW_LIB)",
    closexdbhi="XDB.XDBHI_IM.ODCIGETINTERFACES(XDB.RESOURCE_VIEW_LIB)",
    cls="clusterware integration",
    cnewparser="XDB.DBMS_XMLPARSER.XMLP_NEWPARSER(XDB.DBMS_XMLPARSER_LIB)",
    cnewprocessor="XDB.DBMS_XSLPROCESSOR.XSLP_NEWPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    cnewstylesheetfromdoc="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMDOC(DBMS_XSLPROCESSOR_LIB)",
    cnewstylesheetfromstring="XDB.DBMS_XSLPROCESSOR.XSLP_NEWSTYLESHEETFROMSTR(DBMS_XSLPROCESSOR_LIB)",
    cnsbxml="XDB.DBMS_XMLSCHEMA_INT.CREATENSBXML(XMLSCHEMA_LIB)",
    collectmerge="SYS.SYS_NT_COLLECT_IMP.ODCIAggregateInitialize(collection_lib)",
    column_value="SYS.DBMS_SQL.column_value(c)",
    columnvalue="SYS.DBMS_SQL.column_value(c)",
    commit="SYS.DBMS_STANDARD.commi(C)/SYS.DBMS_TRANSACTION.commi(C)",
    commit_cm="SYS.DBMS_STANDARD.commit_cm(C)",
    commitcm="SYS.DBMS_STANDARD.commit_cm(C)",
    compile_schema="XDB.DBMS_XMLSCHEMA_INT.COMPILESCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COMPILESCHEMA(DBMSXSCHLSB_LIB)",
    compileschema="XDB.DBMS_XMLSCHEMA_INT.COMPILESCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COMPILESCHEMA(DBMSXSCHLSB_LIB)",
    cons="[XMLTYPE] ",
    cons_xml_adt="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_xml_anydata="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_xml_blob="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_xml_clob="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_xml_refcursor="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    cons_xml_varchar2="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consxmladt="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consxmlanydata="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consxmlblob="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consxmlclob="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consxmlrefcursor="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    consxmlvarchar2="[XMLTYPE] SYS.XMLTYPE.XMLTYPE(XMLTYPE_LIB)",
    contains="CTXSYS.CTX_CONTAINS.Textcontains(dr$lib)/CTXSYS.CTX_XPCONTAINS.xpcontains(dr$lib)/CTXSYS.DRISCORE.TextScore(dr$lib)",
    contains_clob="CTXSYS.CTX_CONTAINS.Textcontains(dr$lib)/CTXSYS.DRISCORE.TextScore(dr$lib)",
    contains_host="SYS.DBMS_NETWORK_ACL_UTILITY.does(C)",
    containsclob="CTXSYS.CTX_CONTAINS.Textcontains(dr$lib)/CTXSYS.DRISCORE.TextScore(dr$lib)",
    containshost="SYS.DBMS_NETWORK_ACL_UTILITY.does(C)",
    content_schema_is="XDB.CONTENTSCHEMAIS.contentSchemaIs(XDB.RESOURCE_VIEW_LIB)",
    contentschemais="XDB.CONTENTSCHEMAIS.contentSchemaIs(XDB.RESOURCE_VIEW_LIB)",
    convert_from_raw_icd="SYS.DBMS_STATS.CONVERT_FROM_RAW_ICD(C)",
    convertfromrawicd="SYS.DBMS_STATS.CONVERT_FROM_RAW_ICD(C)",
    converttodate="XDB.DBMS_XMLSCHEMA.CONVERTTODATE(XMLSCHEMA_LIB)",
    converttots="XDB.DBMS_XMLSCHEMA.CONVERTTOTS(XMLSCHEMA_LIB)",
    converttotstz="XDB.DBMS_XMLSCHEMA.CONVERTTOTSWITHTZ(XMLSCHEMA_LIB)",
    copy_evol_schema="XDB.DBMS_XMLSCHEMA_INT.COPYEVOLVE(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COPYEVOLVE(DBMSXSCHLSB_LIB)",
    copy_pre11gr2_metadata="MDSYS.SDO_UTIL.COPY_PRE11GR2_METADATA(ORDMD_UTL_LIBS)",
    copyevolschema="XDB.DBMS_XMLSCHEMA_INT.COPYEVOLVE(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.COPYEVOLVE(DBMSXSCHLSB_LIB)",
    copyfrombuf="SYS.DBMS_PIPE.COPYFROMBUF(C)",
    copyfrombufbinary="SYS.DBMS_PIPE.COPYFROMBUFBINARY(C)",
    copyfrombufrowid="SYS.DBMS_PIPE.COPYFROMBUFROWID(C)",
    copyintobuf="SYS.DBMS_PIPE.COPYINTOBUF(C)",
    copyintobufbinary="SYS.DBMS_PIPE.COPYINTOBUFBINARY(C)",
    copyintobufrowid="SYS.DBMS_PIPE.COPYINTOBUFROWID(C)",
    copypre11gr2metadata="MDSYS.SDO_UTIL.COPY_PRE11GR2_METADATA(ORDMD_UTL_LIBS)",
    count="SYS.PLITBLM.count(c)/SYS.SODA_OPERATION_T.COUNT(DBMS_SODAOPR_LIB)",
    cparserfreeparser="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_FREEPARSER(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetbasedir="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetdoctype="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetdocument="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETDOCUMENT(XDB.DBMS_XMLPARSER_LIB)",
    cparsergeterrorlog="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    cparsergetvalidationmode="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_GETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    cparserparsebuffer="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSEBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    cparserparseclob="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSECLOB(XDB.DBMS_XMLPARSER_LIB)",
    cparserparsedtdbuffer="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSEDTDBUFFER(XDB.DBMS_XMLPARSER_LIB)",
    cparserparsedtdclob="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_PARSEDTDCLOB(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetbasedir="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETBASEDIR(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetdoctype="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETDOCTYPE(XDB.DBMS_XMLPARSER_LIB)",
    cparserseterrorlog="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETERRORLOG(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetpreservewsp="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETPRESERVEWHITESPACE(XDB.DBMS_XMLPARSER_LIB)",
    cparsersetvalidationmode="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SETVALIDATIONMODE(XDB.DBMS_XMLPARSER_LIB)",
    cparsershowwarnings="[XMLParser] XDB.DBMS_XMLPARSER.XMLP_SHOWWARNINGS(XDB.DBMS_XMLPARSER_LIB)",
    cprocessorfree="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_FREEPROCESSOR(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxslclob="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLCLOB(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc2buf="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2BUF(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc2clob="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOB(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldoc2clobxslout="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOC2CLOBXSLOUT(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldocf2buf="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2BUF(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldocf2clob="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCF2CLOB(DBMS_XSLPROCESSOR_LIB)",
    cprocessorpxsldocfrag="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_PXSLDOCFRAG(DBMS_XSLPROCESSOR_LIB)",
    cprocessorseterrorlog="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_SETERRORLOG(DBMS_XSLPROCESSOR_LIB)",
    cprocessorshowwarnings="[XMLProcessor] XDB.DBMS_XSLPROCESSOR.XSLP_SHOWWARNINGS(DBMS_XSLPROCESSOR_LIB)",
    cpu_estimate="SYS.DBMS_ODCI.ESTIMATE_CPU_UNITS(ODCI_EXTOPT_LIB)",
    cpuestimate="SYS.DBMS_ODCI.ESTIMATE_CPU_UNITS(ODCI_EXTOPT_LIB)",
    create_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.CREATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    createarr="SYS.JDOM_T.create_Arr(DBMS_JDOM_LIB)",
    createnonschemabasedxml="SYS.XMLTYPE.CREATENONSCHEMABASEDXML(XMLTYPE_LIB)",
    createobj="SYS.JDOM_T.create_Obj(DBMS_JDOM_LIB)",
    createpipe="SYS.DBMS_PIPE.CREATEPIPE(C)",
    createrwequivalence="SYS.DBMS_ADVANCED_REWRITE.CREATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    createschemabasedxml="SYS.XMLTYPE.CREATESCHEMABASEDXML(XMLTYPE_LIB)",
    createtemplate="MDSYS.SDO_GEOR_INT.CREATETEMPLATE(ORDMD_GEOR_LIBS)",
    createxml_adt="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxml_anydata="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxml_binary="SYS.XMLTYPE.CREATEXMLFROMBINARY(XMLTYPE_LIB)",
    createxml_blob="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxml_clob="SYS.XMLTYPE.toObject(XMLTYPE_LIB)/SYS.XMLTYPE.createXML(XMLTYPE_LIB)",
    createxml_clob2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxml_refcursor="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxml_varchar2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxml_varchar22="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmladt="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmlanydata="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmlbinary="SYS.XMLTYPE.CREATEXMLFROMBINARY(XMLTYPE_LIB)",
    createxmlblob="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmlclob="SYS.XMLTYPE.toObject(XMLTYPE_LIB)/SYS.XMLTYPE.createXML(XMLTYPE_LIB)",
    createxmlclob2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmlrefcursor="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmlvarchar2="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    createxmlvarchar22="SYS.XMLTYPE.CREATEXML(XMLTYPE_LIB)",
    crmbomandwrite="XDB.DBMS_XSLPROCESSOR.RMBOMANDWRITE(XDB.DBMS_XSLPROCESSOR_LIB)",
    cselectnodes="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTNODES(DBMS_XSLPROCESSOR_LIB)",
    cselectsinglenode="XDB.DBMS_XSLPROCESSOR.XSLP_SELECTSINGLENODE(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetfree="XDB.DBMS_XSLPROCESSOR.XSLP_FREESTYLESHEET(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetremoveparam="XDB.DBMS_XSLPROCESSOR.XSLP_REMOVEPARAM(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetresetparams="XDB.DBMS_XSLPROCESSOR.XSLP_RESETPARAMS(DBMS_XSLPROCESSOR_LIB)",
    cstylesheetsetparam="XDB.DBMS_XSLPROCESSOR.XSLP_SETPARAM(DBMS_XSLPROCESSOR_LIB)",
    csy="create synonym",
    ctc="[Create Table or Cluster] ",
    ctccgi_cleanup_global_index="[Create Table or Cluster] SYS.DBMS_PART.EXEC_ALTER_INDEX_COALESCE(DBMS_PART_LIB)",
    ctccgicleanupglobalindex="[Create Table or Cluster] SYS.DBMS_PART.EXEC_ALTER_INDEX_COALESCE(DBMS_PART_LIB)",
    ctccom_cleanup_online_move="[Create Table or Cluster] SYS.DBMS_PART.CLEANUP_ONLINE_OP_INTERNAL(DBMS_PART_LIB)",
    ctccomcleanuponlinemove="[Create Table or Cluster] SYS.DBMS_PART.CLEANUP_ONLINE_OP_INTERNAL(DBMS_PART_LIB)",
    ctcdrv="[Create Table or Cluster] driver",
    ctransformnode="XDB.DBMS_XSLPROCESSOR.XSLP_TRANSFORMNODE(DBMS_XSLPROCESSOR_LIB)",
    cur="cursor manipulation",
    curdmp="cursor manipulation dump",
    cvalueof="XDB.DBMS_XSLPROCESSOR.XSLP_VALUEOF(DBMS_XSLPROCESSOR_LIB)",
    cvw="[Create VieW] ",
    cvwdrv="[Create VieW] driver",
    cvwgcd="[Create VieW] get column definition",
    cvwgcpr="[Create VieW] get table/view name, owner id given object id",
    dbg="[Debug and Diagnostics] ",
    dbga="[Debug and Diagnostics] Unified Tracing Service",
    dbgc="[Debug and Diagnostics] diagnostic framework",
    dbgd="[Debug and Diagnostics] generic debug API",
    dbgdarunaction="[Debug and Diagnostics] diagnostic events ??",
    dbgdchkeventintv="[Debug and Diagnostics] generic debug API check events set for value to activate debug",
    dbgdcopyeventnode="[Debug and Diagnostics] generic debug API transfers event information from PGA to SGA and back",
    dbgdlinkevent="[Debug and Diagnostics] generic debug API link event information into the list",
    dbgdrunactions="[Debug and Diagnostics] diagnostic events ??",
    dbgdsetevents="[Debug and Diagnostics] generic debug API set event",
    dbgdunlinkevent="[Debug and Diagnostics] generic debug API unlink event information from the list",
    dbge="[Debug and Diagnostics] diagnostic data extractor",
    dbgeendddeinvocation="[Debug and Diagnostics] diagnostic data extractor Explicitly end a DDE invocation",
    dbgeendddeinvocationimpl="[Debug and Diagnostics] diagnostic data extractor Explicitly end a DDE invocation (internal)",
    dbgeexecuteforerror="[Debug and Diagnostics] diagnostic data extractor ??",
    dbgefghtelvalidate="[Debug and Diagnostics] diagnostic data extractor ??",
    dbgeposterrorkge="[Debug and Diagnostics] diagnostic data extractor Post the error for DDE invocation from KGE",
    dbgexexplicitendinc="[Debug and Diagnostics] diagnostic data extractor explicitly end a split error processing",
    dbgexphaseii="[Debug and Diagnostics] diagnostic data extractor phase 2",
    dbgexprocesserror="[Debug and Diagnostics] diagnostic data extractor process error",
    dbgf="[Debug and Diagnostics] diagnostic inter library compile-time service",
    dbgpd="[Debug and Diagnostics] IPS package and diagnostics",
    dbgr="[Debug and Diagnostics] automatic diagnostic repository",
    dbgre="[Debug and Diagnostics] automatic diagnostic repository export/import services",
    dbgrf="[Debug and Diagnostics] automatic diagnostic repository directory and file services",
    dbgri="[Debug and Diagnostics] automatic diagnostic repository incident metadata services",
    dbgrl="[Debug and Diagnostics] automatic diagnostic repository diagnostic arb alert log",
    dbgrlr="[Debug and Diagnostics] automatic diagnostic repository diagnostic arb alert log diagnostic arb alert log",
    dbgrm="[Debug and Diagnostics] automatic diagnostic repository meta-data repository",
    dbgt="[Debug and Diagnostics] Unified tracing service, generic trace API",
    dbgtctrl_intevalctrlevent="[Debug and Diagnostics] Unified tracing service, generic trace API control internal evaluate control event",
    dbgtctrl_intevaltracefilters="[Debug and Diagnostics] Unified tracing service, generic trace API control internal evaluate trace filters",
    dbgtf="[Debug and Diagnostics] Unified tracing service, generic trace API directory and file services",
    dbgtn="[Debug and Diagnostics] Unified tracing service, generic trace API UTS viewer toolkit",
    dbgtp="[Debug and Diagnostics] Unified tracing service, generic trace API UTS viewer toolkit",
    dbgv="[Debug and Diagnostics] diagnostic viewer toolkit",
    dbgvci="[Debug and Diagnostics] diagnostic viewer toolkit for command line",
    dbgvf="[Debug and Diagnostics] diagnostic viewer toolkit for traces and files",
    dbgvl="[Debug and Diagnostics] diagnostic viewer toolkit parser",
    dbgvm="[Debug and Diagnostics] diagnostic viewer toolkit for ams metadata",
    dbgvp="[Debug and Diagnostics] diagnostic viewer toolkit parser",
    dbgxtk="[Debug and Diagnostics] xml toolkit",
    dbk="[Debug Kernel] ",
    dbkd="[Debug Kernel] kernel debug",
    dbkdchkeventrdbmserr="[Debug Kernel] kernel debug check event of RDBMS error",
    dbke="[Debug Kernel] RDBMS diagnostic data extractor",
    dbked="[Debug Kernel] RDBMS diagnostic data extractor Dumper",
    dbkeddefdump="[Debug Kernel] RDBMS diagnostic data extractor Dumper do DDE default dump",
    dbkepostkge_kgsf="[Debug Kernel] RDBMS diagnostic data extractor Post KGE error for KGSF",
    dbkgc="[Debug Kernel] generic configuration",
    dbkh="[Debug Kernel: Health Monitor] ",
    dbkhicd_create_offl_dict="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_CREATE_OFFL_DIC(C)",
    dbkhicd_create_schema="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_CREATE_SCHEM(C)",
    dbkhicd_drop_schema="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_DROP_SCHEMA(C)",
    dbkhicd_get_run_report="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_GET_RUN_REPORT(C)",
    dbkhicd_istraceenabled="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_ISTRACEENABLED(C)",
    dbkhicd_run_check="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_RUN_CHECK(C)",
    dbkhicd_run_dde_action="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_RUN_DDE_ACTION(C)",
    dbkhicd_writetotrace="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_WRITETOTRACE(C)",
    dbkhicdcreateoffldict="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_CREATE_OFFL_DIC(C)",
    dbkhicdcreateschema="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_CREATE_SCHEM(C)",
    dbkhicddropschema="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_DROP_SCHEMA(C)",
    dbkhicdgetrunreport="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_GET_RUN_REPORT(C)",
    dbkhicdistraceenabled="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_ISTRACEENABLED(C)",
    dbkhicdruncheck="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_RUN_CHECK(C)",
    dbkhicdrunddeaction="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_RUN_DDE_ACTION(C)",
    dbkhicdwritetotrace="[Debug Kernel: Health Monitor] SYS.DBMS_HM.DBKHICD_WRITETOTRACE(C)",
    dbkiicd_addline="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ADDLINE(C)",
    dbkiicd_addtofailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ADDTOFAILURESET(C)",
    dbkiicd_advisedone="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ADVISEDONE(C)",
    dbkiicd_beginfailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_BEGINFAILURESET(C)",
    dbkiicd_cancelfailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CANCELFAILURESET(C)",
    dbkiicd_changepriority="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CHANGEPRIORITY(C)",
    dbkiicd_cleanupadvise="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CLEANUPADVISE(C)",
    dbkiicd_closefailure="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CLOSEFAILURE(C)",
    dbkiicd_closescriptfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CLOSESCRIPTFILE(C)",
    dbkiicd_completefailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_COMPLETEFAILURESET(C)",
    dbkiicd_completerepairoption="[Debug Kernel] SYS.DBMS_IR.DBKIICD_COMPLETEREPAIROPTION(C)",
    dbkiicd_consolidaterepair="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CONSOLIDATEREPAIR(C)",
    dbkiicd_controlfilecheck="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CONTROLFILECHECK(C)",
    dbkiicd_createscriptfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CREATESCRIPTFILE(C)",
    dbkiicd_createworkingrepairset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CREATEWORKINGREPAIRSET(C)",
    dbkiicd_getfeasandimpact="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETFEASANDIMPACT(C)",
    dbkiicd_getfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETFILE(C)",
    dbkiicd_getline="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETLINE(C)",
    dbkiicd_getrepairadvice="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETREPAIRADVICE(C)",
    dbkiicd_istraceenabled="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ISTRACEENABLED(C)",
    dbkiicd_openscriptfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_OPENSCRIPTFILE(C)",
    dbkiicd_reeval="[Debug Kernel] SYS.DBMS_IR.DBKIICD_REEVAL(C)",
    dbkiicd_startrepairoption="[Debug Kernel] SYS.DBMS_IR.DBKIICD_STARTREPAIROPTION(C)",
    dbkiicd_updatefeasandimpact="[Debug Kernel] SYS.DBMS_IR.DBKIICD_UPDATEFEASANDIMPACT(C)",
    dbkiicd_updaterepairoption="[Debug Kernel] SYS.DBMS_IR.DBKIICD_UPDATEREPAIROPTION(C)",
    dbkiicd_writetotrace="[Debug Kernel] SYS.DBMS_IR.DBKIICD_WRITETOTRACE(C)",
    dbkiicdaddline="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ADDLINE(C)",
    dbkiicdaddtofailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ADDTOFAILURESET(C)",
    dbkiicdadvisedone="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ADVISEDONE(C)",
    dbkiicdbeginfailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_BEGINFAILURESET(C)",
    dbkiicdcancelfailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CANCELFAILURESET(C)",
    dbkiicdchangepriority="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CHANGEPRIORITY(C)",
    dbkiicdcleanupadvise="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CLEANUPADVISE(C)",
    dbkiicdclosefailure="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CLOSEFAILURE(C)",
    dbkiicdclosescriptfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CLOSESCRIPTFILE(C)",
    dbkiicdcompletefailureset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_COMPLETEFAILURESET(C)",
    dbkiicdcompleterepairoption="[Debug Kernel] SYS.DBMS_IR.DBKIICD_COMPLETEREPAIROPTION(C)",
    dbkiicdconsolidaterepair="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CONSOLIDATEREPAIR(C)",
    dbkiicdcontrolfilecheck="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CONTROLFILECHECK(C)",
    dbkiicdcreatescriptfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CREATESCRIPTFILE(C)",
    dbkiicdcreateworkingrepairset="[Debug Kernel] SYS.DBMS_IR.DBKIICD_CREATEWORKINGREPAIRSET(C)",
    dbkiicdgetfeasandimpact="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETFEASANDIMPACT(C)",
    dbkiicdgetfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETFILE(C)",
    dbkiicdgetline="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETLINE(C)",
    dbkiicdgetrepairadvice="[Debug Kernel] SYS.DBMS_IR.DBKIICD_GETREPAIRADVICE(C)",
    dbkiicdistraceenabled="[Debug Kernel] SYS.DBMS_IR.DBKIICD_ISTRACEENABLED(C)",
    dbkiicdopenscriptfile="[Debug Kernel] SYS.DBMS_IR.DBKIICD_OPENSCRIPTFILE(C)",
    dbkiicdreeval="[Debug Kernel] SYS.DBMS_IR.DBKIICD_REEVAL(C)",
    dbkiicdstartrepairoption="[Debug Kernel] SYS.DBMS_IR.DBKIICD_STARTREPAIROPTION(C)",
    dbkiicdupdatefeasandimpact="[Debug Kernel] SYS.DBMS_IR.DBKIICD_UPDATEFEASANDIMPACT(C)",
    dbkiicdupdaterepairoption="[Debug Kernel] SYS.DBMS_IR.DBKIICD_UPDATEREPAIROPTION(C)",
    dbkiicdwritetotrace="[Debug Kernel] SYS.DBMS_IR.DBKIICD_WRITETOTRACE(C)",
    dbkpls_get_location="[Debug Kernel] DBMS_ADR_INTERNAL.GET_LOCATION",
    dbkpls_home_reserve_incids="[Debug Kernel] DBMS_ADR_INTERNAL.RESERVE_INCIDS",
    dbkpls_incident_add_metadata="[Debug Kernel] DBMS_ADR_INTERNAL.INCIDENT_ADD_METADATA",
    dbkpls_incident_create="[Debug Kernel] DBMS_ADR_INTERNAL.INCIDENT_CREATE",
    dbkpls_run_purge="[Debug Kernel] DBMS_ADR_INTERNAL.RUN_PURGE",
    dbkpls_set_tracefile_id="[Debug Kernel] DBMS_ADR_INTERNAL.SET_TRACEFILE_IDENTIFIER",
    dbkpls_setup_client_home="[Debug Kernel] DBMS_ADR_INTERNAL.CREATE_ADR_HOME",
    dbkpls_write_log="[Debug Kernel] DBMS_ADR_INTERNAL.WRITE_LOG",
    dbkpls_write_trace="[Debug Kernel] DBMS_ADR_INTERNAL.WRITE_TRACE",
    dbkr="[Debug Kernel:RDBMS ADR] ",
    dbkripcs_cleanout_schema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.CLEANOUT_SCHEMA(DBMS_ADR_LIB)",
    dbkripcscleanoutschema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.CLEANOUT_SCHEMA(DBMS_ADR_LIB)",
    dbkripds_downgrade_schema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.DOWNGRADE_SCHEMA(DBMS_ADR_LIB)",
    dbkripdsdowngradeschema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.DOWNGRADE_SCHEMA(DBMS_ADR_LIB)",
    dbkripms_migrate_schema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.MIGRATE_SCHEMA(DBMS_ADR_LIB)",
    dbkripmsmigrateschema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.MIGRATE_SCHEMA(DBMS_ADR_LIB)",
    dbkriprs_recover_schema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.RECOVER_SCHEMA(DBMS_ADR_LIB)",
    dbkriprsrecoverschema="[Debug Kernel:RDBMS ADR] SYS.DBMS_ADR.RECOVER_SCHEMA(DBMS_ADR_LIB)",
    dbkt="[Debug Kernel] RDBMS UTS tracefile",
    dbms_json_addvcfreq="XDB.DBMS_JSON_INT.ADDVC(DBMS_JSON_LIB)",
    dbms_json_checkpriv="XDB.DBMS_JSON_INT.CHECKPRIVILEGE(DBMS_JSON_LIB)",
    dbms_json_createviewonpath="XDB.DBMS_JSON_INT.CREATEVIEWONPATH(DBMS_JSON_LIB)",
    dbms_json_dropvc="XDB.DBMS_JSON_INT.DROPVC(DBMS_JSON_LIB)",
    dbms_json_gendataguide="XDB.DBMS_JSON_INT.GENDATAGUIDE(DBMS_JSON_LIB)",
    dbms_json_getdataguide="XDB.DBMS_JSON_INT.GETDATAGUIDE(DBMS_JSON_LIB)",
    dbms_json_prepjsoncolinmemory="XDB.DBMS_JSON_INT.PJCOLINM(DBMS_JSON_LIB)",
    dbms_json_rename="XDB.DBMS_JSON_INT.RENAME(DBMS_JSON_LIB)",
    dbmscsx_decode_inv_tokens="XDB.DBMS_CSX_INT.DECODEINVALIDTOKENS(DBMS_XDB_LIB)",
    dbmscsx_fix_inv_tokens="XDB.DBMS_CSX_INT.FIXINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsx_genttmap="XDB.DBMS_CSX_INT.GENTTMAPPING(DBMS_XDB_LIB)",
    dbmscsx_get_all_tokens="XDB.DBMS_CSX_INT.GETALLTOKENS(DBMS_XDB_LIB)",
    dbmscsx_get_inv_nmid="XDB.DBMS_CSX_INT.GETINVALIDNAMESPACEIDS(DBMS_XDB_LIB)",
    dbmscsx_get_inv_qnid="XDB.DBMS_CSX_INT.GETINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsx_get_tableguid="XDB.DBMS_CSX_INT2.GETTABLEGUID(DBMS_XDB_LIB)",
    dbmscsx_getvocab="XDB.DBMS_CSX_INT.GETVOCABULARY(DBMS_XDB_LIB)",
    dbmscsx_getvocab_notxn1="XDB.DBMS_CSX_INT.GETVOCABULARYNOTXN(DBMS_XDB_LIB)",
    dbmscsx_getvocab_notxn2="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKENNOTXN(DBMS_XDB_LIB)",
    dbmscsx_getvocabfromtoken="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKEN(DBMS_XDB_LIB)",
    dbmscsx_impmergetoktabs="XDB.DBMS_CSX_INT.IMPORTMERGETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsx_locktm="XDB.DBMS_CSX_INT.LOCKTOKENMANAGER(DBMS_XDB_LIB)",
    dbmscsx_popkdso="XDB.DBMS_CSX_INT.POPULATEKDSOFROMGUID(DBMS_XDB_LIB)",
    dbmscsx_regtoknm="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsx_regtokqn="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsx_toktabs="XDB.DBMS_CSX_INT.CREATETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsx_tovalid="XDB.DBMS_CSX_INT.TOVALIDATE(DBMS_XDB_LIB)",
    dbmscsx_ttset="XDB.DBMS_CSX_INT.POPULATETOKENTABLESET(DBMS_XDB_LIB)",
    dbmscsx_updttset="XDB.DBMS_CSX_INT.UPDATEMASTERTABLE_INTERNAL(DBMS_XDB_LIB)",
    dbmscsxdecodeinvtokens="XDB.DBMS_CSX_INT.DECODEINVALIDTOKENS(DBMS_XDB_LIB)",
    dbmscsxfixinvtokens="XDB.DBMS_CSX_INT.FIXINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsxgenttmap="XDB.DBMS_CSX_INT.GENTTMAPPING(DBMS_XDB_LIB)",
    dbmscsxgetalltokens="XDB.DBMS_CSX_INT.GETALLTOKENS(DBMS_XDB_LIB)",
    dbmscsxgetinvnmid="XDB.DBMS_CSX_INT.GETINVALIDNAMESPACEIDS(DBMS_XDB_LIB)",
    dbmscsxgetinvqnid="XDB.DBMS_CSX_INT.GETINVALIDQNAMEIDS(DBMS_XDB_LIB)",
    dbmscsxgettableguid="XDB.DBMS_CSX_INT2.GETTABLEGUID(DBMS_XDB_LIB)",
    dbmscsxgetvocab="XDB.DBMS_CSX_INT.GETVOCABULARY(DBMS_XDB_LIB)",
    dbmscsxgetvocabfromtoken="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKEN(DBMS_XDB_LIB)",
    dbmscsxgetvocabnotxn1="XDB.DBMS_CSX_INT.GETVOCABULARYNOTXN(DBMS_XDB_LIB)",
    dbmscsxgetvocabnotxn2="XDB.DBMS_CSX_INT.GETVOCABULARYFROMTOKENNOTXN(DBMS_XDB_LIB)",
    dbmscsximpmergetoktabs="XDB.DBMS_CSX_INT.IMPORTMERGETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsxlocktm="XDB.DBMS_CSX_INT.LOCKTOKENMANAGER(DBMS_XDB_LIB)",
    dbmscsxpopkdso="XDB.DBMS_CSX_INT.POPULATEKDSOFROMGUID(DBMS_XDB_LIB)",
    dbmscsxregtoknm="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsxregtokqn="XDB.DBMS_CSX_INT.REGISTERTOKEN_INT(DBMS_XDB_LIB)",
    dbmscsxtoktabs="XDB.DBMS_CSX_INT.CREATETOKENTABLES(DBMS_XDB_LIB)",
    dbmscsxtovalid="XDB.DBMS_CSX_INT.TOVALIDATE(DBMS_XDB_LIB)",
    dbmscsxttset="XDB.DBMS_CSX_INT.POPULATETOKENTABLESET(DBMS_XDB_LIB)",
    dbmscsxupdttset="XDB.DBMS_CSX_INT.UPDATEMASTERTABLE_INTERNAL(DBMS_XDB_LIB)",
    dbmsjsonaddvcfreq="XDB.DBMS_JSON_INT.ADDVC(DBMS_JSON_LIB)",
    dbmsjsoncheckpriv="XDB.DBMS_JSON_INT.CHECKPRIVILEGE(DBMS_JSON_LIB)",
    dbmsjsoncreateviewonpath="XDB.DBMS_JSON_INT.CREATEVIEWONPATH(DBMS_JSON_LIB)",
    dbmsjsondropvc="XDB.DBMS_JSON_INT.DROPVC(DBMS_JSON_LIB)",
    dbmsjsongendataguide="XDB.DBMS_JSON_INT.GENDATAGUIDE(DBMS_JSON_LIB)",
    dbmsjsongetdataguide="XDB.DBMS_JSON_INT.GETDATAGUIDE(DBMS_JSON_LIB)",
    dbmsjsonprepjsoncolinmemory="XDB.DBMS_JSON_INT.PJCOLINM(DBMS_JSON_LIB)",
    dbmsjsonrename="XDB.DBMS_JSON_INT.RENAME(DBMS_JSON_LIB)",
    dbmsxdb9201pdmigtbl="XDB.DBMS_XDBUTIL_INT.DOMIGRATEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_9201pdmigtbl="XDB.DBMS_XDBUTIL_INT.DOMIGRATEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_acl_check="XDB.DBMS_XDB.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_add_to_root_info="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO(DBMS_XDB_LIB)",
    dbmsxdb_add_to_root_info2="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO2(DBMS_XDB_LIB)",
    dbmsxdb_addtoken="XDB.DBMS_XDB.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdb_append_resmetadata="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_append_resmetadata_ref="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_cfg_get="XDB.DBMS_XDB.CFG_GET(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_GET(DBMS_XDB_LIB)",
    dbmsxdb_cfg_refresh="XDB.DBMS_XDB.CFG_REFRESH(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_REFRESH(DBMS_XDB_LIB)",
    dbmsxdb_cfg_update="XDB.DBMS_XDB.CFG_UPDATE(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_UPDATE(DBMS_XDB_LIB)",
    dbmsxdb_changeowner="XDB.DBMS_XDB.CHANGEOWNER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEOWNER(DBMS_XDB_LIB)",
    dbmsxdb_changepriv="XDB.DBMS_XDB.CHANGEPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_checkpriv="XDB.DBMS_XDB.CHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_cleansga="XDB.DBMS_XDBUTIL_INT.CLEANSGAFORUPGRADE(DBMS_XDB_LIB)",
    dbmsxdb_cleanupnfsclients="XDB.DBMS_XDBUTIL_INT.CLEANUP_EXPIRED_NFSCLIENTS(DBMS_XDB_LIB)",
    dbmsxdb_clear_http_digests="XDB.DBMS_XDB_CONFIG.QMPXCLEARHTTPDIGESTS(DBMS_XDB_LIB)",
    dbmsxdb_clearprintmode="XDB.DBMS_XDB_PRINT.CLEARPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdb_create="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfolder="XDB.DBMS_XDB.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromblob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromclob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromref="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createfromxml="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_createoidpath="XDB.DBMS_XDB.CREATEOIDPATH(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEOIDPATH(DBMS_XDB_LIB)",
    dbmsxdb_crtsysvirfldr="XDB.DBMS_XDBUTIL_INT.CREATESYSTEMVIRTUALFOLDER(DBMS_XDB_LIB)",
    dbmsxdb_delete="XDB.DBMS_XDB.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdb_delete_resmetadata="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_delete_resmetadata2="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_deltoken="XDB.DBMS_XDB.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdb_dumpnfsstats="XDB.DBMS_XDBNFS.DUMP_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdb_exists="XDB.DBMS_XDB.EXISTSRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.EXISTSRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_fixacl="XDB.DBMS_XDBUTIL_INT.FIXACL(DBMS_XDB_LIB)",
    dbmsxdb_fixacl_downgrade="XDB.DBMS_XDBUTIL_INT.FIXACL_DOWNGRADE(DBMS_XDB_LIB)",
    dbmsxdb_flushsession="XDB.DBMS_XDBUTIL_INT.FLUSHSESSION0(DBMS_XDB_LIB)",
    dbmsxdb_get_set_global_port="XDB.DBMS_XDB_CONFIG.QMPXGETORSETGLOBALPORT(DBMS_XDB_LIB)",
    dbmsxdb_getacldoc="XDB.DBMS_XDB.GETACLDOCUMENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETACLDOCUMENT(DBMS_XDB_LIB)",
    dbmsxdb_getcontentblob="XDB.DBMS_XDB.GETCONTENTBLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTBLOB(DBMS_XDB_LIB)",
    dbmsxdb_getcontentclob="XDB.DBMS_XDB.GETCONTENTCLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTCLOB(DBMS_XDB_LIB)",
    dbmsxdb_getcontentxmlref="XDB.DBMS_XDB.GETCONTENTXMLREF(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLREF(DBMS_XDB_LIB)",
    dbmsxdb_getcontentxmltype="XDB.DBMS_XDB.GETCONTENTXMLTYPE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLTYPE(DBMS_XDB_LIB)",
    dbmsxdb_gethttpheader="XDB.DBMS_XDB.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)",
    dbmsxdb_getlocktoken="XDB.DBMS_XDB.GETLOCKTOKEN(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKEN(DBMS_XDB_LIB)",
    dbmsxdb_getnewoid="XDB.DBMS_XDBUTIL_INT.GETNEWOID(DBMS_XDB_LIB)",
    dbmsxdb_getnmsp="XDB.DBMS_XDBUTIL_INT.GETNAMESPACE(DBMS_XDB_LIB)",
    dbmsxdb_getpriv="XDB.DBMS_XDB.GETPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdb_getresoid="XDB.DBMS_XDB.GETRESOID(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETRESOID(DBMS_XDB_LIB)",
    dbmsxdb_getresource="XDB.DBMS_XDB.XDB_GETRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.XDB_GETRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_gettabletablespace="XDB.DBMS_XDBUTIL_INT.GET_TABLESPACE_TAB(DBMS_XDB_LIB)",
    dbmsxdb_gettoklist="XDB.DBMS_XDB.GETLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdb_hasblobcontent="XDB.DBMS_XDB.HASBLOBCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASBLOBCONTENT(DBMS_XDB_LIB)",
    dbmsxdb_hascharcontent="XDB.DBMS_XDB.HASCHARCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASCHARCONTENT(DBMS_XDB_LIB)",
    dbmsxdb_hasxmlcontent="XDB.DBMS_XDB.HASXMLCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLCONTENT(DBMS_XDB_LIB)",
    dbmsxdb_hasxmlreference="XDB.DBMS_XDB.HASXMLREFERENCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLREFERENCE(DBMS_XDB_LIB)",
    dbmsxdb_imp_final="XDB.DBMS_XDBUTIL_INT.INSTANCE_CALLOUT_IMP_FINAL_SYS(DBMS_XDB_LIB)",
    dbmsxdb_impcleanupxsch="XDB.DBMS_XDBUTIL_INT.IMP_CLEANUP_XML_SCHEMA_DEPS(DBMS_XDB_LIB)",
    dbmsxdb_isfolder="XDB.DBMS_XDB.ISFOLDER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ISFOLDER(DBMS_XDB_LIB)",
    dbmsxdb_link="XDB.DBMS_XDB.LINK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LINK(DBMS_XDB_LIB)",
    dbmsxdb_lock="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_lockdiscovery="XDB.DBMS_XDB.LOCKDISCOVERY(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKDISCOVERY(DBMS_XDB_LIB)",
    dbmsxdb_lockwithtimeout="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_lockxdb_movetbs="XDB.DBMS_XDB.LOCKXDB(DBMS_XDB_LIB)",
    dbmsxdb_lookup_schema_oid="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAOID(DBMS_XDB_LIB)",
    dbmsxdb_lookup_schema_url="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAURL(DBMS_XDB_LIB)",
    dbmsxdb_numtohex="XDB.DBMS_CSX_INT.NUMTOHEX(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX(DBMS_XDB_LIB)",
    dbmsxdb_numtohex2="XDB.DBMS_CSX_INT.NUMTOHEX2(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX2(DBMS_XDB_LIB)",
    dbmsxdb_processlinks="XDB.DBMS_XDB.PROCESSLINKS(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PROCESSLINKS(DBMS_XDB_LIB)",
    dbmsxdb_purge_resmetadata="XDB.DBMS_XDB.PURGERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PURGERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_rebuild_hindex="XDB.DBMS_XDB_ADMIN.REBUILD_HINDEX(DBMS_XDB_LIB)",
    dbmsxdb_refreshcontentsize="XDB.DBMS_XDB.REFRESHCONTENTSIZE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHCONTENTSIZE(DBMS_XDB_LIB)",
    dbmsxdb_refreshlock="XDB.DBMS_XDB.REFRESHLOCK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHLOCK(DBMS_XDB_LIB)",
    dbmsxdb_reload_rootschema="XDB.DBMS_XDB_ADMIN.RELOADROOTSCHEMA(DBMS_XDB_LIB)",
    dbmsxdb_rename="XDB.DBMS_XDB.RENAMERESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.RENAMERESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_resetnfsstats="XDB.DBMS_XDBNFS.RESET_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdb_set_realm="XDB.DBMS_XDB_CONFIG.SET_REALM(DBMS_XDB_LIB)",
    dbmsxdb_setacl="XDB.DBMS_XDB.SETACL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.SETACL(DBMS_XDB_LIB)",
    dbmsxdb_setlinkparents="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTS(DBMS_XDB_LIB)",
    dbmsxdb_setlinkparentsnew="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdb_setprintmode="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdb_setprintmode1="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdb_sync_resource="XDB.DBMS_XDBNFS.SYNCRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_touchresource="XDB.DBMS_XDB.TOUCHRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.TOUCHRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_unlock="XDB.DBMS_XDB.UNLOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UNLOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdb_update_resmd_qname="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_update_resmd_qname_ref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_update_resmetadata="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_update_resmetadata_ref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdb_updatexsch="XDB.DBMS_XDBUTIL_INT.UPDATE_XML_SCHEMA_DEPS0(DBMS_XDB_LIB)",
    dbmsxdb_used_port="XDB.DBMS_XDB_CONFIG.USEDPORT(DBMS_XDB_LIB)",
    dbmsxdb_usesetlinkparentsnew="XDB.DBMS_XDBUTIL_INT.USESETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdb_validate_port="XDB.DBMS_XDB.VALIDATE_PORT(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.VALIDATE_PORT(DBMS_XDB_LIB)",
    dbmsxdb_xmlschgetdeplvl="XDB.DBMS_XDBUTIL_INT.XMLSCHEMADEPENDENCYLEVEL(DBMS_XDB_LIB)",
    dbmsxdba_clrepxmlindex="XDB.DBMS_XDB_ADMIN.CLEARREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdba_createnoncekey="XDB.DBMS_XDB_ADMIN.CREATENONCEKEY(DBMS_XDB_LIB)",
    dbmsxdba_crrepxmlindex="XDB.DBMS_XDB_ADMIN.CREATEREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdba_drrepxmlindex="XDB.DBMS_XDB_ADMIN.DROPREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdba_xmlindexaddpath="XDB.DBMS_XDB_ADMIN.XMLINDEXADDPATH(DBMS_XDB_LIB)",
    dbmsxdba_xmlindexremovepath="XDB.DBMS_XDB_ADMIN.XMLINDEXREMOVEPATH(DBMS_XDB_LIB)",
    dbmsxdbaclcheck="XDB.DBMS_XDB.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ACLCHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbaclrepxmlindex="XDB.DBMS_XDB_ADMIN.CLEARREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdbacreatenoncekey="XDB.DBMS_XDB_ADMIN.CREATENONCEKEY(DBMS_XDB_LIB)",
    dbmsxdbacrrepxmlindex="XDB.DBMS_XDB_ADMIN.CREATEREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdbaddtoken="XDB.DBMS_XDB.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ADDTOLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdbaddtorootinfo="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO(DBMS_XDB_LIB)",
    dbmsxdbaddtorootinfo2="XDB.DBMS_XDB_CONFIG.ADD_TO_ROOT_INFO2(DBMS_XDB_LIB)",
    dbmsxdbadrrepxmlindex="XDB.DBMS_XDB_ADMIN.DROPREPOSITORYXMLINDEX(DBMS_XDB_LIB)",
    dbmsxdbappendresmetadata="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbappendresmetadataref="XDB.DBMS_XDB.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.APPENDRESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbaxmlindexaddpath="XDB.DBMS_XDB_ADMIN.XMLINDEXADDPATH(DBMS_XDB_LIB)",
    dbmsxdbaxmlindexremovepath="XDB.DBMS_XDB_ADMIN.XMLINDEXREMOVEPATH(DBMS_XDB_LIB)",
    dbmsxdbcfgget="XDB.DBMS_XDB.CFG_GET(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_GET(DBMS_XDB_LIB)",
    dbmsxdbcfgrefresh="XDB.DBMS_XDB.CFG_REFRESH(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_REFRESH(DBMS_XDB_LIB)",
    dbmsxdbcfgupdate="XDB.DBMS_XDB.CFG_UPDATE(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.CFG_UPDATE(DBMS_XDB_LIB)",
    dbmsxdbchangeowner="XDB.DBMS_XDB.CHANGEOWNER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEOWNER(DBMS_XDB_LIB)",
    dbmsxdbchangepriv="XDB.DBMS_XDB.CHANGEPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHANGEPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbcheckpriv="XDB.DBMS_XDB.CHECKPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CHECKPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbcleansga="XDB.DBMS_XDBUTIL_INT.CLEANSGAFORUPGRADE(DBMS_XDB_LIB)",
    dbmsxdbcleanupnfsclients="XDB.DBMS_XDBUTIL_INT.CLEANUP_EXPIRED_NFSCLIENTS(DBMS_XDB_LIB)",
    dbmsxdbclearhttpdigests="XDB.DBMS_XDB_CONFIG.QMPXCLEARHTTPDIGESTS(DBMS_XDB_LIB)",
    dbmsxdbclearprintmode="XDB.DBMS_XDB_PRINT.CLEARPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdbcreate="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefolder="XDB.DBMS_XDB.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEFOLDERINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromblob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromclob="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromref="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreatefromxml="XDB.DBMS_XDB.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbcreateoidpath="XDB.DBMS_XDB.CREATEOIDPATH(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.CREATEOIDPATH(DBMS_XDB_LIB)",
    dbmsxdbcrtsysvirfldr="XDB.DBMS_XDBUTIL_INT.CREATESYSTEMVIRTUALFOLDER(DBMS_XDB_LIB)",
    dbmsxdbdelete="XDB.DBMS_XDB.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEINTERNAL(DBMS_XDB_LIB)",
    dbmsxdbdeleteresmetadata="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbdeleteresmetadata2="XDB.DBMS_XDB.DELETERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbdeltoken="XDB.DBMS_XDB.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.DELETEFROMLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdbdumpnfsstats="XDB.DBMS_XDBNFS.DUMP_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdbexists="XDB.DBMS_XDB.EXISTSRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.EXISTSRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbfixacl="XDB.DBMS_XDBUTIL_INT.FIXACL(DBMS_XDB_LIB)",
    dbmsxdbfixacldowngrade="XDB.DBMS_XDBUTIL_INT.FIXACL_DOWNGRADE(DBMS_XDB_LIB)",
    dbmsxdbflushsession="XDB.DBMS_XDBUTIL_INT.FLUSHSESSION0(DBMS_XDB_LIB)",
    dbmsxdbgetacldoc="XDB.DBMS_XDB.GETACLDOCUMENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETACLDOCUMENT(DBMS_XDB_LIB)",
    dbmsxdbgetcontentblob="XDB.DBMS_XDB.GETCONTENTBLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTBLOB(DBMS_XDB_LIB)",
    dbmsxdbgetcontentclob="XDB.DBMS_XDB.GETCONTENTCLOB(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTCLOB(DBMS_XDB_LIB)",
    dbmsxdbgetcontentxmlref="XDB.DBMS_XDB.GETCONTENTXMLREF(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLREF(DBMS_XDB_LIB)",
    dbmsxdbgetcontentxmltype="XDB.DBMS_XDB.GETCONTENTXMLTYPE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETCONTENTXMLTYPE(DBMS_XDB_LIB)",
    dbmsxdbgethttpheader="XDB.DBMS_XDB.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.GETHTTPREQUESTHEADER(DBMS_XDB_LIB)",
    dbmsxdbgetlocktoken="XDB.DBMS_XDB.GETLOCKTOKEN(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKEN(DBMS_XDB_LIB)",
    dbmsxdbgetnewoid="XDB.DBMS_XDBUTIL_INT.GETNEWOID(DBMS_XDB_LIB)",
    dbmsxdbgetnmsp="XDB.DBMS_XDBUTIL_INT.GETNAMESPACE(DBMS_XDB_LIB)",
    dbmsxdbgetpriv="XDB.DBMS_XDB.GETPRIVILEGES(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETPRIVILEGES(DBMS_XDB_LIB)",
    dbmsxdbgetresoid="XDB.DBMS_XDB.GETRESOID(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETRESOID(DBMS_XDB_LIB)",
    dbmsxdbgetresource="XDB.DBMS_XDB.XDB_GETRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.XDB_GETRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbgetsetglobalport="XDB.DBMS_XDB_CONFIG.QMPXGETORSETGLOBALPORT(DBMS_XDB_LIB)",
    dbmsxdbgettabletablespace="XDB.DBMS_XDBUTIL_INT.GET_TABLESPACE_TAB(DBMS_XDB_LIB)",
    dbmsxdbgettoklist="XDB.DBMS_XDB.GETLOCKTOKENLIST(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.GETLOCKTOKENLIST(DBMS_XDB_LIB)",
    dbmsxdbhasblobcontent="XDB.DBMS_XDB.HASBLOBCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASBLOBCONTENT(DBMS_XDB_LIB)",
    dbmsxdbhascharcontent="XDB.DBMS_XDB.HASCHARCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASCHARCONTENT(DBMS_XDB_LIB)",
    dbmsxdbhasxmlcontent="XDB.DBMS_XDB.HASXMLCONTENT(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLCONTENT(DBMS_XDB_LIB)",
    dbmsxdbhasxmlreference="XDB.DBMS_XDB.HASXMLREFERENCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.HASXMLREFERENCE(DBMS_XDB_LIB)",
    dbmsxdbimpcleanupxsch="XDB.DBMS_XDBUTIL_INT.IMP_CLEANUP_XML_SCHEMA_DEPS(DBMS_XDB_LIB)",
    dbmsxdbimpfinal="XDB.DBMS_XDBUTIL_INT.INSTANCE_CALLOUT_IMP_FINAL_SYS(DBMS_XDB_LIB)",
    dbmsxdbisfolder="XDB.DBMS_XDB.ISFOLDER(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.ISFOLDER(DBMS_XDB_LIB)",
    dbmsxdblink="XDB.DBMS_XDB.LINK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LINK(DBMS_XDB_LIB)",
    dbmsxdblock="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdblockdiscovery="XDB.DBMS_XDB.LOCKDISCOVERY(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKDISCOVERY(DBMS_XDB_LIB)",
    dbmsxdblockwithtimeout="XDB.DBMS_XDB.LOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.LOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdblockxdbmovetbs="XDB.DBMS_XDB.LOCKXDB(DBMS_XDB_LIB)",
    dbmsxdblookupschemaoid="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAOID(DBMS_XDB_LIB)",
    dbmsxdblookupschemaurl="XDB.DBMS_XDBUTIL_INT.LOOKUPSCHEMAURL(DBMS_XDB_LIB)",
    dbmsxdbnumtohex="XDB.DBMS_CSX_INT.NUMTOHEX(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX(DBMS_XDB_LIB)",
    dbmsxdbnumtohex2="XDB.DBMS_CSX_INT.NUMTOHEX2(DBMS_XDB_LIB)/XDB.DBMS_XDBUTIL_INT.NUMTOHEX2(DBMS_XDB_LIB)",
    dbmsxdbprocesslinks="XDB.DBMS_XDB.PROCESSLINKS(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PROCESSLINKS(DBMS_XDB_LIB)",
    dbmsxdbpurgeresmetadata="XDB.DBMS_XDB.PURGERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.PURGERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbrebuildhindex="XDB.DBMS_XDB_ADMIN.REBUILD_HINDEX(DBMS_XDB_LIB)",
    dbmsxdbrefreshcontentsize="XDB.DBMS_XDB.REFRESHCONTENTSIZE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHCONTENTSIZE(DBMS_XDB_LIB)",
    dbmsxdbrefreshlock="XDB.DBMS_XDB.REFRESHLOCK(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.REFRESHLOCK(DBMS_XDB_LIB)",
    dbmsxdbreloadrootschema="XDB.DBMS_XDB_ADMIN.RELOADROOTSCHEMA(DBMS_XDB_LIB)",
    dbmsxdbrename="XDB.DBMS_XDB.RENAMERESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.RENAMERESOURCE(DBMS_XDB_LIB)",
    dbmsxdbrepos_create_repos="XDB.DBMS_XDBREPOS.CREATEREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_drop_repos="XDB.DBMS_XDBREPOS.DROPREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_mount_repos="XDB.DBMS_XDBREPOS.MOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_set_repos="XDB.DBMS_XDBREPOS.SETCURRENTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepos_unmount_repos="XDB.DBMS_XDBREPOS.UNMOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposcreaterepos="XDB.DBMS_XDBREPOS.CREATEREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposdroprepos="XDB.DBMS_XDBREPOS.DROPREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposmountrepos="XDB.DBMS_XDBREPOS.MOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbrepossetrepos="XDB.DBMS_XDBREPOS.SETCURRENTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbreposunmountrepos="XDB.DBMS_XDBREPOS.UNMOUNTREPOSITORY(DBMS_XDB_LIB)",
    dbmsxdbresetnfsstats="XDB.DBMS_XDBNFS.RESET_NFSSTATS(DBMS_XDB_LIB)",
    dbmsxdbsetacl="XDB.DBMS_XDB.SETACL(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.SETACL(DBMS_XDB_LIB)",
    dbmsxdbsetlinkparents="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTS(DBMS_XDB_LIB)",
    dbmsxdbsetlinkparentsnew="XDB.DBMS_XDBUTIL_INT.SETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdbsetprintmode="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdbsetprintmode1="XDB.DBMS_XDB_PRINT.SETPRINTMODE(DBMS_XDB_LIB)",
    dbmsxdbsetrealm="XDB.DBMS_XDB_CONFIG.SET_REALM(DBMS_XDB_LIB)",
    dbmsxdbsyncresource="XDB.DBMS_XDBNFS.SYNCRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbtouchresource="XDB.DBMS_XDB.TOUCHRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.TOUCHRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbunlock="XDB.DBMS_XDB.UNLOCKRESOURCE(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UNLOCKRESOURCE(DBMS_XDB_LIB)",
    dbmsxdbupdateresmdqname="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdateresmdqnameref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdateresmetadata="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdateresmetadataref="XDB.DBMS_XDB.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)/XDB.DBMS_XDB_REPOS.UPDATERESOURCEMETADATA(DBMS_XDB_LIB)",
    dbmsxdbupdatexsch="XDB.DBMS_XDBUTIL_INT.UPDATE_XML_SCHEMA_DEPS0(DBMS_XDB_LIB)",
    dbmsxdbusedport="XDB.DBMS_XDB_CONFIG.USEDPORT(DBMS_XDB_LIB)",
    dbmsxdbusesetlinkparentsnew="XDB.DBMS_XDBUTIL_INT.USESETLINKPARENTSNEW(DBMS_XDB_LIB)",
    dbmsxdbvalidateport="XDB.DBMS_XDB.VALIDATE_PORT(DBMS_XDB_LIB)/XDB.DBMS_XDB_CONFIG.VALIDATE_PORT(DBMS_XDB_LIB)",
    dbmsxdbxmlschgetdeplvl="XDB.DBMS_XDBUTIL_INT.XMLSCHEMADEPENDENCYLEVEL(DBMS_XDB_LIB)",
    dbmsxdbz_init_rescfg="XDB.DBMS_XDBZ0.INITXDBRESCONFIG(DBMS_XDBZ_LIB)",
    dbmsxdbz_setdeltatrigflag="XDB.DBMS_XDBZ0.SET_DELTA_TRIGFLAG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbz_setmodflg="XDB.DBMS_XDBZ0.SETMODFLG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbz_updtbldepflags="XDB.DBMS_XDBZ0.UPDATE_TABLE_DEPENDANT_FLAGS(DBMS_XDBZ_LIB)",
    dbmsxdbzinitrescfg="XDB.DBMS_XDBZ0.INITXDBRESCONFIG(DBMS_XDBZ_LIB)",
    dbmsxdbzsetdeltatrigflag="XDB.DBMS_XDBZ0.SET_DELTA_TRIGFLAG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbzsetmodflg="XDB.DBMS_XDBZ0.SETMODFLG_INTERNAL(DBMS_XDBZ_LIB)",
    dbmsxdbzupdtbldepflags="XDB.DBMS_XDBZ0.UPDATE_TABLE_DEPENDANT_FLAGS(DBMS_XDBZ_LIB)",
    dbmsxevent_clearhlist="XDB.DBMS_XEVENT.CLEARINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getappdata="XDB.DBMS_XEVENT.GETAPPLICATIONDATA(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getchdoid="XDB.DBMS_XEVENT.GETCHDOIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getcurrentuser="XDB.DBMS_XEVENT.GETUSERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getdavowner="XDB.DBMS_XEVENT.GETDAVOWNERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getevent="XDB.DBMS_XEVENT.GETEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getfirsthdlr="XDB.DBMS_XEVENT.GETFIRSTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_gethdlrlist="XDB.DBMS_XEVENT.GETHDLRLISTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getinterface="XDB.DBMS_XEVENT.GETINTFINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlang="XDB.DBMS_XEVENT.GETLANGINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlink="XDB.DBMS_XEVENT.GETLINKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlinkname="XDB.DBMS_XEVENT.GETLINKNMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getlock="XDB.DBMS_XEVENT.GETLOCKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getnexthdlr="XDB.DBMS_XEVENT.GETNEXTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getoldresource="XDB.DBMS_XEVENT.GETORESINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getoutstream="XDB.DBMS_XEVENT.GETOUTSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparameter="XDB.DBMS_XEVENT.GETPARMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparent="XDB.DBMS_XEVENT.GETPARENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparname="XDB.DBMS_XEVENT.GETPARNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparoid="XDB.DBMS_XEVENT.GETPAROIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getparpath="XDB.DBMS_XEVENT.GETPARENTPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getpath="XDB.DBMS_XEVENT.GETPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getpathname="XDB.DBMS_XEVENT.GETPATHNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getresource="XDB.DBMS_XEVENT.GETRESOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getschema="XDB.DBMS_XEVENT.GETSCHEMAINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getsource="XDB.DBMS_XEVENT.GETSOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_getxdbevent="XDB.DBMS_XEVENT.GETXDBEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_removehdlr="XDB.DBMS_XEVENT.REMOVEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxevent_setrenderpath="XDB.DBMS_XEVENT.SETRENDERPATH(DBMS_XDBEVENT_LIB)",
    dbmsxevent_setrenderstream="XDB.DBMS_XEVENT.SETRENDERSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxeventclearhlist="XDB.DBMS_XEVENT.CLEARINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetappdata="XDB.DBMS_XEVENT.GETAPPLICATIONDATA(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetchdoid="XDB.DBMS_XEVENT.GETCHDOIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetcurrentuser="XDB.DBMS_XEVENT.GETUSERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetdavowner="XDB.DBMS_XEVENT.GETDAVOWNERINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetevent="XDB.DBMS_XEVENT.GETEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetfirsthdlr="XDB.DBMS_XEVENT.GETFIRSTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgethdlrlist="XDB.DBMS_XEVENT.GETHDLRLISTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetinterface="XDB.DBMS_XEVENT.GETINTFINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlang="XDB.DBMS_XEVENT.GETLANGINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlink="XDB.DBMS_XEVENT.GETLINKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlinkname="XDB.DBMS_XEVENT.GETLINKNMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetlock="XDB.DBMS_XEVENT.GETLOCKINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetnexthdlr="XDB.DBMS_XEVENT.GETNEXTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetoldresource="XDB.DBMS_XEVENT.GETORESINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetoutstream="XDB.DBMS_XEVENT.GETOUTSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparameter="XDB.DBMS_XEVENT.GETPARMINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparent="XDB.DBMS_XEVENT.GETPARENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparname="XDB.DBMS_XEVENT.GETPARNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparoid="XDB.DBMS_XEVENT.GETPAROIDINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetparpath="XDB.DBMS_XEVENT.GETPARENTPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetpath="XDB.DBMS_XEVENT.GETPATHINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetpathname="XDB.DBMS_XEVENT.GETPATHNAMEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetresource="XDB.DBMS_XEVENT.GETRESOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetschema="XDB.DBMS_XEVENT.GETSCHEMAINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetsource="XDB.DBMS_XEVENT.GETSOURCEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventgetxdbevent="XDB.DBMS_XEVENT.GETXDBEVENTINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventremovehdlr="XDB.DBMS_XEVENT.REMOVEINTERNAL(DBMS_XDBEVENT_LIB)",
    dbmsxeventsetrenderpath="XDB.DBMS_XEVENT.SETRENDERPATH(DBMS_XDBEVENT_LIB)",
    dbmsxeventsetrenderstream="XDB.DBMS_XEVENT.SETRENDERSTREAM(DBMS_XDBEVENT_LIB)",
    dbmsxlsb_deleteresource="XDB.DBMS_XLSB.DELETERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_delnamelocks="XDB.DBMS_XLSB.DELNAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsb_hpccflush="XDB.DBMS_XLSB.HPCCFLUSH(DBMSXLSB_LIB)",
    dbmsxlsb_insert2htable="XDB.DBMS_XLSB.INSERTTOHTABLE(DBMSXLSB_LIB)",
    dbmsxlsb_insert2usrhtab="XDB.DBMS_XLSB.INSERTTOUSERHTAB(DBMSXLSB_LIB)",
    dbmsxlsb_insertresource="XDB.DBMS_XLSB.INSERTRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_insertresourcenxob="XDB.DBMS_XLSB.INSERTRESOURCENXOB(DBMSXLSB_LIB)/XDB.DBMS_XLSB.INSERTRESOURCENXOBCLOB(DBMSXLSB_LIB)",
    dbmsxlsb_insertresourceref="XDB.DBMS_XLSB.INSERTRESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsb_linkresource="XDB.DBMS_XLSB.LINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_saveacl="XDB.DBMS_XLSB.SAVEACL(DBMSXLSB_LIB)",
    dbmsxlsb_setrefcount="XDB.DBMS_XLSB.SETREFCOUNT(DBMSXLSB_LIB)",
    dbmsxlsb_touchoid="XDB.DBMS_XLSB.TOUCHOID(DBMSXLSB_LIB)",
    dbmsxlsb_unlinkresource="XDB.DBMS_XLSB.UNLINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_updatecontentxob="XDB.DBMS_XLSB.UPDATECONTENTXOB(DBMSXLSB_LIB)",
    dbmsxlsb_updatelocks="XDB.DBMS_XLSB.UPDATELOCKS(DBMSXLSB_LIB)",
    dbmsxlsb_updatenamelocks="XDB.DBMS_XLSB.UPDATENAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsb_updateresource="XDB.DBMS_XLSB.UPDATERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsb_updateresourceref="XDB.DBMS_XLSB.UPDATERESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsb_updaterootinfo="XDB.DBMS_XLSB.UPDATEROOTINFO(DBMSXLSB_LIB)",
    dbmsxlsbdeleteresource="XDB.DBMS_XLSB.DELETERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbdelnamelocks="XDB.DBMS_XLSB.DELNAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsbhpccflush="XDB.DBMS_XLSB.HPCCFLUSH(DBMSXLSB_LIB)",
    dbmsxlsbinsert2htable="XDB.DBMS_XLSB.INSERTTOHTABLE(DBMSXLSB_LIB)",
    dbmsxlsbinsert2usrhtab="XDB.DBMS_XLSB.INSERTTOUSERHTAB(DBMSXLSB_LIB)",
    dbmsxlsbinsertresource="XDB.DBMS_XLSB.INSERTRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbinsertresourcenxob="XDB.DBMS_XLSB.INSERTRESOURCENXOB(DBMSXLSB_LIB)/XDB.DBMS_XLSB.INSERTRESOURCENXOBCLOB(DBMSXLSB_LIB)",
    dbmsxlsbinsertresourceref="XDB.DBMS_XLSB.INSERTRESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsblinkresource="XDB.DBMS_XLSB.LINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbsaveacl="XDB.DBMS_XLSB.SAVEACL(DBMSXLSB_LIB)",
    dbmsxlsbsetrefcount="XDB.DBMS_XLSB.SETREFCOUNT(DBMSXLSB_LIB)",
    dbmsxlsbtouchoid="XDB.DBMS_XLSB.TOUCHOID(DBMSXLSB_LIB)",
    dbmsxlsbunlinkresource="XDB.DBMS_XLSB.UNLINKRESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbupdatecontentxob="XDB.DBMS_XLSB.UPDATECONTENTXOB(DBMSXLSB_LIB)",
    dbmsxlsbupdatelocks="XDB.DBMS_XLSB.UPDATELOCKS(DBMSXLSB_LIB)",
    dbmsxlsbupdatenamelocks="XDB.DBMS_XLSB.UPDATENAMELOCKS(DBMSXLSB_LIB)",
    dbmsxlsbupdateresource="XDB.DBMS_XLSB.UPDATERESOURCE(DBMSXLSB_LIB)",
    dbmsxlsbupdateresourceref="XDB.DBMS_XLSB.UPDATERESOURCEREF(DBMSXLSB_LIB)",
    dbmsxlsbupdaterootinfo="XDB.DBMS_XLSB.UPDATEROOTINFO(DBMSXLSB_LIB)",
    dbmsxrc_addresconfig="XDB.DBMS_RESCONFIG.ADDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_appendresconfig="XDB.DBMS_RESCONFIG.APPENDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_deleteresconfig="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_deleteresconfigwopt="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_getlisteners="XDB.DBMS_RESCONFIG.GETLISTENERS(DBMS_RC_LIB)",
    dbmsxrc_getresconfig="XDB.DBMS_RESCONFIG.GETRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_repos_addresconfig="XDB.DBMS_RESCONFIG.ADDREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_repos_deleteresconfig="XDB.DBMS_RESCONFIG.DELETEREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrc_repos_getresconfig="XDB.DBMS_RESCONFIG.GETREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcaddresconfig="XDB.DBMS_RESCONFIG.ADDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcappendresconfig="XDB.DBMS_RESCONFIG.APPENDRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcdeleteresconfig="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrcdeleteresconfigwopt="XDB.DBMS_RESCONFIG.DELETERESCONFIG(DBMS_RC_LIB)",
    dbmsxrcgetlisteners="XDB.DBMS_RESCONFIG.GETLISTENERS(DBMS_RC_LIB)",
    dbmsxrcgetresconfig="XDB.DBMS_RESCONFIG.GETRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcreposaddresconfig="XDB.DBMS_RESCONFIG.ADDREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcreposdeleteresconfig="XDB.DBMS_RESCONFIG.DELETEREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxrcreposgetresconfig="XDB.DBMS_RESCONFIG.GETREPOSITORYRESCONFIG(DBMS_RC_LIB)",
    dbmsxres_freeresource="XDB.DBMS_XDBRESOURCE.XDB_FREERESOURCE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getacl="XDB.DBMS_XDBRESOURCE.XDB_GETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getacldocfromres="XDB.DBMS_XDBRESOURCE.XDB_GETACLDOCFROMRES(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getauthor="XDB.DBMS_XDBRESOURCE.XDB_GETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcharset="XDB.DBMS_XDBRESOURCE.XDB_GETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcomment="XDB.DBMS_XDBRESOURCE.XDB_GETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentblob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTBLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentclob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTCLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentref="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTREF(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontenttype="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTVARCHAR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcontentxml="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTXML(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcreationdate="XDB.DBMS_XDBRESOURCE.XDB_GETCREATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcreator="XDB.DBMS_XDBRESOURCE.XDB_GETCREATOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getcustommeta="XDB.DBMS_XDBRESOURCE.XDB_GETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getdisplayname="XDB.DBMS_XDBRESOURCE.XDB_GETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getlanguage="XDB.DBMS_XDBRESOURCE.XDB_GETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getlastmodifier="XDB.DBMS_XDBRESOURCE.XDB_GETLASTMODIFIER(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getmodificationdate="XDB.DBMS_XDBRESOURCE.XDB_GETMODIFICATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getowner="XDB.DBMS_XDBRESOURCE.XDB_GETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getrefcount="XDB.DBMS_XDBRESOURCE.XDB_GETREFCOUNT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_getversionid="XDB.DBMS_XDBRESOURCE.XDB_GETVERSIONID(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasaclchanged="XDB.DBMS_XDBRESOURCE.XDB_HASACLCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasauthorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASAUTHORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_haschanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascharsetchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHARACTERSETCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascmchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCUSTOMMETACHG(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascommentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCOMMENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascontentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascontypechanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTTYPECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascreationdatechg="XDB.DBMS_XDBRESOURCE.XDB_HASCREATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hascreatorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCREATORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasdispnamechanged="XDB.DBMS_XDBRESOURCE.XDB_HASDISPLAYNAMECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_haslanguagechanged="XDB.DBMS_XDBRESOURCE.XDB_HASLANGUAGECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_haslastmodchanged="XDB.DBMS_XDBRESOURCE.XDB_HASLASTMODIFIERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasmodifdatechanged="XDB.DBMS_XDBRESOURCE.XDB_HASMODIFICATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasownerchanged="XDB.DBMS_XDBRESOURCE.XDB_HASOWNERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasrefcountchanged="XDB.DBMS_XDBRESOURCE.XDB_HASREFCOUNTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_hasversionidchanged="XDB.DBMS_XDBRESOURCE.XDB_HASVERSIONIDCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_isfolder="XDB.DBMS_XDBRESOURCE.XDB_ISFOLDER(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_makedocument="XDB.DBMS_XDBRESOURCE.XDB_MAKEDOCUMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_save="XDB.DBMS_XDBRESOURCE.XDB_SAVE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setaclres="XDB.DBMS_XDBRESOURCE.XDB_SETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setauthor="XDB.DBMS_XDBRESOURCE.XDB_SETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcharset="XDB.DBMS_XDBRESOURCE.XDB_SETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcomment="XDB.DBMS_XDBRESOURCE.XDB_SETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentblob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentclob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontenttype="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentxml="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcontentxref="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setcustommeta="XDB.DBMS_XDBRESOURCE.XDB_SETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setdisplayname="XDB.DBMS_XDBRESOURCE.XDB_SETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setlanguage="XDB.DBMS_XDBRESOURCE.XDB_SETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxres_setowner="XDB.DBMS_XDBRESOURCE.XDB_SETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresfreeresource="XDB.DBMS_XDBRESOURCE.XDB_FREERESOURCE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetacl="XDB.DBMS_XDBRESOURCE.XDB_GETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetacldocfromres="XDB.DBMS_XDBRESOURCE.XDB_GETACLDOCFROMRES(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetauthor="XDB.DBMS_XDBRESOURCE.XDB_GETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcharset="XDB.DBMS_XDBRESOURCE.XDB_GETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcomment="XDB.DBMS_XDBRESOURCE.XDB_GETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentblob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTBLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentclob="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTCLOB(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentref="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTREF(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontenttype="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTVARCHAR(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcontentxml="XDB.DBMS_XDBRESOURCE.XDB_GETCONTENTXML(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcreationdate="XDB.DBMS_XDBRESOURCE.XDB_GETCREATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcreator="XDB.DBMS_XDBRESOURCE.XDB_GETCREATOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetcustommeta="XDB.DBMS_XDBRESOURCE.XDB_GETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetdisplayname="XDB.DBMS_XDBRESOURCE.XDB_GETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetlanguage="XDB.DBMS_XDBRESOURCE.XDB_GETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetlastmodifier="XDB.DBMS_XDBRESOURCE.XDB_GETLASTMODIFIER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetmodificationdate="XDB.DBMS_XDBRESOURCE.XDB_GETMODIFICATIONDATE(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetowner="XDB.DBMS_XDBRESOURCE.XDB_GETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetrefcount="XDB.DBMS_XDBRESOURCE.XDB_GETREFCOUNT(DBMS_XDBRESOURCE_LIB)",
    dbmsxresgetversionid="XDB.DBMS_XDBRESOURCE.XDB_GETVERSIONID(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasaclchanged="XDB.DBMS_XDBRESOURCE.XDB_HASACLCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasauthorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASAUTHORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshaschanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascharsetchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCHARACTERSETCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascmchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCUSTOMMETACHG(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascommentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCOMMENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascontentchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascontypechanged="XDB.DBMS_XDBRESOURCE.XDB_HASCONTENTTYPECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascreationdatechg="XDB.DBMS_XDBRESOURCE.XDB_HASCREATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshascreatorchanged="XDB.DBMS_XDBRESOURCE.XDB_HASCREATORCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasdispnamechanged="XDB.DBMS_XDBRESOURCE.XDB_HASDISPLAYNAMECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshaslanguagechanged="XDB.DBMS_XDBRESOURCE.XDB_HASLANGUAGECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshaslastmodchanged="XDB.DBMS_XDBRESOURCE.XDB_HASLASTMODIFIERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasmodifdatechanged="XDB.DBMS_XDBRESOURCE.XDB_HASMODIFICATIONDATECHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasownerchanged="XDB.DBMS_XDBRESOURCE.XDB_HASOWNERCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasrefcountchanged="XDB.DBMS_XDBRESOURCE.XDB_HASREFCOUNTCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxreshasversionidchanged="XDB.DBMS_XDBRESOURCE.XDB_HASVERSIONIDCHANGED(DBMS_XDBRESOURCE_LIB)",
    dbmsxresisfolder="XDB.DBMS_XDBRESOURCE.XDB_ISFOLDER(DBMS_XDBRESOURCE_LIB)",
    dbmsxresmakedocument="XDB.DBMS_XDBRESOURCE.XDB_MAKEDOCUMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressave="XDB.DBMS_XDBRESOURCE.XDB_SAVE(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetaclres="XDB.DBMS_XDBRESOURCE.XDB_SETACL(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetauthor="XDB.DBMS_XDBRESOURCE.XDB_SETAUTHOR(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcharset="XDB.DBMS_XDBRESOURCE.XDB_SETCHARACTERSET(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcomment="XDB.DBMS_XDBRESOURCE.XDB_SETCOMMENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentblob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentclob="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontenttype="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENTTYPE(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentvchar="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentxml="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcontentxref="XDB.DBMS_XDBRESOURCE.XDB_SETCONTENT(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetcustommeta="XDB.DBMS_XDBRESOURCE.XDB_SETCUSTOMMETADATA(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetdisplayname="XDB.DBMS_XDBRESOURCE.XDB_SETDISPLAYNAME(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetlanguage="XDB.DBMS_XDBRESOURCE.XDB_SETLANGUAGE(DBMS_XDBRESOURCE_LIB)",
    dbmsxressetowner="XDB.DBMS_XDBRESOURCE.XDB_SETOWNER(DBMS_XDBRESOURCE_LIB)",
    dbmsxtr_disabletranslation="XDB.DBMS_XMLTRANSLATIONS.DISABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtr_enabletranslation="XDB.DBMS_XMLTRANSLATIONS.ENABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtr_extractxliffdoc="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_extractxliffres="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_getbasedocument="XDB.DBMS_XMLTRANSLATIONS.GETBASEDOCUMENT(DBMS_XDBTRANS_LIB)",
    dbmsxtr_mergexliffdoc="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_mergexliffres="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtr_setsourcelang="XDB.DBMS_XMLTRANSLATIONS.SETSOURCELANG(DBMS_XDBTRANS_LIB)",
    dbmsxtr_translatexml="XDB.DBMS_XMLTRANSLATIONS.TRANSLATEXML(DBMS_XDBTRANS_LIB)",
    dbmsxtr_updatetranslation="XDB.DBMS_XMLTRANSLATIONS.UPDATETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtrdisabletranslation="XDB.DBMS_XMLTRANSLATIONS.DISABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtrenabletranslation="XDB.DBMS_XMLTRANSLATIONS.ENABLETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbmsxtrextractxliffdoc="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrextractxliffres="XDB.DBMS_XMLTRANSLATIONS.EXTRACTXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrgetbasedocument="XDB.DBMS_XMLTRANSLATIONS.GETBASEDOCUMENT(DBMS_XDBTRANS_LIB)",
    dbmsxtrmergexliffdoc="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrmergexliffres="XDB.DBMS_XMLTRANSLATIONS.MERGEXLIFF(DBMS_XDBTRANS_LIB)",
    dbmsxtrsetsourcelang="XDB.DBMS_XMLTRANSLATIONS.SETSOURCELANG(DBMS_XDBTRANS_LIB)",
    dbmsxtrtranslatexml="XDB.DBMS_XMLTRANSLATIONS.TRANSLATEXML(DBMS_XDBTRANS_LIB)",
    dbmsxtrupdatetranslation="XDB.DBMS_XMLTRANSLATIONS.UPDATETRANSLATION(DBMS_XDBTRANS_LIB)",
    dbs="database",
    dbsclose="database close",
    dbsdrv="DataBaSe DRiVer routines",
    dbsgnmchg="database global name change",
    dbslrn="database log/db files rename",
    dcl="Drop Cluster",
    ddfnet="Dictionary DeFinition NETwork",
    debug_message_aux="SYS.PBREAK.DEBUG_MESSAGE_AUX(C)",
    debugmessageaux="SYS.PBREAK.DEBUG_MESSAGE_AUX(C)",
    define_column="SYS.DBMS_SQL.define_column(c)",
    definecolumn="SYS.DBMS_SQL.define_column(c)",
    del="[Delete] ",
    delete="[Delete] SYS.PLITBLM.delete(c)",
    delete_schema="[Delete] XDB.DBMS_XMLSCHEMA_INT.DELETESCHEMA(XMLSCHEMA_LIB)",
    delete_sdo_geom_metadata="[Delete] MDSYS.MDPRVT_GMD.DELETE_GEOM_METADATA_INT(ORDMD_GMD_LIBS)",
    delete_xdbpv="[Delete] XDB.XDB_PVTRIG_PKG.pvtrig_del(xdb.PATH_VIEW_LIB)",
    delete_xdbrv="[Delete] XDB.XDB_RVTRIG_PKG.RVTRIG_DEL(XDB.RESOURCE_VIEW_LIB)",
    deleteschema="[Delete] XDB.DBMS_XMLSCHEMA_INT.DELETESCHEMA(XMLSCHEMA_LIB)",
    deletesdogeommetadata="[Delete] MDSYS.MDPRVT_GMD.DELETE_GEOM_METADATA_INT(ORDMD_GMD_LIBS)",
    deletexdbpv="[Delete] XDB.XDB_PVTRIG_PKG.pvtrig_del(xdb.PATH_VIEW_LIB)",
    deletexdbrv="[Delete] XDB.XDB_RVTRIG_PKG.RVTRIG_DEL(XDB.RESOURCE_VIEW_LIB)",
    deletexml="[Delete] SYS.XMLTYPE.DELETEXML(XMLTYPE_LIB)",
    deleting="SYS.DBMS_STANDARD.deleting(C)",
    delexe="[DELete EXEcute] ",
    delrow="[DELete EXEcute] row procedure used by KXRD to delete or lock a row",
    depth1_xdbhi="XDB.XDB_ANCOP.DEPTH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    depth1xdbhi="XDB.XDB_ANCOP.DEPTH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    depth_xdbhi="XDB.XDB_ANCOP.DEPTH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    depthxdbhi="XDB.XDB_ANCOP.DEPTH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    describe="SYS.WPIUTL.describe(C)",
    dg="[Data Guard] ",
    dg_getdgname="[Data Guard] SYS.DG$GETFLATDG.dg$getDgName(JSON_LIB)/SYS.DG$GETFLATDG.dg$getFlatDg(JSON_LIB)",
    dggetdgname="[Data Guard] SYS.DG$GETFLATDG.dg$getDgName(JSON_LIB)/SYS.DG$GETFLATDG.dg$getFlatDg(JSON_LIB)",
    dgliaio="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.APPLY_IS_OFF(DBMS_LOGSTDBY_LIB)",
    dglias="[Data Guard] SYS.DBMS_LOGSTDBY.IS_APPLY_SERVER(DBMS_LOGSTDBY_LIB)",
    dglibld="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.BUILD(DBMS_LOGSTDBY_LIB)",
    dglicdscn="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.CAPTURE_SCN(DBMS_LOGSTDBY_LIB)",
    dglicfs="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.CREATE_FUTURE_SESSION(DBMS_LOGSTDBY_LIB)",
    dgliclin="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.CLEAR_LOGICAL_INSTANTIATION(DBMS_LOGSTDBY_LIB)",
    dglidfs="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.DESTROY_FUTURE_SESSION(DBMS_LOGSTDBY_LIB)",
    dglidil="[Data Guard] SYS.DBMS_LOGSTDBY.DB_IS_LOGSTDBY(DBMS_LOGSTDBY_LIB)",
    dglidlfp="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.PURGE_LOGS(DBMS_LOGSTDBY_LIB)",
    dglidlr="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.DISABLE_LOGICAL_REPLICATION(DBMS_LOGSTDBY_LIB)",
    dglidxd="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.DUMP_XDAT(DBMS_LOGSTDBY_LIB)",
    dgliechgvec="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.EDS_EVAL_CHANGE_VECTOR(DBMS_LOGSTDBY_LIB)",
    dglielr="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.ENABLE_LOGICAL_REPLICATION(DBMS_LOGSTDBY_LIB)",
    dglieuc="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.EDS_USER_CURSOR(DBMS_LOGSTDBY_LIB)",
    dglifgbs="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.FAL_REQ_BY_SEQ(DBMS_LOGSTDBY_LIB)",
    dglifsrl="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.FLUSH_SRLS(DBMS_LOGSTDBY_LIB)",
    dgligbchk="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_CHK(DBMS_LOGSTDBY_LIB)",
    dgligboff="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_OFF(DBMS_LOGSTDBY_LIB)",
    dgligboffi="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_OFF(DBMS_LOGSTDBY_LIB)",
    dgligbon="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_ON(DBMS_LOGSTDBY_LIB)",
    dgligboni="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_BYPASS_ON(DBMS_LOGSTDBY_LIB)",
    dgligchk="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GUARD_CHECK(DBMS_LOGSTDBY_LIB)",
    dgligss="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.GET_SAFE_SCN(DBMS_LOGSTDBY_LIB)",
    dglilm="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.LOCK_LSBY_META(DBMS_LOGSTDBY_LIB)",
    dglilmc="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.LOCK_LSBY_CON(DBMS_LOGSTDBY_LIB)",
    dglilmd="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.LOCK_LSBY_META(DBMS_LOGSTDBY_LIB)",
    dglirl="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.REPAIR_LSBY_INTERNAL(DBMS_LOGSTDBY_LIB)",
    dglisd_nowait="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.APPLY_STOP_NOWAIT(DBMS_LOGSTDBY_LIB)",
    dglisdnowait="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.APPLY_STOP_NOWAIT(DBMS_LOGSTDBY_LIB)",
    dglisgnr="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.SET_GUARD_NOT_READY(DBMS_LOGSTDBY_LIB)",
    dglislin="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.SET_LOGICAL_INSTANTIATION(DBMS_LOGSTDBY_LIB)",
    dgliudo="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.UPDATE_DYNAMIC_LSBY_OPTION(DBMS_LOGSTDBY_LIB)",
    dgliulm="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.UNLOCK_LSBY_META(DBMS_LOGSTDBY_LIB)",
    dgliulmc="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.UNLOCK_LSBY_CON(DBMS_LOGSTDBY_LIB)",
    dglius="[Data Guard] SYS.DBMS_INTERNAL_LOGSTDBY.SEQUENCE_UPDATE(DBMS_LOGSTDBY_LIB)",
    dglr_build_main="[Data Guard] SYS.DBMS_ROLLING.BUILD_PLAN(DBMS_ROLLING_LIB)",
    dglr_destroy_main="[Data Guard] SYS.DBMS_ROLLING.DESTROY_PLAN(DBMS_ROLLING_LIB)",
    dglr_finish_main="[Data Guard] SYS.DBMS_ROLLING.FINISH_PLAN(DBMS_ROLLING_LIB)",
    dglr_init_main="[Data Guard] SYS.DBMS_ROLLING.INIT_PLAN(DBMS_ROLLING_LIB)",
    dglr_is_idx_unsupported="[Data Guard] SYS.DBMS_INTERNAL_ROLLING.IS_IDX_UNSUPPORTED(DBMS_ROLLING_LIB)",
    dglr_rollback_main="[Data Guard] SYS.DBMS_ROLLING.ROLLBACK_PLAN(DBMS_ROLLING_LIB)",
    dglr_set_main="[Data Guard] SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglr_set_main_ns="[Data Guard] SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglr_set_upg_flags="[Data Guard] SYS.DBMS_INTERNAL_ROLLING.SET_UPGRADE_FLAGS(DBMS_ROLLING_LIB)",
    dglr_start_main="[Data Guard] SYS.DBMS_ROLLING.START_PLAN(DBMS_ROLLING_LIB)",
    dglr_switch_main="[Data Guard] SYS.DBMS_ROLLING.SWITCHOVER(DBMS_ROLLING_LIB)",
    dglrbuildmain="[Data Guard] SYS.DBMS_ROLLING.BUILD_PLAN(DBMS_ROLLING_LIB)",
    dglrdestroymain="[Data Guard] SYS.DBMS_ROLLING.DESTROY_PLAN(DBMS_ROLLING_LIB)",
    dglrfinishmain="[Data Guard] SYS.DBMS_ROLLING.FINISH_PLAN(DBMS_ROLLING_LIB)",
    dglrinitmain="[Data Guard] SYS.DBMS_ROLLING.INIT_PLAN(DBMS_ROLLING_LIB)",
    dglrisidxunsupported="[Data Guard] SYS.DBMS_INTERNAL_ROLLING.IS_IDX_UNSUPPORTED(DBMS_ROLLING_LIB)",
    dglrrollbackmain="[Data Guard] SYS.DBMS_ROLLING.ROLLBACK_PLAN(DBMS_ROLLING_LIB)",
    dglrsetmain="[Data Guard] SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglrsetmainns="[Data Guard] SYS.DBMS_ROLLING.SET_PARAMETER(DBMS_ROLLING_LIB)",
    dglrsetupgflags="[Data Guard] SYS.DBMS_INTERNAL_ROLLING.SET_UPGRADE_FLAGS(DBMS_ROLLING_LIB)",
    dglrstartmain="[Data Guard] SYS.DBMS_ROLLING.START_PLAN(DBMS_ROLLING_LIB)",
    dglrswitchmain="[Data Guard] SYS.DBMS_ROLLING.SWITCHOVER(DBMS_ROLLING_LIB)",
    di="PLSQL diana",
    directory_has_symlink_icd="SYS.DBMS_UTILITY.DIRECTORY_HAS_SYMLINK_ICD(C)",
    directoryhassymlinkicd="SYS.DBMS_UTILITY.DIRECTORY_HAS_SYMLINK_ICD(C)",
    dispatch="CTXSYS.DRIDISP.TRUSTED_CALLOUT(DR$LIB)/CTXSYS.DRIDISP.TRUSTED_CALLOUT2(DR$LIB)/CTXSYS.DRVDISP.TRUSTED_CALLOUT(DR$LIB)",
    dist_txn_sync_icd="SYS.DBMS_SYSTEM.DIST_TXN_SYNC_ICD(C)",
    disttxnsyncicd="SYS.DBMS_SYSTEM.DIST_TXN_SYNC_ICD(C)",
    diu_attribute_use_statistics="SYS.DIUTIL.diu_attribute_use_statistics(c)",
    diu_node_use_statistics="SYS.DIUTIL.diu_node_use_statistics(c)",
    diuattributeusestatistics="SYS.DIUTIL.diu_attribute_use_statistics(c)",
    diugdn="SYS.DIUTIL.diugdn(c)",
    diunodeusestatistics="SYS.DIUTIL.diu_node_use_statistics(c)",
    diustx="SYS.DIUTIL.diustx(c)",
    dixdrv="PLSQL apps ??",
    dltrig_update="XDB.XDB_DLTRIG_PKG.DLTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    dltrigupdate="XDB.XDB_DLTRIG_PKG.DLTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    dm="[Data Mining] ",
    dm_feat="[Data Mining] SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dm_kgladt="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_ADD_TABLE_LIB(SYS.DMUTIL_LIB)",
    dm_kglcre="[Data Mining] SYS.DMP_SEC.KGL_CREATE_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_CREATE_LIB(SYS.DMUTIL_LIB)",
    dm_kgldrp="[Data Mining] SYS.DBMS_DATA_MINING.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.ODM_UTIL.KGL_DROP_LIB(SYS.DMUTIL_LIB)",
    dm_kglrmt="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_REM_TABLE_LIB(SYS.DMUTIL_LIB)",
    dm_kglrnm="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_RENAME_LIB(SYS.DMUTIL_LIB)",
    dmfeat="[Data Mining] SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dmkgladt="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_ADD_TABLE_LIB(SYS.DMUTIL_LIB)",
    dmkglcre="[Data Mining] SYS.DMP_SEC.KGL_CREATE_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_CREATE_LIB(SYS.DMUTIL_LIB)",
    dmkgldrp="[Data Mining] SYS.DBMS_DATA_MINING.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.DMP_SYS.KGL_DROP_LIB(SYS.DMUTIL_LIB)/SYS.ODM_UTIL.KGL_DROP_LIB(SYS.DMUTIL_LIB)",
    dmkglrmt="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_REM_TABLE_LIB(SYS.DMUTIL_LIB)",
    dmkglrnm="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_RENAME_LIB(SYS.DMUTIL_LIB)",
    dmutil="[Data Mining] DBMS_DATA_MINING utilities",
    dmutil_check_schema="[Data Mining] SYS.DMP_SEC.CHECK_SCHEMA(SYS.DMUTIL_LIB)",
    dmutil_ecol="[Data Mining] SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_COL_LIB(DMUTIL_LIB)",
    dmutil_emrg="[Data Mining] SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_MERGE_LIB(DMUTIL_LIB)",
    dmutil_expsermod="[Data Mining] SYS.DBMS_DATA_MINING.EXPORT_SERMODEL_CALLOUT(SYS.DMUTIL_LIB)",
    dmutil_feat="[Data Mining] SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dmutil_impsermod="[Data Mining] SYS.DBMS_DATA_MINING.IMPORT_SERMODEL(SYS.DMUTIL_LIB)",
    dmutil_mare="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_REXP_LIB(DMUTIL_LIB)",
    dmutil_txttokens_bfile="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutil_txttokens_blob="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutil_txttokens_clob="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutil_txttokens_str="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutilcheckschema="[Data Mining] SYS.DMP_SEC.CHECK_SCHEMA(SYS.DMUTIL_LIB)",
    dmutilecol="[Data Mining] SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_COL_LIB(DMUTIL_LIB)",
    dmutilemrg="[Data Mining] SYS.DBMS_DATA_MINING_TRANSFORM.EXPR_MERGE_LIB(DMUTIL_LIB)",
    dmutilexpsermod="[Data Mining] SYS.DBMS_DATA_MINING.EXPORT_SERMODEL_CALLOUT(SYS.DMUTIL_LIB)",
    dmutilfeat="[Data Mining] SYS.ODM_MODEL_UTIL.DM_FEATURE(SYS.DMUTIL_LIB)",
    dmutilimpsermod="[Data Mining] SYS.DBMS_DATA_MINING.IMPORT_SERMODEL(SYS.DMUTIL_LIB)",
    dmutilmare="[Data Mining] SYS.DBMS_DATA_MINING.KGL_ALTER_REXP_LIB(DMUTIL_LIB)",
    dmutiltxttokensbfile="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutiltxttokensblob="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutiltxttokensclob="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    dmutiltxttokensstr="[Data Mining] SYS.ODM_UTIL.DM_TXT_TOKENS(SYS.DMUTIL_LIB)",
    do_print_backtrace="SYS.PBREAK.DO_PRINT_BACKTRACE(C)",
    doprintbacktrace="SYS.PBREAK.DO_PRINT_BACKTRACE(C)",
    dr="text",
    dre="text index",
    drepprep="text index perform the document indexing",
    drex="text index query",
    drg="text index",
    drl="text index",
    drn="text index",
    drop_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.DROP_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    droprwequivalence="SYS.DBMS_ADVANCED_REWRITE.DROP_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    drp="text query",
    drs="text index",
    drw="text query",
    dry="text query",
    dsy="drop synonym",
    dtb="[Drop TaBle] ",
    dtbdrp="[Drop TaBle] dependencies",
    dtbdrv="[Drop TaBle] driver",
    dteerr="date error handler",
    dxs="[XMLStore] ",
    dxs_clearkeycols="[XMLStore] SYS.DBMS_XMLSTORE.CLEARKEYCOLUMNLIST(DBMS_XMLGEN_LIB)",
    dxs_clearupdcols="[XMLStore] SYS.DBMS_XMLSTORE.CLEARUPDATECOLUMNLIST(DBMS_XMLGEN_LIB)",
    dxs_close="[XMLStore] SYS.DBMS_XMLSTORE.CLOSECONTEXT(DBMS_XMLGEN_LIB)",
    dxs_deletec="[XMLStore] SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    dxs_deletev="[XMLStore] SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    dxs_getctx="[XMLStore] SYS.DBMS_XMLSTORE.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    dxs_insertc="[XMLStore] SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    dxs_insertv="[XMLStore] SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    dxs_setkeycol="[XMLStore] SYS.DBMS_XMLSTORE.SETKEYCOLUMN(DBMS_XMLGEN_LIB)",
    dxs_setpreservews="[XMLStore] SYS.DBMS_XMLSTORE.SETPRESERVEWHITESPACE(DBMS_XMLGEN_LIB)",
    dxs_setrowtagname="[XMLStore] SYS.DBMS_XMLSTORE.SETROWTAG(DBMS_XMLGEN_LIB)",
    dxs_setupdcol="[XMLStore] SYS.DBMS_XMLSTORE.SETUPDATECOLUMN(DBMS_XMLGEN_LIB)",
    dxs_updatec="[XMLStore] SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    dxs_updatev="[XMLStore] SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    dxsclearkeycols="[XMLStore] SYS.DBMS_XMLSTORE.CLEARKEYCOLUMNLIST(DBMS_XMLGEN_LIB)",
    dxsclearupdcols="[XMLStore] SYS.DBMS_XMLSTORE.CLEARUPDATECOLUMNLIST(DBMS_XMLGEN_LIB)",
    dxsclose="[XMLStore] SYS.DBMS_XMLSTORE.CLOSECONTEXT(DBMS_XMLGEN_LIB)",
    dxsdeletec="[XMLStore] SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    dxsdeletev="[XMLStore] SYS.DBMS_XMLSTORE.DELETEXML(DBMS_XMLGEN_LIB)",
    dxsgetctx="[XMLStore] SYS.DBMS_XMLSTORE.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    dxsinsertc="[XMLStore] SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    dxsinsertv="[XMLStore] SYS.DBMS_XMLSTORE.INSERTXML(DBMS_XMLGEN_LIB)",
    dxssetkeycol="[XMLStore] SYS.DBMS_XMLSTORE.SETKEYCOLUMN(DBMS_XMLGEN_LIB)",
    dxssetpreservews="[XMLStore] SYS.DBMS_XMLSTORE.SETPRESERVEWHITESPACE(DBMS_XMLGEN_LIB)",
    dxssetrowtagname="[XMLStore] SYS.DBMS_XMLSTORE.SETROWTAG(DBMS_XMLGEN_LIB)",
    dxssetupdcol="[XMLStore] SYS.DBMS_XMLSTORE.SETUPDATECOLUMN(DBMS_XMLGEN_LIB)",
    dxsupdatec="[XMLStore] SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    dxsupdatev="[XMLStore] SYS.DBMS_XMLSTORE.UPDATEXML(DBMS_XMLGEN_LIB)",
    edit_distance="SYS.UTL_MATCH.edit_distance(c)",
    edit_distance_similarity="SYS.UTL_MATCH.edit_distance_similarity(c)",
    editdistance="SYS.UTL_MATCH.edit_distance(c)",
    editdistancesimilarity="SYS.UTL_MATCH.edit_distance_similarity(c)",
    equal_func_xdbhi="XDB.XDB_FUNCIMPL.EQUAL_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    equalfuncxdbhi="XDB.XDB_FUNCIMPL.EQUAL_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    equals_host="SYS.DBMS_NETWORK_ACL_UTILITY.can(C)",
    equalshost="SYS.DBMS_NETWORK_ACL_UTILITY.can(C)",
    err="error recovery",
    erroep="error recovery oracle error position",
    eva="evaluate",
    evactr="SQL function CHARTOROWID()",
    evartc="SQL function ROWIDTOCHAR()",
    evacst="evaluate cast",
    evadid="evaluate date: internal date to date format",
    evadis="evaluate date: internal date to string",
    evadsd="evaluate date string to date",
    evaopn2="evaluate operand",
    evapls="evaluate plsql function",
    evareo="evaluate relational operator. Compare two operands of relational expression. After compare, branch on operator type and return true or false.",
    evaval="evaluate val",
    evaxl="evaluate vector translate",
    exec_ilm_action_icd="SYS.PRVT_ILM.EXEC_ILM_ACTION_ICD(C)",
    execilmactionicd="SYS.PRVT_ILM.EXEC_ILM_ACTION_ICD(C)",
    execute_sql="SYS.DBMS_DDL.EXECUTE_SQL(C)/SYS.DBMS_SESSION.EXECUTE_SQL(C)/SYS.DBMS_TRANSACTION.EXECUTE_SQL(C)",
    executesql="SYS.DBMS_DDL.EXECUTE_SQL(C)/SYS.DBMS_SESSION.EXECUTE_SQL(C)/SYS.DBMS_TRANSACTION.EXECUTE_SQL(C)",
    exists="SYS.PLITBLM.exists(c)",
    existsnode_varchar2="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    existsnode_varchar22="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    existsnodevarchar2="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    existsnodevarchar22="SYS.XMLTYPE.EXISTSNODE(XMLTYPE_LIB)",
    expcop="evaluate callback operator list",
    expeal="evaluate its argument AND list. It returns true if argument is true, false if argument is false, and unknown if argument is unkown.",
    expepr="evaluate the argument predicate. It returns the result of the evaluation. If the operators ODFFNEARG flas is set (currently only for OPTLNN), dont evaluate the operands.",
    ext2int_name="XDB.XDB$EXTNAME2INTNAME.xdb$ExtName2IntName(XMLSCHEMA_LIB)",
    ext2intname="XDB.XDB$EXTNAME2INTNAME.xdb$ExtName2IntName(XMLSCHEMA_LIB)",
    extend="SYS.PLITBLM.extend(c)",
    extract_varchar2="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    extract_varchar22="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    extractvarchar2="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    extractvarchar22="SYS.XMLTYPE.EXTRACT(XMLTYPE_LIB)",
    filter="SYS.SODA_OPERATION_T.FILTER(DBMS_SODAOPR_LIB)",
    first="SYS.PLITBLM.first(c)",
    format_error_backtrace="SYS.DBMS_UTILITY.format_error_backtrace(C)",
    format_error_stack="SYS.DBMS_UTILITY.format_error_stack(C)",
    formaterrorbacktrace="SYS.DBMS_UTILITY.format_error_backtrace(C)",
    formaterrorstack="SYS.DBMS_UTILITY.format_error_stack(C)",
    fplib="filter projection library (exadata smartscan)",
    from_geojson_c="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    from_geojson_v="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    fromgeojsonc="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    fromgeojsonv="MDSYS.SDO_UTIL.FROM_GEOJSON(ORDMD_UTL_LIBS)",
    generate_checksum="SYS.DBMS_ADVANCED_REWRITE.GENERATE_CHECKSUM(DBMS_RWEQUIV_LIB)",
    generate_objid="SYS.DBMS_DDL_INTERNAL.GENERATE_OBJID(C)",
    generate_schema="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMA(XMLSCHEMA_LIB)",
    generate_schemas="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMAS(XMLSCHEMA_LIB)",
    generatechecksum="SYS.DBMS_ADVANCED_REWRITE.GENERATE_CHECKSUM(DBMS_RWEQUIV_LIB)",
    generateobjid="SYS.DBMS_DDL_INTERNAL.GENERATE_OBJID(C)",
    generateschema="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMA(XMLSCHEMA_LIB)",
    generateschemas="XDB.DBMS_XMLSCHEMA_INT.GENERATESCHEMAS(XMLSCHEMA_LIB)",
    geo="[Oracle Spatial] ",
    georappend="[Oracle Spatial] MDSYS.SDO_GEOR_INT.APPEND(ORDMD_GEOR_LIBS)",
    georcalccomprratio="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CALCCOMPRESSIONRATIO(ORDMD_GEOR_LIBS)",
    georcalcnominalsize="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CALCRASTERNOMINALSIZE(ORDMD_GEOR_LIBS)",
    georcalcoptimizedblocksize="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CALCOPTIMIZEDBLOCKSIZE(ORDMD_GEOR_LIBS)",
    georcalcstoragesize="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CALCRASTERSTORAGESIZE(ORDMD_GEOR_LIBS)",
    georchangecellvalue="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CHANGECELLVALUE(ORDMD_GEOR_LIBS)",
    georchangecellvalues="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CHANGECELLVALUES(ORDMD_GEOR_LIBS)",
    georchangecellvalues1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CHANGECELLVALUES(ORDMD_GEOR_LIBS)",
    georchangeformat="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CHANGEFORMAT(ORDMD_GEOR_LIBS)",
    georchangeformatcopy="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CHANGEFORMATCOPY(ORDMD_GEOR_LIBS)",
    georclassify="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CLASSIFY(ORDMD_GEOR_LIBS)",
    georclassifyp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CLASSIFYP(ORDMD_GEOR_LIBS)",
    georcompressjp2="[Oracle Spatial] MDSYS.SDO_GEOR_INT.COMPRESSJP2(ORDMD_GEOR_LIBS)",
    georconvertcellcoord="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CONVERTCELLCOORDINATE(ORDMD_GEOR_LIBS)",
    georconvertresolutions="[Oracle Spatial] MDSYS.SDO_GEOR_INT.CONVERTRESOLUTIONS(ORDMD_GEOR_LIBS)",
    geordecompressjp2="[Oracle Spatial] MDSYS.SDO_GEOR_INT.DECOMPRESSJP2(ORDMD_GEOR_LIBS)",
    geordeletegrtmetadata="[Oracle Spatial] MDSYS.SDO_GEOR_DEF.DELETEGRTMETAENTRY(ORDMD_GEOR_LIBS)",
    geordeletepyramid="[Oracle Spatial] MDSYS.SDO_GEOR_INT.DELETEPYRAMID(ORDMD_GEOR_LIBS)",
    geordeleterdtmetadata="[Oracle Spatial] MDSYS.SDO_GEOR_DEF.DELETERDTMETAENTRY(ORDMD_GEOR_LIBS)",
    geordeleteuserdata="[Oracle Spatial] MDSYS.SDO_GEOR_DEF.DELETEUSERDATA(ORDMD_GEOR_LIBS)",
    geordodge="[Oracle Spatial] MDSYS.SDO_GEOR_IP.DODGE0(ORDMD_GEOR_LIBS)",
    geordodge1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.DODGE1(ORDMD_GEOR_LIBS)",
    geordodgep1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.DODGEP1(ORDMD_GEOR_LIBS)",
    geordodgepp1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.DODGEPP1(ORDMD_GEOR_LIBS)",
    georemptyblocks="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EMPTYBLOCKS(ORDMD_GEOR_LIBS)",
    georequalize="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EQUALIZE0(ORDMD_GEOR_LIBS)",
    georequalizeblob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EQUALIZE0_BLOB(ORDMD_GEOR_LIBS)",
    georequalizep0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EQUALIZEP0(ORDMD_GEOR_LIBS)",
    georevaluate="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EVALUATE(ORDMD_GEOR_LIBS)",
    georevaluate1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EVALUATE(ORDMD_GEOR_LIBS)",
    georevaluates="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EVALUATES(ORDMD_GEOR_LIBS)",
    georevaluates1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.EVALUATES(ORDMD_GEOR_LIBS)",
    georfilter="[Oracle Spatial] MDSYS.SDO_GEOR_INT.FILTER0(ORDMD_GEOR_LIBS)",
    georfilterblob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.FILTER0_BLOB(ORDMD_GEOR_LIBS)",
    georfilterp0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.FILTERP0(ORDMD_GEOR_LIBS)",
    georfindcells="[Oracle Spatial] MDSYS.SDO_GEOR_INT.FINDCELLS(ORDMD_GEOR_LIBS)",
    georfindcellspunit="[Oracle Spatial] MDSYS.SDO_GEOR_INT.FINDCELLSPUNIT(ORDMD_GEOR_LIBS)",
    georgenblockmbr="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATEBLOCKMBR(ORDMD_GEOR_LIBS)",
    georgeneratepyramid="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATEPYRAMID0(ORDMD_GEOR_LIBS)",
    georgeneratepyramidp0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATEPYRAMIDP0(ORDMD_GEOR_LIBS)",
    georgeneratepyramidpp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATEPYRAMIDPP(ORDMD_GEOR_LIBS)",
    georgeneratestatistics="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESTATISTICS(ORDMD_GEOR_LIBS)",
    georgeneratestatistics1p="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESTATISTICS1P(ORDMD_GEOR_LIBS)",
    georgeneratestatisticsmax="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESTATISTICSMAX(ORDMD_GEOR_LIBS)",
    georgeneratestatisticsmedian="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESTATISTICSMEDIAN(ORDMD_GEOR_LIBS)",
    georgeneratestatisticsp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESTATISTICSP(ORDMD_GEOR_LIBS)",
    georgenspatialextent="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESPATIALEXTENT(ORDMD_GEOR_LIBS)",
    georgenspatialextent1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GENERATESPATIALEXTENT(ORDMD_GEOR_LIBS)",
    georgeoreference="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GEOREFERENCE(ORDMD_GEOR_LIBS)",
    georgetbitmapmask="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETBITMAPMASK(ORDMD_GEOR_LIBS)",
    georgetcellcoord2="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETCELLCOORDINATE2(ORDMD_GEOR_LIBS)",
    georgetcellcoordinate="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETCELLCOORDINATE(ORDMD_GEOR_LIBS)",
    georgetcellvalue1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETCELLVALUE(ORDMD_GEOR_LIBS)",
    georgetcellvalue2="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETCELLVALUE(ORDMD_GEOR_LIBS)",
    georgetcellvalue3="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETCELLVALUES(ORDMD_GEOR_LIBS)",
    georgetcellvalue4="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETCELLVALUES(ORDMD_GEOR_LIBS)",
    georgetjp2tilesize="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETJP2TILESIZE(ORDMD_GEOR_LIBS)",
    georgetmodelcoord2="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETMODELCOORDINATE(ORDMD_GEOR_LIBS)",
    georgetmodelcoordinate="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETMODELCOORDINATE(ORDMD_GEOR_LIBS)",
    georgetmosaicresolutions="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETMOSAICRESOLUTIONS(ORDMD_GEOR_LIBS)",
    georgetmosaicstatistics="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETMOSAICSTATISTICS(ORDMD_GEOR_LIBS)",
    georgetmosaicsubset="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETMOSAICSUBSET0(ORDMD_GEOR_LIBS)",
    georgetrasterblocklocator="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETRASTERBLOCKLOCATOR(ORDMD_GEOR_LIBS)",
    georgetrasterblocklocator1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETRASTERBLOCKLOCATOR(ORDMD_GEOR_LIBS)",
    georgetrasterizedgeometry="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETRASTERIZEDGEOMETRY(ORDMD_GEOR_LIBS)",
    georgetrasterrange="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETRASTERRANGE(ORDMD_GEOR_LIBS)",
    georgetrastersubset="[Oracle Spatial] MDSYS.SDO_GEOR_INT.GETRASTERSUBSET(ORDMD_GEOR_LIBS)",
    georhasbitmapmask="[Oracle Spatial] MDSYS.SDO_GEOR_INT.HASBITMAPMASK(ORDMD_GEOR_LIBS)",
    georhistogrammatch="[Oracle Spatial] MDSYS.SDO_GEOR_INT.HISTOGRAMMATCH0(ORDMD_GEOR_LIBS)",
    georhistogrammatch1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.HISTOGRAMMATCH1(ORDMD_GEOR_LIBS)",
    georhistogrammatchp0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.HISTOGRAMMATCHP0(ORDMD_GEOR_LIBS)",
    georhistogrammatchp1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.HISTOGRAMMATCHP1(ORDMD_GEOR_LIBS)",
    georisoverlap="[Oracle Spatial] MDSYS.SDO_GEOR_INT.ISOVERLAP(ORDMD_GEOR_LIBS)",
    georisvalidentry2="[Oracle Spatial] MDSYS.SDO_GEOR_DEF.ISVALIDENTRY2(ORDMD_GEOR_LIBS)",
    geormask="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MASK(ORDMD_GEOR_LIBS)",
    geormathop="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MATHOP(ORDMD_GEOR_LIBS)",
    geormathopp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MATHOPP(ORDMD_GEOR_LIBS)",
    geormosaicfillgap="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MOSAICFILLGAP(ORDMD_GEOR_LIBS)",
    geormosaick="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MOSAICK0(ORDMD_GEOR_LIBS)",
    geormosaicsubset="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MOSAICSUBSET0(ORDMD_GEOR_LIBS)",
    geormosaicsubsetp0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MOSAICSUBSETP0(ORDMD_GEOR_LIBS)",
    geormosaicsubsetpp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.MOSAICSUBSETPREPARE(ORDMD_GEOR_LIBS)",
    geornormalize="[Oracle Spatial] MDSYS.SDO_GEOR_INT.NORMALIZE0(ORDMD_GEOR_LIBS)",
    geornormalize1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.NORMALIZE1(ORDMD_GEOR_LIBS)",
    geornormalizeblob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.NORMALIZE0_BLOB(ORDMD_GEOR_LIBS)",
    geornormalizep0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.NORMALIZEP0(ORDMD_GEOR_LIBS)",
    geornormalizep1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.NORMALIZEP1(ORDMD_GEOR_LIBS)",
    georpiecewisestretch="[Oracle Spatial] MDSYS.SDO_GEOR_INT.PIECEWISESTRETCH0(ORDMD_GEOR_LIBS)",
    georpiecewisestretchblob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.PIECEWISESTRETCH0_BLOB(ORDMD_GEOR_LIBS)",
    georpiecewisestretchp0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.PIECEWISESTRETCHP0(ORDMD_GEOR_LIBS)",
    georpopulaterdt="[Oracle Spatial] MDSYS.SDO_GEOR_INT.POPULATERDT(ORDMD_GEOR_LIBS)",
    georpreparerdt1="[Oracle Spatial] MDSYS.SDO_GEOR_INT.PREPARERDT1(ORDMD_GEOR_LIBS)",
    georpreparerdtw="[Oracle Spatial] MDSYS.SDO_GEOR_INT.PREPARERDT(ORDMD_GEOR_LIBS)",
    georrasterdiff="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERDIFF(ORDMD_GEOR_LIBS)",
    georrasterdiffp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERDIFFP(ORDMD_GEOR_LIBS)",
    georrasterizepolygon="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERIZEPOLYGON(ORDMD_GEOR_LIBS)",
    georrastermathop="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERMATHOP(ORDMD_GEOR_LIBS)",
    georrastermathopp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERMATHOPP(ORDMD_GEOR_LIBS)",
    georrasterover="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTEROVER(ORDMD_GEOR_LIBS)",
    georrasteroverp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTEROVERP(ORDMD_GEOR_LIBS)",
    georrasterupdate="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERUPDATE(ORDMD_GEOR_LIBS)",
    georrasterupdatep="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RASTERUPDATEP(ORDMD_GEOR_LIBS)",
    georrectify="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RECTIFY(ORDMD_GEOR_LIBS)",
    georrectifyblob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RECTIFY(ORDMD_GEOR_LIBS)",
    georrectifyparallel="[Oracle Spatial] MDSYS.SDO_GEOR_INT.RECTIFYPARALLEL(ORDMD_GEOR_LIBS)",
    georreproject="[Oracle Spatial] MDSYS.SDO_GEOR_INT.REPROJECT(ORDMD_GEOR_LIBS)",
    georreprojecttolob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.REPROJECT(ORDMD_GEOR_LIBS)",
    georscale="[Oracle Spatial] MDSYS.SDO_GEOR_INT.SCALE(ORDMD_GEOR_LIBS)",
    georscalecopy="[Oracle Spatial] MDSYS.SDO_GEOR_INT.SCALECOPY(ORDMD_GEOR_LIBS)",
    georsetbitmapmask="[Oracle Spatial] MDSYS.SDO_GEOR_INT.SETBITMAPMASK(ORDMD_GEOR_LIBS)",
    georsetultcoordinate="[Oracle Spatial] MDSYS.SDO_GEOR_INT.SETULTCOORDINATE(ORDMD_GEOR_LIBS)",
    georstack="[Oracle Spatial] MDSYS.SDO_GEOR_INT.STACK(ORDMD_GEOR_LIBS)",
    georstackp="[Oracle Spatial] MDSYS.SDO_GEOR_INT.STACKP(ORDMD_GEOR_LIBS)",
    georstretch="[Oracle Spatial] MDSYS.SDO_GEOR_INT.STRETCH0(ORDMD_GEOR_LIBS)",
    georstretchblob="[Oracle Spatial] MDSYS.SDO_GEOR_INT.STRETCH0_BLOB(ORDMD_GEOR_LIBS)",
    georstretchp0="[Oracle Spatial] MDSYS.SDO_GEOR_INT.STRETCHP0(ORDMD_GEOR_LIBS)",
    georsubset="[Oracle Spatial] MDSYS.SDO_GEOR_INT.SUBSET(ORDMD_GEOR_LIBS)",
    georval="[Oracle Spatial] MDSYS.SDO_GEOR_INT.VALIDATE_GEORASTER(ORDMD_GEOR_LIBS)",
    georvalidateblockmbr="[Oracle Spatial] MDSYS.SDO_GEOR_INT.VALIDATEBLOCKMBR(ORDMD_GEOR_LIBS)",
    georvalidateformosaicsubset="[Oracle Spatial] MDSYS.SDO_GEOR_INT.VALIDATEFORMOSAICSUBSET0(ORDMD_GEOR_LIBS)",
    georxaddnodata="[Oracle Spatial] MDSYS.SDO_GEORX.ADDNODATA(ORDMD_GEORX_LIBS)",
    georxappendsourceinfo="[Oracle Spatial] MDSYS.SDO_GEORX.APPENDSOURCEINFO(ORDMD_GEORX_LIBS)",
    georxcreateblank="[Oracle Spatial] MDSYS.SDO_GEORX.CREATEBLANK(ORDMD_GEORX_LIBS)",
    georxdeletegcp="[Oracle Spatial] MDSYS.SDO_GEORX.DELETEGCP(ORDMD_GEORX_LIBS)",
    georxdeletenodata="[Oracle Spatial] MDSYS.SDO_GEORX.DELETENODATA(ORDMD_GEORX_LIBS)",
    georxgeneratespatialres="[Oracle Spatial] MDSYS.SDO_GEORX.GENERATESPATIALRES(ORDMD_GEORX_LIBS)",
    georxgeoreference="[Oracle Spatial] MDSYS.SDO_GEORX.GEOREFERENCE(ORDMD_GEORX_LIBS)",
    georxgetallnodata="[Oracle Spatial] MDSYS.SDO_GEORX.GETNODATA(ORDMD_GEORX_LIBS)",
    georxgetbanddimsize="[Oracle Spatial] MDSYS.SDO_GEORX.GETBANDDIMSIZE(ORDMD_GEORX_LIBS)",
    georxgetbegindatetime="[Oracle Spatial] MDSYS.SDO_GEORX.GETBEGINDATETIME(ORDMD_GEORX_LIBS)",
    georxgetbinfuncdata="[Oracle Spatial] MDSYS.SDO_GEORX.GETBINFUNCTION(ORDMD_GEORX_LIBS)",
    georxgetbintable="[Oracle Spatial] MDSYS.SDO_GEORX.GETBINTABLE(ORDMD_GEORX_LIBS)",
    georxgetbintype="[Oracle Spatial] MDSYS.SDO_GEORX.GETBINTYPE(ORDMD_GEORX_LIBS)",
    georxgetblankcellvalue="[Oracle Spatial] MDSYS.SDO_GEORX.GETBLANKCELLVALUE(ORDMD_GEORX_LIBS)",
    georxgetblockingtype="[Oracle Spatial] MDSYS.SDO_GEORX.GETBLOCKINGTYPE(ORDMD_GEORX_LIBS)",
    georxgetblocksize="[Oracle Spatial] MDSYS.SDO_GEORX.GETBLOCKSIZE(ORDMD_GEORX_LIBS)",
    georxgetcelldepth="[Oracle Spatial] MDSYS.SDO_GEORX.GETCELLDEPTH(ORDMD_GEORX_LIBS)",
    georxgetcelldepthtext="[Oracle Spatial] MDSYS.SDO_GEORX.GETCELLDEPTHTEXT(ORDMD_GEORX_LIBS)",
    georxgetcolormap="[Oracle Spatial] MDSYS.SDO_GEORX.GETCOLORMAP(ORDMD_GEORX_LIBS)",
    georxgetcolormaptable="[Oracle Spatial] MDSYS.SDO_GEORX.GETCOLORMAPTABLE(ORDMD_GEORX_LIBS)",
    georxgetcompressiontype="[Oracle Spatial] MDSYS.SDO_GEORX.GETCOMPRESSIONTYPE(ORDMD_GEORX_LIBS)",
    georxgetdefaultalpha="[Oracle Spatial] MDSYS.SDO_GEORX.GETDEFAULTALPHA(ORDMD_GEORX_LIBS)",
    georxgetdefaultblue="[Oracle Spatial] MDSYS.SDO_GEORX.GETDEFAULTBLUE(ORDMD_GEORX_LIBS)",
    georxgetdefaultcolorlayer="[Oracle Spatial] MDSYS.SDO_GEORX.GETDEFAULTCOLORLAYER(ORDMD_GEORX_LIBS)",
    georxgetdefaultgreen="[Oracle Spatial] MDSYS.SDO_GEORX.GETDEFAULTGREEN(ORDMD_GEORX_LIBS)",
    georxgetdefaultpyramidlevel="[Oracle Spatial] MDSYS.SDO_GEORX.GETDEFAULTPYRAMIDLEVEL(ORDMD_GEORX_LIBS)",
    georxgetdefaultred="[Oracle Spatial] MDSYS.SDO_GEORX.GETDEFAULTRED(ORDMD_GEORX_LIBS)",
    georxgetenddatetime="[Oracle Spatial] MDSYS.SDO_GEORX.GETENDDATETIME(ORDMD_GEORX_LIBS)",
    georxgetgcp="[Oracle Spatial] MDSYS.SDO_GEORX.GETGCP_INT(ORDMD_GEORX_LIBS)",
    georxgetgcpgeorefmodel="[Oracle Spatial] MDSYS.SDO_GEORX.GETGCPGEOREFMODEL(ORDMD_GEORX_LIBS)",
    georxgetgrayscale="[Oracle Spatial] MDSYS.SDO_GEORX.GETGRAYSCALE(ORDMD_GEORX_LIBS)",
    georxgetgrayscaletable="[Oracle Spatial] MDSYS.SDO_GEORX.GETGRAYSCALETABLE(ORDMD_GEORX_LIBS)",
    georxgethistogram="[Oracle Spatial] MDSYS.SDO_GEORX.GETHISTOGRAM(ORDMD_GEORX_LIBS)",
    georxgethistogramtable="[Oracle Spatial] MDSYS.SDO_GEORX.GETHISTOGRAMTABLE(ORDMD_GEORX_LIBS)",
    georxgetid="[Oracle Spatial] MDSYS.SDO_GEORX.GETID(ORDMD_GEORX_LIBS)",
    georxgetinterleaving="[Oracle Spatial] MDSYS.SDO_GEORX.GETINTERLEAVING(ORDMD_GEORX_LIBS)",
    georxgetlayerid="[Oracle Spatial] MDSYS.SDO_GEORX.GETLAYERID(ORDMD_GEORX_LIBS)",
    georxgetlayerordinate="[Oracle Spatial] MDSYS.SDO_GEORX.GETLAYERORDINATE(ORDMD_GEORX_LIBS)",
    georxgetmajorversion="[Oracle Spatial] MDSYS.SDO_GEORX.GETMAJORVERSION(ORDMD_GEORX_LIBS)",
    georxgetminorversion="[Oracle Spatial] MDSYS.SDO_GEORX.GETMINORVERSION(ORDMD_GEORX_LIBS)",
    georxgetmodelsrid="[Oracle Spatial] MDSYS.SDO_GEORX.GETMODELSRID(ORDMD_GEORX_LIBS)",
    georxgetnodata="[Oracle Spatial] MDSYS.SDO_GEORX.GETNODATA(ORDMD_GEORX_LIBS)",
    georxgetpyramidmaxlevel="[Oracle Spatial] MDSYS.SDO_GEORX.GETPYRAMIDMAXLEVEL(ORDMD_GEORX_LIBS)",
    georxgetpyramidtype="[Oracle Spatial] MDSYS.SDO_GEORX.GETPYRAMIDTYPE(ORDMD_GEORX_LIBS)",
    georxgetscaling="[Oracle Spatial] MDSYS.SDO_GEORX.GETSCALING(ORDMD_GEORX_LIBS)",
    georxgetsourceinfo="[Oracle Spatial] MDSYS.SDO_GEORX.GETSOURCEINFO(ORDMD_GEORX_LIBS)",
    georxgetspatialdimsizes="[Oracle Spatial] MDSYS.SDO_GEORX.GETSPATIALDIMSIZES(ORDMD_GEORX_LIBS)",
    georxgetspatialresolutions="[Oracle Spatial] MDSYS.SDO_GEORX.GETSPATIALRESOLUTIONS(ORDMD_GEORX_LIBS)",
    georxgetspectralresolution="[Oracle Spatial] MDSYS.SDO_GEORX.GETSPECTRALRESOLUTION(ORDMD_GEORX_LIBS)",
    georxgetspectralunit="[Oracle Spatial] MDSYS.SDO_GEORX.GETSPECTRALUNIT(ORDMD_GEORX_LIBS)",
    georxgetsrs="[Oracle Spatial] MDSYS.SDO_GEORX.GETSRS(ORDMD_GEORX_LIBS)",
    georxgetstatistics="[Oracle Spatial] MDSYS.SDO_GEORX.GETSTATISTICS(ORDMD_GEORX_LIBS)",
    georxgettotallayernumber="[Oracle Spatial] MDSYS.SDO_GEORX.GETTOTALLAYERNUMBER(ORDMD_GEORX_LIBS)",
    georxgetultcoordinate="[Oracle Spatial] MDSYS.SDO_GEORX.GETULTCOORDINATE(ORDMD_GEORX_LIBS)",
    georxgetvat="[Oracle Spatial] MDSYS.SDO_GEORX.GETVAT(ORDMD_GEORX_LIBS)",
    georxhasgrayscale="[Oracle Spatial] MDSYS.SDO_GEORX.HASGRAYSCALE(ORDMD_GEORX_LIBS)",
    georxhaspseudocolor="[Oracle Spatial] MDSYS.SDO_GEORX.HASPSEUDOCOLOR(ORDMD_GEORX_LIBS)",
    georxisblank="[Oracle Spatial] MDSYS.SDO_GEORX.ISBLANK(ORDMD_GEORX_LIBS)",
    georxisorthorectified="[Oracle Spatial] MDSYS.SDO_GEORX.ISORTHORECTIFIED(ORDMD_GEORX_LIBS)",
    georxisrectified="[Oracle Spatial] MDSYS.SDO_GEORX.ISRECTIFIED(ORDMD_GEORX_LIBS)",
    georxisspatialreferenced="[Oracle Spatial] MDSYS.SDO_GEORX.ISSPATIALREFERENCED(ORDMD_GEORX_LIBS)",
    georxschemavalidate="[Oracle Spatial] MDSYS.SDO_GEORX.SCHEMAVALIDATE(ORDMD_GEORX_LIBS)",
    georxsetbegindatetime="[Oracle Spatial] MDSYS.SDO_GEORX.SETBEGINDATETIME(ORDMD_GEORX_LIBS)",
    georxsetbinfuncdata="[Oracle Spatial] MDSYS.SDO_GEORX.SETBINFUNCTION(ORDMD_GEORX_LIBS)",
    georxsetbintable="[Oracle Spatial] MDSYS.SDO_GEORX.SETBINTABLE(ORDMD_GEORX_LIBS)",
    georxsetblankcellvalue="[Oracle Spatial] MDSYS.SDO_GEORX.SETBLANKCELLVALUE(ORDMD_GEORX_LIBS)",
    georxsetcolormap="[Oracle Spatial] MDSYS.SDO_GEORX.SETCOLORMAP(ORDMD_GEORX_LIBS)",
    georxsetcolormaptable="[Oracle Spatial] MDSYS.SDO_GEORX.SETCOLORMAPTABLE(ORDMD_GEORX_LIBS)",
    georxsetcontrolpoint="[Oracle Spatial] MDSYS.SDO_GEORX.SETCONTROLPOINT(ORDMD_GEORX_LIBS)",
    georxsetdefaultalpha="[Oracle Spatial] MDSYS.SDO_GEORX.SETDEFAULTALPHA(ORDMD_GEORX_LIBS)",
    georxsetdefaultblue="[Oracle Spatial] MDSYS.SDO_GEORX.SETDEFAULTBLUE(ORDMD_GEORX_LIBS)",
    georxsetdefaultcolorlayer="[Oracle Spatial] MDSYS.SDO_GEORX.SETDEFAULTCOLORLAYER(ORDMD_GEORX_LIBS)",
    georxsetdefaultgreen="[Oracle Spatial] MDSYS.SDO_GEORX.SETDEFAULTGREEN(ORDMD_GEORX_LIBS)",
    georxsetdefaultpyramidlevel="[Oracle Spatial] MDSYS.SDO_GEORX.SETDEFAULTPYRAMIDLEVEL(ORDMD_GEORX_LIBS)",
    georxsetdefaultred="[Oracle Spatial] MDSYS.SDO_GEORX.SETDEFAULTRED(ORDMD_GEORX_LIBS)",
    georxsetenddatetime="[Oracle Spatial] MDSYS.SDO_GEORX.SETENDDATETIME(ORDMD_GEORX_LIBS)",
    georxsetgcp="[Oracle Spatial] MDSYS.SDO_GEORX.SETGCP(ORDMD_GEORX_LIBS)",
    georxsetgcpgeorefmodel="[Oracle Spatial] MDSYS.SDO_GEORX.SETGCPGEOREFMODEL(ORDMD_GEORX_LIBS)",
    georxsetgrayscale="[Oracle Spatial] MDSYS.SDO_GEORX.SETGRAYSCALE(ORDMD_GEORX_LIBS)",
    georxsetgrayscaletable="[Oracle Spatial] MDSYS.SDO_GEORX.SETGRAYSCALETABLE(ORDMD_GEORX_LIBS)",
    georxsethistogramtable="[Oracle Spatial] MDSYS.SDO_GEORX.SETHISTOGRAMTABLE(ORDMD_GEORX_LIBS)",
    georxsetid="[Oracle Spatial] MDSYS.SDO_GEORX.SETID(ORDMD_GEORX_LIBS)",
    georxsetlayerid="[Oracle Spatial] MDSYS.SDO_GEORX.SETLAYERID(ORDMD_GEORX_LIBS)",
    georxsetlayerordinate="[Oracle Spatial] MDSYS.SDO_GEORX.SETLAYERORDINATE(ORDMD_GEORX_LIBS)",
    georxsetmodelcoordloc="[Oracle Spatial] MDSYS.SDO_GEORX.SETMODELCOORDLOCATION(ORDMD_GEORX_LIBS)",
    georxsetmodelsrid="[Oracle Spatial] MDSYS.SDO_GEORX.SETMODELSRID(ORDMD_GEORX_LIBS)",
    georxsetnodatamask="[Oracle Spatial] MDSYS.SDO_GEORX.SETNODATAMASK(ORDMD_GEORX_LIBS)",
    georxsetorthorectified="[Oracle Spatial] MDSYS.SDO_GEORX.SETORTHORECTIFIED(ORDMD_GEORX_LIBS)",
    georxsetrastertype="[Oracle Spatial] MDSYS.SDO_GEORX.SETRASTERTYPE(ORDMD_GEORX_LIBS)",
    georxsetrectified="[Oracle Spatial] MDSYS.SDO_GEORX.SETRECTIFIED(ORDMD_GEORX_LIBS)",
    georxsetscaling="[Oracle Spatial] MDSYS.SDO_GEORX.SETSCALING(ORDMD_GEORX_LIBS)",
    georxsetsourceinfo="[Oracle Spatial] MDSYS.SDO_GEORX.SETSOURCEINFO(ORDMD_GEORX_LIBS)",
    georxsetspatialreferenced="[Oracle Spatial] MDSYS.SDO_GEORX.SETSPATIALREFERENCED(ORDMD_GEORX_LIBS)",
    georxsetspatialresolutions="[Oracle Spatial] MDSYS.SDO_GEORX.SETSPATIALRESOLUTIONS(ORDMD_GEORX_LIBS)",
    georxsetspectralresolution="[Oracle Spatial] MDSYS.SDO_GEORX.SETSPECTRALRESOLUTION(ORDMD_GEORX_LIBS)",
    georxsetspectralunit="[Oracle Spatial] MDSYS.SDO_GEORX.SETSPECTRALUNIT(ORDMD_GEORX_LIBS)",
    georxsetsrs="[Oracle Spatial] MDSYS.SDO_GEORX.SETSRS(ORDMD_GEORX_LIBS)",
    georxsetstatistics="[Oracle Spatial] MDSYS.SDO_GEORX.SETSTATISTICS(ORDMD_GEORX_LIBS)",
    georxsetstatistics2="[Oracle Spatial] MDSYS.SDO_GEORX.SETSTATISTICS(ORDMD_GEORX_LIBS)",
    georxsetvat="[Oracle Spatial] MDSYS.SDO_GEORX.SETVAT(ORDMD_GEORX_LIBS)",
    georxsetversion="[Oracle Spatial] MDSYS.SDO_GEORX.SETVERSION(ORDMD_GEORX_LIBS)",
    get="SYS.DBMS_RESULT_CACHE_API.Get(C)",
    get_arr="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    get_col="SYS.DBMS_TF.Get_Col(c)",
    get_endianness="SYS.DBMS_UTILITY.get_endianness(C)",
    get_env_icd="SYS.DBMS_SYSTEM.GET_ENV_ICD(C)",
    get_mdsys_event="MDSYS.GETMDSYSEVENT.GetMdsysEvent(ORDMD_UTL_LIBS)",
    get_obh_icd="SYS.DBMS_SYSTEM.GET_OBH_ICD(C)",
    get_obj="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    get_oldvsn_hashcode="SYS.GET_OLDVERSION_HASHCODE.get_oldversion_hashcode(UTL_OBJECTS_LIB)",
    get_oldvsn_hashcode2="SYS.GET_OLDVERSION_HASHCODE2.get_oldversion_hashcode2(UTL_OBJECTS_LIB)",
    get_pickled_ns="XDB.DBMS_XDBUTIL_INT.GETPICKLEDNSTEMP(XDB.XMLSCHEMA_LIB)",
    get_tidl_frame="SYS.PBREAK.GET_TIDL_FRAME(C)",
    getarr="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    getblob_arr="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getblob_obj="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getblobarr="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getblobobj="SYS.JDOM_T.get_Blob(DBMS_JDOM_LIB)",
    getblobval="SYS.XMLTYPE.GETBLOBVAL(XMLTYPE_LIB)",
    getblobval_flag="SYS.XMLTYPE.GETBLOBVAL(XMLTYPE_LIB)",
    getblobvalflag="SYS.XMLTYPE.GETBLOBVAL(XMLTYPE_LIB)",
    getboolean_arr="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getboolean_obj="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getbooleanarr="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getbooleanobj="SYS.JDOM_T.get_Boolean(DBMS_JDOM_LIB)",
    getc="SYS.DBMS_RESULT_CACHE_API.GetC(C)",
    getchildnodes="XDB.DBMS_XMLDOM_ICD.GETCHILDNODES(C)",
    getclob_arr="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getclob_obj="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getclobarr="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getclobobj="SYS.JDOM_T.get_Clob(DBMS_JDOM_LIB)",
    getclobval="SYS.XMLTYPE.GETCLOBVAL(XMLTYPE_LIB)",
    getclobval_flag="SYS.XMLTYPE.GETCLOBVAL(XMLTYPE_LIB)",
    getclobvalflag="SYS.XMLTYPE.GETCLOBVAL(XMLTYPE_LIB)",
    getcol="SYS.DBMS_TF.Get_Col(c)",
    getcursor="SYS.SODA_OPERATION_T.GET_CURSOR(DBMS_SODAOPR_LIB)",
    getdate_arr="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getdate_obj="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getdatearr="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getdateobj="SYS.JDOM_T.get_Date(DBMS_JDOM_LIB)",
    getendianness="SYS.DBMS_UTILITY.get_endianness(C)",
    getenv="SYS.PRVT_ILM.GETENV(C)",
    getenvicd="SYS.DBMS_SYSTEM.GET_ENV_ICD(C)",
    getfirstchild="XDB.DBMS_XMLDOM_ICD.GETFIRSTCHILD(C)",
    getkeys_obj="SYS.JDOM_T.get_Keys(DBMS_JDOM_LIB)",
    getkeysobj="SYS.JDOM_T.get_Keys(DBMS_JDOM_LIB)",
    getmdsysevent="MDSYS.GETMDSYSEVENT.GetMdsysEvent(ORDMD_UTL_LIBS)",
    getnamespace="SYS.XMLTYPE.GETNAMESPACE(XMLTYPE_LIB)",
    getnodevalue="XDB.DBMS_XMLDOM_ICD.GETNODEVALUE(C)",
    getnumber_arr="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getnumber_obj="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getnumberarr="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getnumberobj="SYS.JDOM_T.get_Number(DBMS_JDOM_LIB)",
    getnumberval="SYS.XMLTYPE.GETNUMBERVAL(XMLTYPE_LIB)",
    getobhicd="SYS.DBMS_SYSTEM.GET_OBH_ICD(C)",
    getobj="SYS.JDOM_T.get(DBMS_JDOM_LIB)",
    getoldvsnhashcode="SYS.GET_OLDVERSION_HASHCODE.get_oldversion_hashcode(UTL_OBJECTS_LIB)",
    getoldvsnhashcode2="SYS.GET_OLDVERSION_HASHCODE2.get_oldversion_hashcode2(UTL_OBJECTS_LIB)",
    getone="SYS.SODA_OPERATION_T.GET_ONE(DBMS_SODAOPR_LIB)",
    getpickledns="XDB.DBMS_XDBUTIL_INT.GETPICKLEDNSTEMP(XDB.XMLSCHEMA_LIB)",
    getpid="get process id",
    getrootelement="SYS.XMLTYPE.GETROOTELEMENT(XMLTYPE_LIB)",
    getschemaid="SYS.XMLTYPE.GETSCHEMAID(XMLTYPE_LIB)",
    getschemaurl="SYS.XMLTYPE.GETSCHEMAURL(XMLTYPE_LIB)",
    getsectick="SYS.PRVT_ILM.GETSECTICK(C)",
    getsize="SYS.JDOM_T.get_Size(DBMS_JDOM_LIB)",
    getstring_arr="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getstring_obj="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getstringarr="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getstringobj="SYS.JDOM_T.get_String(DBMS_JDOM_LIB)",
    getstringval="SYS.XMLTYPE.GETSTRINGVAL(XMLTYPE_LIB)",
    getstringval_flag="SYS.XMLTYPE.GETSTRINGVAL(XMLTYPE_LIB)",
    getstringvalflag="SYS.XMLTYPE.GETSTRINGVAL(XMLTYPE_LIB)",
    gettagname="XDB.DBMS_XMLDOM_ICD.GETTAGNAME(C)",
    gettidlframe="SYS.PBREAK.GET_TIDL_FRAME(C)",
    gettstamp_arr="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    gettstamp_obj="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    gettstamparr="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    gettstampobj="SYS.JDOM_T.get_Timestamp(DBMS_JDOM_LIB)",
    gettype_arr="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    gettype_obj="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    gettypearr="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    gettypefrombuf="SYS.DBMS_PIPE.GETTYPEFROMBUF(C)",
    gettypeobj="SYS.JDOM_T.get_Type(DBMS_JDOM_LIB)",
    gipc="grid inter process calls",
    gra="grant/revoke",
    gradrv="grant/revoke driver",
    gslcsq="[LDAP] ",
    gslcsq_add_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_ADD_S(DBMS_LDAP_API_LIB)",
    gslcsq_authenticate_user="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER(DBMS_LDAP_API_LIB)",
    gslcsq_authenticate_user_ext="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER_EXT(DBMS_LDAP_API_LIB)",
    gslcsq_ber_free="[LDAP] SYS.DBMS_LDAP_API_FFI.BER_FREE(DBMS_LDAP_API_LIB)",
    gslcsq_bind_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsq_check_grp_membership="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsq_check_user_scription="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_USER_SCRIPTION(DBMS_LDAP_API_LIB)",
    gslcsq_compare_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_COMPARE_S(DBMS_LDAP_API_LIB)",
    gslcsq_count_entries="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_COUNT_ENTRIES(DBMS_LDAP_API_LIB)",
    gslcsq_create_grp_handle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_GRP_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_create_mod_array="[LDAP] SYS.DBMS_LDAP_API_FFI.CREATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_create_mod_pset="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsq_create_srv_handle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SRV_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_create_sub_handle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SUB_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_create_user_handle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_USER_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_delete_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_DELETE_S(DBMS_LDAP_API_LIB)",
    gslcsq_err2string="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_ERR2STRING(DBMS_LDAP_API_LIB)",
    gslcsq_explode_dn="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_EXPLODE_DN(DBMS_LDAP_API_LIB)",
    gslcsq_first_attr="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsq_first_entry="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsq_free_handle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsq_free_mod_array="[LDAP] SYS.DBMS_LDAP_API_FFI.FREE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_free_mod_pset="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsq_free_pset_coll="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_PSET_COLL(DBMS_LDAP_API_LIB)",
    gslcsq_get_avail_srvs="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_AVAIL_SRVS(DBMS_LDAP_API_LIB)",
    gslcsq_get_dbcharset_name="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_DBCHARSET_NAME(DBMS_LDAP_API_LIB)",
    gslcsq_get_dn="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_grp_dn="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_grp_membership="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsq_get_grp_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_names="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_NAMES(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_values="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_values_blob="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsq_get_prop_values_len="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsq_get_scribed_srvs="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_SRVS(DBMS_LDAP_API_LIB)",
    gslcsq_get_scribed_users="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_USERS(DBMS_LDAP_API_LIB)",
    gslcsq_get_session_info="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_SESSION_INFO(DBMS_LDAP_API_LIB)",
    gslcsq_get_sub_dn="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_sub_ext_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_sub_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_tracelvl="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_dn="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_DN(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_ext_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_get_user_props_and_auth="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS_AUTH(DBMS_LDAP_API_LIB)",
    gslcsq_get_values="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES(DBMS_LDAP_API_LIB)",
    gslcsq_get_values_blob="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsq_get_values_len="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsq_init="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_INIT(DBMS_LDAP_API_LIB)",
    gslcsq_locate_sub_for_user="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_LOCATE_SUB_FOR_USER(DBMS_LDAP_API_LIB)",
    gslcsq_memfree="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MEMFREE(DBMS_LDAP_API_LIB)",
    gslcsq_modify_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MODIFY_S(DBMS_LDAP_API_LIB)",
    gslcsq_modrdn2_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MODRDN2_S(DBMS_LDAP_API_LIB)",
    gslcsq_msgfree="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MSGFREE(DBMS_LDAP_API_LIB)",
    gslcsq_next_attr="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsq_next_entry="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsq_norm_dn_with_case="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_NORM_DN_WITH_CASE(DBMS_LDAP_API_LIB)",
    gslcsq_open_ssl="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_OPEN_SSL(DBMS_LDAP_API_LIB)",
    gslcsq_populate_mod_array="[LDAP] SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_populate_mod_array_blob="[LDAP] SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsq_populate_mod_pset="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_POPULATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsq_rename_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_RENAME_S(DBMS_LDAP_API_LIB)",
    gslcsq_scribe_user="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsq_search_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_S(DBMS_LDAP_API_LIB)",
    gslcsq_search_st="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_ST(DBMS_LDAP_API_LIB)",
    gslcsq_set_grp_handle_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_GRP_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_set_tracelvl="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsq_set_user_handle_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_set_user_props="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsq_simple_bind_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SIMPLE_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsq_unbind_s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_UNBIND_S(DBMS_LDAP_API_LIB)",
    gslcsq_unscribe_user="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_UNSCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsq_value_free_blob="[LDAP] SYS.DBMS_LDAP_API_FFI.VALUE_FREE_BLOB(DBMS_LDAP_API_LIB)",
    gslcsqadds="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_ADD_S(DBMS_LDAP_API_LIB)",
    gslcsqauthenticateuser="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER(DBMS_LDAP_API_LIB)",
    gslcsqauthenticateuserext="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_AUTHENTICATE_USER_EXT(DBMS_LDAP_API_LIB)",
    gslcsqberfree="[LDAP] SYS.DBMS_LDAP_API_FFI.BER_FREE(DBMS_LDAP_API_LIB)",
    gslcsqbinds="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsqcheckgrpmembership="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsqcheckuserscription="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CHECK_USER_SCRIPTION(DBMS_LDAP_API_LIB)",
    gslcsqcompares="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_COMPARE_S(DBMS_LDAP_API_LIB)",
    gslcsqcountentries="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_COUNT_ENTRIES(DBMS_LDAP_API_LIB)",
    gslcsqcreategrphandle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_GRP_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqcreatemodarray="[LDAP] SYS.DBMS_LDAP_API_FFI.CREATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqcreatemodpset="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsqcreatesrvhandle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SRV_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqcreatesubhandle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_SUB_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqcreateuserhandle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_CREATE_USER_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqdeletes="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_DELETE_S(DBMS_LDAP_API_LIB)",
    gslcsqerr2string="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_ERR2STRING(DBMS_LDAP_API_LIB)",
    gslcsqexplodedn="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_EXPLODE_DN(DBMS_LDAP_API_LIB)",
    gslcsqfirstattr="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsqfirstentry="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_FIRST_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsqfreehandle="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_HANDLE(DBMS_LDAP_API_LIB)",
    gslcsqfreemodarray="[LDAP] SYS.DBMS_LDAP_API_FFI.FREE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqfreemodpset="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsqfreepsetcoll="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_FREE_PSET_COLL(DBMS_LDAP_API_LIB)",
    gslcsqgetavailsrvs="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_AVAIL_SRVS(DBMS_LDAP_API_LIB)",
    gslcsqgetdbcharsetname="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_DBCHARSET_NAME(DBMS_LDAP_API_LIB)",
    gslcsqgetdn="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetgrpdn="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetgrpmembership="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_MEMBERSHIP(DBMS_LDAP_API_LIB)",
    gslcsqgetgrpprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_GRP_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetpropnames="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_NAMES(DBMS_LDAP_API_LIB)",
    gslcsqgetpropvalues="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES(DBMS_LDAP_API_LIB)",
    gslcsqgetpropvaluesblob="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsqgetpropvalueslen="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_PROP_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsqgetscribedsrvs="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_SRVS(DBMS_LDAP_API_LIB)",
    gslcsqgetscribedusers="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SCRIBED_USERS(DBMS_LDAP_API_LIB)",
    gslcsqgetsessioninfo="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_SESSION_INFO(DBMS_LDAP_API_LIB)",
    gslcsqgetsubdn="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetsubextprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetsubprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_SUB_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgettracelvl="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsqgetuserdn="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_DN(DBMS_LDAP_API_LIB)",
    gslcsqgetuserextprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_EXT_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetuserprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqgetuserpropsandauth="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_GET_USER_PROPS_AUTH(DBMS_LDAP_API_LIB)",
    gslcsqgetvalues="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES(DBMS_LDAP_API_LIB)",
    gslcsqgetvaluesblob="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_BLOB(DBMS_LDAP_API_LIB)",
    gslcsqgetvalueslen="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_GET_VALUES_LEN(DBMS_LDAP_API_LIB)",
    gslcsqinit="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_INIT(DBMS_LDAP_API_LIB)",
    gslcsqlocatesubforuser="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_LOCATE_SUB_FOR_USER(DBMS_LDAP_API_LIB)",
    gslcsqmemfree="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MEMFREE(DBMS_LDAP_API_LIB)",
    gslcsqmodifys="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MODIFY_S(DBMS_LDAP_API_LIB)",
    gslcsqmodrdn2s="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MODRDN2_S(DBMS_LDAP_API_LIB)",
    gslcsqmsgfree="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_MSGFREE(DBMS_LDAP_API_LIB)",
    gslcsqnextattr="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ATTRIBUTE(DBMS_LDAP_API_LIB)",
    gslcsqnextentry="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_NEXT_ENTRY(DBMS_LDAP_API_LIB)",
    gslcsqnormdnwithcase="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_NORM_DN_WITH_CASE(DBMS_LDAP_API_LIB)",
    gslcsqopenssl="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_OPEN_SSL(DBMS_LDAP_API_LIB)",
    gslcsqpopulatemodarray="[LDAP] SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqpopulatemodarrayblob="[LDAP] SYS.DBMS_LDAP_API_FFI.POPULATE_MOD_ARRAY(DBMS_LDAP_API_LIB)",
    gslcsqpopulatemodpset="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_POPULATE_MOD_PSET(DBMS_LDAP_API_LIB)",
    gslcsqrenames="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_RENAME_S(DBMS_LDAP_API_LIB)",
    gslcsqscribeuser="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsqsearchs="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_S(DBMS_LDAP_API_LIB)",
    gslcsqsearchst="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SEARCH_ST(DBMS_LDAP_API_LIB)",
    gslcsqsetgrphandleprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_GRP_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqsettracelvl="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SET_TRACE_LEVEL(DBMS_LDAP_API_LIB)",
    gslcsqsetuserhandleprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_HANDLE_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqsetuserprops="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_SET_USER_PROPS(DBMS_LDAP_API_LIB)",
    gslcsqsimplebinds="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_SIMPLE_BIND_S(DBMS_LDAP_API_LIB)",
    gslcsqunbinds="[LDAP] SYS.DBMS_LDAP_API_FFI.LDAP_UNBIND_S(DBMS_LDAP_API_LIB)",
    gslcsqunscribeuser="[LDAP] SYS.DBMS_LDAP_API_FFI.ORA_LDAP_UNSCRIBE_USER(DBMS_LDAP_API_LIB)",
    gslcsqvaluefreeblob="[LDAP] SYS.DBMS_LDAP_API_FFI.VALUE_FREE_BLOB(DBMS_LDAP_API_LIB)",
    gwm="[Generic Service Management(GSM)] ",
    gwm_backup_level0="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMBACKUP0(DBMS_GSM_DBADMIN_LIB)",
    gwm_backup_level1="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.BACKUPLEVEL1(DBMS_GSM_DBADMIN_LIB)",
    gwm_call_schagent="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_CALL_SCHAGENT(C)/SYS.DBMS_GSM_FIXED.GWM_CALL_SCHAGENT(C)",
    gwm_call_srvctl="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CALLSRVCTL(DBMS_GSM_DBADMIN_LIB)",
    gwm_cat_redo_marker="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_CLOUDADMIN.GWM_CAT_REDO_MARKER(DBMS_GSM_UTILITY_LIB)",
    gwm_db_info="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_DB_INFO(C)/SYS.DBMS_GSM_FIXED.GWM_DB_INFO(C)",
    gwm_db_version_pls="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_DB_VERSION_PLS(C)",
    gwm_factoring="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMFACTOR(DBMS_GSM_COMMON_LIB)",
    gwm_generate_part_name="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_PARTITION_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwm_generate_ts_name="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_TABLESPACE_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_chunkid="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKIDLOCAL(DBMS_GSM_UTILITY_LIB)",
    gwm_get_chunkidfk="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKID(DBMS_GSM_UTILITY_LIB)",
    gwm_get_chunkuid="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEID(DBMS_GSM_UTILITY_LIB)",
    gwm_get_chunkuid_text="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwm_get_crs_info="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETCRSINFOINT(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_db_param_num="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.EXECUTEDDL)(DBMS_GSM_COMMON_LIB)/GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERNUM(DBMS_GSM_COMMON_LIB)",
    gwm_get_db_param_str="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERSTR(DBMS_GSM_COMMON_LIB)",
    gwm_get_rac_status="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETRACSTATUSINT(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_sharding_mode="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.GETSHARDINGMODE.getShardingMode(DBMS_GSM_DBADMIN_LIB)",
    gwm_get_ssid_text="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSHARDSPACEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwm_getmsg="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETMSG(DBMS_GSM_COMMON_LIB)",
    gwm_init="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMINIT(DBMS_GSM_DBADMIN_LIB)",
    gwm_is_shardop_enabled="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GWM_IS_SHARDOP_ENABLED(DBMS_GSM_UTILITY_LIB)",
    gwm_isnonoraclecloud="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISNONORACLECLOUD(DBMS_GSM_COMMON_LIB)",
    gwm_issqltracing="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gwm_issvclagging="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.ISSVCLAGGING(DBMS_GSM_DBADMIN_LIB)",
    gwm_isuetenabled="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISUETENABLED(DBMS_GSM_COMMON_LIB)",
    gwm_move_chunk="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.MOVECHUNKINT(DBMS_GSM_DBADMIN_LIB)",
    gwm_reset_db_param="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.RESETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwm_restore_test="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.RESTORETEST(DBMS_GSM_DBADMIN_LIB)",
    gwm_rsa_encoder="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.RSAENCODER(DBMS_GSM_UTILITY_LIB)",
    gwm_service_change="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SERVICECHANGE(DBMS_GSM_COMMON_LIB)",
    gwm_set_db_mvparam="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwm_set_db_param="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwm_set_donum_recurse="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETDORECURSE(DBMS_GSM_DBADMIN_LIB)",
    gwm_set_inmove="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETINMOVE(DBMS_GSM_DBADMIN_LIB)",
    gwm_set_stop_flag="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSERVICESTOPFLAG(DBMS_GSM_DBADMIN_LIB)",
    gwm_subnet="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMSUBNET(DBMS_GSM_COMMON_LIB)",
    gwm_trace_output="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_TRACE_OUTPUT(C)/SYS.DBMS_GSM_FIXED.GWM_TRACE_OUTPUT(C)",
    gwm_uet_action="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ACTIONUET(DBMS_GSM_COMMON_LIB)",
    gwm_uet_verify="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.VERIFYUET(DBMS_GSM_COMMON_LIB)",
    gwm_validate_db="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_VALIDATE_DB(C)/SYS.DBMS_GSM_FIXED.GWM_VALIDATE_DB(C)",
    gwm_writetogwmtracing="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.WRITETOGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gwmbackuplevel0="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMBACKUP0(DBMS_GSM_DBADMIN_LIB)",
    gwmbackuplevel1="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.BACKUPLEVEL1(DBMS_GSM_DBADMIN_LIB)",
    gwmcallschagent="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_CALL_SCHAGENT(C)/SYS.DBMS_GSM_FIXED.GWM_CALL_SCHAGENT(C)",
    gwmcallsrvctl="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CALLSRVCTL(DBMS_GSM_DBADMIN_LIB)",
    gwmcatredomarker="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_CLOUDADMIN.GWM_CAT_REDO_MARKER(DBMS_GSM_UTILITY_LIB)",
    gwmdbinfo="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_DB_INFO(C)/SYS.DBMS_GSM_FIXED.GWM_DB_INFO(C)",
    gwmdbversionpls="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_DB_VERSION_PLS(C)",
    gwmfactoring="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMFACTOR(DBMS_GSM_COMMON_LIB)",
    gwmgeneratepartname="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_PARTITION_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwmgeneratetsname="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GENERATE_TABLESPACE_NAME(DBMS_GSM_DBADMIN_LIB)",
    gwmgetchunkid="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKIDLOCAL(DBMS_GSM_UTILITY_LIB)",
    gwmgetchunkidfk="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKID(DBMS_GSM_UTILITY_LIB)",
    gwmgetchunkuid="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEID(DBMS_GSM_UTILITY_LIB)",
    gwmgetchunkuidtext="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETCHUNKUNIQUEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwmgetcrsinfo="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETCRSINFOINT(DBMS_GSM_DBADMIN_LIB)",
    gwmgetdbparamnum="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.EXECUTEDDL)(DBMS_GSM_COMMON_LIB)/GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERNUM(DBMS_GSM_COMMON_LIB)",
    gwmgetdbparamstr="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETDBPARAMETERSTR(DBMS_GSM_COMMON_LIB)",
    gwmgetmsg="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GETMSG(DBMS_GSM_COMMON_LIB)",
    gwmgetracstatus="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GETRACSTATUSINT(DBMS_GSM_DBADMIN_LIB)",
    gwmgetshardingmode="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.GETSHARDINGMODE.getShardingMode(DBMS_GSM_DBADMIN_LIB)",
    gwmgetssidtext="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSHARDSPACEIDBYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwminit="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.GWMINIT(DBMS_GSM_DBADMIN_LIB)",
    gwmisnonoraclecloud="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISNONORACLECLOUD(DBMS_GSM_COMMON_LIB)",
    gwmisshardopenabled="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GWM_IS_SHARDOP_ENABLED(DBMS_GSM_UTILITY_LIB)",
    gwmissqltracing="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gwmissvclagging="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.ISSVCLAGGING(DBMS_GSM_DBADMIN_LIB)",
    gwmisuetenabled="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ISUETENABLED(DBMS_GSM_COMMON_LIB)",
    gwmmovechunk="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.MOVECHUNKINT(DBMS_GSM_DBADMIN_LIB)",
    gwmresetdbparam="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.RESETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwmrestoretest="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.RESTORETEST(DBMS_GSM_DBADMIN_LIB)",
    gwmrsaencoder="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.RSAENCODER(DBMS_GSM_UTILITY_LIB)",
    gwmservicechange="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SERVICECHANGE(DBMS_GSM_COMMON_LIB)",
    gwmsetdbmvparam="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwmsetdbparam="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.SETDBPARAMETERINTERNAL(DBMS_GSM_COMMON_LIB)",
    gwmsetdonumrecurse="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETDORECURSE(DBMS_GSM_DBADMIN_LIB)",
    gwmsetinmove="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETINMOVE(DBMS_GSM_DBADMIN_LIB)",
    gwmsetstopflag="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSERVICESTOPFLAG(DBMS_GSM_DBADMIN_LIB)",
    gwmsubnet="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.GWMSUBNET(DBMS_GSM_COMMON_LIB)",
    gwmtraceoutput="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_TRACE_OUTPUT(C)/SYS.DBMS_GSM_FIXED.GWM_TRACE_OUTPUT(C)",
    gwmuetaction="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.ACTIONUET(DBMS_GSM_COMMON_LIB)",
    gwmuetverify="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.VERIFYUET(DBMS_GSM_COMMON_LIB)",
    gwmvalidatedb="[Generic Service Management(GSM)] SYS.DBMS_GSM_FIX.GWM_VALIDATE_DB(C)/SYS.DBMS_GSM_FIXED.GWM_VALIDATE_DB(C)",
    gwmwritetogwmtracing="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.WRITETOGWMTRACING(DBMS_GSM_COMMON_LIB)",
    gws_chunklowhi="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.CHUNKLOWHIGH(DBMS_GSM_COMMON_LIB)",
    gws_shard_split_hint="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSHARDSPLITHINT(DBMS_GSM_DBADMIN_LIB)",
    gwschunklowhi="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_COMMON.CHUNKLOWHIGH(DBMS_GSM_COMMON_LIB)",
    gwsrt_chunk_ctl="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CONTROLCHUNK(DBMS_GSM_DBADMIN_LIB)",
    gwsrt_get_shard_key_b="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYBININT(DBMS_GSM_UTILITY_LIB)",
    gwsrt_get_shard_key_t="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwsrt_set_key_plsql="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.SETSESSIONKEY(DBMS_GSM_UTILITY_LIB)",
    gwsrtchunkctl="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.CONTROLCHUNK(DBMS_GSM_DBADMIN_LIB)",
    gwsrtgetshardkeyb="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYBININT(DBMS_GSM_UTILITY_LIB)",
    gwsrtgetshardkeyt="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.GETSESSIONKEYTEXTINT(DBMS_GSM_UTILITY_LIB)",
    gwsrtsetkeyplsql="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_UTILITY.SETSESSIONKEY(DBMS_GSM_UTILITY_LIB)",
    gwsshardsplithint="[Generic Service Management(GSM)] GSMADMIN_INTERNAL.DBMS_GSM_DBADMIN.SETSHARDSPLITHINT(DBMS_GSM_DBADMIN_LIB)",
    has_docid="XDB.DBMS_XMLSCHEMA_INT.HASDOCID(XMLSCHEMA_LIB)",
    hasdocid="XDB.DBMS_XMLSCHEMA_INT.HASDOCID(XMLSCHEMA_LIB)",
    haskey_obj="SYS.JDOM_T.has_Key(DBMS_JDOM_LIB)",
    haskeyobj="SYS.JDOM_T.has_Key(DBMS_JDOM_LIB)",
    hasnext="SYS.SODA_CURSOR_T.HAS_NEXT(DBMS_SODACUR_LIB)",
    hcshierarchygetcubemvsqlpco="SYS.DBMS_HIERARCHY.EXEC_GET_MV_SQL_FOR_AV_CACHE(DBMS_HCS_LIB)",
    hcshierarchyvalidatecubepco="SYS.DBMS_HIERARCHY.EXECUTE_VALIDATE_ANALYTIC_VIEW(DBMS_HCS_LIB)",
    hcshierarchyvalidatehierpco="SYS.DBMS_HIERARCHY.EXECUTE_VALIDATE_HIER(DBMS_HCS_LIB)",
    hcsodboclosepco="DBMS_MDX_ODBO.CLOSE_CALLOUT",
    hcsodboconvertformatstringpco="SYS.DBMS_MDX_ODBO.EXECUTE_CONVERT_FMT_STR(DBMS_HCS_LIB)",
    hcsodboexecutepco="DBMS_MDX_ODBO.EXECUTE_CALLOUT",
    hcsodbogetaxisdatapco="DBMS_MDX_ODBO.GET_AXIS_DATA_CALLOUT",
    hcsodbogetcelldatapco="DBMS_MDX_ODBO.GET_CELL_DATA_CALLOUT",
    hcsodbogetkeywordspco="SYS.DBMS_MDX_ODBO.GET_MDX_KEYWORD_NAMES_CALLOUT(DBMS_HCS_LIB)",
    hcsodbogetmbrrowsetpco="DBMS_MDX_ODBO.GET_MEMBERS_ROWSET",
    hcsodbogetpropertyvaluespco="SYS.DBMS_MDX_ODBO.GET_MDX_PROP_VALUES_CALLOUT(DBMS_HCS_LIB)",
    hcsodbogetxfunctionspco="SYS.DBMS_MDX_ODBO.GET_MDX_FUNCTION_NAMES_CALLOUT(DBMS_HCS_LIB)",
    hcsodbologcloseschemarowsetpco="DBMS_MDX_ODBO.LOG_CLOSE_SCHEMA_ROWSET",
    hcsodbologschemarowsetpco="DBMS_MDX_ODBO.LOG_SCHEMA_ROWSET",
    hcsodbomdxcomponentidpco="SYS.DBMS_MDX_ODBO.EXECUTE_MDX_COMPONENT_ID(DBMS_HCS_LIB)",
    hep="PLSQL_KG_Interface",
    hsh="PLSQL_KG_Interface",
    icd_bind="SYS.DBMS_SQL.ICD_BIND(C)",
    icd_bind_array="SYS.DBMS_SQL.ICD_BIND_ARRAY(C)",
    icd_bind_c="SYS.DBMS_SQL.ICD_BIND_C(C)/SYS.DBMS_SYS_SQL.ICD_BIND_C(C)",
    icd_bind_dt="SYS.DBMS_SQL.ICD_BIND_DT(C)",
    icd_bind_i="SYS.DBMS_SQL.ICD_BIND_I(C)/SYS.DBMS_SYS_SQL.ICD_BIND_I(C)",
    icd_bind_int="SYS.DBMS_SQL.ICD_BIND_INT(C)/SYS.DBMS_SYS_SQL.ICD_BIND_INT(C)",
    icd_bind_m="SYS.DBMS_SQL.ICD_BIND_M(C)/SYS.DBMS_SYS_SQL.ICD_BIND_M(C)",
    icd_bind_r="SYS.DBMS_SQL.ICD_BIND_R(C)/SYS.DBMS_SYS_SQL.ICD_BIND_R(C)",
    icd_bind_u="SYS.DBMS_SQL.ICD_BIND_U(C)/SYS.DBMS_SYS_SQL.ICD_BIND_U(C)",
    icd_close="SYS.DBMS_SQL.ICD_CLOSE(C)/SYS.DBMS_SYS_SQL.ICD_CLOSE(C)",
    icd_dba="SYS.DBMS_UTILITY.ICD_DBA(C)",
    icd_dba_block="SYS.DBMS_UTILITY.ICD_DBA_BLOCK(C)",
    icd_dba_file="SYS.DBMS_UTILITY.ICD_DBA_FILE(C)",
    icd_dbcomp="SYS.DBMS_DBCOMP.ICD_DBCOMP(C)",
    icd_dbv2="SYS.DBMS_DBVERIFY.ICD_DBV2(C)",
    icd_define="SYS.DBMS_SQL.ICD_DEFINE(C)",
    icd_define_array="SYS.DBMS_SQL.ICD_DEFINE_ARRAY(C)",
    icd_define_c="SYS.DBMS_SQL.ICD_DEFINE_C(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_C(C)",
    icd_define_dt="SYS.DBMS_SQL.ICD_DEFINE_DT(C)",
    icd_define_i="SYS.DBMS_SQL.ICD_DEFINE_I(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_I(C)",
    icd_define_int="SYS.DBMS_SQL.ICD_DEFINE_INT(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_INT(C)",
    icd_define_l="SYS.DBMS_SQL.ICD_DEFINE_L(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_L(C)",
    icd_define_m="SYS.DBMS_SQL.ICD_DEFINE_M(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_M(C)",
    icd_define_r="SYS.DBMS_SQL.ICD_DEFINE_R(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_R(C)",
    icd_define_u="SYS.DBMS_SQL.ICD_DEFINE_U(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_U(C)",
    icd_describe_column="SYS.DBMS_SQL.ICD_DESCRIBE_COLUMN(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_COLUMN(C)",
    icd_describe_initial="SYS.DBMS_SQL.ICD_DESCRIBE_INITIAL(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_INITIAL(C)",
    icd_dump="SYS.DBMS_SQL.ICD_DUMP(C)/SYS.DBMS_SYS_SQL.ICD_DUMP(C)",
    icd_execute="SYS.DBMS_SQL.ICD_EXECUTE(C)/SYS.DBMS_SYS_SQL.ICD_EXECUTE(C)",
    icd_expand_sql_text="SYS.DBMS_SQL2.ICD_EXPAND_SQL_TEXT(C)",
    icd_fetch="SYS.DBMS_SQL.ICD_FETCH(C)/SYS.DBMS_SYS_SQL.ICD_FETCH(C)",
    icd_get_c="SYS.DBMS_SQL.ICD_GET_C(C)",
    icd_get_c_c="SYS.DBMS_SQL.ICD_GET_C_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_C(C)",
    icd_get_c_dt="SYS.DBMS_SQL.ICD_GET_C_DT(C)",
    icd_get_c_i="SYS.DBMS_SQL.ICD_GET_C_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_I(C)",
    icd_get_c_int="SYS.DBMS_SQL.ICD_GET_C_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_INT(C)",
    icd_get_c_l="SYS.DBMS_SQL.ICD_GET_C_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_L(C)",
    icd_get_c_m="SYS.DBMS_SQL.ICD_GET_C_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_M(C)",
    icd_get_c_r="SYS.DBMS_SQL.ICD_GET_C_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_R(C)",
    icd_get_c_u="SYS.DBMS_SQL.ICD_GET_C_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_U(C)",
    icd_get_cpu_time="SYS.DBMS_UTILITY.ICD_GET_CPU_TIME(C)",
    icd_get_e="SYS.DBMS_SQL.ICD_GET_E(C)/SYS.DBMS_SYS_SQL.ICD_GET_E(C)",
    icd_get_l="SYS.DBMS_SQL.ICD_GET_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_L(C)",
    icd_get_next_result="SYS.DBMS_SQL.ICD_GET_NEXT_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_GET_NEXT_RESULT(C)",
    icd_get_rpi_cursor="SYS.DBMS_SQL.ICD_GET_RPI_CURSOR(C)/SYS.DBMS_SYS_SQL.ICD_GET_RPI_CURSOR(C)",
    icd_get_time="SYS.DBMS_UTILITY.ICD_GET_TIME(C)",
    icd_get_v="SYS.DBMS_SQL.ICD_GET_V(C)",
    icd_get_v_c="SYS.DBMS_SQL.ICD_GET_V_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_C(C)",
    icd_get_v_dt="SYS.DBMS_SQL.ICD_GET_V_DT(C)",
    icd_get_v_i="SYS.DBMS_SQL.ICD_GET_V_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_I(C)",
    icd_get_v_int="SYS.DBMS_SQL.ICD_GET_V_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_INT(C)",
    icd_get_v_m="SYS.DBMS_SQL.ICD_GET_V_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_M(C)",
    icd_get_v_r="SYS.DBMS_SQL.ICD_GET_V_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_R(C)",
    icd_get_v_u="SYS.DBMS_SQL.ICD_GET_V_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_U(C)",
    icd_getsqlhash="SYS.DBMS_UTILITY.ICD_GETSQLHASH(C)",
    icd_hash="SYS.DBMS_UTILITY.ICD_HASH(C)",
    icd_init_cur_tab="SYS.DBMS_SQL.ICD_INIT_CUR_TA(C)/SYS.DBMS_SYS_SQL.ICD_INIT_CUR_TA(C)",
    icd_is_open="SYS.DBMS_SQL.ICD_IS_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_IS_OPEN(C)",
    icd_lct="SYS.DBMS_SQL.ICD_LCT(C)/SYS.DBMS_SYS_SQL.ICD_LCT(C)",
    icd_lep="SYS.DBMS_SQL.ICD_LEP(C)/SYS.DBMS_SYS_SQL.ICD_LEP(C)",
    icd_lrc="SYS.DBMS_SQL.ICD_LRC(C)/SYS.DBMS_SYS_SQL.ICD_LRC(C)",
    icd_lri="SYS.DBMS_SQL.ICD_LRI(C)/SYS.DBMS_SYS_SQL.ICD_LRI(C)",
    icd_name_res="SYS.DBMS_UTILITY.ICD_NAME_RES(C)",
    icd_name_tokenize="SYS.DBMS_UTILITY.ICD_NAME_TOKENIZE(C)",
    icd_open="SYS.DBMS_SQL.ICD_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_OPEN(C)",
    icd_parse="SYS.DBMS_SQL.ICD_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE(C)",
    icd_parse_array_init="SYS.DBMS_SQL.ICD_PARSE_ARRAY_INIT(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_INIT(C)",
    icd_parse_array_parse="SYS.DBMS_SQL.ICD_PARSE_ARRAY_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_PARSE(C)",
    icd_parse_array_send="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND(C)",
    icd_parse_array_send_lf="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)",
    icd_parseclb="SYS.DBMS_SQL.ICD_PARSECLB(C)/SYS.DBMS_SYS_SQL.ICD_PARSECLB(C)",
    icd_read_action="SYS.DBMS_APPLICATION_INFO.ICD_READ_ACTION(C)",
    icd_read_info="SYS.DBMS_APPLICATION_INFO.ICD_READ_INFO(C)",
    icd_read_module="SYS.DBMS_APPLICATION_INFO.ICD_READ_MODULE(C)",
    icd_return_result="SYS.DBMS_SQL.ICD_RETURN_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_RETURN_RESULT(C)",
    icd_set_action="SYS.DBMS_APPLICATION_INFO.ICD_SET_ACTION(C)",
    icd_set_client_info="SYS.DBMS_APPLICATION_INFO.ICD_SET_CLIENT_INFO(C)",
    icd_set_module="SYS.DBMS_APPLICATION_INFO.ICD_SET_MODULE(C)",
    icd_set_session_longops="SYS.DBMS_APPLICATION_INFO.ICD_SET_SESSION_LONGOPS(C)",
    icd_to_cursor_number="SYS.DBMS_SQL.ICD_TO_CURSOR_NUMBER(C)/SYS.DBMS_SYS_SQL.ICD_TO_CURSOR_NUMBER(C)",
    icd_to_refcursor="SYS.DBMS_SQL.ICD_TO_REFCURSOR(C)/SYS.DBMS_SYS_SQL.ICD_TO_REFCURSOR(C)",
    icdbind="SYS.DBMS_SQL.ICD_BIND(C)",
    icdbindarray="SYS.DBMS_SQL.ICD_BIND_ARRAY(C)",
    icdbindc="SYS.DBMS_SQL.ICD_BIND_C(C)/SYS.DBMS_SYS_SQL.ICD_BIND_C(C)",
    icdbinddt="SYS.DBMS_SQL.ICD_BIND_DT(C)",
    icdbindi="SYS.DBMS_SQL.ICD_BIND_I(C)/SYS.DBMS_SYS_SQL.ICD_BIND_I(C)",
    icdbindint="SYS.DBMS_SQL.ICD_BIND_INT(C)/SYS.DBMS_SYS_SQL.ICD_BIND_INT(C)",
    icdbindm="SYS.DBMS_SQL.ICD_BIND_M(C)/SYS.DBMS_SYS_SQL.ICD_BIND_M(C)",
    icdbindr="SYS.DBMS_SQL.ICD_BIND_R(C)/SYS.DBMS_SYS_SQL.ICD_BIND_R(C)",
    icdbindu="SYS.DBMS_SQL.ICD_BIND_U(C)/SYS.DBMS_SYS_SQL.ICD_BIND_U(C)",
    icdclose="SYS.DBMS_SQL.ICD_CLOSE(C)/SYS.DBMS_SYS_SQL.ICD_CLOSE(C)",
    icddba="SYS.DBMS_UTILITY.ICD_DBA(C)",
    icddbablock="SYS.DBMS_UTILITY.ICD_DBA_BLOCK(C)",
    icddbafile="SYS.DBMS_UTILITY.ICD_DBA_FILE(C)",
    icddbcomp="SYS.DBMS_DBCOMP.ICD_DBCOMP(C)",
    icddbv2="SYS.DBMS_DBVERIFY.ICD_DBV2(C)",
    icddefine="SYS.DBMS_SQL.ICD_DEFINE(C)",
    icddefinearray="SYS.DBMS_SQL.ICD_DEFINE_ARRAY(C)",
    icddefinec="SYS.DBMS_SQL.ICD_DEFINE_C(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_C(C)",
    icddefinedt="SYS.DBMS_SQL.ICD_DEFINE_DT(C)",
    icddefinei="SYS.DBMS_SQL.ICD_DEFINE_I(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_I(C)",
    icddefineint="SYS.DBMS_SQL.ICD_DEFINE_INT(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_INT(C)",
    icddefinel="SYS.DBMS_SQL.ICD_DEFINE_L(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_L(C)",
    icddefinem="SYS.DBMS_SQL.ICD_DEFINE_M(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_M(C)",
    icddefiner="SYS.DBMS_SQL.ICD_DEFINE_R(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_R(C)",
    icddefineu="SYS.DBMS_SQL.ICD_DEFINE_U(C)/SYS.DBMS_SYS_SQL.ICD_DEFINE_U(C)",
    icddescribecolumn="SYS.DBMS_SQL.ICD_DESCRIBE_COLUMN(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_COLUMN(C)",
    icddescribeinitial="SYS.DBMS_SQL.ICD_DESCRIBE_INITIAL(C)/SYS.DBMS_SYS_SQL.ICD_DESCRIBE_INITIAL(C)",
    icddump="SYS.DBMS_SQL.ICD_DUMP(C)/SYS.DBMS_SYS_SQL.ICD_DUMP(C)",
    icdexecute="SYS.DBMS_SQL.ICD_EXECUTE(C)/SYS.DBMS_SYS_SQL.ICD_EXECUTE(C)",
    icdexpandsqltext="SYS.DBMS_SQL2.ICD_EXPAND_SQL_TEXT(C)",
    icdfetch="SYS.DBMS_SQL.ICD_FETCH(C)/SYS.DBMS_SYS_SQL.ICD_FETCH(C)",
    icdgetc="SYS.DBMS_SQL.ICD_GET_C(C)",
    icdgetcc="SYS.DBMS_SQL.ICD_GET_C_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_C(C)",
    icdgetcdt="SYS.DBMS_SQL.ICD_GET_C_DT(C)",
    icdgetci="SYS.DBMS_SQL.ICD_GET_C_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_I(C)",
    icdgetcint="SYS.DBMS_SQL.ICD_GET_C_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_INT(C)",
    icdgetcl="SYS.DBMS_SQL.ICD_GET_C_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_L(C)",
    icdgetcm="SYS.DBMS_SQL.ICD_GET_C_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_M(C)",
    icdgetcputime="SYS.DBMS_UTILITY.ICD_GET_CPU_TIME(C)",
    icdgetcr="SYS.DBMS_SQL.ICD_GET_C_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_R(C)",
    icdgetcu="SYS.DBMS_SQL.ICD_GET_C_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_C_U(C)",
    icdgete="SYS.DBMS_SQL.ICD_GET_E(C)/SYS.DBMS_SYS_SQL.ICD_GET_E(C)",
    icdgetl="SYS.DBMS_SQL.ICD_GET_L(C)/SYS.DBMS_SYS_SQL.ICD_GET_L(C)",
    icdgetnextresult="SYS.DBMS_SQL.ICD_GET_NEXT_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_GET_NEXT_RESULT(C)",
    icdgetrpicursor="SYS.DBMS_SQL.ICD_GET_RPI_CURSOR(C)/SYS.DBMS_SYS_SQL.ICD_GET_RPI_CURSOR(C)",
    icdgetsqlhash="SYS.DBMS_UTILITY.ICD_GETSQLHASH(C)",
    icdgettime="SYS.DBMS_UTILITY.ICD_GET_TIME(C)",
    icdgetv="SYS.DBMS_SQL.ICD_GET_V(C)",
    icdgetvc="SYS.DBMS_SQL.ICD_GET_V_C(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_C(C)",
    icdgetvdt="SYS.DBMS_SQL.ICD_GET_V_DT(C)",
    icdgetvi="SYS.DBMS_SQL.ICD_GET_V_I(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_I(C)",
    icdgetvint="SYS.DBMS_SQL.ICD_GET_V_INT(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_INT(C)",
    icdgetvm="SYS.DBMS_SQL.ICD_GET_V_M(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_M(C)",
    icdgetvr="SYS.DBMS_SQL.ICD_GET_V_R(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_R(C)",
    icdgetvu="SYS.DBMS_SQL.ICD_GET_V_U(C)/SYS.DBMS_SYS_SQL.ICD_GET_V_U(C)",
    icdhash="SYS.DBMS_UTILITY.ICD_HASH(C)",
    icdinitcurtab="SYS.DBMS_SQL.ICD_INIT_CUR_TA(C)/SYS.DBMS_SYS_SQL.ICD_INIT_CUR_TA(C)",
    icdisopen="SYS.DBMS_SQL.ICD_IS_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_IS_OPEN(C)",
    icdlct="SYS.DBMS_SQL.ICD_LCT(C)/SYS.DBMS_SYS_SQL.ICD_LCT(C)",
    icdlep="SYS.DBMS_SQL.ICD_LEP(C)/SYS.DBMS_SYS_SQL.ICD_LEP(C)",
    icdlrc="SYS.DBMS_SQL.ICD_LRC(C)/SYS.DBMS_SYS_SQL.ICD_LRC(C)",
    icdlri="SYS.DBMS_SQL.ICD_LRI(C)/SYS.DBMS_SYS_SQL.ICD_LRI(C)",
    icdnameres="SYS.DBMS_UTILITY.ICD_NAME_RES(C)",
    icdnametokenize="SYS.DBMS_UTILITY.ICD_NAME_TOKENIZE(C)",
    icdopen="SYS.DBMS_SQL.ICD_OPEN(C)/SYS.DBMS_SYS_SQL.ICD_OPEN(C)",
    icdparse="SYS.DBMS_SQL.ICD_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE(C)",
    icdparsearrayinit="SYS.DBMS_SQL.ICD_PARSE_ARRAY_INIT(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_INIT(C)",
    icdparsearrayparse="SYS.DBMS_SQL.ICD_PARSE_ARRAY_PARSE(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_PARSE(C)",
    icdparsearraysend="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND(C)",
    icdparsearraysendlf="SYS.DBMS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)/SYS.DBMS_SYS_SQL.ICD_PARSE_ARRAY_SEND_LF(C)",
    icdparseclb="SYS.DBMS_SQL.ICD_PARSECLB(C)/SYS.DBMS_SYS_SQL.ICD_PARSECLB(C)",
    icdreadaction="SYS.DBMS_APPLICATION_INFO.ICD_READ_ACTION(C)",
    icdreadinfo="SYS.DBMS_APPLICATION_INFO.ICD_READ_INFO(C)",
    icdreadmodule="SYS.DBMS_APPLICATION_INFO.ICD_READ_MODULE(C)",
    icdreturnresult="SYS.DBMS_SQL.ICD_RETURN_RESULT(C)/SYS.DBMS_SYS_SQL.ICD_RETURN_RESULT(C)",
    icdsetaction="SYS.DBMS_APPLICATION_INFO.ICD_SET_ACTION(C)",
    icdsetclientinfo="SYS.DBMS_APPLICATION_INFO.ICD_SET_CLIENT_INFO(C)",
    icdsetmodule="SYS.DBMS_APPLICATION_INFO.ICD_SET_MODULE(C)",
    icdsetsessionlongops="SYS.DBMS_APPLICATION_INFO.ICD_SET_SESSION_LONGOPS(C)",
    icdtocursornumber="SYS.DBMS_SQL.ICD_TO_CURSOR_NUMBER(C)/SYS.DBMS_SYS_SQL.ICD_TO_CURSOR_NUMBER(C)",
    icdtorefcursor="SYS.DBMS_SQL.ICD_TO_REFCURSOR(C)/SYS.DBMS_SYS_SQL.ICD_TO_REFCURSOR(C)",
    inplace_evol_schema="XDB.DBMS_XMLSCHEMA_INT.INPLACEEVOLVE(XMLSCHEMA_LIB)",
    inplaceevolschema="XDB.DBMS_XMLSCHEMA_INT.INPLACEEVOLVE(XMLSCHEMA_LIB)",
    ins="insert",
    inscovexe="insert ??",
    insdlexe="insert direct load execute",
    insdrv="insert ??",
    insert="CTXSYS.DRVDDL.ContextOldInsert(dr$lib)/CTXSYS.RULEINDEXMETHODS.TRUSTED_INSERT(DR$LIB)/CTXSYS.XPATHINDEXMETHODS.TRUSTED_INSERT(DR$LIB)",
    insert_xdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_ins(xdb.PATH_VIEW_LIB)",
    insert_xdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_INS(XDB.RESOURCE_VIEW_LIB)",
    inserting="SYS.DBMS_STANDARD.inserting(C)",
    insertxdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_ins(xdb.PATH_VIEW_LIB)",
    insertxdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_INS(XDB.RESOURCE_VIEW_LIB)",
    insertxmlbefore="SYS.XMLTYPE.INSERTXMLBEFORE(XMLTYPE_LIB)",
    insexe="[INSert EXEcute] ",
    insidx="insert Insert indexed keys into the indexes after each row is inserted into the table",
    insini="insert initialisation",
    insrow="insert Fetch a row for insertion. This is called back by multirow insert",
    invalidate_acl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_ACL(C)",
    invalidate_wallet_acl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_WALLET_ACL(C)",
    invalidateacl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_ACL(C)",
    invalidatewalletacl="SYS.DBMS_NETWORK_ACL_ADMIN.INVALIDATE_WALLET_ACL(C)",
    ipc="inter process calls",
    ipclw="inter process calls lightweight (exafusion)",
    ipcor="inter process calls on wire",
    ipp="internal probe processor capabilities(?)",
    is_parallel="SYS.DBMS_UTILITY.IS_PARALLEL(C)",
    isarray="SYS.JDOM_T.is_Array(DBMS_JDOM_LIB)",
    isboolean="SYS.JDOM_T.is_Boolean(DBMS_JDOM_LIB)",
    iscs_is_oracle_cloud="is this oracle cloud?",
    isdate="SYS.JDOM_T.is_Date(DBMS_JDOM_LIB)",
    isfalse="SYS.JDOM_T.is_False(DBMS_JDOM_LIB)",
    isfragment="SYS.XMLTYPE.ISFRAGMENT(XMLTYPE_LIB)",
    isnull="SYS.JDOM_T.is_Null(DBMS_JDOM_LIB)",
    isnumber="SYS.JDOM_T.is_Number(DBMS_JDOM_LIB)",
    isobject="SYS.JDOM_T.is_Object(DBMS_JDOM_LIB)",
    isparallel="SYS.DBMS_UTILITY.IS_PARALLEL(C)",
    isscalar="SYS.JDOM_T.is_Scalar(DBMS_JDOM_LIB)",
    isschemabased="SYS.XMLTYPE.ISSCHEMABASED(XMLTYPE_LIB)",
    isschemavalid="SYS.XMLTYPE.ISSCHEMAVALID(XMLTYPE_LIB)",
    isschemavalidated="SYS.XMLTYPE.ISSCHEMAVALIDATED(XMLTYPE_LIB)",
    isstring="SYS.JDOM_T.is_String(DBMS_JDOM_LIB)",
    istrue="SYS.JDOM_T.is_True(DBMS_JDOM_LIB)",
    iststamp="SYS.JDOM_T.is_Timestamp(DBMS_JDOM_LIB)",
    item="XDB.DBMS_XMLDOM_ICD.ITEM(C)",
    jaro_winkler="SYS.UTL_MATCH.jaro_winkler(c)",
    jaro_winkler_similarity="SYS.UTL_MATCH.jaro_winkler_similarity(c)",
    jarowinkler="SYS.UTL_MATCH.jaro_winkler(c)",
    jarowinklersimilarity="SYS.UTL_MATCH.jaro_winkler_similarity(c)",
    joe="java runtime environment(?)",
    jom="java",
    jon="java",
    jox="java jit compiler",
    joxas="java jit compiler dbms_xa",
    joxas_commit="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_COMMIT XA_COMMIT",
    joxas_end="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_END XA_END",
    joxas_forget="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_FORGET XA_FORGET",
    joxas_getlastoer="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_GETLASTOER XA_GETLASTOER",
    joxas_prepare="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_PREPARE XA_PREPARE",
    joxas_rollback="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_ROLLBACK XA_ROLLBACK",
    joxas_settimeout="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_SETTMO XA_SETTIMEOUT",
    joxas_start="java jit compiler dbms_xa DBMS_XA.INTERNAL_JOXAS_START XA_START",
    joxas_xa_commit="SYS.DBMS_XA.INTERNAL_JOXAS_COMMIT(DBMS_XA_LIB)",
    joxas_xa_end="SYS.DBMS_XA.INTERNAL_JOXAS_END(DBMS_XA_LIB)",
    joxas_xa_forget="SYS.DBMS_XA.INTERNAL_JOXAS_FORGET(DBMS_XA_LIB)",
    joxas_xa_getlastoer="SYS.DBMS_XA.INTERNAL_JOXAS_GETLASTOER(DBMS_XA_LIB)",
    joxas_xa_prepare="SYS.DBMS_XA.INTERNAL_JOXAS_PREPARE(DBMS_XA_LIB)",
    joxas_xa_rollback="SYS.DBMS_XA.INTERNAL_JOXAS_ROLLBACK(DBMS_XA_LIB)",
    joxas_xa_settimeout="SYS.DBMS_XA.INTERNAL_JOXAS_SETTMO(DBMS_XA_LIB)",
    joxas_xa_start="SYS.DBMS_XA.INTERNAL_JOXAS_START(DBMS_XA_LIB)",
    joxasxacommit="SYS.DBMS_XA.INTERNAL_JOXAS_COMMIT(DBMS_XA_LIB)",
    joxasxaend="SYS.DBMS_XA.INTERNAL_JOXAS_END(DBMS_XA_LIB)",
    joxasxaforget="SYS.DBMS_XA.INTERNAL_JOXAS_FORGET(DBMS_XA_LIB)",
    joxasxagetlastoer="SYS.DBMS_XA.INTERNAL_JOXAS_GETLASTOER(DBMS_XA_LIB)",
    joxasxaprepare="SYS.DBMS_XA.INTERNAL_JOXAS_PREPARE(DBMS_XA_LIB)",
    joxasxarollback="SYS.DBMS_XA.INTERNAL_JOXAS_ROLLBACK(DBMS_XA_LIB)",
    joxasxasettimeout="SYS.DBMS_XA.INTERNAL_JOXAS_SETTMO(DBMS_XA_LIB)",
    joxasxastart="SYS.DBMS_XA.INTERNAL_JOXAS_START(DBMS_XA_LIB)",
    joxcsys="java jit compiler create or replace java system",
    js="job scheduing",
    jsaaddagentcert="job scheduing DBMS_ISCHED.ADD_AGENT_CERT",
    jsaaddevtqsub="job scheduing DBMS_ISCHED.ADD_EVENT_QUEUE_SUBSCRIBER",
    jsaaddgroupmember="job scheduing DBMS_ISCHED.ADD_GROUP_MEMBER",
    jsaaddmemberwgr="job scheduing DBMS_ISCHED.ADD_WINDOW_GROUP_MEMBER",
    jsaalterchn="job scheduing DBMS_ISCHED.ALTER_CHAIN",
    jsaalterstepchn="job scheduing DBMS_ISCHED.ALTER_CHAIN_STEP",
    jsaassargjob="job scheduing DBMS_ISCHED.SET_JOB_ARGUMENT_VALUE",
    jsaauditsyspriv="job scheduing DBMS_ISCHED.AUDIT_SYS_PRIV",
    jsacheckobjectprivs="job scheduing DBMS_ISCHED_UTL.CHECK_OBJECT_PRIVS",
    jsacheckpurge="job scheduing DBMS_ISCHED.CHECK_PURGE",
    jsaclosewin="job scheduing DBMS_ISCHED.CLOSE_WINDOW",
    jsacompletejobrun="job scheduing DBMS_ISCHED.COMPLETE_JOB_RUN",
    jsacopyjob="job scheduing DBMS_ISCHED.COPY_JOB",
    jsacreateagentdestination="job scheduing DBMS_ISCHED.CREATE_AGENT_DESTINATION",
    jsacreatecls="job scheduing DBMS_ISCHED.CREATE_JOB_CLASS",
    jsacreatedatabasedestination="job scheduing DBMS_ISCHED.CREATE_DATABASE_DESTINATION",
    jsacreatefilewatch="job scheduing DBMS_ISCHED.CREATE_FILE_WATCH",
    jsacreategroup="job scheduing DBMS_ISCHED.CREATE_GROUP",
    jsacreatejob="job scheduing DBMS_ISCHED.CREATE_JOB",
    jsacreatejobstep="job scheduing DBMS_ISCHED.CREATE_JOB DBMS_ISCHED.CREATE_CHAIN_STEP",
    jsacreateprg="job scheduing DBMS_ISCHED.CREATE_PROGRAM",
    jsacreateresource="job scheduing DBMS_ISCHED.CREATE_RESOURCE",
    jsacreatesch="job scheduing DBMS_ISCHED.CREATE_SCHEDULE",
    jsacreatewalletdir="job scheduing DBMS_ISCHED.CREATE_WALLET_DIR_CALLOUT",
    jsacreatewin="job scheduing DBMS_ISCHED.CREATE_WINDOW",
    jsadisable="job scheduing DBMS_ISCHED.DISABLE",
    jsadropagentdestination="job scheduing DBMS_ISCHED.DROP_AGENT_DESTINATION",
    jsadropargjob="job scheduing DBMS_ISCHED.RESET_JOB_ARGUMENT_VALUE",
    jsadropargprg="job scheduing DBMS_ISCHED.DROP_PROGRAM_ARGUMENT",
    jsadropcls="job scheduing DBMS_ISCHED.DROP_JOB_CLASS",
    jsadropdatabasedestination="job scheduing DBMS_ISCHED.DROP_DATABASE_DESTINATION",
    jsadropfilewatch="job scheduing DBMS_ISCHED.DROP_FILE_WATCHER",
    jsadropglobalattrib="job scheduing DBMS_ISCHED.DROP_SCHEDULER_ATTRIBUTE",
    jsadropgroup="job scheduing DBMS_ISCHED.DROP_GROUP",
    jsadropjob="job scheduing DBMS_ISCHED.DROP_JOB",
    jsadropprg="job scheduing DBMS_ISCHED.DROP_PROGRAM",
    jsadropresource="job scheduing DBMS_ISCHED.DROP_RESOURCE",
    jsadropsch="job scheduing DBMS_ISCHED.DROP_SCHEDULE",
    jsadropwgr="job scheduing DBMS_ISCHED.DROP_WINDOW_GROUP",
    jsadropwin="job scheduing DBMS_ISCHED.DROP_WINDOW",
    jsaenable="job scheduing DBMS_ISCHED.ENABLE",
    jsaenqendchainjob="job scheduing DBMS_ISCHED.ENQ_END_CHAIN_JOB",
    jsafiletransfer="job scheduing DBMS_ISCHED.FILE_TRANSFER",
    jsagenagentpasssalt="job scheduing DBMS_ISCHED.GEN_AGENT_PASS_SALT",
    jsagetagentpassver="job scheduing DBMS_ISCHED.GET_AGENT_PASS_VERIFIER",
    jsagetboolattrib="job scheduing DBMS_ISCHED.GET_BOOL_ATTRIBUTE",
    jsagetcharattrib="job scheduing DBMS_ISCHED.GET_CHAR_ATTRIBUTE",
    jsagetcredpass="job scheduing DBMS_ISCHED.GET_CREDENTIAL_PASSWORD",
    jsagetdateattrib="job scheduing DBMS_ISCHED.GET_DATE_ATTRIBUTE",
    jsagetglobalattrib="job scheduing DBMS_ISCHED.GET_SCHEDULER_ATTRIBUTE",
    jsagetintattrib="job scheduing DBMS_ISCHED.GET_INT_ATTRIBUTE",
    jsagetinterattrib="job scheduing DBMS_ISCHED.GET_INTERVAL_ATTRIBUTE",
    jsagettns="job scheduing DBMS_ISCHED.GET_TNS_NVPAIR",
    jsanotifyservicemetricsupdate="job scheduing DBMS_ISCHED.NTFY_SVC_METRICS_UPDT",
    jsaobfcredpass="job scheduing DBMS_ISCHED.OBFUSCATE_CREDENTIAL_PASSWORD",
    jsaopenwin="job scheduing DBMS_ISCHED.OPEN_WINDOW",
    jsaraiseerror="job scheduing DBMS_ISCHED.RAISE_ORACLE_ERROR",
    jsaregargprg="job scheduing DBMS_ISCHED.DEFINE_PROGRAM_ARGUMENT",
    jsaregistercallback="job scheduing DBMS_ISCHED.REGISTER_CALLBACK",
    jsaremevtqsub="job scheduing DBMS_ISCHED.REMOVE_EVENT_QUEUE_SUBSCRIBER",
    jsaremovegroupmember="job scheduing DBMS_ISCHED.REMOVE_GROUP_MEMBER",
    jsaremovememberwgr="job scheduing DBMS_ISCHED.REMOVE_WINDOW_GROUP_MEMBER",
    jsarunjob="job scheduing DBMS_ISCHED.RUN_JOB",
    jsasetagentpass="job scheduing DBMS_ISCHED.SET_AGENT_REGISTRATION",
    jsasetboolattrib="job scheduing DBMS_ISCHED.SET_BOOL_ATTRIBUTE",
    jsasetcharattrib="job scheduing DBMS_ISCHED.SET_CHAR_ATTRIBUTE",
    jsasetdateattrib="job scheduing DBMS_ISCHED.SET_DATE_ATTRIBUTE",
    jsasetglobalattrib="job scheduing DBMS_ISCHED.SET_SCHEDULER_ATTRIBUTE",
    jsasetintattrib="job scheduing DBMS_ISCHED.SET_INT_ATTRIBUTE",
    jsasetinterattrib="job scheduing DBMS_ISCHED.SET_INTERVAL_ATTRIBUTE",
    jsasetlistattrib="job scheduing DBMS_ISCHED.SET_LIST_ATTRIBUTE",
    jsasetresourceconstraint="job scheduing DBMS_ISCHED.SET_RESOURCE_CONSTRAINT",
    jsastopjob="job scheduing DBMS_ISCHED.STOP_JOB",
    jsatime="job scheduing DBMS_ISCHED.STIME",
    jsatranslatejssuerrorcode="job scheduing DBMS_IJOB.TRANSLATE_JSSU_ERROR_CODE",
    jsavalidatelocalcred="job scheduing DBMS_ISCHED.CHECK_LOCAL_CREDENTIAL",
    jsbabatchjobops="job scheduing DBMS_ISCHED.BATCH_JOB_OPS",
    jsbacreatejobs="job scheduing DBMS_ISCHED.CREATE_JOBS",
    jsbasetjobattribs="job scheduing DBMS_ISCHED.SET_JOB_ATTRIBUTES",
    jsbashowerrors="job scheduing DBMS_ISCHED.SHOW_ERRORS",
    jskecheckaqcbkprivs="job scheduing DBMS_ISCHED.CHECK_AQ_CBK_PRIVS",
    jskecheckreqprivs="job scheduing DBMS_ISCHED.CHECK_REQUEST_PRIVS",
    jskeeventcondfilter="job scheduing DBMS_ISCHED.EVENT_COND_FILTER",
    jskefilewatchfilter="job scheduing DBMS_ISCHED.FILE_WATCH_FILTER",
    jskegetlastfwrun="job scheduing DBMS_ISCHED.GET_LAST_RUN_TIME",
    jskegetschlimmsgid="job scheduing DBMS_ISCHED.RAISE_SCHLIM_EVT",
    jskerecresendreq="job scheduing DBMS_ISCHED.RECORD_RESENT_REQUEST",
    jskesetevtmsgarg="job scheduing DBMS_ISCHED.SET_EVTMSG_ARG",
    jskesetlastfwrun="job scheduing DBMS_ISCHED.SET_LAST_RUN_TIME",
    jsondgaggwrap="SYS.JSONHDGIMP.ODCIAggregateInitialize(json_lib)/SYS.JSONDGIMP.ODCIAggregateInitialize(json_lib)/SYS.SYSDGAGGIMP.ODCIAggregateInitialize(json_lib)/SYS.SYSHIERDGAGGIMP.ODCIAggregateInitialize(json_lib)",
    jsxsexecprepostapply="job scheduing DBMS_ISCHED.EXEC_JOB_RUN_LSA",
    jsxsgetsystimezonename="job scheduing DBMS_ISCHED.GET_SYS_TIME_ZONE_NAME",
    jzn="json",
    k="kernel",
    k2="[Kernel 2-phase Commit] ",
    k2c="[Kernel 2-phase Commit] kernel Capabilities",
    k2d="[Kernel 2-phase Commit] global unique database id",
    k2g="[Kernel 2-phase Commit] global transction id",
    k2gcrt="[Kernel 2-phase Commit] global transction id create a distributed transaction",
    k2gihash="[Kernel 2-phase Commit] global transction id calculate a hash value from a global transaction id",
    k2glpr="[Kernel 2-phase Commit] global transction id print local tran id",
    k2gt="[Kernel 2-phase Commit] global transction id commit global transaction",
    k2i="[Kernel 2-phase Commit] indoubt table interface",
    k2l="[Kernel 2-phase Commit] log records and log interface",
    k2labo="[Kernel 2-phase Commit] log records and log interface abort session: first abort aborts tx",
    k2lcom="[Kernel 2-phase Commit] log records and log interface commit session, first commit commits tx",
    k2lpre="[Kernel 2-phase Commit] log records and log interface prepare: enter prepared state for session, if last session, prepare tx",
    k2r="[Kernel 2-phase Commit] multiple RPC",
    k2rbeg="[Kernel 2-phase Commit] multiple RPC RPC for begin transaction",
    k2s="[Kernel 2-phase Commit] server",
    k2send="[Kernel 2-phase Commit] server server end transaction - 2PC state machine",
    k2serv="[Kernel 2-phase Commit] server service a transaction manager RPC",
    k2sfor="[Kernel 2-phase Commit] server forget current session of current transaction",
    k2udio="[Kernel 2-phase Commit] message unmarshalling",
    k2v="[Kernel 2-phase Commit] recovery",
    ka="[Kernel Access] ",
    kad="[Kernel Access] objects anydata/images",
    kaf="[Kernel Access] fetch",
    kapiddlexecute="[Kernel Access] SYS.DBMS_AUTO_INDEX_INTERNAL.DDL_EXECUTE_CALLOUT(DBMS_AUTO_INDEX_LIB)",
    kapienabled="[Kernel Access] SYS.DBMS_AUTO_INDEX_INTERNAL.AUTO_INDEX_ENABLED_CALLOUT(DBMS_AUTO_INDEX_LIB)",
    kapisimulatetasktimeout="[Kernel Access] SYS.DBMS_AUTO_INDEX_INTERNAL.SIMULATE_TASK_TIMEOUT(DBMS_AUTO_INDEX_LIB)",
    kapsenabled="[Kernel Access] SYS.DBMS_STATS_INTERNAL.AUTO_STATS_ENABLED_CALLOUT(DBMS_STATS_LIB)",
    kapspmenabled="[Kernel Access] SYS.DBMS_SPM_INTERNAL.AUTO_SPM_ENABLED_CALLOUT(DBMS_SPM_LIB)",
    kau="[Kernel Access Update] ",
    kaudel="[Kernel Access Update] delete row from table and modify indexes (?)",
    kauupd="[Kernel Access Update] update table and modify indexes",
    kauxsin="[Kernel Access Update] insert a key into x index segment(s) only",
    kb="[kernel backup] ",
    kbc="[kernel backup] backup appliance containers",
    kbrs="[kernel backup] backup appliance",
    kc="[kernel cache] ",
    kcb="[Kernel Cache Buffer Management] ",
    kcbhchk="[Kernel Cache Buffer Management] start blocking check",
    kcb_sync_last_change="[Kernel Cache Buffer Management] call kcrf_commit_force to sync redo",
    kcbapl="[Kernel Cache Buffer Management] apply (changes to buffer; kcoapl executes changes)",
    kcbb="[Kernel Cache Buffer Management] databasewriter",
    kcbbacq="[Kernel Cache Buffer Management] databasewriter active checkpoint queue",
    kcbbdrv="[Kernel Cache Buffer Management] databasewriter central write driver",
    kcbblwr="[Kernel Cache Buffer Management] databasewriter create redo records for list of blocks written (media recovery marker)",
    kcbbwlru="[Kernel Cache Buffer Management] databasewriter write buffers from one of the LRU write lists",
    kcbbxsv="[Kernel Cache Buffer Management] databasewriter take single buffer and check if we have to return to LRU",
    kcbcbo="[Kernel Cache Buffer Management] call begin object checkpoint (?)",
    kcbchg="[Kernel Cache Buffer Management] change a block",
    kcbchg1="[Kernel Cache Buffer Management] change a block change a block",
    kcbchk="[Kernel Cache Buffer Management] ??",
    kcbchk_ctx="[Kernel Cache Buffer Management] check context, execute check functions",
    kcbdbh="[Kernel Cache Buffer Management] dump one buffer",
    kcbdnb="[Kernel Cache Buffer Management] dump n buffers",
    kcbema="[Kernel Cache Buffer Management] exam and maybe apply",
    kcbgcur="[Kernel Cache Buffer Management] get current read",
    kcbget="[Kernel Cache Buffer Management] get buffer (retry scan performed earlier by kcbgtcr)",
    kcbgtcr="[Kernel Cache Buffer Management] get consistent read",
    kcbh="[Kernel Cache Buffer Management] header",
    kcbhfix_tail="[Kernel Cache Buffer Management] header update tail (low-order two bytes of the scn+block type+block sequence number)",
    kcbhlchk="[Kernel Cache Buffer Management] header logical check",
    kcbhsbs_ub8="[Kernel Cache Buffer Management] header write SCN base and wrap in buffer header",
    kcbhxor="[Kernel Cache Buffer Management] header xor buffer contents",
    kcbhxoro="[Kernel Cache Buffer Management] header xor buffer contents operation",
    kcbi_="[Kernel Cache Buffer Management] shared IO pool",
    kcbi_get_rsv_bh="[Kernel Cache Buffer Management] shared IO pool get reserved buffer header",
    kcbi_issue_io="[Kernel Cache Buffer Management] shared IO pool issue IO",
    kcbi_issue_write="[Kernel Cache Buffer Management] shared IO pool issue write",
    kcbibr="[Kernel Cache Buffer Management] invalidate range of blocks",
    kcbifc="[Kernel Cache Buffer Management] full database caching mode (?)",
    kcbipnns="[Kernel Cache Buffer Management] is (buffer) pinned (no statistics)",
    kcbism="[Kernel Cache Buffer Management] is medium (selection of read strategy)",
    kcbispnd="[Kernel Cache Buffer Management] is (buffer) pinned (is buffer pinned stat is incremented)",
    kcbivlo="[Kernel Cache Buffer Management] is very large object (selection of read strategy)",
    kcbk="[Kernel Cache Buffer Management] checkpoint queue manipulation",
    kcbk_prefetch_track="[Kernel Cache Buffer Management] checkpoint queue manipulation db_block_prefetch administration",
    kcbklbc="[Kernel Cache Buffer Management] checkpoint queue manipulation link buffer into ckpt queue",
    kcbkllrba="[Kernel Cache Buffer Management] checkpoint queue manipulation find lowest low RBA on checkpoint queues",
    kcbl="[Kernel Cache Buffer Load management] direct io routines",
    kcblci="[Kernel Cache Buffer Load management] direct io routines check input",
    kcblgt="[Kernel Cache Buffer Load management] direct io routines get buffer",
    kcblibr="[Kernel Cache Buffer Load management] direct io routines locally invalidate block range or object",
    kcblin="[Kernel Cache Buffer Load management] direct io routines operations for redo-less write interface",
    kcblio="[Kernel Cache Buffer Management] direct io routines ??",
    kcblnb="[Kernel Cache Buffer Load management] direct io routines load new buffer",
    kcblnb_dscn="[Kernel Cache Buffer Load management] direct io routines load new buffer load new buffer",
    kcblrd="[Kernel Cache Buffer Load management] direct io routines initiate read ahead",
    kcblrl="[Kernel Cache Buffer Load management] direct io routines load release buffer",
    kcblrr="[Kernel Cache Buffer Management] direct io routines ??",
    kcblrs="[Kernel Cache Buffer Load management] direct io routines read submit",
    kcblsy="[Kernel Cache Buffer Load management] direct io routines load sync IO",
    kcbnlc="[Kernel Cache Buffer Management] analyze cleanout",
    kcbo="[Kernel Cache Buffer Management] object queue",
    kcbo_ckpt_obj="[Kernel Cache Buffer Management] object queue fast object checkpoint",
    kcbpioq="[Kernel Cache Buffer Management] physical IO queueing (batched in planline)",
    kcbpioqaddio="[Kernel Cache Buffer Management] physical IO queueing (batched in planline) add IO to batched IO",
    kcbpioqcinit="[Kernel Cache Buffer Management] physical IO queueing (batched in planline) initialize memory area in pga",
    kcbpioqinit="[Kernel Cache Buffer Management] physical IO queueing (batched in planline) initialize memory area in shared pool",
    kcbpioqregisterclient="[Kernel Cache Buffer Management] physical IO queueing (batched in planline) create memory area in shared pool main function",
    kcbpioqwillwaitforio="[Kernel Cache Buffer Management] physical IO queueing (batched in planline) save IO for batching",
    kcbpsod="[Kernel Cache Buffer Management] ??",
    kcbr_apply_pending="[Kernel Cache Buffer Management] apply changed pending read completion",
    kcbr_media_apply="[Kernel Cache Buffer Management] apply change vector for media recovery",
    kcbrbr="[Kernel Cache Buffer Management] reuse block range: called by space management",
    kcbrbuf="[Kernel Cache Buffer Management] get a recovery buffer",
    kcbrls="[Kernel Cache Buffer Management] release pin",
    kcbs="[Kernel Cache Buffer Management] simulator",
    kcbsacc="[Kernel Cache Buffer Management] simulator access",
    kcbshlc="[Kernel Cache Buffer Management] simulator ??",
    kcbsod="[Kernel Cache Buffer Management] simulator ??",
    kcbtdu="[Kernel Transaction Block] dump block",
    kcbtema="[Kernel Cache Buffer Management] thread recovery examine and maybe apply",
    kcbtse="[Kernel Cache Buffer Management] tablespace encryption",
    kcbtse_encdec_tbsblk="[Kernel Cache Buffer Management] tablespace encryption block encrypt",
    kcbtse_get_tbskey="[Kernel Cache Buffer Management] tablespace encryption get tablespace key, decrypt the key if needed",
    kcbtsn="[Kernel Cache Buffer Management] get tablespace number",
    kcbv="[Kernel Cache Buffer Management] vlm (very large memory)",
    kcbw="[Kernel Cache Buffer Management] working set management",
    kcbz="[Kernel Cache Buffer Management subroutines for kcb] ",
    kcbz_encdec_tbsblk="[Kernel Cache Buffer Management subroutines for kcb] tablespace block encrypt",
    kcbz_fp_cr="[Kernel Cache Buffer Management subroutines for kcb] fast pin consistent read",
    kcbz_fp_shr="[Kernel Cache Buffer Management subroutines for kcb] fast pin shared mode",
    kcbz_fr_buf="[Kernel Cache Buffer Management subroutines for kcb] free buffer",
    kcbz_free_table_scan_read_buffer="[Kernel Cache Buffer Management subroutines for kcb] free buffered multiblock read buffer",
    kcbz_table_scan_read="[Kernel Cache Buffer Management subroutines for kcb] buffered multiblock read main loop",
    kcbzar="[Kernel Cache Buffer Management subroutines for kcb] release buffer",
    kcbzcb="[Kernel Cache Buffer Management subroutines for kcb] create/maybe clone buffer",
    kcbzdh="[Kernel Cache Buffer Management subroutines for kcb] dump buffer routine",
    kcbzfb="[Kernel Cache Buffer Management subroutines for kcb] format block",
    kcbzfs="[Kernel Cache Buffer Management subroutines for kcb] free state object (buffer handle/kcbbf)",
    kcbzgb="[Kernel Cache Buffer Management subroutines for kcb] get cr/read/rec (space for) buffer with dba/class; set buffer state to reading",
    kcbzgm="[Kernel Cache Buffer Management subroutines for kcb] get (space for) multiblock buffer",
    kcbzgs="[Kernel Cache Buffer Management subroutines for kcb] get state object (buffer handle/kcbbf)",
    kcbzgsf="[Kernel Cache Buffer Management subroutines for kcb] get state object (buffer handle/kcbbf) fast",
    kcbzgws="[Kernel Cache Buffer Management subroutines for kcb] get write list",
    kcbzib="[Kernel Cache Buffer Management subroutines for kcb] input buffer (reads a block from disk into a buffer)",
    kcbzibmlt="[Kernel Cache Buffer Management subroutines for kcb] input buffer (reads a block from disk into a buffer) for multiblock read",
    kcbzpb="[Kernel Cache Buffer Management subroutines for kcb] prepare block for write. calls kcbhpwb to prepare block for write",
    kcbztek_trace_blk="[Kernel Cache Buffer Management subroutines for kcb] tablespace encryption check(?)",
    kcbzvb="[Kernel Cache Buffer Management subroutines for kcb] verify buffer",
    kcbzwb="[Kernel Cache Buffer Management subroutines for kcb] wait buffer (buffer busy wait)",
    kcbzwc="[Kernel Cache Buffer Management subroutines for kcb] wait (write) complete",
    kcbzwcw="[Kernel Cache Buffer Management subroutines for kcb] wait (write) complete wait",
    kcc="[Kernel Cache Control file component] ",
    kcc_tac_callback="[Kernel Cache Control file component] timed-out actions callback routine (could signal waiting too long)",
    kccbcf="[Kernel Cache Control file component] begin controlfile update",
    kccbcx="[Kernel Cache Control file component] begin control transaction",
    kccccf="[Kernel Cache Control file component] close control files",
    kccchb="[Kernel Cache Control file component] cache header block",
    kccchm="[Kernel Cache Control file component] cache header block",
    kcccmt="[Kernel Cache Control file component] commit changes",
    kccecx="[Kernel Cache Control file component] end controlfile transaction",
    kccexpd="[Kernel Cache Control file component] expand controlfile section for rectype",
    kccgft="[Kernel Cache Control file component] get for fixed table",
    kccida="[Kernel Cache Control file component] ??",
    kccidf="[Kernel Cache Control file component] identify all copies of the controlfile. sends a message to the dbwr",
    kcckfr="[Kernel Cache Control file component] deallocate controlfile cache using kernel memory free routine",
    kccocx="[Kernel Cache Control file component] open control transaction",
    kccpcp="[Kernel Cache Control file component] prepare(?) checkpoint progress records",
    kccrhd="[Kernel Cache Control file component] read header",
    kccwbp="[Kernel Cache Control file component] write block physically",
    kccxfe="[Kernel Cache Control file component] fixed table callback: database file entries",
    kcf="[Kernel Cache Files component] ",
    kcfaioe="[Kernel Cache Files component] aio error. checks if aio is possible.",
    kcfbsy="[Kernel Cache Files component] background synchronisation of SGA and controlfile",
    kcfcaf="[Kernel Cache Files component] close all files",
    kcfccfl="[Kernel Cache Files component] create control file logfile exam",
    kcfcdb="[Kernel Cache Files component] create and mount the database",
    kcfcld="[Kernel Cache Files component] close database",
    kcfcmb="[Kernel Cache Files component] create/mount database subroutines",
    kcfcsy="[Kernel Cache Files component] cross instance sync",
    kcfida="[Kernel Cache Files component] identify file action",
    kcfis="[Kernel Cache Files component] intelligent storage",
    kcfis_tablespace_is_on_sage="[Kernel Cache Files component] intelligent storage test if tablespace is on exadata",
    kcfl="[Kernel Cache Files component] loader",
    kcflci="[Kernel Cache Files component] loader check status of IO",
    kcflwi="[Kernel Cache Files component] loader wait for IO",
    kcfmdb="[Kernel Cache Files component] mount database",
    kcfmrc="[Kernel Cache Files component] get multiblock read count(?)",
    kcfopd="[Kernel Cache Files component] open/close database code",
    kcfrbd="[Kernel Cache Files component] read buffers from disk",
    kcfris="[Kernel Cache Files component] release instance state queue",
    kcfrms="[Kernel Cache Files component] DBMS_SYSTEM.KCFRMS_ICD KCFRMS",
    kcfrms_icd="[Kernel Cache Files component] SYS.DBMS_SYSTEM.KCFRMS_IC(C)",
    kcfrmsicd="[Kernel Cache Files component] SYS.DBMS_SYSTEM.KCFRMS_IC(C)",
    kcfwatwr="[Kernel Cache Files component] wait for write IOs to finish (dbwr)",
    kcht="Kernel Cache buffer Hash Table",
    kci="[Kernel Cache Oracle Text] ",
    kcictxaggwrap="[Kernel Cache Oracle Text] SYS.CTXAGGIMP.ODCIAggregateInitialize(kci_ctxagg_lib)",
    kck="Kernel Cache Compatibility segment component",
    kcl="[Kernel Cache Lock background process] ",
    kcl_dissolve_affinity="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_AFFINITY(C)",
    kcl_dissolve_readmostly="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_READMOSTLY(C)",
    kcl_grab_affinity="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_GRAB_AFFINITY(C)",
    kcl_grab_readmostly="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_GRAB_READMOSTLY(C)",
    kcl_obj_downconvert="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_OBJ_DOWNCONVERT(C)",
    kclalc="[Kernel Cache Lock background process] allocate and initialize lock context",
    kclbla="[Kernel Cache Lock background process] release processing?",
    kclcfusion="[Kernel Cache Lock background process] claim fusion lock",
    kclclaim="[Kernel Cache Lock background process] claim a recovery lock",
    kclcls="[Kernel Cache Lock background process] check lock status",
    kclcrrf="[Kernel Cache Lock background process] kernel cache lock manager ??",
    kclcsfusion="[Kernel Cache Lock background process] start fusion recovery request",
    kclcvb="[Kernel Cache Lock background process] convert lock background: send message(s) to background to convert lock",
    kcldissolveaffinity="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_AFFINITY(C)",
    kcldissolvereadmostly="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_DISSOLVE_READMOSTLY(C)",
    kcldmp="[Kernel Cache Lock background process] kernel cache lock manager ??",
    kclebs="[Kernel Cache Lock background process] escalate buffer state. this routine attempts to make a shared current.",
    kclgclk="[Kernel Cache Lock background process] global cache lock",
    kclgrabaffinity="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_GRAB_AFFINITY(C)",
    kclgrabreadmostly="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_GRAB_READMOSTLY(C)",
    kclobjdownconvert="[Kernel Cache Lock background process] SYS.DBMS_CACHEUTIL.KCL_OBJ_DOWNCONVERT(C)",
    kclpto="[Kernel Cache Lock background process] background timeout action",
    kclrdone="[Kernel Cache Lock background process] recovery is done so cleanup buffer",
    kclscrs="[Kernel Cache Lock background process] setup consistent reads",
    kclwcrs="[Kernel Cache Lock background process] wait for consistent reads",
    kclxle="[Kernel Cache Lock background process] kernel cache lock manager ??",
    kcm="[Kernel Cache Miscellaneous functions(SCN)] ",
    kcm_disableautorollover="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.DISABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcm_enableautorollover="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.ENABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcm_getcurrentscnparams="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.GETCURRENTSCNPARAMS(DBMS_SCN_LIB)",
    kcm_getscnautorolloverparams="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.GETSCNAUTOROLLOVERPARAMS(DBMS_SCN_LIB)",
    kcm_getscnparamsbycompat="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.GETSCNPARAMSBYCOMPAT(DBMS_SCN_LIB)",
    kcmadj="[Kernel Cache Miscellaneous functions(SCN)] adjust scn",
    kcmclscn="[Kernel Cache Miscellaneous functions(SCN)] check lamport scn",
    kcmcvc="[Kernel Cache Miscellaneous functions(SCN)] create virtual circuit",
    kcmdisableautorollover="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.DISABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcmdsc="[Kernel Cache Miscellaneous functions(SCN)] dfs: set/get/inc lock value scn and mess with backup scn if needed",
    kcmenableautorollover="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.ENABLEAUTOROLLOVER(DBMS_SCN_LIB)",
    kcmgetcurrentscnparams="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.GETCURRENTSCNPARAMS(DBMS_SCN_LIB)",
    kcmgetscnautorolloverparams="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.GETSCNAUTOROLLOVERPARAMS(DBMS_SCN_LIB)",
    kcmgetscnparamsbycompat="[Kernel Cache Miscellaneous functions(SCN)] SYS.DBMS_SCN.GETSCNPARAMSBYCOMPAT(DBMS_SCN_LIB)",
    kcmgtsf="[Kernel Cache Miscellaneous functions(SCN)] get timestamp full",
    kcmtdif="[Kernel Cache Miscellaneous functions(SCN)] time difference",
    kcn="kernel cache nologging(?)",
    kco="[Kernel Cache Operations] ",
    kco_blkchk="[Kernel Cache Operations] main block check function",
    kcoadd="[Kernel Cache Operations] add change vector to kcocv array",
    kcoadv_hdr="[Kernel Cache Operations] advance SCN in buffer header",
    kcoapl="[Kernel Cache Operations] keep a before image of the block being changed and apply (changes to buffer)",
    kcoapl_validate="[Kernel Cache Operations] apply (changes to buffer) validate applied changes",
    kconew="[Kernel Cache Operations] create (new) array (kcocv) of change vectors",
    kcopcv="[Kernel Cache Operations] prepare change vector/redo entry generation and retrieval",
    kcosze="[Kernel Cache Operations] calculate undo record size",
    kcoubk="[Kernel Cache Operations] undo callback",
    kcp_check_tts_char_set_compat="SYS.DBMS_PLUGTS.KCP_CHECK_TTS_CHAR_SET_COMPAT(DBMS_PLUGTS_LIB)",
    kcp_getafndbid="SYS.DBMS_TTS.GET_AFN_DBID(DBMS_TTS_LIB)",
    kcp_getafndbidxendian="SYS.DBMS_TTS.GET_AFN_DBIDXENDIAN(DBMS_TTS_LIB)",
    kcp_reclaim_segment="SYS.DBMS_PLUGTS.KCP_PLG_RECLAIM_SEGMENT(DBMS_PLUGTS_LIB)",
    kcp_tse_get_protected_tse_key="SYS.DBMS_TTS.GET_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcp_tse_put_protected_tse_key="SYS.DBMS_TTS.PUT_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcpacomp="SYS.DBMS_PLUGTS.KCP_ACOMP(DBMS_PLUGTS_LIB)",
    kcpaldfts="SYS.DBMS_PLUGTS.KCP_ALDFTS(DBMS_PLUGTS_LIB)",
    kcpbexp="SYS.DBMS_PLUGTS.KCP_BEXP(DBMS_PLUGTS_LIB)",
    kcpcheckttscharsetcompat="SYS.DBMS_PLUGTS.KCP_CHECK_TTS_CHAR_SET_COMPAT(DBMS_PLUGTS_LIB)",
    kcpcheckxmlsch="kernel cache DBMS_EXTENDED_TTS_CHECKS.KCP_CHECKXMLSCHEMA",
    kcpchkchar="SYS.DBMS_PLUGTS.KCP_CHKCHAR(DBMS_PLUGTS_LIB)",
    kcpchkxplatform="SYS.DBMS_PLUGTS.KCP_CHKXPLATFORM(DBMS_PLUGTS_LIB)",
    kcpcmt="SYS.DBMS_PLUGTS.KCP_CMT(DBMS_PLUGTS_LIB)",
    kcpcsxevent="SYS.DBMS_EXTENDED_TTS_CHECKS.KCP_CHECKCSXEVENT(DBMS_EXTENDED_TTS_CHECKS_LIB)",
    kcpcxmlsch="SYS.DBMS_EXTENDED_TTS_CHECKS.KCP_CHECKXMLSCHEMA(DBMS_EXTENDED_TTS_CHECKS_LIB)",
    kcpgetafndbid="SYS.DBMS_TTS.GET_AFN_DBID(DBMS_TTS_LIB)",
    kcpgetafndbidxendian="SYS.DBMS_TTS.GET_AFN_DBIDXENDIAN(DBMS_TTS_LIB)",
    kcpgetchar="SYS.DBMS_PLUGTS.KCP_GETCHAR(DBMS_PLUGTS_LIB)",
    kcpgetcomp="SYS.DBMS_PLUGTS.KCP_GETCOMP(DBMS_PLUGTS_LIB)",
    kcpgetfh="SYS.DBMS_PLUGTS.KCP_GETFH(DBMS_PLUGTS_LIB)",
    kcpinit="SYS.DBMS_PLUGTS.KCP_INIT(DBMS_PLUGTS_LIB)",
    kcpnewts="SYS.DBMS_PLUGTS.KCP_NEWTS(DBMS_PLUGTS_LIB)",
    kcppd="SYS.DBMS_PLUGTSP.KCP_PD(DBMS_PLUGTS_LIB)",
    kcpplgdf="SYS.DBMS_PLUGTS.KCP_PLGDF(DBMS_PLUGTS_LIB)",
    kcpplobp="SYS.DBMS_PLUGTSP.KCP_PLOBP(DBMS_PLUGTS_LIB)",
    kcpptmd="SYS.DBMS_PLUGTSP.KCP_PTMD(DBMS_PLUGTS_LIB)",
    kcprdfh="SYS.DBMS_PLUGTS.KCP_RDFH(DBMS_PLUGTS_LIB)",
    kcpreclaimsegment="SYS.DBMS_PLUGTS.KCP_PLG_RECLAIM_SEGMENT(DBMS_PLUGTS_LIB)",
    kcptsegetprotectedtsekey="SYS.DBMS_TTS.GET_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcptseputprotectedtsekey="SYS.DBMS_TTS.PUT_PROTECTED_TSE_KEY_INT(DBMS_TTS_LIB)",
    kcr="[Kernel Cache recoVery] ",
    kcra="[Kernel Cache Redo Application/Access] ",
    kcramr="[Kernel Cache Redo Application/Access] apply media recovery",
    kcratr="[Kernel Cache Redo Application/Access] thread redo application",
    kcratr1="[Kernel Cache Redo Application/Access] thread redo application pass one: construct recovery set",
    kcratr2="[Kernel Cache Redo Application/Access] thread redo application pass two: apply change vectors",
    kcratr_claim="[Kernel Cache Redo Application/Access] thread redo application claim recovery buffers",
    kcrcrl="[Kernel Cache recoVery] corrupt redo log",
    kcrf="[Kernel Cache Redo File management] ",
    kcrf_cnv_fh_after_read="[Kernel Cache Redo File management] convert file header after read",
    kcrf_cnv_fh_before_write="[Kernel Cache Redo File management] convert file header before write",
    kcrf_cnv_fh_layout="[Kernel Cache Redo File management] convert file header layout",
    kcrf_commit_force="[Kernel Cache Redo File management] commit changes and post lgwr or wait for lgwr",
    kcrf_commit_force_int="[Kernel Cache Redo File management] commit changes and post lgwr or wait for lgwr (12c)",
    kcrf_get_logical_block_size="[Kernel Cache Redo File management] get redo block size",
    kcrf_pvt_strand_bind="[Kernel Cache Redo File management] try to bind private strand",
    kcrf_read_header="[Kernel Cache Redo File management] read header",
    kcrf_strand_ftcb="[Kernel Cache Redo File management] strand fetch callback (x$kcrfstrand helper function)",
    kcrf_sync_adaptive_set="[Kernel Cache Redo File management] set adaptive log file sync mode",
    kcrf_val_log_bsz="[Kernel Cache Redo File management] evaluate physical blocksize for logfile IO(?)",
    kcrfds="[Kernel Cache Redo File management] do switch of current log",
    kcrfisd="[Kernel Cache Redo File management] redo is on disk",
    kcrfnl="[Kernel Cache Redo File management] next log",
    kcrfr="[Kernel Cache Redo File Read] ",
    kcrfrgv="[Kernel Cache Redo File Read] get change vector header/data",
    kcrfsl="[Kernel Cache Redo File management] switch log",
    kcrfvh="[Kernel Cache Redo File management] verify header",
    kcrfw="[Kernel Cache Redo File Write] SCN",
    kcrfw_alfs="[Kernel Cache Redo File Write] SCN adaptive log file sync",
    kcrfw_alfs_cron_job="[Kernel Cache Redo File Write] SCN adaptive log file sync calculate alfs stats (ckpt)",
    kcrfw_alfs_save_redowrite_time="[Kernel Cache Redo File Write] SCN adaptive log file sync save redo write time (lgwr)",
    kcrfw_cal_target_rba="[Kernel Cache Redo File Write] SCN calculate target redo byte address",
    kcrfw_copy_cv="[Kernel Cache Redo File Write] SCN copy change vectors to public redo buffer",
    kcrfw_do_null_write="[Kernel Cache Redo File Write] SCN execute write cycle without write only increase on disk SCN",
    kcrfw_do_write="[Kernel Cache Redo File Write] SCN execute write cycle with write and increase on disk and real redo SCN",
    kcrfw_gather_lwn="[Kernel Cache Redo File Write] SCN gather strand info for LWN batch and put results in PIC",
    kcrfw_gather_strand="[Kernel Cache Redo File Write] SCN gather strand write info",
    kcrfw_have_non_idle_strand="[Kernel Cache Redo File Write] SCN gather strands needing writing from PIC",
    kcrfw_partial_checksum="[Kernel Cache Redo File Write] SCN write checksum into the redo strand",
    kcrfw_post="[Kernel Cache Redo File Write] SCN post processing after (null)write",
    kcrfw_redo_gen="[Kernel Cache Redo File Write] SCN main redo generation function",
    kcrfw_redo_gen_ext="[Kernel Cache Redo File Write] SCN main redo generation function (12c)",
    kcrfw_redo_write="[Kernel Cache Redo File Write] SCN redo",
    kcrfw_redo_write_driver="[Kernel Cache Redo File Write] SCN redo main redo handling function",
    kcrfw_redo_write_initpic="[Kernel Cache Redo File Write] SCN redo initialise pending IO context buffer (PIC)",
    kcrfw_slave_adaptive_cronjob="[Kernel Cache Redo File Write] SCN calculate lgwr slave stats (ckpt)",
    kcrfw_slave_group_main="[Kernel Cache Redo File Write] SCN main logwriter worker function",
    kcrfw_slave_group_postall="[Kernel Cache Redo File Write] SCN lgwr function to post lgwr workers",
    kcrfw_slave_queue_insert="[Kernel Cache Redo File Write] SCN main lgwr function to provide writes to lgwr workers",
    kcrfw_update_and_bcast_real_redo_scn="[Kernel Cache Redo File Write] SCN update real redo SCN and real write time in kcrfsg_",
    kcrfw_update_redo_blk_hdrs="[Kernel Cache Redo File Write] SCN obtain write info from PIC and write redo headers",
    kcrfw_wait_for_fg_copy="[Kernel Cache Redo File Write] SCN read redo copy latches accompanying shared pool structure to validate writes to redo are done",
    kcrfwh="[Kernel Cache Redo File Write] SCN write header",
    kcrfwi="[Kernel Cache Redo File Write] SCN write redo into the logfile",
    kcrfwl="[Kernel Cache Redo File Write] SCN sWitch logs",
    kcrfwnf="[Kernel Cache Redo File Write] SCN new file (?)",
    kcrfwr="[Kernel Cache Redo File Write] SCN write redo into the logbuffer",
    kcrfws="[Kernel Cache Redo File Write] SCN wait for space (logswitch)",
    kcrhvbo="[Kernel Cache recoVery] header verify",
    kcrm="[Kernel Cache recoVery] media recovery",
    kcroio="[Kernel Cache recoVery] online logfile IO routines",
    kcropn="[Kernel Cache recoVery] open online logfile for kcroio and kcrfoc",
    kcrp="[Kernel Cache Recovery Parallel] ",
    kcrpap="[Kernel Cache Recovery Parallel] apply change vector",
    kcrpclaim="[Kernel Cache Recovery Parallel] claim recovery buffers",
    kcrpdv="[Kernel Cache Recovery Parallel] recovery parallel (driver?)",
    kcrpsend_claim="[Kernel Cache Recovery Parallel] send recovery buffer claim message",
    kcrr="[Kernel Cache Redo aRchival] ",
    kcrrlh="[Kernel Cache Redo aRchival] log history",
    kcrv="[Kernel Cache recoVery] recovery",
    kcrvfh="[Kernel Cache recoVery] recovery file headers",
    kcs="kernel cache scn management",
    kcsadj1="kernel cache scn management adjust SCN",
    kcsadj3="kernel cache scn management adjust SCN",
    kcsaj8="kernel cache scn management adjust SCN",
    kcscu8="kernel cache scn management read current SCN",
    kcscur3="kernel cache scn management read current SCN",
    kcscur_rba="kernel cache scn management read redo byte address from kcrfsg_",
    kcsdnfy="kernel cache scn management distributed notify",
    kcsgbsn="kernel cache scn management get batched SCN",
    kcsgbsn8="kernel cache scn management get batched SCN get batched SCN (12.2)",
    kcsgcsn="kernel cache scn management get current SCN",
    kcsgrsn="kernel cache scn management get recent SCN",
    kcsgssn="kernel cache scn management get snapshot SCN",
    kcsm="Kernel Cache Shared Routines",
    kcsnew3="kernel cache scn management get new SCN",
    kcsnew8="kernel cache scn management get new SCN",
    kct="[Kernel Cache Threads component(SQL layer)] ",
    kctmttr="[Kernel Cache Threads component(SQL layer)] mean time to recover (?)",
    kctmttrest="[Kernel Cache Threads component(SQL layer)] mean time to recover (?) estimation",
    kctrcp="[Kernel Cache Threads component(SQL layer)] record checkpoint progress",
    kctrec="[Kernel Cache Threads component(SQL layer)] recovery threads, recover and close threads",
    kcttsc="[Kernel Cache Threads component(SQL layer)] thread state change",
    kcv="[Kernel Cache recoVery] ",
    kcvcca="[Kernel Cache recoVery] checkpoint check action",
    kcvcrv="[Kernel Cache recoVery] thread recovery",
    kcvdbeb="[Kernel Cache recoVery] ??",
    kcvdmr="[Kernel Cache recoVery] do media recovery",
    kcvebk="[Kernel Cache recoVery] ??",
    kcvirv="[Kernel Cache recoVery] instance recovery",
    kcvrcrba="[Kernel Cache recoVery] read current redo byte address",
    kcvsurs="[Kernel Cache recoVery] set unrecoverable SCN",
    kcvucp="[Kernel Cache recoVery] ??",
    kcvvra="[Kernel Cache recoVery] verify reset allowed",
    kd="[Kernel Data] ",
    kda="[Kernel Data Analyze driver] ",
    kdasts="[Kernel Data Analyze driver] Statistics Scan driver",
    kdavls="[Kernel Data Analyze driver] validate structure driver",
    kdb="[Kernel Data block structures and manipulation] ",
    kdb4chk="[Kernel Data block structures and manipulation] block-level check",
    kdbl="[Kernel Data Block formatting Loader interface] ",
    kdblai="[Kernel Data Block formatting Loader interface] database block loader array insertion",
    kdblailb="[Kernel Data Block formatting Loader interface] database block loader array insertion load block",
    kdblcrejectedduetochaining="[Kernel Data Block formatting Loader interface] c? rejected due to chaining",
    kdbmrd="[Kernel Data block structures and manipulation] multi row slot delete",
    kdc="[Kernel Data Cluster] ",
    kdccak="[Kernel Data Cluster] ??",
    kdcgcs="[Kernel Data Cluster] ??",
    kdcgsp="[Kernel Data Cluster] ??",
    kdd="[Kernel Data] delete/(cluster?)",
    kddchg="[Kernel Data] delete/(cluster?) perform delete/update change",
    kdddgb="[Kernel Data] delete/(cluster?) delete get block",
    kddlkr="[Kernel Data] delete/(cluster?) delete rows",
    kdeu="[Kernel Data Export Unload] ",
    kdfi="[Kernel Data] memoptimize for write",
    kdfiinitsgastate="[Kernel Data] memoptimize for write create write buffer in large pool",
    kdfiwrite="[Kernel Data] memoptimize for write write into write buffer",
    kdfs="[Kernel Data] dbfs c api",
    kdg="[Kernel Data Gathering services] ",
    kdglfp="[Kernel Data Gathering services] locator function perform",
    kdglfs="[Kernel Data Gathering services] locator function scan block",
    kdgpnb="[Kernel Data Gathering services] pin block",
    kdgprd="[Kernel Data Gathering services] Process Row Data",
    kdgstp="[Kernel Data Gathering services] STatistics Perform",
    kdgsts="[Kernel Data Gathering services] Gathering STatistics Scan",
    kdgvsp="[Kernel Data Gathering services] validate structure perform",
    kdgvss="[Kernel Data Gathering services] validate structure scan",
    kdi="[Kernel Data layer Index] ",
    kdib="[Kernel Data layer Bitmap Index general definitions] ",
    kdibc="[Kernel Data layer Bitmap Index compression stream] ",
    kdibco="[Kernel Data layer Bitmap Index compression stream Output] ",
    kdibfinish="[Kernel Data layer Bitmap Index general definitions] kxib finish index maintenance processing",
    kdibh="[Kernel Data layer Bitmap index Hash-table] ",
    kdibi="[Kernel Data layer Bitmap Index Inversion item-Table] ",
    kdibl="[Kernel Data layer Bitmap Index maintenance for dml and direct load] ",
    kdiblcfls="[Kernel Data layer Bitmap Index maintenance for dml and direct load] conventional flush batch with undo overhead",
    kdiblfinish1="[Kernel Data layer Bitmap Index maintenance for dml and direct load] callback processing for KXIB",
    kdibllockrange="[Kernel Data layer Bitmap Index maintenance for dml and direct load] lock the range associated with a given dml target",
    kdiblsorget="[Kernel Data layer Bitmap Index maintenance for dml and direct load] extract key/rewoid from sorter",
    kdiblwrite="[Kernel Data layer Bitmap Index maintenance for dml and direct load] write a kdi entry",
    kdibq="[Kernel Data layer Bitmap Index general definitions] queue class",
    kdibr="[Kernel Data layer Bitmap Index general definitions] row source utility",
    kdic="[Kernel Data layer Index Create] ",
    kdicclean="[Kernel Data layer Index Create] cleanup IND$ if online builder crashes",
    kdicdrv="[Kernel Data layer Index Create] driver routine",
    kdicrws="[Kernel Data layer Index Create] using row source",
    kdics="[Kernel Data layer Index Create] cluster table scan",
    kdif="[Kernel Data layer Index] scan",
    kdifbk="[Kernel Data layer Index] scan fetches the single index row matching the argument key",
    kdifind="[Kernel Data layer Index] scan find the appropriate index block to store the key",
    kdifxs="[Kernel Data layer Index] scan fetch next or previous row in the argument index scan",
    kdifxs1="[Kernel Data layer Index] scan fetch next or previous row in the argument index scan fetch row from index block inner function",
    kdiins="[Kernel Data layer Index] inserts the argument key and associated keydata",
    kdiins0="[Kernel Data layer Index] inserts the argument key and associated keydata 0",
    kdiixs="[Kernel Data layer Index] index range scan",
    kdiknf="[Kernel Data layer Index] key not found - debug code for oer-8102",
    kdil="[Kernel Data layer Index load] ",
    kdilrub="[Kernel Data layer Index load] ??",
    kdim="[Kernel Data layer Index] coalesce",
    kdimod0="[Kernel Data layer Index] coalesce modifies the argument key's row from the argument index according",
    kdis="[Kernel Data layer Index split] ",
    kdisle="[Kernel Data layer Index split] split the argument leaf block and insert the argument key",
    kdisnew="[Kernel Data layer Index split] allocate a new index block during a split",
    kdisnewle="[Kernel Data layer Index split] allocate a new index block during a split leaf block",
    kdiss="[Kernel Data layer Index split] skip scan",
    kdiulk="[Kernel Data layer Index] undo leaf operation",
    kdixufinish="[Kernel Data layer Index] finish processing of delaued index maintenance",
    kdizoltp="[Kernel Data layer Index] OLTP HIGH Index",
    kdk="[Kernal Data layer search Key] ",
    kdkoin="[Kernal Data layer search Key] ??",
    kdkv="[Kernal Data layer search Key] in-memory OLTP keyvalue",
    kdl="[Kernel Data Lob] ",
    kdl_write="[Kernel Data Lob] write into an ilob instance",
    kdla="[Kernel Data Lob] SecureFile Archive",
    kdlgsp_init="[Kernel Data Lob] space management batching",
    kdli="[Kernel Data Lob] Inode",
    kdlprl="[Kernel Data Lob] read a contiguous range of blocks starting at a fatblock",
    kdlrci="[Kernel Data Lob] rci",
    kdlrdb="[Kernel Data Lob] read a block at a time",
    kdlsfb="[Kernel Data Lob] pull in up to size bytes of data from stream and start writing at offset",
    kdlw="[Kernel Data Lob] kdlw",
    kdlx="[Kernel Data Lob] xfm",
    kdlxdup="[Kernel Data Lob] xfm dedup",
    kdlxgs_init="[Kernel Data Lob] xfm reclaim space from transaction freelist in index",
    kdm="[Kernel Data] in-memory data layer",
    kdmado="[Kernel Data] in-memory data layer ADO",
    kdmd="[Kernel Data] in-memory data layer dictionary and cache",
    kdmemopt_drop_object="SYS.DBMS_MEMOPTIMIZE.DROP_OBJECT_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_get_apply_hwm_seqid="SYS.DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_get_write_hwm_seqid="SYS.DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_populate="SYS.DBMS_MEMOPTIMIZE.POPULATE_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_write_end="SYS.DBMS_MEMOPTIMIZE.WRITE_END(DBMS_MEMOPTIMIZE_LIB)",
    kdmemopt_writes_flush="SYS.DBMS_MEMOPTIMIZE_ADMIN.WRITES_FLUSH(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptdropobject="SYS.DBMS_MEMOPTIMIZE.DROP_OBJECT_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptgetapplyhwmseqid="SYS.DBMS_MEMOPTIMIZE.GET_APPLY_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptgetwritehwmseqid="SYS.DBMS_MEMOPTIMIZE.GET_WRITE_HWM_SEQID(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptpopulate="SYS.DBMS_MEMOPTIMIZE.POPULATE_INT(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptwriteend="SYS.DBMS_MEMOPTIMIZE.WRITE_END(DBMS_MEMOPTIMIZE_LIB)",
    kdmemoptwritesflush="SYS.DBMS_MEMOPTIMIZE_ADMIN.WRITES_FLUSH(DBMS_MEMOPTIMIZE_LIB)",
    kdmgd="[Kernel Data] in-memory data layer GD",
    kdmime="[Kernel Data] in-memory data layer IME",
    kdml="[Kernel Data] in-memory data layer populating",
    kdmo="[Kernel Data] in-memory data layer optimizer",
    kdmp3gl1="SYS.DBMS_INMEMORY.REPOPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp3gl2="SYS.DBMS_INMEMORY.POPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp3gl3="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_ENABLE(DBMS_INMEMORY_LIB)",
    kdmp3gl4="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_DISABLE(DBMS_INMEMORY_LIB)",
    kdmp3gl5="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_MIGRATE_STORAGE(DBMS_INMEMORY_LIB)",
    kdmp3gl6="SYS.DBMS_INMEMORY_ADMIN.GET_FASTSTART_TABLESPACE(DBMS_INMEMORY_LIB)",
    kdmp3gl7="SYS.DBMS_INMEMORY.SEG_DEALLOC_VERS_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp3gl8="SYS.DBMS_INMEMORY_ADMIN.DEALLOCATE_VERSIONS(DBMS_INMEMORY_LIB)",
    kdmp3gl9="SYS.PRVT_COMPRESS.COMP_POPULATE(DBMS_INMEMORY_LIB)",
    kdmp3glfs1="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_CHECKPOINT(DBMS_INMEMORY_LIB)",
    kdmp3glime1="SYS.DBMS_INMEMORY_ADMIN.IME_CAPTURE_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp3glime2="SYS.DBMS_INMEMORY_ADMIN.IME_DROP_ALL_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp3glime3="SYS.DBMS_INMEMORY_ADMIN.IME_OPEN_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmp3glime4="SYS.DBMS_INMEMORY_ADMIN.IME_CLOSE_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmp_3gl_1="SYS.DBMS_INMEMORY.REPOPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp_3gl_2="SYS.DBMS_INMEMORY.POPULATE_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp_3gl_3="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_ENABLE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_4="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_DISABLE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_5="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_MIGRATE_STORAGE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_6="SYS.DBMS_INMEMORY_ADMIN.GET_FASTSTART_TABLESPACE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_7="SYS.DBMS_INMEMORY.SEG_DEALLOC_VERS_INTERNAL(DBMS_INMEMORY_LIB)",
    kdmp_3gl_8="SYS.DBMS_INMEMORY_ADMIN.DEALLOCATE_VERSIONS(DBMS_INMEMORY_LIB)",
    kdmp_3gl_9="SYS.PRVT_COMPRESS.COMP_POPULATE(DBMS_INMEMORY_LIB)",
    kdmp_3gl_fs_1="SYS.DBMS_INMEMORY_ADMIN.FASTSTART_CHECKPOINT(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_1="SYS.DBMS_INMEMORY_ADMIN.IME_CAPTURE_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_2="SYS.DBMS_INMEMORY_ADMIN.IME_DROP_ALL_EXPRESSIONS(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_3="SYS.DBMS_INMEMORY_ADMIN.IME_OPEN_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmp_3gl_ime_4="SYS.DBMS_INMEMORY_ADMIN.IME_CLOSE_CAPTURE_WINDOW(DBMS_INMEMORY_LIB)",
    kdmpdeallocateversions="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.DEALLOCATE_VERSIONS",
    kdmpdisablefaststart="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.FASTSTART_DISABLE",
    kdmpenablefaststart="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.FASTSTART_ENABLE",
    kdmpgetfaststarttbs="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.GET_FASTSTART_TABLESPACE",
    kdmpimecapexpr="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.IME_CAPTURE_EXPRESSIONS",
    kdmpimeclosewindow="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.IME_CLOSE_CAPTURE_WINDOW",
    kdmpimedropallexpr="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.IME_DROP_ALL_EXPRESSIONS",
    kdmpimeopenwindow="[Kernel Data] in-memory data layer DBMS_INMEMORY_ADMIN.IME_OPEN_CAPTURE_WINDOW",
    kdmppopulate="[Kernel Data] in-memory data layer DBMS_INMEMORY.POPULATE_INTERNAL",
    kdmprepopulate="[Kernel Data] in-memory data layer DBMS_INMEMORY.REPOPULATE_INTERNAL",
    kdmpsegmentdeallocateversions="[Kernel Data] in-memory data layer DBMS_INMEMORY.SEG_DEALLOC_VERS_INTERNAL",
    kdmr="[Kernel Data] in-memory data layer background",
    kdmrimcload="[Kernel Data] in-memory data layer background in memory chunk load/populate",
    kdmrimcload_cb="[Kernel Data] in-memory data layer background in memory chunk load/populate callback",
    kdn="[Kernel Data layer sequence Number generator] ",
    kdns="[Kernel Data layer sequence Number generator] sequence enqueue",
    kdo="[Kernel Data Operations] ",
    kdoapl="[Kernel Data Operations] apply",
    kdodrp="[Kernel Data Operations] delete row piece",
    kdoirp="[Kernel Data Operations] insert row piece",
    kdoiur="[Kernel Data Operations] insert undo record",
    kdp="[Kernel Data] archive compression: pcode",
    kdq="[Kernel Data Query component] ",
    kdr="[Kernel Data Repair] ",
    kdr4chk="[Kernel Data Repair] row-level check",
    kdrpcc="[Kernel Data Repair] SYS.DBMS_REPAIR.CHECK_COMPAT(DBMS_REPAIR_LIB)",
    kdrpco="[Kernel Data Repair] SYS.DBMS_REPAIR.CHECK_OBJECT(DBMS_REPAIR_LIB)",
    kdrpdk="[Kernel Data Repair] SYS.DBMS_REPAIR.DUMP_ORPHAN_KEYS(DBMS_REPAIR_LIB)",
    kdrpfb="[Kernel Data Repair] SYS.DBMS_REPAIR.SEGMENT_FIX_STATUS(DBMS_REPAIR_LIB)",
    kdrpfc="[Kernel Data Repair] SYS.DBMS_REPAIR.FIX_CORRUPT_BLOCKS(DBMS_REPAIR_LIB)",
    kdrpfl="[Kernel Data Repair] SYS.DBMS_REPAIR.REBUILD_FREELISTS(DBMS_REPAIR_LIB)",
    kdrpoic="[Kernel Data Repair] SYS.DBMS_REPAIR.ONLINE_INDEX_CLEAN(DBMS_REPAIR_LIB)",
    kdrprck="[Kernel Data Repair] SYS.DBMS_REPAIR.REPAIR_CLUSTER_INDEX_KEYCOUNT(DBMS_REPAIR_LIB)",
    kdrprqi="[Kernel Data Repair] SYS.DBMS_REPAIR.REBUILD_SHC_INDEX(DBMS_REPAIR_LIB)",
    kdrpsc="[Kernel Data Repair] SYS.DBMS_REPAIR.SKIP_CORRUPT_BLOCKS(DBMS_REPAIR_LIB)",
    kds="[Kernel Data layer Seek/Scan] ",
    kdsc="[Kernel Data layer Seek/Scan] cluster",
    kdscgr="[Kernel Data layer Seek/Scan] cluster table scan",
    kdse="[Kernel Data layer Seek/Scan] extent",
    kdselget="[Kernel Data layer Seek/Scan] extent ??",
    kdselini="[Kernel Data layer Seek/Scan] extent list initialize",
    kdsfbr="[Kernel Data layer Seek/Scan] fetch by rowid. returns a pointer to the row header",
    kdsfbrcb="[Kernel Data layer Seek/Scan] fetch by rowid. returns a pointer to the row header ??",
    kdsgnp="[Kernel Data layer Seek/Scan] fetch by rowid get continued row piece (chained row)",
    kdsgrp="[Kernel Data layer Seek/Scan] fetch by rowid get row piece",
    kdsics="[Kernel Data layer Seek/Scan] cluster table scan",
    kdso="[Kernel Data layer Seek/Scan service object] ",
    kdsocrl="[Kernel Data layer Seek/Scan service object] check if row is locked",
    kdst="[Kernel Data layer Seek/Scan] table",
    kdst_compile="[Kernel Data layer Seek/Scan] table compile scan type",
    kdst_fetch="[Kernel Data layer Seek/Scan] table fetch blocks",
    kdst_mode="[Kernel Data layer Seek/Scan] table determine scan mode",
    kdstf="[Kernel Data layer Seek/Scan] table full ultra fast scan",
    kdstgr="[Kernel Data layer Seek/Scan] table get row",
    kdstsnb="[Kernel Data layer Seek/Scan] table ??",
    kdsttgr="[Kernel Data layer Seek/Scan] table full table scan",
    kdt="[Kernel Data Table insert] ",
    kdt_bseg_srch_cbk="[Kernel Data Table insert] check for uncommitted space",
    kdtchg="[Kernel Data Table insert] generate change",
    kdtgrs="[Kernel Data Table insert] get space",
    kdtgsp="[Kernel Data Table insert] table/cluster insert get space",
    kdtinsrow="[Kernel Data Table insert] insert a row immediately",
    kdtsimpleinsrow="[Kernel Data Table insert] simple insert a row",
    kdtwrp="[Kernel Data Table insert] write row piece",
    kdu="[Kernel Data Update] ",
    kdugetpart="[Kernel Data Update] get partition information for a deleted or opdated row",
    kdumrp="[Kernel Data Update] update multiple row pieces",
    kduovw="[Kernel Data Update] updates already existing rows",
    kdusru="[Kernel Data Update] single row update, main entry",
    kduurp="[Kernel Data Update] update row piece",
    kdwf="[Kernel Data] worker framework",
    kdx="[Kernel Data indeX block] ",
    kdxd4bu="[Kernel Data indeX block] index block check",
    kdxokcmp="[Kernel Data indeX block] Auto Prefix Compressed Index",
    kdxt="[Kernel Data indeX block Temporary block] ",
    kdz="[Kernel Data] archive compression",
    kdza="[Kernel Data] archive compression compression",
    kdza_delete="SYS.DBMS_COMPRESSION.KDZA_DELETE(C)",
    kdza_dump_map="SYS.DBMS_COMPRESSION.KDZA_DUMP_MAP(C)",
    kdzadelete="SYS.DBMS_COMPRESSION.KDZA_DELETE(C)",
    kdzadumpmap="SYS.DBMS_COMPRESSION.KDZA_DUMP_MAP(C)",
    kdzc="[Kernel Data] archive compression compression",
    kdzcheckhi="SYS.PRVT_COMPRESSION.KDZCHECKHI(C)",
    kdzcmptype="SYS.DBMS_COMPRESSION.KDZCMPTYPE(C)",
    kdzd="[Kernel Data] archive compression decompression",
    kdzh="[Kernel Data] archive compression compression",
    kdzk="[Kernel Data] archive compression HPK",
    kdzp="[Kernel Data] archive compression pcode",
    kdzs="[Kernel Data] archive compression decompression",
    kdzstoragetype="SYS.KDZSTORAGETYPE.kdzstoragetype(DBMS_STORAGE_TYPE_LIB)",
    kdzu="[Kernel Data] archive compression uncompress",
    ke="[Kernel Event] ",
    keaddeletedirectiveplsql="[Kernel Event] SYS.PRVT_ADVISOR.DELETE_DIRECTIVE_I(DBMS_KEA_LIB)",
    keadevaldirectiveplsql="[Kernel Event] SYS.PRVT_ADVISOR.EVAL_DIRECTIVE_VALUE_I(DBMS_KEA_LIB)",
    keadinsertdirdefplsql="[Kernel Event] SYS.PRVT_ADVISOR.INSERT_ADV_DIR_DEF_I(DBMS_KEA_LIB)",
    keadinsertdirectiveplsql="[Kernel Event] SYS.PRVT_ADVISOR.INSERT_DIRECTIVE_I(DBMS_KEA_LIB)",
    keadupdatedirdefplsql="[Kernel Event] SYS.PRVT_ADVISOR.UPDATE_ADV_DIR_DEF_I(DBMS_KEA_LIB)",
    keadupdatedirectiveplsql="[Kernel Event] SYS.PRVT_ADVISOR.UPDATE_DIRECTIVE_I(DBMS_KEA_LIB)",
    keaseditplsql="[Kernel Event] SYS.PRVT_ADVISOR.EDIT(DBMS_KEA_LIB)",
    keauformatmsggroupplsql="[Kernel Event] SYS.PRVT_ADVISOR.FORMAT_MESSAGE_GROUP(DBMS_KEA_LIB)",
    keauformatmsgplsql="[Kernel Event] SYS.PRVT_ADVISOR.FORMAT_MESSAGE(DBMS_KEA_LIB)",
    keaugetdbversionplsql="[Kernel Event] SYS.PRVT_ADVISOR.GET_DB_VERSION(DBMS_KEA_LIB)",
    keauhtlplsql="[Kernel Event] SYS.PRVT_ADVISOR.HANDLE_LOCK(DBMS_KEA_LIB)",
    keauinterrupttaskplsql="[Kernel Event] SYS.PRVT_ADVISOR.SIGNAL_INTERRUPT(DBMS_KEA_LIB)",
    keaurecorderrormsg="[Kernel Event] SYS.PRVT_ADVISOR.RECORD_ERRORMSG_CALLOUT(DBMS_KEA_LIB)",
    keaurecordjournalplsql="[Kernel Event] SYS.PRVT_ADVISOR.RECORD_JOURNAL(DBMS_KEA_LIB)",
    keautcintrplsql="[Kernel Event] SYS.PRVT_ADVISOR.TEST_CHECK_INTERRUPT(DBMS_KEA_LIB)",
    keauwritefile="[Kernel Event] SYS.PRVT_ADVISOR.X_WRITE_TO_FILE(DBMS_KEA_LIB)",
    keb="[Kernel Event] MMON/MMNL infrastructure",
    kec="[Kernel Event] real application testing",
    kecp_get_state="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.GET_STATE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpaddtblpartitiononeinst="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_ADD_TBL_PARTITIONS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcentrygencapture="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GENERATE_CAPTURE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcentryparseloginqueue="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PARSE_LOGIN_QUEUE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcentryscheduleevent="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_SCHEDULE_EVENT(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpcheckconcurrentrep="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CHECK_CONCURRENT_REP(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrycalibrate="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CALIBRATE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrycancelreplay="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CANCEL_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryclientconnect="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CLIENT_CONNECT(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryclientvitals="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_CLIENT_VITALS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrycreaterepdir="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY.INVOKE_CREATE_REPDIR(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryendreplayactions="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_END_REPLAY_ACTIONS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryfilters="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_FILTERS(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrygetadvancedparameter="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_ADVANCED_PARAMETER(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrygetcapdirtype="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_CAPDIR_TYPE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrygetcapturedtables="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_CAPTURED_TABLES(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryhandlerepdir="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_HANDLE_REPDIR(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryisreplaypaused="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_IS_REPLAY_PAUSED(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentryloaddivergence="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_LOAD_DIVERGENCE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrypausereplay="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PAUSE_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrypreparereplay="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PREPARE_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrysetadvancedparameter="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_SET_ADVANCED_PARAMETER(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpentrystartreplay="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_START_REPLAY(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpgetclock="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_CLOCK(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpgetstate="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.GET_STATE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppentryloadlongsqltext="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_LOAD_LONG_SQLTEXT(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppentryprocessrecording="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_PROCESS_CAPTURE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppgetwmdsyncmode="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_SYNC_MODE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecppopulatedivergenceentry="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_POPULATE_DIVERGENCE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpreplayremappedrandomnumber="[Kernel Event] SYS.DBMS_RANDOM.replay_random_number(dbms_workload_replay_lib)",
    kecprm="[Kernel Event] real application testing masking",
    kecprmentryextract="[Kernel Event] SYS.DBMS_RAT_MASK_INTERNAL.DBR_EXTRACT_CALLOUT(DBMS_SQLTUNE_LIB)",
    kecprmentryreplace="[Kernel Event] SYS.DBMS_RAT_MASK_INTERNAL.DBR_MASK_CALLOUT(DBMS_SQLTUNE_LIB)",
    kecpsqlidtoocinumber="[Kernel Event] SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_SQLID_TO_OCINUMBER(DBMS_WORKLOAD_REPLAY_LIB)",
    kecpvalidateencryptionpasswd="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_VALIDATE_ENC_PASSWD(DBMS_WORKLOAD_REPLAY_LIB)",
    kecr_get_state="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.GET_STATE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecr_os_seconds="[Kernel Event] SYS.DBMS_WRR_REPORT.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrcheckconcurrentcap="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_CHECK_CONCURRENT_CAP(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrchecksqlsetprivs="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_CHECK_SQLSET_PRIVS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrentryacquirelock="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_ACQUIRE_WRR_LOCK(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrentrydisresses="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_DIS_RES_SESS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrentryfinishrecord="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_FINISH_CAPTURE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrentryreleaselock="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_RELEASE_WRR_LOCK(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrentrystartrecord="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_START_CAPTURE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrentryswitchbucket="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_SWITCH_BUCKET(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrgetstate="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.GET_STATE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrhandleencryption="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_HANDLE_ENCRYPTION(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrosseconds="[Kernel Event] SYS.DBMS_WRR_REPORT.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.OS_SECONDS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecrrecordrandomnumber="[Kernel Event] SYS.DBMS_RANDOM.record_random_number(dbms_workload_capture_lib)",
    kecucxcachefree="[Kernel Event] SYS.DBMS_WRR_PROTECTED.INVOKE_XCACHE_FREE(DBMS_WORKLOAD_REPLAY_LIB)",
    kecucxcacheload="[Kernel Event] SYS.DBMS_WRR_PROTECTED.INVOKE_XCACHE_LOAD(DBMS_WORKLOAD_REPLAY_LIB)",
    kecudirexists="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_DIR_EXISTS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.INVOKE_DIR_EXISTS(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_DIR_EXISTS(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecugetdirpath="[Kernel Event] SYS.DBMS_WORKLOAD_CAPTURE_I.INVOKE_GET_PATH(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WRR_INTERNAL.INVOKE_GET_PATH(DBMS_WORKLOAD_CAPTURE_LIB)/SYS.DBMS_WORKLOAD_REPLAY_I.INVOKE_GET_PATH(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecugetfeaturebooleanvalue="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_GET_FEATURE_BOOL_VALUE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecukghsfsnewfile="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_KGHSFSNEWFILE(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecusimplecommand="[Kernel Event] SYS.DBMS_WRR_PROTECTED.INVOKE_SIMPLE_CMD(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuwreadwmd="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_READ_WMD(DBMS_WORKLOAD_CAPTURE_LIB)",
    kecuwupdatewmd="[Kernel Event] SYS.DBMS_WRR_INTERNAL.INVOKE_UPDATE_WMD(DBMS_WORKLOAD_CAPTURE_LIB)",
    kegcheckratoption="[Kernel Event] SYS.PRVT_SMGUTIL.CHECK_RAT_OPTION(DBMS_KEG_LIB)",
    kegpackenabledplsql="[Kernel Event] SYS.PRVT_SMGUTIL.PRVT_PACK_ENABLED(DBMS_KEG_LIB)",
    kehashqueryplsql="[Kernel Event] SYS.PRVT_HDM.GET_QUERY_PREDICATE(DBMS_HDM_LIB)",
    keheplsqlracfloodcontrol="[Kernel Event] SYS.PRVT_RTADDM.RAC_FLOOD_CONTROL(DBMS_HDM_LIB)",
    kehexecute="[Kernel Event] SYS.PRVT_HDM.EXECUTE(DBMS_HDM_LIB)",
    kehplsqlvalidateinstance="[Kernel Event] SYS.PRVT_HDM.VALIDATE_INSTANCE(DBMS_HDM_LIB)",
    keiut="[Kernel Event] IUT infrastructure",
    kel="[Kernel Event] server generated alert infrastructure",
    kelr_reconcile_threshold="[Kernel Event] server generated alert infrastructure DBMS_SERVER_ALERT.RECONCILE_THRESHOLD",
    kelr_set_threshold="[Kernel Event] server generated alert infrastructure DBMS_SERVER_ALERT.SET_THRESHOLD",
    keltpost_plsql="[Kernel Event] server generated alert infrastructure DBMS_SERVER_ALERT_PRVT.POST_ALERT_I",
    keomg="[Kernel Event] DBOP generic service/monitoring daemon",
    keomm="[Kernel Event] DBOP composite type",
    keommbeginoperationext="[Kernel Event] SYS.DBMS_SQL_MONITOR.BEGIN_OPERATION_INT(DBMS_SQLMON_LIB)",
    keommendoperationext="[Kernel Event] SYS.DBMS_SQL_MONITOR.END_OPERATION_INT(DBMS_SQLMON_LIB)",
    keomn="[Kernel Event] DBOP monitoring",
    keplan="[Kernel Event] SQL compare plans",
    ker="[Kernel Event] orarep",
    kerctc_generic="[Kernel Event] SYS.DBMS_REPORT.BUILD_GENERIC_TAG(DBMS_REPORT_LIB)",
    kerctcbuildgenerictag="[Kernel Event] orarep DBMS_REPORT.BUILD_GENERIC_TAG",
    kerctcgeneric="[Kernel Event] SYS.DBMS_REPORT.BUILD_GENERIC_TAG(DBMS_REPORT_LIB)",
    kerpifinishfullcapture="[Kernel Event] SYS.DBMS_AUTO_REPORT.FINISH_REPORT_CAPTURE_CALLOUT(DBMS_REPORT_LIB)",
    kerpimarksqlmonentryext="[Kernel Event] SYS.DBMS_AUTO_REPORT_INTERNAL.I_MARK_SQLMON_CALLOUT(DBMS_REPORT_LIB)",
    kerpistartfullcapture="[Kernel Event] SYS.DBMS_AUTO_REPORT.START_REPORT_CAPTURE_CALLOUT(DBMS_REPORT_LIB)",
    kertv_apply_schema="[Kernel Event] SYS.DBMS_REPORT.APPLY_XML_SCHEMA(DBMS_REPORT_LIB)",
    kertv_apply_xslt="[Kernel Event] SYS.DBMS_REPORT.APPLY_XSLT(DBMS_REPORT_LIB)",
    kertv_html_to_text="[Kernel Event] SYS.DBMS_REPORT.TRANSFORM_HTML_TO_TEXT(DBMS_REPORT_LIB)",
    kertvapplyschema="[Kernel Event] SYS.DBMS_REPORT.APPLY_XML_SCHEMA(DBMS_REPORT_LIB)",
    kertvapplyschemaext="[Kernel Event] orarep DBMS_REPORT.APPLY_XML_SCHEMA",
    kertvapplyxslt="[Kernel Event] SYS.DBMS_REPORT.APPLY_XSLT(DBMS_REPORT_LIB)",
    kertvapplyxsltext="[Kernel Event] orarep DBMS_REPORT.APPLY_XSLT",
    kertvgetlargeparamvalext="[Kernel Event] SYS.DBMS_REPORT.KERTVGETLARGEPARAMVALEXT(DBMS_REPORT_LIB)",
    kertvhtmltotext="[Kernel Event] SYS.DBMS_REPORT.TRANSFORM_HTML_TO_TEXT(DBMS_REPORT_LIB)",
    kertvtransformhtmltotextext="[Kernel Event] orarep DBMS_REPORT.TRANSFORM_HTML_TO_TEXT",
    kerutl_build_ref_struct="[Kernel Event] SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_STRUCT(DBMS_REPORT_LIB)",
    kerutl_build_ref_varg="[Kernel Event] SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_VARG(DBMS_REPORT_LIB)",
    kerutl_get_expanded_osd_path="[Kernel Event] SYS.PRVT_EMX.GET_EXPANDED_OSD_PATH(DBMS_REPORT_LIB)",
    kerutl_validate_name="[Kernel Event] SYS.DBMS_REPORT.VALIDATE_NAME(DBMS_REPORT_LIB)",
    kerutl_validate_ref_param="[Kernel Event] SYS.DBMS_REPORT.VALIDATE_REF_PARAMETER(DBMS_REPORT_LIB)",
    kerutlbuildrefstruct="[Kernel Event] SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_STRUCT(DBMS_REPORT_LIB)",
    kerutlbuildrefvarg="[Kernel Event] SYS.DBMS_REPORT.BUILD_REPORT_REFERENCE_VARG(DBMS_REPORT_LIB)",
    kerutlbuildrrefstruct="[Kernel Event] orarep DBMS_REPORT.BUILD_REPORT_REFERENCE_STRUCT",
    kerutlbuildrrefvararg="[Kernel Event] orarep DBMS_REPORT.BUILD_REPORT_REFERENCE_VARG",
    kerutlcheckcapturexmlext="[Kernel Event] SYS.DBMS_REPORT.I_CAPTURE_XML_ENABLED(DBMS_REPORT_LIB)",
    kerutlchecklrgmodeext="[Kernel Event] SYS.DBMS_REPORT.I_LRG_MODE(DBMS_REPORT_LIB)",
    kerutlcompressext="[Kernel Event] SYS.DBMS_REPORT.I_COMPRESS_REPORT_CALLOUT(DBMS_REPORT_LIB)",
    kerutlgetexpandedosdpath="[Kernel Event] SYS.PRVT_EMX.GET_EXPANDED_OSD_PATH(DBMS_REPORT_LIB)",
    kerutlgetexposdpathext="[Kernel Event] orarep PRVT_EMX.GET_EXPANDED_OSD_PATH",
    kerutlisracext="[Kernel Event] SYS.PRVT_EMX.IS_RAC(DBMS_REPORT_LIB)",
    kerutliszlib2base64compext="[Kernel Event] SYS.DBMS_REPORT.I_IS_ZLIB2BASE64_CALLOUT(DBMS_REPORT_LIB)",
    kerutlreadfiletolobext="[Kernel Event] SYS.PRVT_EMX.I_READ_FILE_TO_LOB(DBMS_REPORT_LIB)",
    kerutlreadxmltypefromfileext="[Kernel Event] SYS.PRVTEMX_DBHOME.I_READ_XMLFILE(DBMS_REPORT_LIB)",
    kerutlunescaperrefext="[Kernel Event] SYS.DBMS_REPORT.I_UNESCAPE_REPORT_REF(DBMS_REPORT_LIB)",
    kerutlvalidatename="[Kernel Event] SYS.DBMS_REPORT.VALIDATE_NAME(DBMS_REPORT_LIB)",
    kerutlvalidaterefparam="[Kernel Event] SYS.DBMS_REPORT.VALIDATE_REF_PARAMETER(DBMS_REPORT_LIB)",
    kes="[Kernel Event: SQL Manageability] ",
    kesai="[Kernel Event: SQL Manageability]infrastructure",
    kesaicreateprofileext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_LOAD_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    kesairemoteacceptprofileext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_ACCEPT_SQL_PROFILE_REMOTE(DBMS_SQLTUNE_LIB)",
    kesairemotecreateplanblext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PLAN_BL_REMOTE(DBMS_SQLTUNE_LIB)",
    kesaitunesqldriver="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_SUB_EXECUTE_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesatm="[Kernel Event: SQL Manageability] infrastructure",
    kesdscreateincidentcallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLDIAG_INTERNAL.I_CREATE_INCIDENT_CALLOUT(DBMS_SQLDIAG_LIB)",
    kesdsincidentid2sqlcallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLDIAG_INTERNAL.I_INCIDENTID_2_SQL_CALLOUT(DBMS_SQLDIAG_LIB)",
    kesdsremoveincidentcallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLDIAG_INTERNAL.I_REMOVE_INCIDENT_CALLOUT(DBMS_SQLDIAG_LIB)",
    kesdssettraceidentifier="[Kernel Event: SQL Manageability] SYS.DBMS_SQLDIAG_INTERNAL.I_SET_TRACEFILE_IDENTIFIER(DBMS_SQLDIAG_LIB)",
    kesdtcbcompresstestcasecallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTCB_INTERNAL.I_COMPRESS_TESTCASE_CALLOUT(DBMS_SQLTCB_LIB)",
    keshs_alterext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE_INTERNAL.I_ALTER_SQL_PROFILE",
    keshs_clone="[Kernel Event: SQL Manageability] DBMS_SQLTUNE_INTERNAL.I_CLONE_SQL_PROFILE",
    keshs_create2ext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE",
    keshs_createext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE",
    keshs_dropext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE_INTERNAL.I_DROP_SQL_PROFILE",
    keshs_updateext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE_INTERNAL.I_UPDATE_SQL_PROFILE",
    keshs_validatecategoryext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE.VALIDATE_CATEGORY",
    keshs_validateprofilenameext="[Kernel Event: SQL Manageability] DBMS_SQLTUNE.VALIDATE_PROFILE_NAME",
    keshsalter="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_ALTER_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsclone="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_CLONE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshscreate="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshscreate2="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_CREATE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsdrop="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_DROP_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsupdate="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_UPDATE_SQL_PROFILE(DBMS_SQLTUNE_LIB)",
    keshsvalidatecategory="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE.VALIDATE_CATEGORY(DBMS_SQLTUNE_LIB)",
    keshsvalidateprofilename="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE.VALIDATE_PROFILE_NAME(DBMS_SQLTUNE_LIB)",
    kesm="[Kernel Event: SQL Manageability] real application testing: masking",
    kesmdstsextractext="[Kernel Event: SQL Manageability] SYS.DBMS_RAT_MASK_INTERNAL.STS_EXTRACT_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesmdstsreplaceext="[Kernel Event: SQL Manageability] SYS.DBMS_RAT_MASK_INTERNAL.STS_MASK_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesmuisbindmasked="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.IS_BIND_MASKED_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesp="[Kernel Event: SQL Manageability] SQL performance analyzer",
    kespigetcecallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLPA.GET_SESS_OPTIMIZER_ENV(DBMS_SQLTUNE_LIB)",
    kesqs="[Kernel Event: SQL Manageability] infrastructure",
    kessi="[Kernel Event: SQL Manageability] infrastructure",
    kessifetchsqltracesqlext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE.FETCH_SQL_TRACE_NEXT_SQL(DBMS_SQLTUNE_LIB)",
    kessigetoptparamvalnumext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_GET_OPT_PARAM_VAL_NUM(DBMS_SQLTUNE_LIB)",
    kessigetoptparamvalstrext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_GET_OPT_PARAM_VAL_STR(DBMS_SQLTUNE_LIB)",
    kessiinsertsqltext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_INSERT_SQLSET_SQLTEXT(DBMS_SQLTUNE_LIB)",
    kessiupdatestmtrefcount="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_UPDATE_AWR_SQLTEXT_REFCOUNT(DBMS_SQLTUNE_LIB)",
    kessivalidatename="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL1.VALIDATE_NAME(DBMS_SQLTUNE_LIB)",
    kesstp="[Kernel Event: SQL Manageability] SQL trace parser",
    kest="[Kernel Event: SQL Manageability] tokenize (?)",
    kestb_get_signature="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.GET_SIGNATURE(DBMS_SQLTUNE_LIB)",
    kestbgetsignature="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.GET_SIGNATURE(DBMS_SQLTUNE_LIB)",
    kestsa="[Kernel Event: SQL Manageability] tokenize (?) fix regression/parallel execution",
    kestsaexa="[Kernel Event: SQL Manageability] tokenize (?) fix regression/parallel execution exadata",
    kestse="[Kernel Event: SQL Manageability] tokenize (?) SQL test-execute service",
    kestsi="[Kernel Event: SQL Manageability] tokenize (?) index-tune",
    kestsinitcapstats="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_INIT_CAP_STATS_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsmmontotuneext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.EXEC_EMX_TUNING_TASK_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsp="[Kernel Event: SQL Manageability] tokenize (?) plan node analysis",
    kestsprocesssqlcallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_PROCESS_SQL_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsprocessstscallout="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_PROCESS_SQLSET_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestsremoteexecsqlext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLPA.REMOTE_PROCESS_SQL_CALLOUT(DBMS_SQLTUNE_LIB)",
    kestss="[Kernel Event: SQL Manageability] tokenize (?) statistics advisor",
    kestsupdcapstats="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_UPD_CAP_STATS_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutl="[Kernel Event: SQL Manageability] infrastructure",
    kesutlcdbcondbid2nameext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.CDBCON_DBID_TO_NAME(DBMS_SQLTUNE_LIB)",
    kesutlcdbconid2dbidext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.CDBCON_ID_TO_DBID(DBMS_SQLTUNE_LIB)",
    kesutlcdbconname2conidext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.CDBCON_NAME2ID(DBMS_SQLTUNE_LIB)",
    kesutlcdbconname2idsext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.CDBCON_NAME2IDS(DBMS_SQLTUNE_LIB)",
    kesutlcheckobjprivext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.CHECK_OBJ_PRIV_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlcheckprivext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL2.CHECK_PRIV_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlextractbind="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.EXTRACT_BIND_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlgensqlid="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.SQLTEXT_TO_SQLID(DBMS_SQLTUNE_LIB)",
    kesutlgetbinddatacount="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.GET_BINDS_COUNT(DBMS_SQLTUNE_LIB)",
    kesutlgetcurtimeext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL1.GET_CURRENT_TIME(DBMS_SQLTUNE_LIB)",
    kesutlgetseqext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL1.GET_SEQ_CALLOUT(DBMS_SQLTUNE_LIB)",
    kesutlsqlidtohash="[Kernel Event: SQL Manageability] infrastructure DBMS_UTILITY.KESUTLSQLIDTOHASHICD SQLID_TO_HASH",
    kesutlsqlidtohashicd="[Kernel Event: SQL Manageability] SYS.DBMS_UTILITY.KESUTLSQLIDTOHASHICD(C)",
    kesutlsqlidvalidate="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL0.VALIDATE_SQLID(DBMS_SQLTUNE_LIB)",
    kesutlvalidatename="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_UTIL1.VALIDATE_NAME(DBMS_SQLTUNE_LIB)",
    keswat="[Kernel Event: SQL Manageability] infrastructure",
    keswpi="[Kernel Event: SQL Manageability] SQL performance analyzer",
    kesws="[Kernel Event: SQL Manageability] SQL monitor",
    keswsq="[Kernel Event: SQL Manageability] SQL monitor infrastructure",
    keswts="[Kernel Event: SQL Manageability] infrastructure",
    keswtsunpackstsext="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE_INTERNAL.I_UNPACK_SQLSETS_BULK_CALLOUT(DBMS_SQLTUNE_LIB)",
    keswx="[Kernel Event: SQL Manageability] SQL monitor",
    keswxgetcpucores="[Kernel Event: SQL Manageability] SYS.DBMS_SQLTUNE.KESWXGETCPUCORES(DBMS_SQLTUNE_LIB)",
    ket="[Kernel Event] automated maintenance tasks",
    ket3gl5="[Kernel Event] SYS.DBMS_AUTO_TASK.GET_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ket3gl6="[Kernel Event] SYS.DBMS_AUTO_TASK.CHECK_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ket_3gl_5="[Kernel Event] SYS.DBMS_AUTO_TASK.GET_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ket_3gl_6="[Kernel Event] SYS.DBMS_AUTO_TASK.CHECK_CLIENT_STATUS_OVERRIDE(DBMS_AUTOTASK_PRVT_LIB)",
    ketrcc_refresh_client_config="[Kernel Event] SYS.DBMS_AUTOTASK_PRVT.REFRESH_CLIENT_CONFIG(DBMS_AUTOTASK_PRVT_LIB)",
    ketrccrefreshclientconfig="[Kernel Event] SYS.DBMS_AUTOTASK_PRVT.REFRESH_CLIENT_CONFIG(DBMS_AUTOTASK_PRVT_LIB)",
    keum="[Kernel Event: dbms_umf] ",
    keumatlc_acquire_top_lock_cb="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.ACQUIRE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumatlcacquiretoplockcb="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.ACQUIRE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumbtxc_build_target_xml_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.BUILD_TARGET_XML_INTERNAL(DBMS_UMF_LIB)",
    keumbtxcbuildtargetxmlco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.BUILD_TARGET_XML_INTERNAL(DBMS_UMF_LIB)",
    keumcnc_config_node_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.CONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumcncconfignodeco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.CONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumctic_cpy_top_info_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.COPY_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumcticcpytopinfoco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.COPY_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumdtic_del_top_info_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.DELETE_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumdticdeltopinfoco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.DELETE_TOPOLOGY_INFO_CO(DBMS_UMF_LIB)",
    keumggdnco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.GET_GLOBAL_DBLINK_NAME_INT(DBMS_UMF_LIB)",
    keumgnnc_get_nn_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.GET_NODE_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgnncgetnnco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.GET_NODE_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgrsnco_get_reg_state_id_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.GET_REG_STATE_ID(DBMS_UMF_LIB)",
    keumgrsncogetregstateidco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.GET_REG_STATE_ID(DBMS_UMF_LIB)",
    keumgtic_get_target_id_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.GET_TARGET_ID_CO(DBMS_UMF_LIB)",
    keumgticgettargetidco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.GET_TARGET_ID_CO(DBMS_UMF_LIB)",
    keumgtnc_get_topology_name_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.GET_TOPOLOGY_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgtncgettopologynameco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.GET_TOPOLOGY_NAME_LOCAL_CO(DBMS_UMF_LIB)",
    keumgtsnco_get_top_state_id_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.GET_TOP_STATE_ID(DBMS_UMF_LIB)",
    keumgtsncogettopstateidco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.GET_TOP_STATE_ID(DBMS_UMF_LIB)",
    keumitcc_is_tgt_capable_co="[Kernel Event: dbms_umf] dbms_umf(_internal) DBMS_UMF.IS_TGT_CAPABLE_CO",
    keumitccistgtcapableco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.IS_TGT_CAPABLE_CO(DBMS_UMF_LIB)",
    keummtsc_modify_top_sw_co="[Kernel Event: dbms_umf] dbms_umf(_internal) DBMS_UMF.TOPOLOGY_ROLE_CHANGE_CO",
    keummtscmodifytopswco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.TOPOLOGY_ROLE_CHANGE_CO(DBMS_UMF_LIB)",
    keumpclc_pop_cache_local_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.POP_CACHE_LOCAL_CO(DBMS_UMF_LIB)",
    keumpclcpopcachelocalco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.POP_CACHE_LOCAL_CO(DBMS_UMF_LIB)",
    keumqlic_query_link_info_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.QUERY_LINK_INFO_CO(DBMS_UMF_LIB)",
    keumqlicquerylinkinfoco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.QUERY_LINK_INFO_CO(DBMS_UMF_LIB)",
    keumqni2c_query_node_info2_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.QUERY_NODE_INFO_ID_CO(DBMS_UMF_LIB)",
    keumqni2cquerynodeinfo2co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.QUERY_NODE_INFO_ID_CO(DBMS_UMF_LIB)",
    keumqnic_query_node_info_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.QUERY_NODE_INFO_CO(DBMS_UMF_LIB)",
    keumqnicquerynodeinfoco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.QUERY_NODE_INFO_CO(DBMS_UMF_LIB)",
    keumrrc_register_remote_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.REGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumrrcregisterremoteco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.REGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumrtlc_release_top_lock_cb="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.RELEASE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumrtlcreleasetoplockcb="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.RELEASE_TOPOLOGY_LOCK(DBMS_UMF_LIB)",
    keumruec_umf_remote_enabled_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.UMF_REMOTE_ENABLED_CALLOUT(DBMS_UMF_LIB)",
    keumruecumfremoteenabledco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.UMF_REMOTE_ENABLED_CALLOUT(DBMS_UMF_LIB)",
    keumsdc_switch_destination_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.SWITCH_DESTINATION_CO(DBMS_UMF_LIB)",
    keumsdcswitchdestinationco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.SWITCH_DESTINATION_CO(DBMS_UMF_LIB)",
    keumspfps_sub_pat_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_PROTECTED.PSF_SUBSTITUTE_PAT2(DBMS_UMF_LIB)",
    keumspfpssubpatco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_PROTECTED.PSF_SUBSTITUTE_PAT2(DBMS_UMF_LIB)",
    keumswtc_sync_with_target_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.SYNC_WITH_TARGET_CO(DBMS_UMF_LIB)",
    keumswtcsyncwithtargetco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.SYNC_WITH_TARGET_CO(DBMS_UMF_LIB)",
    keumunc_unconfig_node_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF.UNCONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumuncunconfignodeco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.UNCONFIGURE_NODE_CO(DBMS_UMF_LIB)",
    keumurc_unreg_remote_co="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.UNREGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumurcunregremoteco="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.UNREGISTER_REMOTE_INTERNAL(DBMS_UMF_LIB)",
    keumusotc_upd_svc_old_tgt_co="[Kernel Event: dbms_umf] dbms_umf(_internal) DBMS_UMF.UPD_SVC_OLD_TGT_CO",
    keumusotcupdsvcoldtgtco="[Kernel Event: dbms_umf] SYS.DBMS_UMF.UPD_SVC_OLD_TGT_CO(DBMS_UMF_LIB)",
    keumusr_update_service_remote="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.UPDATE_SERVICE_REMOTE_INT(DBMS_UMF_LIB)",
    keumusrupdateserviceremote="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.UPDATE_SERVICE_REMOTE_INT(DBMS_UMF_LIB)",
    keumxlc_xmlpar_load_c="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.TOPOLOGY_LOAD(DBMS_UMF_LIB)",
    keumxlcxmlparloadc="[Kernel Event: dbms_umf] SYS.DBMS_UMF_INTERNAL.TOPOLOGY_LOAD(DBMS_UMF_LIB)",
    kew="[Kernel Event: AWR] ",
    kewa="[Kernel Event: AWR] ASH",
    kewccccc_config_client_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.CONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewcccccconfigclientco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.CONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewccgmc_get_mailpkg_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.GET_MAILPKG_TO_DELIVER_CO(DBMS_AWRWH_LIB)",
    kewccgmcgetmailpkgco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.GET_MAILPKG_TO_DELIVER_CO(DBMS_AWRWH_LIB)",
    kewccnmdc_nfy_mpk_delivered_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.NFY_MAILPKG_DELIVERED_CO(DBMS_AWRWH_LIB)",
    kewccnmdcnfympkdeliveredco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.NFY_MAILPKG_DELIVERED_CO(DBMS_AWRWH_LIB)",
    kewccrldc_reg_loc_delivery_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.REGISTER_AWR_DELIVERY_CO(DBMS_AWRWH_LIB)",
    kewccrldcreglocdeliveryco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.REGISTER_AWR_DELIVERY_CO(DBMS_AWRWH_LIB)",
    kewccucc_unconfig_client_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.UNCONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewccuccunconfigclientco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SOURCE.UNCONFIG_SOURCE_CO(DBMS_AWRWH_LIB)",
    kewceaec_awr_exp_co="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.AWR_EXP_CO(DBMS_SWRF_LIB)",
    kewceaecawrexpco="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.AWR_EXP_CO(DBMS_SWRF_LIB)",
    kewciaic_awr_imp_co="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.AWR_IMP_CO(DBMS_SWRF_LIB)",
    kewciaicawrimpco="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.AWR_IMP_CO(DBMS_SWRF_LIB)",
    kewcrdec_record_dp_err_co="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.RECORD_DATAPUMP_ERROR_CO(DBMS_AWRWH_LIB)",
    kewcrdecrecorddperrco="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.RECORD_DATAPUMP_ERROR_CO(DBMS_AWRWH_LIB)",
    kewcscwc_create_warehouse_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.CREATE_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcscwccreatewarehouseco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.CREATE_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcsdwc_drop_warehouse_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.DROP_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcsdwcdropwarehouseco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.DROP_WAREHOUSE_CO(DBMS_AWRWH_LIB)",
    kewcsguc_get_uploadmb_path_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.GET_UPLOADMB_PATH_CO(DBMS_AWRWH_LIB)",
    kewcsgucgetuploadmbpathco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.GET_UPLOADMB_PATH_CO(DBMS_AWRWH_LIB)",
    kewcsnmac_nfy_mpk_arrived_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.NFY_MAILPKG_ARRIVED_CO(DBMS_AWRWH_LIB)",
    kewcsnmacnfympkarrivedco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.NFY_MAILPKG_ARRIVED_CO(DBMS_AWRWH_LIB)",
    kewcsrdc_register_wh_dbid_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.REGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewcsrdcregisterwhdbidco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.REGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewcsurdc_unregister_dbid_co="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.UNREGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewcsurdcunregisterdbidco="[Kernel Event: AWR] SYS.DBMS_AWR_WAREHOUSE_SERVER.UNREGISTER_DBID_CO(DBMS_AWRWH_LIB)",
    kewe3gl1="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl10="[Kernel Event: AWR] SYS.DBMS_MONITOR.SESSION_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl11="[Kernel Event: AWR] SYS.DBMS_MONITOR.DATABASE_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl12="[Kernel Event: AWR] SYS.DBMS_MONITOR.DATABASE_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl2="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl3="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl4="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl5="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl6="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl7="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe3gl8="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe3gl9="[Kernel Event: AWR] SYS.DBMS_MONITOR.SESSION_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_1="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_10="[Kernel Event: AWR] SYS.DBMS_MONITOR.SESSION_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_11="[Kernel Event: AWR] SYS.DBMS_MONITOR.DATABASE_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_12="[Kernel Event: AWR] SYS.DBMS_MONITOR.DATABASE_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_2="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_3="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_4="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_5="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_6="[Kernel Event: AWR] SYS.DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_7="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_8="[Kernel Event: AWR] SYS.DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE(DBMS_MONITOR_LIB)",
    kewe_3gl_9="[Kernel Event: AWR] SYS.DBMS_MONITOR.SESSION_TRACE_ENABLE(DBMS_MONITOR_LIB)",
    kewe_cln_stat_disable="[Kernel Event: AWR] AWR DBMS_MONITOR.CLIENT_ID_STAT_DISABLE",
    kewe_cln_stat_enable="[Kernel Event: AWR] AWR DBMS_MONITOR.CLIENT_ID_STAT_ENABLE",
    kewe_cln_trace_disable="[Kernel Event: AWR] AWR DBMS_MONITOR.CLIENT_ID_TRACE_DISABLE",
    kewe_cln_trace_enable="[Kernel Event: AWR] AWR DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE",
    kewe_database_trace_disable="[Kernel Event: AWR] AWR DBMS_MONITOR.DATABASE_TRACE_DISABLE",
    kewe_database_trace_enable="[Kernel Event: AWR] AWR DBMS_MONITOR.DATABASE_TRACE_ENABLE",
    kewe_mysession_trace_disable="[Kernel Event: AWR] SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_DISABL(C)",
    kewe_mysession_trace_enable="[Kernel Event: AWR] SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_ENABLE(C)",
    kewe_sid_trace_disable="[Kernel Event: AWR] AWR DBMS_MONITOR.SESSION_TRACE_DISABLE",
    kewe_sid_trace_enable="[Kernel Event: AWR] AWR DBMS_MONITOR.SESSION_TRACE_ENABLE",
    kewe_svm_stat_disable="[Kernel Event: AWR] AWR DBMS_MONITOR.SERV_MOD_ACT_STAT_DISABLE",
    kewe_svm_stat_enable="[Kernel Event: AWR] AWR DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE",
    kewe_svm_trace_disable="[Kernel Event: AWR] AWR DBMS_MONITOR.SERV_MOD_ACT_TRACE_DISABLE",
    kewe_svm_trace_enable="[Kernel Event: AWR] AWR DBMS_MONITOR.SERV_MOD_ACT_TRACE_ENABLE",
    kewemysessiontracedisable="[Kernel Event: AWR] SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_DISABL(C)",
    kewemysessiontraceenable="[Kernel Event: AWR] SYS.DBMS_SESSION.KEWE_MYSESSION_TRACE_ENABLE(C)",
    kewfc_callout_test="[Kernel Event: AWR] SYS.DBMS_FEATURE_USAGE_CLIENT.CALLOUT_TEST(DBMS_DBFUSC_LIB)",
    kewfc_dbsnmp_baseline_adaptive="[Kernel Event: AWR] SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_ADAPTIVE(DBMS_DBFUSC_LIB)",
    kewfc_dbsnmp_baseline_computes="[Kernel Event: AWR] SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_COMPUTES(DBMS_DBFUSC_LIB)",
    kewfccallouttest="[Kernel Event: AWR] SYS.DBMS_FEATURE_USAGE_CLIENT.CALLOUT_TEST(DBMS_DBFUSC_LIB)",
    kewfcdbsnmpbaselineadaptive="[Kernel Event: AWR] SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_ADAPTIVE(DBMS_DBFUSC_LIB)",
    kewfcdbsnmpbaselinecomputes="[Kernel Event: AWR] SYS.DBMS_FEATURE_USAGE_CLIENT.DBSNMP_BASELINE_COMPUTES(DBMS_DBFUSC_LIB)",
    kewm="[Kernel Event: AWR] AWR metrics",
    kewr="[Kernel Event: AWR] AWR repository",
    kewrafm_auto_flush_main="[Kernel Event: AWR] AWR repository auto flush main",
    kewrcfp_create_first_partition="[Kernel Event: AWR] AWR repository create first partition for all AWR after dbid is registered",
    kewrcmp_create_manual_partns="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CREATE_IMPORT_PARTITIONS(DBMS_SWRF_LIB)",
    kewrcmpcreatemanualpartns="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CREATE_IMPORT_PARTITIONS(DBMS_SWRF_LIB)",
    kewrcup_create_upgrade_partns="[Kernel Event: AWR] AWR repository DBMS_SWRF_INTERNAL.CREATE_UPGRADE_PARTITIONS",
    kewrcupcreateupgradepartns="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CREATE_UPGRADE_PARTITIONS(DBMS_SWRF_LIB)",
    kewrf="[Kernel Event: AWR] AWR repository flush",
    kewrgsi_get_segment_info="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.GET_SEG_INFO(DBMS_SWRF_LIB)",
    kewrgsigetsegmentinfo="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.GET_SEG_INFO(DBMS_SWRF_LIB)",
    kewrmas_modify_apurge_setting="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.MODIFY_AUTOPURGE_SETTINGS(DBMS_SWRF_LIB)",
    kewrmasmodifyapurgesetting="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.MODIFY_AUTOPURGE_SETTINGS(DBMS_SWRF_LIB)",
    kewrpacs_add_colored_sql="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.ADD_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrpacsaddcoloredsql="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.ADD_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrpcb_create_baseline="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BASELINE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbcreatebaseline="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BASELINE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbt_create_bl_template="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TEMPLATE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbt_create_bl_timerange="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TIMERANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbtcreatebltemplate="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TEMPLATE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcbtcreatebltimerange="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_BL_TIMERANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcc_cleanup_catalog="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CLEANUP_CATALOG(DBMS_SWRF_LIB)",
    kewrpcccleanupcatalog="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CLEANUP_CATALOG(DBMS_SWRF_LIB)",
    kewrpcldb_cleanup_database="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CLEANUP_DATABASE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcldbcleanupdatabase="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CLEANUP_DATABASE_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcrs_ctl_restricted_snap="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CONTROL_RESTRICTED_SNAPSHOT(DBMS_SWRF_LIB)",
    kewrpcrsctlrestrictedsnap="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CONTROL_RESTRICTED_SNAPSHOT(DBMS_SWRF_LIB)",
    kewrpcs_create_snapshot="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcscreatesnapshot="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT_CALLOUT(DBMS_SWRF_LIB)",
    kewrpcstgs_create_stg_schema="[Kernel Event: AWR] AWR repository DBMS_SWRF_INTERNAL.CREATE_STAGING_SCHEMA",
    kewrpcstgscreatestgschema="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.CREATE_STAGING_SCHEMA(DBMS_SWRF_LIB)",
    kewrpdbn_dropbl_byname="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE(DBMS_SWRF_LIB)",
    kewrpdbndropblbyname="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE(DBMS_SWRF_LIB)",
    kewrpdbt_drop_bl_template="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE_TEMPLATE(DBMS_SWRF_LIB)",
    kewrpdbtdropbltemplate="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.DROP_BASELINE_TEMPLATE(DBMS_SWRF_LIB)",
    kewrpdsr_drop_snapshot_range="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.DROP_SNAPSHOT_RANGE(DBMS_SWRF_LIB)",
    kewrpdsrdropsnapshotrange="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.DROP_SNAPSHOT_RANGE(DBMS_SWRF_LIB)",
    kewrpdtr_dump_trace="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.DUMP_TRACE(DBMS_SWRF_LIB)",
    kewrpdtrdumptrace="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.DUMP_TRACE(DBMS_SWRF_LIB)",
    kewrpglt_get_lrgtest_tables="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.GET_LRGTEST_TABLES_CALLOUT(DBMS_SWRF_LIB)",
    kewrpgltgetlrgtesttables="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.GET_LRGTEST_TABLES_CALLOUT(DBMS_SWRF_LIB)",
    kewrpms_modify_settings="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmsmodifysettings="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmtsc_mod_tab_settings_co="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_TABLE_SETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmtscmodtabsettingsco="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_TABLE_SETTINGS_CALLOUT(DBMS_SWRF_LIB)",
    kewrpmvs_modify_view_settings="[Kernel Event: AWR] SYS.DBMS_MANAGEMENT_BOOTSTRAP.MODIFY_AWR_VIEW_SETTINGS_CO(DBMS_SWRF_LIB)",
    kewrpmvsmodifyviewsettings="[Kernel Event: AWR] SYS.DBMS_MANAGEMENT_BOOTSTRAP.MODIFY_AWR_VIEW_SETTINGS_CO(DBMS_SWRF_LIB)",
    kewrpmws_modbl_window_size="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_BASELINE_WINDOW_SIZE(DBMS_SWRF_LIB)",
    kewrpmwsmodblwindowsize="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.MODIFY_BASELINE_WINDOW_SIZE(DBMS_SWRF_LIB)",
    kewrprb_rename_baseline="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.RENAME_BASELINE(DBMS_SWRF_LIB)",
    kewrprbrenamebaseline="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.RENAME_BASELINE(DBMS_SWRF_LIB)",
    kewrprc_refresh_catalog="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REFRESH_CATALOG(DBMS_SWRF_LIB)",
    kewrprcrefreshcatalog="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REFRESH_CATALOG(DBMS_SWRF_LIB)",
    kewrprcs_remove_colored_sql="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.REMOVE_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrprcsremovecoloredsql="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.REMOVE_COLORED_SQL(DBMS_SWRF_LIB)",
    kewrprdb_register_database="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REGISTER_DBID_CALLOUT(DBMS_SWRF_LIB)",
    kewrprdbregisterdatabase="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REGISTER_DBID_CALLOUT(DBMS_SWRF_LIB)",
    kewrprmdb_register_multidb="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REGISTER_MULTIDB_CALLOUT(DBMS_SWRF_LIB)",
    kewrprmdbregistermultidb="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REGISTER_MULTIDB_CALLOUT(DBMS_SWRF_LIB)",
    kewrprstdb_reset_database="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.RESET_AWR_CALLOUT(DBMS_SWRF_LIB)",
    kewrprstdbresetdatabase="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.RESET_AWR_CALLOUT(DBMS_SWRF_LIB)",
    kewrprstgs_remove_stg_schema="[Kernel Event: AWR] AWR repository DBMS_SWRF_INTERNAL.REMOVE_STAGING_SCHEMA",
    kewrprstgsremovestgschema="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REMOVE_STAGING_SCHEMA(DBMS_SWRF_LIB)",
    kewrprwc_remove_wr_control="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REMOVE_WR_CONTROL(DBMS_SWRF_LIB)",
    kewrprwcremovewrcontrol="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.REMOVE_WR_CONTROL(DBMS_SWRF_LIB)",
    kewrps="[Kernel Event: AWR] AWR repository purge",
    kewrpsbd_sync_bl_details="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.INSERT_BASELINE_DETAILS(DBMS_SWRF_LIB)",
    kewrpsbdsyncbldetails="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.INSERT_BASELINE_DETAILS(DBMS_SWRF_LIB)",
    kewrpsd_purge_sql_details="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.PURGE_SQL_DETAILS(DBMS_SWRF_LIB)",
    kewrpsdpurgesqldetails="[Kernel Event: AWR] SYS.DBMS_WORKLOAD_REPOSITORY.PURGE_SQL_DETAILS(DBMS_SWRF_LIB)",
    kewrpsl_set_lrgtest="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.SET_LRGTEST_CALLOUT(DBMS_SWRF_LIB)",
    kewrpslsetlrgtest="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.SET_LRGTEST_CALLOUT(DBMS_SWRF_LIB)",
    kewrpulc_updbl_last_computed="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.BLUPDATE_LAST_TIME_COMPUTED(DBMS_SWRF_LIB)",
    kewrpulcupdbllastcomputed="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.BLUPDATE_LAST_TIME_COMPUTED(DBMS_SWRF_LIB)",
    kewrpurdb_unregister_database="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UNREGISTER_DATABASE(DBMS_SWRF_LIB)",
    kewrpurdbunregisterdatabase="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UNREGISTER_DATABASE(DBMS_SWRF_LIB)",
    kewrpurmdb_unregister_multidb="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UNREGISTER_REMOTE_DATABASE(DBMS_SWRF_LIB)",
    kewrpurmdbunregistermultidb="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UNREGISTER_REMOTE_DATABASE(DBMS_SWRF_LIB)",
    kewrrsr_reserve_snap_range="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.RESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrrsrreservesnaprange="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.RESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrst2si_source_t2s_intent="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.T2S_SNAP_INTENT_NFY(DBMS_SWRF_LIB)",
    kewrst2sisourcet2sintent="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.T2S_SNAP_INTENT_NFY(DBMS_SWRF_LIB)",
    kewrst2srn_source_t2s_reg_nfy="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.T2S_REGISTER_NFY(DBMS_SWRF_LIB)",
    kewrst2srnsourcet2sregnfy="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.T2S_REGISTER_NFY(DBMS_SWRF_LIB)",
    kewrst2ss_source_t2s_snap="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.AWR_FLUSH_T2SS_SNAP_CALLOUT(DBMS_SWRF_LIB)",
    kewrst2sssourcet2ssnap="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.AWR_FLUSH_T2SS_SNAP_CALLOUT(DBMS_SWRF_LIB)",
    kewrudf_update_datafile="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UPDATE_DATAFILE(DBMS_SWRF_LIB)",
    kewrudfupdatedatafile="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UPDATE_DATAFILE(DBMS_SWRF_LIB)",
    kewrusi_update_segment_info="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UPDATE_SEG_INFO(DBMS_SWRF_LIB)",
    kewrusiupdatesegmentinfo="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UPDATE_SEG_INFO(DBMS_SWRF_LIB)",
    kewrusr_unreserve_snap_range="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UNRESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrusrunreservesnaprange="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.UNRESERVE_SNAP_RANGE_CALLOUT(DBMS_SWRF_LIB)",
    kewrwfao_wait_for_awr_open="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.WAIT_FOR_AWR_OPEN_CO(DBMS_SWRF_LIB)",
    kewrwfaowaitforawropen="[Kernel Event: AWR] SYS.DBMS_SWRF_INTERNAL.WAIT_FOR_AWR_OPEN_CO(DBMS_SWRF_LIB)",
    kews="[Kernel Event: AWR] AWR statistics",
    kews_cln_timestate="[Kernel Event: AWR] AWR statistics clean timestate",
    kews_sqlst_flush="[Kernel Event: AWR] AWR statistics flush cursor statistics",
    kews_update_wait_time="[Kernel Event: AWR] AWR statistics update wait time",
    kewu="[Kernel Event: AWR] AWR utilities",
    kewx="[Kernel Event: AWR] AWR sysaux?",
    kex="[Kernel Event] EM express",
    key="[Kernel Event] SYS.SODA_OPERATION_T.KEY(DBMS_SODAOPR_LIB)",
    keys="[Kernel Event] SYS.SODA_OPERATION_T.KEYS(DBMS_SODAOPR_LIB)",
    kf="[Kernel Automatic Storage Management] ",
    kfa="[Kernel Automatic Storage Management] alias operations",
    kfc="[Kernel Automatic Storage Management] cache",
    kfcl="[Kernel Automatic Storage Management] cache lock",
    kfcload="[Kernel Automatic Storage Management] cache ??",
    kfcreadblk="[Kernel Automatic Storage Management] cache ??",
    kfd="[Kernel Automatic Storage Management] disk",
    kfdp="[Kernel Automatic Storage Management] disk PST",
    kfds="[Kernel Automatic Storage Management] disk staleness registry and resync",
    kfdva="[Kernel Automatic Storage Management] disk virtual ATB",
    kfdx="[Kernel Automatic Storage Management] disk exadata interface",
    kfe="[Kernel Automatic Storage Management] attributes",
    kff="[Kernel Automatic Storage Management] KFF",
    kffb="[Kernel Automatic Storage Management] KFF metadata block",
    kffbscannext="[Kernel Automatic Storage Management] KFF metadata block ??",
    kffbtablecb="[Kernel Automatic Storage Management] KFF metadata block ??",
    kffd="[Kernel Automatic Storage Management] KFF metadata directory",
    kffg="[Kernel Automatic Storage Management] KFF file group",
    kffiltablecb="[Kernel Automatic Storage Management] KFF ??",
    kffm="[Kernel Automatic Storage Management] KFF map header",
    kffs="[Kernel Automatic Storage Management] KFF split mirror operations",
    kffscrub="[Kernel Automatic Storage Management] KFF split mirror operations scrubbing",
    kfg="[Kernel Automatic Storage Management] diskgroups",
    kfgb="[Kernel Automatic Storage Management] diskgroups background",
    kfgtablecb="[Kernel Automatic Storage Management] diskgroups ??",
    kfia="[Kernel Automatic Storage Management] remote",
    kfiac="[Kernel Automatic Storage Management] remote IOServer client",
    kfias="[Kernel Automatic Storage Management] remote IOServer",
    kfio="[Kernel Automatic Storage Management] translation I/O layer",
    kfiodumppg="[Kernel Automatic Storage Management] translation I/O layer dump routine",
    kfioer="[Kernel Automatic Storage Management] translation I/O layer translation",
    kfioerrorrecord="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfiophysical="[Kernel Automatic Storage Management] translation I/O layer get physical sector size",
    kfiorequest="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfiorequestpriv="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfiorqsetdump="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfiorqsetprepare="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfios="[Kernel Automatic Storage Management] translation I/O layer simple",
    kfiosubmitio="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfiotranslateio="[Kernel Automatic Storage Management] translation I/O layer ??",
    kfis="[Kernel Automatic Storage Management] intelligent storage interfaces",
    kfk="[Kernel Automatic Storage Management] KFK",
    kfk_dump="[Kernel Automatic Storage Management] KFK dump routine",
    kfk_dump_iosubsys="[Kernel Automatic Storage Management] KFK dump routine io subsystem",
    kfk_dump_kfkio="[Kernel Automatic Storage Management] KFK dump routine KFK IO",
    kfm="[Kernel Automatic Storage Management] node monitor interface implementation",
    kfmd="[Kernel Automatic Storage Management] node monitor interface implementation layer for diskgroup registration",
    kfms="[Kernel Automatic Storage Management] node monitor interface implementation layers support function interface",
    kfmsinit="[Kernel Automatic Storage Management] node monitor interface implementation layers support function interface initialise group services (kgxgncin cssd)",
    kfn="[Kernel Automatic Storage Management] networking subsystem",
    kfnb="[Kernel Automatic Storage Management] networking subsystem umbilicus",
    kfnbgrpfinddisks="[Kernel Automatic Storage Management] networking subsystem umbilicus group find disks",
    kfnc="[Kernel Automatic Storage Management] networking subsystem client networking",
    kfncphysical="[Kernel Automatic Storage Management] networking subsystem client networking request physical sector size",
    kfncslavesubmit="[Kernel Automatic Storage Management] networking subsystem client networking submit request",
    kfnm="[Kernel Automatic Storage Management] networking subsystem umbilicus",
    kfnor="[Kernel Automatic Storage Management] networking subsystem KFN orion",
    kfns="[Kernel Automatic Storage Management] networking subsystem server networking",
    kfpkgdg="[Kernel Automatic Storage Management] DBMS_DISKGROUP",
    kfpkgdgchangeclientcluster="[Kernel Automatic Storage Management] DBMS_DISKGROUP CHANGECLIENTCLUSTER",
    kfpkgdgcheckfile="[Kernel Automatic Storage Management] DBMS_DISKGROUP CHECKFILE",
    kfpkgdgclosefile="[Kernel Automatic Storage Management] DBMS_DISKGROUP CLOSE",
    kfpkgdgcommitfile="[Kernel Automatic Storage Management] DBMS_DISKGROUP COMMIT",
    kfpkgdgcreateclientcluster2="[Kernel Automatic Storage Management] DBMS_DISKGROUP CREATECLIENTCLUSTER2",
    kfpkgdgcreatedir="[Kernel Automatic Storage Management] DBMS_DISKGROUP CREATEDIR",
    kfpkgdgcreatefile="[Kernel Automatic Storage Management] DBMS_DISKGROUP CREATEFILE",
    kfpkgdgdelbadfentry="[Kernel Automatic Storage Management] DBMS_DISKGROUP DELETEBADFENTRY",
    kfpkgdgdropdir="[Kernel Automatic Storage Management] DBMS_DISKGROUP DROPDIR",
    kfpkgdggetfileattr="[Kernel Automatic Storage Management] DBMS_DISKGROUP GETFILEATTR",
    kfpkgdggetfilephyblksize="[Kernel Automatic Storage Management] DBMS_DISKGROUP GETFILEPHYBLKSIZE",
    kfpkgdgmapau="[Kernel Automatic Storage Management] DBMS_DISKGROUP MAPAU",
    kfpkgdgmapblock="[Kernel Automatic Storage Management] DBMS_DISKGROUP MAPBLOCK",
    kfpkgdgmapextent="[Kernel Automatic Storage Management] DBMS_DISKGROUP MAPEXTENT",
    kfpkgdgmapextent2="[Kernel Automatic Storage Management] DBMS_DISKGROUP MAPEXTENT 12.2 version",
    kfpkgdgopenfile="[Kernel Automatic Storage Management] DBMS_DISKGROUP OPEN",
    kfpkgdgpatchfile="[Kernel Automatic Storage Management] DBMS_DISKGROUP PATCHFILE",
    kfpkgdgreadfile="[Kernel Automatic Storage Management] DBMS_DISKGROUP READ",
    kfpkgdgremap="[Kernel Automatic Storage Management] DBMS_DISKGROUP REMAP",
    kfpkgdgresizefile="[Kernel Automatic Storage Management] DBMS_DISKGROUP RESIZEFILE",
    kfpkgdgsetsparseparent="[Kernel Automatic Storage Management] DBMS_DISKGROUP SETSPARSEPARENT",
    kfr="[Kernel Automatic Storage Management] recovery",
    kfrb="[Kernel Automatic Storage Management] recovery buffer",
    kfrc="[Kernel Automatic Storage Management] recovery COD",
    kft="[Kernel File management Tablespace] ",
    kftha="[Kernel File management Tablespace] transparent high availability",
    kftr2="[Kernel File management Tablespace] relative to absolute file number translation",
    kftr2ah="[Kernel File management Tablespace] relative to absolute file number translation with hint",
    kfv="[Kernel Automatic Storage Management] volume subsystem",
    kfvioc="[Kernel Automatic Storage Management] volume subsystem cell storage",
    kfvsd="[Kernel Automatic Storage Management] volume subsystem background",
    kfvsu="[Kernel Automatic Storage Management] volume subsystem umbilicus",
    kfz="[Kernel Automatic Storage Management] zecurity subsystem",
    kfzp="[Kernel Automatic Storage Management] zecurity subsystem password file layer",
    kg="[Kernel Generic] ",
    kgas="[Kernel Generic TCP/IP Networking]",
    kgasc_close="[Kernel Generic TCP/IP Networking] close tcp connection",
    kgasct_connect_tcp="[Kernel Generic TCP/IP Networking] connect tcp connection",
    kgasr="[Kernel Generic TCP/IP Networking] receive",
    kgasra2_recv_avail_2="[Kernel Generic TCP/IP Networking] receive second routine",
    kgasra_recv_avail="[Kernel Generic TCP/IP Networking] receive first routine",
    kgass="[Kernel Generic TCP/IP Networking] send",
    kgass_send="[Kernel Generic TCP/IP Networking] send routine",
    kgbt="[Kernel Generic] btree operations",
    kgcc="[Kernel Generic Compress]",
    kgccbuf="[Kernel Generic Compress] buffer",
    kgccbz2do="[Kernel Generic Compress] bzip2 do apply bzip2 compression",
    kgccbz2pseudodo="[Kernel Generic Compress] bzip2 pseudo do",
    kgccdo="[Kernel Generic Compress] do, main compression function",
    kgccgmtf="[Kernel Generic Compress] generate move to front",
    kgccm="[Kernel Generic Compress] memory (?)",
    kgcd="[Kernel Generic decompress]",
    kgcddo="[Kernel Generic decompress] do, main decompression function",
    kgce="[Kernel Generic] encryption engine",
    kgcs="[Kernel Generic Cloud Service]",
    kgcs_bmiaas="[Kernel Generic Cloud Service] (detect) bare metal IaaS",
    kgcs_bmiaasgen2="[Kernel Generic Cloud Service] (detect) bare metal IaaS (detect) bare metal IaaS second generation",
    kgcs_exacloud="[Kernel Generic Cloud Service] (detect) exacloud",
    kgcs_http_url_read="[Kernel Generic Cloud Service] read url for determination of cloud and type of cloud",
    kgcs_is_non_oracle_cloud="[Kernel Generic Cloud Service] is the instance running in an non-oracle cloud?",
    kgcs_is_on_premise="[Kernel Generic Cloud Service] is the instance running on-premises?",
    kgcs_is_oracle_cloud="[Kernel Generic Cloud Service] is the instance running in oracle cloud?",
    kgcs_nimbula="[Kernel Generic Cloud Service] is the instance running in a nimbula infrastructure?",
    kgds="[Kernel Generic] vos generic stack trace",
    kge="[Kernel Generic Error manager] ",
    kgeade="[Kernel Generic Error manager] add error onto the error stack",
    kgeadse="[Kernel Generic Error manager] KGE ADd String Internal Error onto the error stack",
    kgeasi="[Kernel Generic Error manager] raise an error on an assertion failure",
    kgeasnmierr="[Kernel Generic Error manager] assert named internal error",
    kgecrs="[Kernel Generic Error manager] check and record O/S error code",
    kgecxd="[Kernel Generic Error manager] context of error driver",
    kgefec="[Kernel Generic Error manager] fatal error code",
    kgefem="[Kernel Generic Error manager] format error message (null-terminated)",
    kgefic="[Kernel Generic Error manager] ??",
    kgemef="[Kernel Generic Error manager] mae error message (with Va_list)",
    kgepop="[Kernel Generic Error manager] pop to the current top error frame",
    kger="[Kernel Generic Error manager] record",
    kgerelv="[Kernel Generic Error manager] ??",
    kgerem="[Kernel Generic Error manager] record error code (with already-formatted message)",
    kgerev="[Kernel Generic Error manager] record error code (with Va_list)",
    kgerinv="[Kernel Generic Error manager] record internal named error with va_list",
    kgerinv_internal="[Kernel Generic Error manager] record internal named error with va_list or soft internal named error",
    kgeriv="[Kernel Generic Error manager] record internal error code with va_list",
    kgersel="[Kernel Generic Error manager] ??",
    kgese="[Kernel Generic Error manager] signal error",
    kgesec="[Kernel Generic Error manager] signal error code",
    kgesev="[Kernel Generic Error manager] signal error code (with Va_list)",
    kgesin="[Kernel Generic Error manager] signal a named internal error",
    kgesinv="[Kernel Generic Error manager] signal a named internal error signal internal named error with va_list",
    kgesiv="[Kernel Generic Error manager] ??",
    kgespf="[Kernel Generic Error manager] string printf (format a message straing)",
    kgf="[Kernel Generic ASM] ",
    kgfd="[Kernel Generic ASM driver] ",
    kgfdvf="[Kernel Generic ASM driver] Voting file Interface",
    kgff="[Kernel Generic ASM direct file io adapter] ",
    kgffdcn="[Kernel Generic ASM direct file io adapter] disconnect from kgff instance",
    kgfpm="[Kernel Neneric File] PATCH repository",
    kgg="[Kernel Generic lists] ",
    kggchk="[Kernel Generic lists] check",
    kggec="[Kernel Generic lists] element cache(?)",
    kggecalloc="[Kernel Generic lists] element cache(?) allocate",
    kggecinith="[Kernel Generic lists] element cache(?) initialise heap",
    kggfa="[Kernel Generic lists] freeable (memory) allocation",
    kggfaalloc="[Kernel Generic lists] freeable (memory) allocation allocate",
    kggfadokghalloc="[Kernel Generic lists] freeable (memory) allocation do KGH allocation. allocate memory in KGH managed heap",
    kggfainith="[Kernel Generic lists] freeable (memory) allocation initialise heap",
    kgghash="[Kernel Generic lists] produce hash value",
    kgghstfel="[Kernel Generic lists] Kernel Generic lists ??",
    kgghte="[Kernel Generic lists] hash table",
    kgghteadd="[Kernel Generic lists] hash table add",
    kgghteaddcb="[Kernel Generic lists] Kernel Generic lists ??",
    kgghtegetele="[Kernel Generic lists] hash table get element",
    kggmd5="[Kernel Generic lists] functions to calculate md5 values",
    kggms="[Kernel Generic map service] ",
    kggmsadd="[Kernel Generic map service] add",
    kggmsaddcb="[Kernel Generic map service] add ??",
    kggmsaddptrcb="[Kernel Generic map service] add ??",
    kggmsaddub4="[Kernel Generic map service] add unsigned 4 bytes",
    kggmscreatemap="[Kernel Generic map service] create map",
    kggmscreatestaticmaps="[Kernel Generic map service] create static maps",
    kggmshash="[Kernel Generic map service] hashing function",
    kggmshash12="[Kernel Generic map service] hashing function 12 bit",
    kggmshash16="[Kernel Generic map service] hashing function 16 bit",
    kggmshash8="[Kernel Generic map service] hashing function 8 bit",
    kggmsinitmapserviceh="[Kernel Generic map service] initialise map service heap",
    kggsm="[Kernel Generic lists] string mapping",
    kggsmcommoninit="[Kernel Generic lists] string mapping common initialisation.",
    kggsminit="[Kernel Generic lists] string mapping initialise",
    kggsminitstringmapservice="[Kernel Generic lists] string mapping initialise string map service",
    kgh="[Kernel Generic shared Heap manager] ",
    kgh_update_comment="[Kernel Generic shared Heap manager] add comment to memory chunk allocation",
    kghaddex="[Kernel Generic shared Heap manager] add extent",
    kghalf="[Kernel Generic shared Heap manager] non-recoverably allocate a freeable chunk of memory",
    kghalo="[Kernel Generic shared Heap manager] main allocation entry point",
    kghalp="[Kernel Generic shared Heap manager] allocate permanent memory",
    kghbshrt="[Kernel Generic shared Heap manager] ??",
    kgherror="[Kernel Generic shared Heap manager] internal error routine for signalling an error",
    kghfen="[Kernel Generic shared Heap manager] free a portion of a chunk of space at the end of the chunk",
    kghfnd="[Kernel Generic shared Heap manager] find a chunk of memory of at least the minimum size",
    kghfnd_in_free_lists="[Kernel Generic shared Heap manager] find a chunk of memory of at least the minimum size in free lists",
    kghfre="[Kernel Generic shared Heap manager] free a chunk of memory",
    kghfrempty="[Kernel Generic shared Heap manager] free a chunk of memory ??",
    kghfrf="[Kernel Generic shared Heap manager] non-recoverably free a freeable chunk of space",
    kghfrh="[Kernel Generic shared Heap manager] free heap. free all the extents allocated in the heap using kghalfrx",
    kghfrmrg="[Kernel Generic shared Heap manager] free a chunk, merge with neighbors if free returns merged chunk",
    kghfru="[Kernel Generic shared Heap manager] free unused space in a heap",
    kghfru_internal="[Kernel Generic shared Heap manager] free unused space in a heap internal",
    kghfrunp="[Kernel Generic shared Heap manager] free unused space in a heap free unpinned space",
    kghfrx="[Kernel Generic shared Heap manager] free extent",
    kghgex="[Kernel Generic shared Heap manager] get a new extent",
    kghini="[Kernel Generic shared Heap manager] heap initialize",
    kghissga="[Kernel Generic shared Heap manager] is heap in SGA?",
    kghmrk="[Kernel Generic shared Heap manager] mark heap",
    kghnerror="[Kernel Generic shared Heap manager] ??",
    kghnospc="[Kernel Generic shared Heap manager] no space available in the heap, signal an error",
    kghphini="[Kernel Generic shared Heap manager] parent heap initialize",
    kghpin="[Kernel Generic shared Heap manager] pin a heap",
    kghpir="[Kernel Generic shared Heap manager] pin a chunk of space that was specified to be recreatable",
    kghpmalo="[Kernel Generic shared Heap manager] find and return permanent chunk of space",
    kghprmalo="[Kernel Generic shared Heap manager] permanent memory allocate",
    kghrcappl="[Kernel Generic shared Heap manager] apply this heap function depth first",
    kghrsp="[Kernel Generic shared Heap manager] remove permanent chunk",
    kghrst="[Kernel Generic shared Heap manager] ??",
    kghsc="[Kernel Generic shared Heap manager] stream compact",
    kghsrch="[Kernel Generic shared Heap manager] search freelists for a memory chunk",
    kghssgai="[Kernel Generic shared Heap manager] segmented allocation internal",
    kghssgal="[Kernel Generic shared Heap manager] segmented allocate",
    kghssgfr="[Kernel Generic shared Heap manager] segmented free",
    kghssgmm="[Kernel Generic shared Heap manager] ??",
    kghstack="[Kernel Generic shared Heap manager] stack",
    kghstack_alloc="[Kernel Generic shared Heap manager] allocate pga memory",
    kghstack_free="[Kernel Generic shared Heap manager] free pga memory",
    kghsup="[Kernel Generic shared Heap manager] unpaged page table",
    kghsupmm="[Kernel Generic shared Heap manager] unpaged page table more memory",
    kghufreetop="[Kernel Generic shared Heap manager] ??",
    kghugetuds="[Kernel Generic shared Heap manager] ??",
    kghup="[Kernel Generic shared Heap manager] unpin",
    kghupr="[Kernel Generic shared Heap manager] unpin recreatable chunk",
    kghx="[Kernel Generic fiXed sized sHared memory manager] ",
    kghxal="[Kernel Generic fiXed sized sHared memory manager] allocate shared memory",
    kghxcb="[Kernel Generic fiXed sized sHared memory manager] callback to free memory on the free lists back to kgh",
    kghxcb_internal="[Kernel Generic fiXed sized sHared memory manager] callback to free memory on the free lists back to kgh internal",
    kghxcu="[Kernel Generic fiXed sized sHared memory manager] latch cleanup for the fixed allocator",
    kgi="[Kernel Generic Instantiation manager] ",
    kgicli="[Kernel Generic Instantiation manager] close all cursors for an instantiation",
    kgidel="[Kernel Generic Instantiation manager] delete an instantiation object",
    kgidlt="[Kernel Generic Instantiation manager] delete an instantiation object",
    kgidmp="[Kernel Generic Instantiation manager] ??",
    kgimal="[Kernel Generic Instantiation manager] memory allocate",
    kgiscl="[Kernel Generic Instantiation manager] state close cursors",
    kgisdl="[Kernel Generic Instantiation manager] state delete",
    kgitrc="[Kernel Generic Instantiation manager] trace call stack",
    kgk="[Kernel Generic toKen table manager] ",
    kgkp="[Kernel Generic toKen table manager] generic services scheduling policies",
    kgl="[Kernel Generic Library cache manager] ",
    kgl2="[Kernel Generic Library cache manager] ",
    kgl3="[Kernel Generic Library cache manager] ",
    kgl_can_unpin_heap_0="[Kernel Generic Library cache manager] can heap 0 be unpinned",
    kglalt="[Kernel Generic Library cache manager] called before an object is being modified to clear dependency",
    kglati="[Kernel Generic Library cache manager] authorization table insert(?)",
    kglaud="[Kernel Generic Library cache manager] audit an event of an KGL object",
    kglchk="[Kernel Generic Library cache manager] security check of an KGL object",
    kglchk1="[Kernel Generic Library cache manager] check for 1 access on object",
    kglchk2="[Kernel Generic Library cache manager] check for access on an object",
    kglchk3="[Kernel Generic Library cache manager] check for access on an object",
    kglcomputehash="[Kernel Generic Library cache manager] compute hash value",
    kglconcurrencyid="[Kernel Generic Library cache manager] return library cache hash bucket number",
    kglcrt="[Kernel Generic Library cache manager] called before an object is being created to invalidate depending objects",
    kgldmc="[Kernel Generic Library cache manager] dump the entire library cache into a trace file",
    kgldmp="[Kernel Generic Library cache manager] dump an KGL object into a trace file",
    kgldon="[Kernel Generic Library cache manager] do name resolution, synonym translation, lock and pin an object",
    kgldpo="[Kernel Generic Library cache manager] depend on an object",
    kgldrp="[Kernel Generic Library cache manager] change timestamp and clear the object tables for a dropping object",
    kgldrx="[Kernel Generic Library cache manager] change the object type to non-existent for a dropping object",
    kgldti="[Kernel Generic Library cache manager] dependency table insert (under latch or KGLMX pin/load)",
    kgldtin="[Kernel Generic Library cache manager] dependency table insert (under latch or KGLMX pin/load) ?",
    kgldtld="[Kernel Generic Library cache manager] ??",
    kglfls="[Kernel Generic Library cache manager] called when the transaction is being committed if a KGL object has been modified (under an exclusive pin) in a transaction",
    kglfnd="[Kernel Generic Library cache manager] find a chunk of at least the minimum size",
    kglfrunp="[Kernel Generic Library cache manager] ask a client to free unpinned space",
    kglfrx="[Kernel Generic Library cache manager] free extent (heap unpin)",
    kglgbo="[Kernel Generic Library cache manager] do name resolution, synonym translation, lock and pin an object",
    kglget="[Kernel Generic Library cache manager] get a lock on an object",
    kglgetmutex="[Kernel Generic Library cache manager] get mutex",
    kglgetsessionuol="[Kernel Generic Library cache manager] obtain location for AOL in KKSSP",
    kglgetso="[Kernel Generic Library cache manager] get state object",
    kglgfc="[Kernel Generic Library cache manager] lock and pin an object for the duration of a call and takes text input parameters",
    kglgob="[Kernel Generic Library cache manager] get an objected locked and pinned using fields set in the KGL descriptor",
    kglhal="[Kernel Generic Library cache manager] called after kglhin to allocate memory for a heap",
    kglhap="[Kernel Generic Library cache manager] called after kglhin to allocate memory for a heap",
    kglhd="[Kernel Generic Library cache manager] object handle",
    kglhdal="[Kernel Generic Library cache manager] object handle allocate",
    kglhdd="[Kernel Generic Library cache manager] object handle deallocate",
    kglhdda="[Kernel Generic Library cache manager] object handle deallocate a",
    kglhdgc="[Kernel Generic Library cache manager] object handle get child(?)",
    kglhdgh="[Kernel Generic Library cache manager] object handle get handle",
    kglhdgn="[Kernel Generic Library cache manager] object handle get new(?)",
    kglhdi="[Kernel Generic Library cache manager] object handle increase version count",
    kglheapinitializeinternalfl="[Kernel Generic Library cache manager] initialize heap allocation",
    kglhfr="[Kernel Generic Library cache manager] free the memory for a heap that used to pin a KGL object",
    kglhin="[Kernel Generic Library cache manager] initialize the heap before memory can be allocated for pinning the heap for an loading object",
    kglhpd="[Kernel Generic Library cache manager] heap deallocate",
    kglhpn="[Kernel Generic Library cache manager] heap pin",
    kglhup="[Kernel Generic Library cache manager] heap update",
    kglic="[Kernel Generic Library cache manager] ??",
    kgligi="[Kernel Generic Library cache manager] ??",
    kglini="[Kernel Generic Library cache manager] mark a KGL object as having been initialized once heap 0 has been loaded",
    kglkep="[Kernel Generic Library cache manager] keep objects pinned in memory permanently",
    kgllcu="[Kernel Generic Library cache manager] latch cleanup for the library cache and pin latches",
    kgllk="[Kernel Generic Library cache manager] library cache lock",
    kgllk1="[Kernel Generic Library cache manager] reset the locked reference count to 1",
    kgllka="[Kernel Generic Library cache manager] lock a previously locked object again",
    kgllkal="[Kernel Generic Library cache manager] reset the reference lock count to 1",
    kgllkdl="[Kernel Generic Library cache manager] library cache lock delete",
    kgllkds="[Kernel Generic Library cache manager] library cache lock delete state object",
    kglll="[Kernel Generic Library cache manager] load lock",
    kglllal="[Kernel Generic Library cache manager] load lock allocate",
    kgllldl="[Kernel Generic Library cache manager] load lock delete",
    kgllock="[Kernel Generic Library cache manager] library cache lock",
    kgllockwait="[Kernel Generic Library cache manager] ??",
    kglob="[Kernel Generic Library cache manager] object",
    kglobal="[Kernel Generic Library cache manager] object allocate",
    kglobcl="[Kernel Generic Library cache manager] object clear all tables",
    kglobf0="[Kernel Generic Library cache manager] object free heap/data block 0 of an object",
    kglobfr="[Kernel Generic Library cache manager] object free all heaps (except data block 0's) of an object",
    kglobld="[Kernel Generic Library cache manager] object load",
    kglobpn="[Kernel Generic Library cache manager] object pin heaps and load data pieces",
    kglpim="[Kernel Generic Library cache manager] pin and load more heaps",
    kglpin="[Kernel Generic Library cache manager] pin heaps and load data pieces of an object",
    kglpinso="[Kernel Generic Library cache manager] pin SO",
    kglpn="[Kernel Generic Library cache manager] pin",
    kglpnal="[Kernel Generic Library cache manager] pin allocate",
    kglpnc="[Kernel Generic Library cache manager] pin heaps and load data pieces of a cursor object",
    kglpnck="[Kernel Generic Library cache manager] pin heaps and load data pieces of a cursor object check if latch is held",
    kglpndl="[Kernel Generic Library cache manager] pin delete data heaps",
    kglpnds="[Kernel Generic Library cache manager] pin delete state object",
    kglpnm="[Kernel Generic Library cache manager] pin more heaps after the object has already been pinned if the object is being loaded",
    kglpnmi="[Kernel Generic Library cache manager] pin migration",
    kglpnp="[Kernel Generic Library cache manager] pin heaps and load data for stored procedures for execution",
    kglprg="[Kernel Generic Library cache manager] remove individual heaps (except heap 0) may no longer be required of a KGL object",
    kglpur="[Kernel Generic Library cache manager] purge the entire KGL object from cache once the pin is released",
    kglpurge="[Kernel Generic Library cache manager] CTXSYS.DRIXMD.KGLPURGE_CALLOUT(DR$LIB)",
    kglr="[Kernel Generic Library Remote] ",
    kglrddsc="[Kernel Generic Library Remote] describe callback function",
    kglrds="[Kernel Generic Library Remote] describe a remote object",
    kglre="[Kernel Generic Library Remote] release the object unconditionally",
    kglrfcl="[Kernel Generic Library Remote] reference clear",
    kglrla="[Kernel Generic Library Remote] free all locks held under a particular state-object (or persistency)",
    kglrls="[Kernel Generic Library Remote] decrements the reference count by 1 and only frees the object if the count falls to 0",
    kglsec="[Kernel Generic Library cache manager] signal error code",
    kglshu="[Kernel Generic Library cache manager] ??",
    kglsim="[Kernel Generic Library cache manager] simulator (library cache advise)",
    kglsscn="[Kernel Generic Library cache manager] scan a loaded set invoking a supplied callback for each element",
    kglssr="[Kernel Generic Library cache manager] session state remove",
    kglsta="[Kernel Generic Library cache manager] set the status of an object (valid, invalid, compilation errors, unauthorized, etc)",
    kglsts="[Kernel Generic Library cache manager] set the new timestamp if an KGL object is being modified",
    kgltba="[Kernel Generic Library cache manager] child cursor table?",
    kgluka="[Kernel Generic Library cache manager] undo all keeping object pinned in memory",
    kglukp="[Kernel Generic Library cache manager] undo keeping a single object pinned in memory",
    kglunlock="[Kernel Generic Library cache manager] library cache unlock",
    kglunp="[Kernel Generic Library cache manager] decrements the reference pin count by 1 and releases the pin if the count falls to 0",
    kglunpin="[Kernel Generic Library cache manager] release pin",
    kglunpn="[Kernel Generic Library cache manager] free all pins of an KGL object",
    kglupd="[Kernel Generic Library cache manager] called when an object is being created/modified",
    kglupn="[Kernel Generic Library cache manager] decrements the pin reference count by 1 and releases the pin if the count falls to 0",
    kglver="[Kernel Generic Library cache manager] verify a remote KGL object when it was loaded into the cache of the local database and then it wasn't used for a short while",
    kgm="[Kernel Generic inter-language Method Services]",
    kgmexcb="[Kernel Generic inter-language Method Services] execution callback",
    kgmexch="[Kernel Generic inter-language Method Services] execute by compilation handle",
    kgmexec="[Kernel Generic inter-language Method Services] execute",
    kgmexsc="[Kernel Generic inter-language Method Services] execute call with SCD (used only by PLSQL)",
    kgmgaicn="[Kernel Generic inter-language Method Services] generic arguments input conversions",
    kgmgaocn="[Kernel Generic inter-language Method Services] generic arguments output conversions",
    kgmgchd="[Kernel Generic inter-language Method Services] get compilation handle",
    kgmimio="[Kernel Generic inter-language Method Services] implementation fro mmethod instantion object",
    kgmtconv="[Kernel Generic inter-language Method Services] performconversion",
    kgmtomib="[Kernel Generic inter-language Method Services] image to object (named types)",
    kgnfs="[Kernel Generic Network File System]",
    kgnfs_wat="[Kernel Generic Network File System] wait",
    kgnfswat="[Kernel Generic Network File System] wait",
    kgodm="[Kernel Generic] oracle disk manager",
    kgodm_io="[Kernel Generic] oracle disk manager IO",
    kgodm_wait_ios="[Kernel Generic] oracle disk manager wait on IOs",
    kgs="[Kernel Generic Service] ",
    kgsc="[Kernel Generic Service: Cache, Session Cache for Cursors]",
    kgsccachecursor="[Kernel Generic Service: Cache, Session Cache for Cursors] add cursor to cache",
    kgsccomputehash="[Kernel Generic Service: Cache, Session Cache for Cursors] compute hash value for cursor",
    kgscfindcursor="[Kernel Generic Service: Cache, Session Cache for Cursors] search cursor in the cache",
    kgscfindfreeslot="[Kernel Generic Service: Cache, Session Cache for Cursors] find a free slot in the cache",
    kgsd="[Kernel Generic Service] debugging",
    kgsf="[Kernel Generic Service] Functions",
    kgsk="[Kernel Generic Service: Resource Manager]",
    kgskbwt="[Kernel Generic Service: Resource Manager] VTs beginning a wait",
    kgskchk="[Kernel Generic Service: Resource Manager] check resource state for RM",
    kgskckcpuswch="[Kernel Generic Service: Resource Manager] check cpu switches",
    kgskdecr="[Kernel Generic Service: Resource Manager] decrease",
    kgskdecrstat1="[Kernel Generic Service: Resource Manager] decrease statistics",
    kgskentsch="[Kernel Generic Service: Resource Manager] enter scheduler",
    kgskewt="[Kernel Generic Service: Resource Manager] VTs ending a wait",
    kgskewtint="[Kernel Generic Service: Resource Manager] end wait internal",
    kgskexitsch="[Kernel Generic Service: Resource Manager] exit scheduler",
    kgsklheld="[Kernel Generic Service: Resource Manager] lock held",
    kgskmodruncnt="[Kernel Generic Service: Resource Manager] modify run count",
    kgskrunnextint="[Kernel Generic Service: Resource Manager] run next int(?)",
    kgskthbwt="[Kernel Generic Service: Resource Manager] thread begin wait",
    kgskthewt="[Kernel Generic Service: Resource Manager] thread end wait",
    kgskthrexit="[Kernel Generic Service: Resource Manager] thread exit",
    kgskthrrun="[Kernel Generic Service: Resource Manager] new VTs",
    kgskupdbalance="[Kernel Generic Service: Resource Manager] update balance",
    kgskupdcputm="[Kernel Generic Service: Resource Manager] update cpu time",
    kgskusedynshares="[Kernel Generic Service: Resource Manager] use dynamic shares",
    kgskuselowthreshold="[Kernel Generic Service: Resource Manager] use low threshold",
    kgss="[Kernel Generic Service State object manager] ",
    kgstm="[Kernel Generic Service] time",
    kgur="[Kernel Generic] recovery",
    kgx="[Kernel Generic Mutex/Communication]",
    kgxallocwherestats="[Kernel Generic Mutex/Communication] mutex set statistics for wait",
    kgxaoldump="[Kernel Generic Mutex/Communication] mutex dump AOL",
    kgxaolinit="[Kernel Generic Mutex/Communication] mutex initialize AOL",
    kgxcleanup="[Kernel Generic Mutex/Communication] mutex cleanup",
    kgxdecrement="[Kernel Generic Mutex/Communication] mutex decrement RefCnt",
    kgxdecrementexamine="[Kernel Generic Mutex/Communication] mutex decrement RefCnt and set E mode",
    kgxendexamine="[Kernel Generic Mutex/Communication] mutex clear E mode",
    kgxexamine="[Kernel Generic Mutex/Communication] mutex set E mode",
    kgxexclusive="[Kernel Generic Mutex/Communication] mutex get in X mode",
    kgxexclusive2shared="[Kernel Generic Mutex/Communication] mutex get in X mode downgrade X to S mode",
    kgxexclusivenowait="[Kernel Generic Mutex/Communication] mutex get in X mode nowait",
    kgxg="[Kernel Generic Mutex/Communication] node monitor/cluster group services layer",
    kgxgncin="[Kernel Generic Mutex/Communication] node monitor/cluster group services layer group membership cssd initiate",
    kgxincrement="[Kernel Generic Mutex/Communication] mutex increment RefCnt",
    kgxincrementexamine="[Kernel Generic Mutex/Communication] mutex increment RefCnt and set E mode",
    kgxlatchcleanup="[Kernel Generic Mutex/Communication] mutex cleanup latch(?)",
    kgxlongexclusive="[Kernel Generic Mutex/Communication] mutex get in long exclusive mode",
    kgxmodifyrefcount="[Kernel Generic Mutex/Communication] mutex modify RefCnt",
    kgxmutexhng="[Kernel Generic Mutex/Communication] mutex hang(?)",
    kgxpgainitialize="[Kernel Generic Mutex/Communication] mutex initialize PGA",
    kgxregisterclient="[Kernel Generic Mutex/Communication] mutex register client(?)",
    kgxrelease="[Kernel Generic Mutex/Communication] mutex release",
    kgxsgainitialize="[Kernel Generic Mutex/Communication] mutex initialize SGA",
    kgxshared="[Kernel Generic Mutex/Communication] mutex get in S mode",
    kgxsharedexamine="[Kernel Generic Mutex/Communication] mutex get in S mode sharedexamine mode",
    kgxsharednowait="[Kernel Generic Mutex/Communication] mutex get in S mode nowait",
    kgxsharednowaitexamine="[Kernel Generic Mutex/Communication] mutex get in S mode nowait sharedexamine mode",
    kgxwait="[Kernel Generic Mutex/Communication] mutex register wait and sleep",
    khpro="kernel hierarchical profiler",
    khproanalyze="kernel hierarchical profiler DBMS_HPROF.KHPROANALYZE",
    khprostart="kernel hierarchical profiler DBMS_HPROF.KHPROSTART",
    khprostop="kernel hierarchical profiler DBMS_HPROF.KHPROSTOP",
    kidievl_scr="[ORDS] ORDSYS.ORDIMAGESIGNATURE.EVALUATESCORE(ORDIMLIBT)",
    kidievlscr="[ORDS] ORDSYS.ORDIMAGESIGNATURE.EVALUATESCORE(ORDIMLIBT)",
    kidiext_feature="[ORDS] ORDSYS.ORDIMGSI_PKG.EXTRACT_ALLPROPERTIES_FUNC(ORDIMLIBT)",
    kidiextfeature="[ORDS] ORDSYS.ORDIMGSI_PKG.EXTRACT_ALLPROPERTIES_FUNC(ORDIMLIBT)",
    kidigen_sig="[ORDS] ORDSYS.ORDIMGSIG_PKG.GENERATESIGNATUREFUNC(ORDIMLIBT)",
    kidigensig="[ORDS] ORDSYS.ORDIMGSIG_PKG.GENERATESIGNATUREFUNC(ORDIMLIBT)",
    kidipcp="[ORDS] ORDSYS.ORDIMGEXTCODEC_PKG.MMTK_EXT_PROCESS(ORDIMLIBS)",
    kidipro="[ORDS] ORDSYS.ORDIMGEXTCODEC_PKG.MMTK_GETPROPERTIES(ORDIMLIBS)",
    kidiscr_avgcol="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscr_col="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscr_poscol="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscr_tex="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscravgcol="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscrcol="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscrposcol="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidiscrtex="[ORDS] ORDSYS.ORDIMGSI_PKG.GETSCORE(ORDIMLIBT)",
    kidzmsg_raise2="[ORDS] ORDSYS.ORDIMERRORCODES.PVTRAISEEXCEPTIONWITHMSG2(ORDIMLIBT)",
    kidzmsg_raise3="[ORDS] ORDSYS.ORDERROR.RAISE(ORDIMLIBT)",
    kidzmsgraise2="[ORDS] ORDSYS.ORDIMERRORCODES.PVTRAISEEXCEPTIONWITHMSG2(ORDIMLIBT)",
    kidzmsgraise3="[ORDS] ORDSYS.ORDERROR.RAISE(ORDIMLIBT)",
    kill="kernel ??",
    kj="[Kernel Lock Management] ",
    kjac="[Kernel Lock Management: Application Continuity] ",
    kjac11203monitortxnpls="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjac_11203_monitor_txn_pls="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjac_begin_replay="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.BEGIN_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjac_clr_failpoint_pls="[Kernel Lock Management: Application Continuity] SYS.DBMS_TG_DBG.I_CLEAR_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjac_end_replay="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.END_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjac_force_outcome_pls="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT.INT_FORCE_OUTCOME(DBMS_APP_CONT_LIB)",
    kjac_monitor_txn="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjac_set_failpoint_pls="[Kernel Lock Management: Application Continuity] SYS.DBMS_TG_DBG.I_SET_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjac_set_session_drainable_pls="[Kernel Lock Management: Application Continuity] SYS.DBMS_TG_DBG.I_SET_SESSION_DRAINABLE(DBMS_TG_DBG_LIB)",
    kjacbeginreplay="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.BEGIN_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjacclrfailpointpls="[Kernel Lock Management: Application Continuity] SYS.DBMS_TG_DBG.I_CLEAR_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjacendreplay="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.END_REPLAY(DBMS_APP_CONT_PRVT_LIB)",
    kjacforceoutcomepls="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT.INT_FORCE_OUTCOME(DBMS_APP_CONT_LIB)",
    kjacmonitortxn="[Kernel Lock Management: Application Continuity] SYS.DBMS_APP_CONT_PRVT.MONITOR_TXN(DBMS_APP_CONT_PRVT_LIB)",
    kjacsetfailpointpls="[Kernel Lock Management: Application Continuity] SYS.DBMS_TG_DBG.I_SET_FAILPOINT(DBMS_TG_DBG_LIB)",
    kjacsetsessiondrainablepls="[Kernel Lock Management: Application Continuity] SYS.DBMS_TG_DBG.I_SET_SESSION_DRAINABLE(DBMS_TG_DBG_LIB)",
    kjb="[Kernel Lock Global Cache Service] ",
    kjbcr="[Kernel Lock Global Cache Service] consistent read",
    kjbcrconvert="[Kernel Lock Global Cache Service] consistent read convert LE lock",
    kjbcropen="[Kernel Lock Global Cache Service] consistent read open LE lock",
    kjbfp="[Kernel Lock Global Cache Service] persistent cluster flash cache",
    kjbl="[Kernel Lock Global Cache Service] lock table",
    kjblcrcbk="[Kernel Lock Global Cache Service] lock table ??",
    kjblpcr="[Kernel Lock Global Cache Service] lock table ??",
    kjbmpbast="[Kernel Lock Global Cache Service] ??",
    kjbmpocr="[Kernel Lock Global Cache Service] master<-client (receive) process open convert request",
    kjbr="[Kernel Lock Global Cache Service Resource Table]",
    kjbrpread="[Kernel Lock Global Cache Service Resource Table] pred read request at master",
    kjbrref="[Kernel Lock Global Cache Service Resource Table]ref - kernel lock management global cache service resource table ??",
    kjc="[Kernel Lock Communication] ",
    kjci="[Kernel Lock Communication] cross instance call",
    kjcsrmg="[Kernel Lock Communication] ??",
    kjctr_pbmsg="[Kernel Lock Communication] process batch message",
    kjctr_rksxp="[Kernel Lock Communication] read message from KSXP service",
    kjctr_watq="[Kernel Lock Communication] read messages from wait queue",
    kjctrcv="[Kernel Lock Communication] receive messages",
    kjcts_dmpbmsg="[Kernel Lock Communication] dump batch message content",
    kjctsrmg="[Kernel Lock Communication] receive a vector of messages",
    kjcvcvd="[Kernel Lock Communication] deadlock detection routines",
    kjdd="[Kernel Lock Management] deadlock detection",
    kjdr="[Kernel Lock Management] dynamic remastering",
    kjdrbnftpoll="[Kernel Lock Management] ??",
    kjfcln="[Kernel Lock Management] ??",
    kjfcrfg="[Kernel Lock Management] ??",
    kjfcshut="[Kernel Lock Management] ??",
    kjfm="[Kernel Lock Management] heartbeat monitoring",
    kjfz="[Kernel Lock Management] DLM-client freeze/unfreeze",
    kjhn="[Kernel Lock Management:HA] ",
    kjhn_get_alert_severity_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_SEVERITY",
    kjhn_get_cardinality_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_CARDINALITY",
    kjhn_get_db_domain_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_DB_DOMAIN",
    kjhn_get_db_unique_name_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_DB_UNIQUE_NAME",
    kjhn_get_event_time_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_EVENT_TIME0",
    kjhn_get_host_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_HOST",
    kjhn_get_incarnation_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_INCARNATION",
    kjhn_get_instance_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_INSTANCE",
    kjhn_get_reason_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_REASON",
    kjhn_get_service_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_SERVICE",
    kjhn_get_version_plsql="[Kernel Lock Management:HA] DBMS_HA_ALERTS.GET_VERSION",
    kjk="[Kernel Lock Management] RAC kernel accelerator",
    kjl="[Kernel Lock Management Lock]",
    kjlrem="[Kernel Lock Management Lock] remove lock from all queues and free it",
    kjlrlr="[Kernel Lock Management Lock] remove lock from resource queue",
    kjlsod="[Kernel Lock Management Lock] state object delete",
    kjlt="[Kernel Lock Management Lock] table",
    kjm="[Kernel Lock Management: RAC multiple LMS] ",
    kjmpmsg="[Kernel Lock Management: RAC multiple LMS] process the message",
    kjmpmsgi="[Kernel Lock Management: RAC multiple LMS] ??",
    kjmsm="[Kernel Lock Management: RAC multiple LMS] main action callback (LMS main loop)",
    kjmxmpm="[Kernel Lock Management: RAC multiple LMS] ??",
    kjoe="[Kernel Lock Management] DLM omni enqueue service",
    kjpfr="[Kernel Lock Management] process free",
    kjpsod="[Kernel Lock Management] state object delete, disconnect from DLM",
    kjpt="[Kernel Lock Management] processes",
    kjr="[Kernel Lock Management] resource table",
    kjsc="[Kernel Lock Management] RAC global stats",
    kjskcvl="[Kernel Lock Management] main cache convert routine",
    kju="[Kernel Lock Management] global enqueue service",
    kjual="[Kernel Lock Management] global enqueue service allocate, connection to dlm",
    kjucv="[Kernel Lock Management] global enqueue service asynchronous convert a lock",
    kjucvl="[Kernel Lock Management] global enqueue service asynchronous convert a lock convert a lock",
    kjuscl="[Kernel Lock Management] global enqueue service synchronous close a lock",
    kjuscv="[Kernel Lock Management] global enqueue service synchronous convert a lock",
    kjusuc="[Kernel Lock Management] global enqueue service synchronous open and convert a lock",
    kjuuc="[Kernel Lock Management] global enqueue service asynchronous open and convert a lock",
    kjx="[Kernel Lock Management] cross instance",
    kjxg="[Kernel Lock Management] cross instance cluster group services",
    kjxgr="[Kernel Lock Management] cross instance cluster group services instance membership recovery",
    kjz="[Kernel Lock Management DIAG]",
    kjzc="[Kernel Lock Management DIAG] communication layer",
    kjzd="[Kernel Lock Management DIAG] main layer",
    kjzdattdlm="[Kernel Lock Management DIAG] main layer attach to distributed lock manager",
    kjzdicrshnfy="[Kernel Lock Management DIAG] main layer ??",
    kjzdpcrshnfy="[Kernel Lock Management DIAG] main layer ??",
    kjzdssdmp="[Kernel Lock Management DIAG] main layer ??",
    kjzduptcctx="[Kernel Lock Management DIAG] main layer ??",
    kjzf="[Kernel Lock Management DIAG] flow control layer",
    kjzg="[Kernel Lock Management DIAG] group services layer",
    kjzh="[Kernel Lock Management DIAG] API layer",
    kjzhgigblk="[Kernel Lock Management DIAG] API layer ??",
    kjzhgigfreep="[Kernel Lock Management DIAG] API layer ??",
    kjzm="[Kernel Lock Management DIAG] membership layer",
    kjzn="[Kernel Lock Management DIAG] node layer",
    kjznpsp="[Kernel Lock Management DIAG node layer] SYS.DBMS_HANG_MANAGER.SET_PARAM_INTERNAL(DBMS_HANG_MANAGER_LIB)",
    kk="[Kernel Compile] ",
    kkae="[Kernel Compile] editions",
    kkae_reset_edition_always_icd="[Kernel Compile] SYS.DBMS_SESSION.KKAE_RESET_EDITION_ALWAYS_ICD(C)",
    kkae_reset_edition_icd="[Kernel Compile] SYS.DBMS_SESSION.KKAE_RESET_EDITION_IC(C)",
    kkae_set_edition_icd="[Kernel Compile] SYS.DBMS_SESSION.KKAE_SET_EDITION_ICD(C)",
    kkaereseteditionalwaysicd="[Kernel Compile] SYS.DBMS_SESSION.KKAE_RESET_EDITION_ALWAYS_ICD(C)",
    kkaereseteditionicd="[Kernel Compile] SYS.DBMS_SESSION.KKAE_RESET_EDITION_IC(C)",
    kkaeseteditionicd="[Kernel Compile] SYS.DBMS_SESSION.KKAE_SET_EDITION_ICD(C)",
    kkb="[Kernel Compilation taBles] ",
    kkbdgdl_dll_get_dml_lock="[Kernel Compilation taBles] lock the user and Get the User Cache entry",
    kkbl="[Kernel Compilation taBles lob] ",
    kkbltrfr="[Kernel Compilation taBles lob] ??",
    kkbltrseg="[Kernel Compilation taBles lob] ??",
    kkbn="[Kernel Compilation taBles] nested table",
    kkbndrp="[Kernel Compilation taBles] nested table drop storage tables for nested table columns",
    kkbnftn="[Kernel Compilation taBles] nested table format table for nested table",
    kkbo="[Kernel Compilation taBle with Object] ",
    kkbtrn="[Kernel Compilation taBles] ??",
    kkcn="[Kernel Compile Streams/Advanced Queuing Connection]",
    kkcnregapply="[Kernel Compile Streams/Advanced Queuing Connection]SYS.DBMS_AQ.REGOP_APPLY(DBMS_AQ_LIB)",
    kkcnrini="[Kernel Compile Streams/Advanced Queuing Connection] ??",
    kkcnrstatfind="[Kernel Compile Streams/Advanced Queuing Connection] ??",
    kkcnrstatini="[Kernel Compile Streams/Advanced Queuing Connection] ??",
    kkcnsubl="[Kernel Compile Streams/Advanced Queuing Connection] ??",
    kkcnsubread="[Kernel Compile Streams/Advanced Queuing Connection] ??",
    kkcnsuctx="[Kernel Compile Streams/Advanced Queuing Connection] set user context",
    kkdc="[Kernel Compilation Dictionary support for Constraints] ",
    kkdcac="[Kernel Compilation Dictionary support for Constraints] takes a table name as input and uses the obj# to get the constraint name for each constraint associated.",
    kkdcacr="[Kernel Compilation Dictionary support for Constraints] takes a table name as input and uses the obj# to get the constraint name for each constraint associated. check and referential constrains",
    kkdcico="[Kernel Compilation Dictionary support for Constraints] insert constraint definition",
    kkdl="[Kernel Compilation Dictionary Lookup] ",
    kkdlacd="[Kernel Compilation Dictionary Lookup] get all column definitions",
    kkdlgetbaseuser="[Kernel Compilation Dictionary Lookup] translate ownerid to a name",
    kkdlgetuserid="[Kernel Compilation Dictionary Lookup] get user id",
    kkdlgun="[Kernel Compilation Dictionary Lookup] get user name (translate ownerid to a name)",
    kkdliac="[Kernel Compilation Dictionary Lookup] ??",
    kkdllk="[Kernel Compilation Dictionary Lookup] lock an object",
    kkdo="[Kernel Compilation Dictionary support for Objects] ",
    kkdoloi="[Kernel Compilation Dictionary support for Objects] load objects related information",
    kkdxupdatecolinfo="[Kernel Compile] ??",
    kke="[Kernel Compile query Engine cost engine] ",
    kkeadd="[Kernel Compile query Engine cost engine] add",
    kkeadj="[Kernel Compile query Engine cost engine] adjust",
    kkeapr="[Kernel Compile query Engine cost engine] analyze predicates for optimization returns stat ptr",
    kkeasl="[Kernel Compile query Engine cost engine] process an AND chain of predicates",
    kkecdn="[Kernel Compile query Engine cost engine] determine cardinality of a table given single table predicates",
    kkecgetstatid="[Kernel Compile query Engine cost engine] SYS.DBMS_STATS_INTERNAL.GET_CALIB_OPID_CALLOUT(DBMS_STATS_LIB)",
    kkecpst="[Kernel Compile query Engine cost engine] create copy of column statistics in compile time memory",
    kkecresetvalue="[Kernel Compile query Engine cost engine] SYS.DBMS_STATS_INTERNAL.DELETE_PROC_RATE_CALLOUT(DBMS_STATS_LIB)",
    kkecsetvalue="[Kernel Compile query Engine cost engine]SYS.DBMS_STATS_INTERNAL.SET_PROCESSING_RATE_CALLOUT(DBMS_STATS_LIB)",
    kkeds="[Kernel Compile query Engine cost engine] dynamic sampling (ADS)",
    kkegvl="[Kernel Compile query Engine cost engine] get a value from an opndef and normalize it for cost",
    kkehrd="[Kernel Compile query Engine cost engine] get column statistics for a table",
    kkeidx="[Kernel Compile query Engine cost engine] index",
    kkejcd="[Kernel Compile query Engine cost engine] returns cardinality of a join between to tables",
    kkeosl="[Kernel Compile query Engine cost engine] process an OR chain of predicates",
    kkepsl="[Kernel Compile query Engine cost engine] selectivity of a single predicate",
    kkercs="[Kernel Compile query Engine cost engine] read column statistics for an object",
    kkescreatecache="[Kernel Compile query Engine cost engine] create cache for statistics",
    kkesioscalefactor="[Kernel Compile query Engine cost engine] calculate the factor for converting the number of blocks to IO cost",
    kkesort="[Kernel Compile query Engine cost engine] sorting",
    kkesortcosts="[Kernel Compile query Engine cost engine] sorting calculate sort (IO) cost",
    kkesortcpucost="[Kernel Compile query Engine cost engine] sorting calculate sort CPU cost",
    kkesscaleio="[Kernel Compile query Engine cost engine] calculate IO cost based on the number of blocks",
    kkest="[Kernel Compile query Engine cost engine] statistics",
    kketac="[Kernel Compile query Engine cost engine] table access cost(?)",
    kketbscan="[Kernel Compile query Engine cost engine] table scan",
    kketbscancpucost="[Kernel Compile query Engine cost engine] table scan calculate cost of CPU",
    kketbscanimc="[Kernel Compile query Engine cost engine] table scan in-memory column store",
    kketbscanimccpucost="[Kernel Compile query Engine cost engine] table scan in-memory column store calculate cost of CPU",
    kketbscanimciocost="[Kernel Compile query Engine cost engine] table scan in-memory column store calculate cost of IO",
    kketbscaniocost="[Kernel Compile query Engine cost engine] table scan calculate cost of IO",
    kkevcs="[Kernel Compile query Engine cost engine] set view column stats for underlying column",
    kkevp="[Kernel Compile query Engine cost engine] vector processing",
    kkfd="[Kernel Compile] fast dataflow (PQ DFO)",
    kkfi="[Kernel Compile Optimizer] virtual column/indexes",
    kkfr="[Kernel Compile] Kernel Compile Fast (parallel) Rowid range manager",
    kkfs="[Kernel Compile] Kernel Compile Fast SQL generator for DFO",
    kkhf="[Kernel Compile] hash join file and memory management",
    kkhr="[Kernel Compile] hash join row management",
    kkj="[Kernel Compiletime Job queue] ",
    kkjbgd="[Kernel Compiletime Job queue] SYS.DBMS_JOB.KKJBGD(C)",
    kkjdva="[Kernel Compiletime Job queue] SYS.DBMS_IJOB.KKJDVA(C)",
    kkjenv="[Kernel Compiletime Job queue] SYS.DBMS_JOB.KKJENV(C)",
    kkjexi="[Kernel Compiletime Job queue] SYS.DBMS_IJOB.KKJEXI(C)",
    kkjges="[Kernel Compiletime Job queue] SYS.DBMS_IJOB.KKJGES(C)",
    kkjp="[Kernel Compiletime Job queue] package",
    kkjpru="[Kernel Compiletime Job queue] SYS.DBMS_IJOB.KKJPRU(C)",
    kkjses="[Kernel Compiletime Job queue] SYS.DBMS_IJOB.KKJSES(C)",
    kkjspc="[Kernel Compiletime Job queue] SYS.DBMS_IJOB.KKJSPC(C)",
    kkkibgnsqlblk="[Kernel Compile] SYS.DBMS_RMIN.RM$_BGN_SQLBLK(DBMS_RMGR_LIB)",
    kkkicalibrateio="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_CALIBRATE_IO(DBMS_RMGR_LIB)",
    kkkicancelsql="[Kernel Compile] SYS.DBMS_SESSION.KKKICANCELSQL(C)",
    kkkickcmp="[Kernel Compile] SYS.DBMS_PRVTRMIE.CHECK_COMPATIBILITY(DBMS_RMGR_LIB)",
    kkkiclrparea="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_CLRPAREA(DBMS_RMGR_LIB)",
    kkkicrtcategory="[Kernel Compile] SYS.DBMS_RMIN.RM$_CUP_CATEGORY(DBMS_RMGR_LIB)",
    kkkicrtgroup="[Kernel Compile] SYS.DBMS_RMIN.RM$_CUP_GROUP(DBMS_RMGR_LIB)",
    kkkicrtparea="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_CRTPAREA(DBMS_RMGR_LIB)",
    kkkicrtpd="[Kernel Compile] SYS.DBMS_RMIN.RM$_CUP_PLAN_DIRECTIVE(DBMS_RMGR_LIB)",
    kkkicrtplan="[Kernel Compile] SYS.DBMS_RMIN.RM$_CUP_PLAN(DBMS_RMGR_LIB)",
    kkkicrtspmap="[Kernel Compile] SYS.DBMS_RMIN.RM$_CUP_STORAGE_POOL_MAPPING(DBMS_RMGR_LIB)",
    kkkidrpcategory="[Kernel Compile] SYS.DBMS_RMIN.RM$_DRP_CATEGORY(DBMS_RMGR_LIB)",
    kkkidrpgroup="[Kernel Compile] SYS.DBMS_RMIN.RM$_DRP_GROUP(DBMS_RMGR_LIB)",
    kkkidrppd="[Kernel Compile] SYS.DBMS_RMIN.RM$_DRP_PLAN_DIRECTIVE(DBMS_RMGR_LIB)",
    kkkidrpplan="[Kernel Compile] SYS.DBMS_RMIN.RM$_DRP_PLAN(DBMS_RMGR_LIB)",
    kkkidrpplancsd="[Kernel Compile] SYS.DBMS_RMIN.RM$_DRP_PLAN_CSD(DBMS_RMGR_LIB)",
    kkkiendsqlblk="[Kernel Compile] SYS.DBMS_RMIN.RM$_END_SQLBLK(DBMS_RMGR_LIB)",
    kkkiget_pdb_enabled="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_GET_PDB_ENABLED(DBMS_RMGR_LIB)",
    kkkiget_root_pdb="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_GET_ROOT_PDB(DBMS_RMGR_LIB)",
    kkkigetpdbenabled="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_GET_PDB_ENABLED(DBMS_RMGR_LIB)",
    kkkigetrootpdb="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_GET_ROOT_PDB(DBMS_RMGR_LIB)",
    kkkimappriority="[Kernel Compile] SYS.DBMS_RMIN.RM$_CONSUMER_GROUP_MAPPING_PRI(DBMS_RMGR_LIB)",
    kkkiprpriv="[Kernel Compile] SYS.DBMS_RMIN.RM$_PROCESS_PRIV(DBMS_RMGR_LIB)",
    kkkirunqdpstmt="[Kernel Compile] SYS.DBMS_RMIN.RM$_RUN_QUEUED_PARALLEL_STMT(DBMS_RMGR_LIB)",
    kkkisetcap="[Kernel Compile] SYS.DBMS_RMIN.RM$_SET_CAPABILITY(DBMS_RMGR_LIB)",
    kkkisetgrpmap="[Kernel Compile] SYS.DBMS_RMIN.RM$_SET_CONSUMER_GROUP_MAPPING(DBMS_RMGR_LIB)",
    kkkiseticap="[Kernel Compile] SYS.DBMS_RMIN.RM$_SET_INSTANCE_CAPABILITY(DBMS_RMGR_LIB)",
    kkkisetinigrp="[Kernel Compile] SYS.DBMS_RMIN.RM$_SET_INITIAL_GROUP_INT(DBMS_RMGR_LIB)",
    kkkisetmand="[Kernel Compile] SYS.DBMS_RMIN.RM$_SET_MANDATORY(DBMS_RMGR_LIB)",
    kkkisubparea="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_SUBPAREA_EXT(DBMS_RMGR_LIB)",
    kkkiswtchgrpssn="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_SWTCH_SESSION_GROUP_INT(DBMS_RMGR_LIB)",
    kkkiswtchgrpusr="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_SWTCH_USR_GROUP_INT(DBMS_RMGR_LIB)",
    kkkiswtchinvgrp="[Kernel Compile] SYS.DBMS_SESSION.KKKISWTCHINVGRP(C)",
    kkkiupgrpmap="[Kernel Compile] SYS.DBMS_RMIN.RM$_UP_CONSUMER_GROUP_MAPPINGS(DBMS_RMGR_LIB)",
    kkkiverify_parea_act="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_PENDING_AREA_ACT(DBMS_RMGR_LIB)",
    kkkiverify_parse_id="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_ID_PARSES(DBMS_RMGR_LIB)",
    kkkiverify_privileges="[Kernel Compile] SYS.DBMS_RMIN.RM$_VERIFY_PRIVILEGES(DBMS_RMGR_LIB)",
    kkkiverify_rm_feature="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_RM_FEATURE(DBMS_RMGR_LIB)",
    kkkiverify_root_pdb="[Kernel Compile] DBMS_RMIN_SYS.RM$_IS_ROOT_PDB",
    kkkiverify_str_in="[Kernel Compile] DBMS_RMIN_SYS.RM$_VERIFY_STR_IND_INT",
    kkkiverify_str_ind="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_STR_IND_INT(DBMS_RMGR_LIB)",
    kkkiverifypareaact="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_PENDING_AREA_ACT(DBMS_RMGR_LIB)",
    kkkiverifyparseid="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_ID_PARSES(DBMS_RMGR_LIB)",
    kkkiverifyprivileges="[Kernel Compile] SYS.DBMS_RMIN.RM$_VERIFY_PRIVILEGES(DBMS_RMGR_LIB)",
    kkkiverifyrmfeature="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_RM_FEATURE(DBMS_RMGR_LIB)",
    kkkiverifystrind="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VERIFY_STR_IND_INT(DBMS_RMGR_LIB)",
    kkkivldparea="[Kernel Compile] SYS.DBMS_RMIN_SYS.RM$_VLDPAREA_EXT(DBMS_RMGR_LIB)",
    kkm="[Kernel Compilation SQL seMantic analysis] ",
    kkmdel="[Kernel Compilation SQL seMantic analysis] extra semantic processes for deletes",
    kkmdrv="[Kernel Compilation SQL seMantic analysis] driver",
    kkmdrvend="[Kernel Compilation SQL seMantic analysis] ??",
    kkmevw="[Kernel Compilation SQL seMantic analysis] expand view",
    kkmpfcbk="[Kernel Compilation SQL seMantic analysis] process frodef callback",
    kkmpost="[Kernel Compilation SQL seMantic analysis] post processing",
    kkmqccr="[Kernel Compilation SQL seMantic analysis] query compile (memory) creation?",
    kkmupd="[Kernel Compilation SQL seMantic analysis] extra semantic processing for update",
    kkn="[kernel compile analyze] ",
    kkndgd="[kernel compile analyze] command Analyze Data Gathering Driver",
    kkndrv="[kernel compile analyze] command Analyze Driver",
    kknls="[kernel compile analyze] command Analyze Locks/Security",
    kknpat="[kernel compile analyze] command partition analyze table",
    kknpob="[kernel compile analyze] command partition object",
    kko="[Kernel Compile Optimizer] ",
    kkoaccsqf="[Kernel Compile Optimizer] adjust cardinality and cost for subquery filters",
    kkoads="[Kernel Compile Optimizer] active dynamic sampling (ADS)",
    kkoadscomputesqlid="[Kernel Compile Optimizer] active dynamic sampling (ADS) compute sqlid",
    kkoar="[Kernel Compile Optimizer] automatic (sql) reoptimisation",
    kkoasj="[Kernel Compile Optimizer] add semi-join function",
    kkoat="[Kernel Compile Optimizer] auto tuning optimizer",
    kkobmp="[Kernel Compile Optimizer] bitmap processing",
    kkocfb="[Kernel Compile Optimizer] cardinality feedback",
    kkocnp="[Kernel Compile Optimizer] cost next permutation",
    kkocpjoinqb="[Kernel Compile Optimizer] copy and join query block",
    kkocpqb="[Kernel Compile Optimizer] copy query block: copy a query block by reparsing its SQL text",
    kkocri="[Kernel Compile Optimizer] create index",
    kkocs="[Kernel Compile Optimizer] cursor sharing",
    kkoctx="[Kernel Compile Optimizer] setup context for optimizer",
    kkodp="[Kernel Compile Optimizer] AQP",
    kkoecp="[Kernel Compile Optimizer] evaluate constant predicate",
    kkogfp="[Kernel Compile Optimizer] get first permutation",
    kkoiqb="[Kernel Compile Optimizer] initialise query block",
    kkojnp="[Kernel Compile Optimizer] join order path",
    kkooqb="[Kernel Compile Optimizer] optimize query block",
    kkoorexpand="[Kernel Compile Optimizer] or expansion",
    kkopm="[Kernel Compile Optimizer] plan management",
    kkopmchecksmbupdate="[Kernel Compile Optimizer] plan management Check if updates to the Sql Management Base are pending",
    kkopq="[Kernel Compile Optimizer] parallel optimization",
    kkopqallocpqctx="[Kernel Compile Optimizer] parallel optimization allocate PQ context",
    kkopqinitdopcomputation="[Kernel Compile Optimizer] parallel optimization initialise DOP computation",
    kkopqisdegreepolicymanual="[Kernel Compile Optimizer] parallel optimization is degree policy manual",
    kkopqisdopcomputedorparallelhinted="[Kernel Compile Optimizer] parallel optimization is DOP computed or parallel hinted",
    kkoqbc="[Kernel Compile Optimizer] query block optimization start point",
    kkosbn="[Kernel Compile Optimizer] sort bitmap nodes",
    kkoshd="[Kernel Compile Optimizer] shard sql",
    kkostran="[Kernel Compile Optimizer] star transformation",
    kkotap="[Kernel Compile Optimizer] table access path",
    kkotsc="[Kernel Compile Optimizer] tablescan cost",
    kkp="[Kernel Compilation manager] ",
    kkpa="[Kernel Compilation manager] partitioning",
    kkpamfrange="[Kernel Compilation manager] partitioning ??",
    kkpamrefget="[Kernel Compilation manager] partitioning ??",
    kkpapbgetrange="[Kernel Compilation manager] partitioning ??",
    kkpapgrangeslvl="[Kernel Compilation manager] partitioning ??",
    kkpapiitopen="[Kernel Compilation manager] partitioning ??",
    kkpapitopen="[Kernel Compilation manager] partitioning ??",
    kkpcrt="[Kernel Compilation manager] create",
    kkpo="[Kernel Compilation of Partitioned Objects] ",
    kkpoc="[Kernel Compilation Partition Objects cursor Compile] ",
    kkpod="[Kernel Compilation Partitioned Objects Dictionary] ",
    kkq="[kernel compile query] ",
    kkqanj="[kernel compile query] ansi join",
    kkqbj="[kernel compile query] bushy join",
    kkqbjdrv="[kernel compile query] bushy join driver",
    kkqcby="[kernel compile query] connect by",
    kkqcls="[kernel compile query] subquery coalescing",
    kkqcs="[kernel compile query cost based query transformation]",
    kkqct="[kernel compile query cost based query transformation]",
    kkqctcosttransfqb="[kernel compile query cost based query transformation] transfer query block cost (?)",
    kkqctdrv="[kernel compile query cost based query transformation driver]",
    kkqctdrvbj="[kernel compile query cost based query transformation driver] bushy join",
    kkqctdrvcvm="[kernel compile query cost based query transformation driver] complex view merging",
    kkqctdrvdp="[kernel compile query cost based query transformation driver] distinct placement",
    kkqctdrvgbp="[kernel compile query cost based query transformation driver] group by placement",
    kkqctdrvit="[kernel compile query cost based query transformation driver] initiate cost-based transformation",
    kkqctdrvjf="[kernel compile query cost based query transformation driver] join filter",
    kkqctdrvjppd="[kernel compile query cost based query transformation driver] Join Predicate Push Down",
    kkqctdrvore="[kernel compile query cost based query transformation driver] or-expansion",
    kkqctdrvpu="[kernel compile query cost based query transformation driver] PU",
    kkqctdrvst="[kernel compile query cost based query transformation driver] star transformation",
    kkqctdrvsu="[kernel compile query cost based query transformation driver] subquery unnesting",
    kkqctdrvtd="[kernel compile query cost based query transformation driver] transformation directives",
    kkqctdrvte="[kernel compile query cost based query transformation driver] table expansion",
    kkqctdrvvm="[kernel compile query cost based query transformation driver] view merging",
    kkqctdrvvt="[kernel compile query cost based query transformation driver] vector transformation",
    kkqctinterleave="[kernel compile query cost based query transformation interleave]",
    kkqctinterleavecvm="[kernel compile query cost based query transformation interleave] complex view merging",
    kkqctinterleavedp="[kernel compile query cost based query transformation interleave] distinct placement",
    kkqctinterleavejf="[kernel compile query cost based query transformation interleave] join filter",
    kkqctinterleavejppd="[kernel compile query cost based query transformation interleave] join predicate pushdown",
    kkqctinterleavelargeqry="[kernel compile query cost based query transformation interleave] large query",
    kkqctinterleaveore="[kernel compile query cost based query transformation interleave] or-expansion",
    kkqctinterleavestjf="[kernel compile query cost based query transformation interleave] STJF",
    kkqctnojppd="[kernel compile query cost based query transformation] no join predicate pushdown (?)",
    kkqctnxtlinearstt="[kernel compile query cost based query transformation] next linear state",
    kkqcttcalo="[kernel compile query cost based query transformation] type check allocate",
    kkqctupdbestcoststt="[kernel compile query cost based query transformation] pick the most efficient query transformation state",
    kkqdrv="[kernel compile query] transformation driver",
    kkqgb="[kernel compile query group by]",
    kkqgbp="[kernel compile query group by] placement",
    kkqgbpcheckpred="[kernel compile query group by] placement check validity of predicate",
    kkqgbpcheckvalidity="[kernel compile query group by] placement check basic validity",
    kkqgbpcolhashighndv="[kernel compile query group by] placement Column has high NDV",
    kkqgbpdrv="[kernel compile query group by] placement driver",
    kkqgbptravchktran="[kernel compile query group by] placement traverse, check and transform",
    kkqj="[Kernel Compile Query Join analysis] ",
    kkqjf="[Kernel Compile Query Join analysis] join factorization",
    kkqjfchkbasicvalidity="[Kernel Compile Query Join analysis] join factorization check basic validity",
    kkqjfdrv="[Kernel Compile Query Join analysis] join factorization driver",
    kkqjpd="[Kernel Compile Query Join analysis] predicate push down",
    kkqjpdctr="[Kernel Compile Query Join analysis] predicate push down traverse and transform",
    kkqjpddrv="[Kernel Compile Query Join analysis] predicate push down driver",
    kkqoj="[kernel compile query outer join]",
    kkqojeanl="[kernel compile query outer join] expression analyze",
    kkqolap="[kernel compile query] olap",
    kkqolapdrv="[kernel compile query] olap driver",
    kkqore="[kernel compile query] or-expansion",
    kkqoredrv="[kernel compile query] or-expansion driver",
    kkqstar="[kernel compile query star transformation]",
    kkqstarchkvalidity="[kernel compile query star transformation] check validity",
    kkqstardrv="[kernel compile query star transformation] driver",
    kkqt="[kernel compile query table]",
    kkqtcplog="[kernel compile query table] copy log chain (query tools)",
    kkqte="[kernel compile query table expansion]",
    kkqtecheckvalidity="[kernel compile query table expansion] check validity",
    kkqtedrv="[kernel compile query table expansion]  driver",
    kkqtedtr="[kernel compile query table expansion] ??",
    kkqtegeneratepreds="[kernel compile query table expansion] ??",
    kkqteparsesqlforpg="[kernel compile query table expansion] ??",
    kkqtetransform="[kernel compile query table expansion] transformation",
    kkqu="[kernel compile query] subquery unnesting",
    kkqvm="[kernel compile query] view merging",
    kkqvmdrv="[kernel compile query] view merging driver",
    kkqvt="[kernel compile query] vector transformation",
    kkqvtcheckgeneralvalidity="[kernel compile query] vector transformation check general validity",
    kkqvtdrv="[kernel compile query] vector transformation driver",
    kkr="[kernel compile rowsource] ",
    kkrba="[kernel compile rowsource] Bitmap index creation row source AND row source",
    kkrbc="[kernel compile rowsource] Bitmap index Compaction row source",
    kkrbi="[kernel compile rowsource] Bitmap index creation row source",
    kkrbo="[kernel compile rowsource] Bitmap index creation row source Or row source",
    kkrbt="[kernel compile rowsource] bob dylan convertor",
    kkrbu="[kernel compile rowsource] Bitmap index creation row source Unlimited-OR row source",
    kkrbx="[kernel compile rowsource] Bitmap index creation row source indeX (kdi) access row source",
    kkrh="[kernel compile rowsource] Row Hash source",
    kkri="[kernel compile rowsource] parallel index create",
    kkrp="[kernel compile rowsource] parallelizer (DFO)",
    kkrpfch="[kernel compile rowsource] parallelizer (DFO) fetch from rowsource",
    kkrt="[kernel compile rowsource] Table create-as-select",
    kks="[kernel compile shared objects (cursor)] ",
    kksalc="[kernel compile shared objects (cursor)] allocate compile time memory",
    kksald="[kernel compile shared objects (cursor)] auxiliary load function",
    kksalx="[kernel compile shared objects (cursor)] allocate bytes from the execution time heap",
    kksarm="[kernel compile shared objects (cursor)] authorize for remote",
    kksauc="[kernel compile shared objects (cursor)] authorized to use this child?",
    kksaxs="[kernel compile shared objects (cursor)] semantic analysis, authorize and audit",
    kkscheckfortrace="[kernel compile shared objects (cursor)] check for trace (not sure which; 10046?)",
    kkscls="[kernel compile shared objects (cursor)] close cursor, user is done with it",
    kkscs="[kernel compile shared objects (cursor)] child cursor",
    kkscscheckcriteria="[kernel compile shared objects (cursor)] child cursor check cursor criteria",
    kkscscheckcursor="[kernel compile shared objects (cursor)] child cursor check if child cursor can be used",
    kkscscid="[kernel compile shared objects (cursor)] child cursor criteria identification",
    kkscscid_adgredirect="[kernel compile shared objects (cursor)] child cursor criteria identification active dataguard redirect",
    kkscscid_auc="[kernel compile shared objects (cursor)] child cursor criteria identification authorized to use this child",
    kkscscid_containers="[kernel compile shared objects (cursor)] child cursor criteria identification PDB(?)",
    kkscscid_pddl="[kernel compile shared objects (cursor)] child cursor criteria identification parallel ddl(?)",
    kkscscid_pdm="[kernel compile shared objects (cursor)] child cursor criteria identification parallel dml(?)",
    kkscssearchchildlist="[kernel compile shared objects (cursor)] search for a matching child with the result of kkshchv()",
    kksdopt="[kernel compile shared objects (cursor)] smart disk no option",
    kksfbc="[kernel compile shared objects (cursor)] find bound cursor",
    kksffr="[kernel compile shared objects (cursor)] free a frame",
    kksfft="[kernel compile shared objects (cursor)] find first token",
    kksfreecompilememory="[kernel compile shared objects (cursor)] free some compile-time memory in PL/SQL",
    kksfreeheap="[kernel compile shared objects (cursor)] ??",
    kksfulltypecheck="[kernel compile shared objects (cursor)] full type check (performs semantic and authorization checks, cost based optimization)",
    kksh="[kernel compile shared objects (cursor)] cursor hash table",
    kkshchv="[kernel compile shared objects (cursor)] derive an internal hash which is stored in the parent cursor's heap 0",
    kksheqd="[kernel compile shared objects (cursor)] cursor hash table clean/delete and enqueue",
    kkshh="[kernel compile shared objects (cursor)] cursor hash table ?",
    kkshhcdel="[kernel compile shared objects (cursor)] cursor hash table ? child delete",
    kkshhcins="[kernel compile shared objects (cursor)] cursor hash table ? child insert",
    kkshin="[kernel compile shared objects (cursor)] cursor hash table incomplete list",
    kkshindel="[kernel compile shared objects (cursor)] cursor hash table incomplete list remove child",
    kkshinins="[kernel compile shared objects (cursor)] cursor hash table incomplete list insert child",
    kkshmih="[kernel compile shared objects (cursor)] cursor hash table ??",
    kkslcr="[kernel compile shared objects (cursor)] ??",
    kkslhsh="[kernel compile shared objects (cursor)] ??",
    kksloadchild="[kernel compile shared objects (cursor)] load child",
    kkslockdelete="[kernel compile shared objects (cursor)] ??",
    kkslockoperation="[kernel compile shared objects (cursor)] ??",
    kkslod="[kernel compile shared objects (cursor)] cursor load callback",
    kkslof="[kernel compile shared objects (cursor)] log off (?)",
    kkslrev="[kernel compile shared objects (cursor)] reverse system generated bind variable to litaral",
    kkslrpl="[kernel compile shared objects (cursor)] replace literals in SQL statement (cursor_sharing=force)",
    kkslsp="[kernel compile shared objects (cursor)] ??",
    kksmapcursor="[kernel compile shared objects (cursor)] map cursor",
    kksmcalfree="[kernel compile shared objects (cursor)] conditially segmented array allocate.",
    kksparsechildcursor="[kernel compile shared objects (cursor)] parse child cursor",
    kksparsecursor="[kernel compile shared objects (cursor)] parse cursor",
    kkspfda="[kernel compile shared objects (cursor)] multiple context area management",
    kkspopcompilecall="[kernel compile shared objects (cursor)] end compilation call",
    kkspsc0="[kernel compile shared objects (cursor)] parse shared cursor",
    kkspushcompilecall="[kernel compile shared objects (cursor)] SQL statements push compile calls",
    kksreplaceliterals="[kernel compile shared objects (cursor)] replace literals in SQL statement (cursor_sharing=force)",
    kkssbt="[kernel compile shared objects (cursor)] set bind types",
    kksscl="[kernel compile shared objects (cursor)] scan child list",
    kkssetbindtype="[kernel compile shared objects (cursor)] SetBindType",
    kkstpld="[kernel compile shared objects (cursor)] this functions returns a text pointer to a contiguous string (sqltext?)",
    kksumc="[kernel compile shared objects (cursor)] unmap shared cursor",
    kksvld="[kernel compile shared objects (cursor)] validate cursor",
    kksx="[kernel compile shared objects (cursor)] execute(?)",
    kksxcreate="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.CREATE_PROFILE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxderegerrortrans="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.DEREGISTER_ERROR_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxderegsqltrans="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.DEREGISTER_SQL_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxdrop="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.DROP_PROFILE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxenableerrortrans="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.ENABLE_ERROR_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxenablesqltrans="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.ENABLE_SQL_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxregerrortrans="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.REGISTER_ERROR_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxregsqltrans="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.REGISTER_SQL_TRANSLATION(DBMS_SQL_TRANSLATOR_LIB)",
    kksxresolve="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.RESOLVE_PROFILE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsccmp="[kernel compile shared objects (cursor)] execute(?) shared cursor criteria compare(?)",
    kksxsetattribute="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SET_ATTRIBUTE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsetdictsqlid="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SET_DICTIONARY_SQL_ID(DBMS_SQL_TRANSLATOR_LIB)",
    kksxseterrortranscmt="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SET_ERROR_TRANSLATION_COMMENT(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsetsqltranscmt="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SET_SQL_TRANSLATION_COMMENT(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsetsqltranserror="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SET_SQL_TRANSLATION_ERROR(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsetsqltransmod="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SET_SQL_TRANSLATION_MODULE(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsqlhash="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SQL_HASH(DBMS_SQL_TRANSLATOR_LIB)",
    kksxsqlid="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.SQL_ID(DBMS_SQL_TRANSLATOR_LIB)",
    kksxtranslateerror="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.TRANSLATE_ERROR(DBMS_SQL_TRANSLATOR_LIB)",
    kksxtranslatesql="[kernel compile shared objects (cursor)] SYS.DBMS_SQL_TRANSLATOR.TRANSLATE_SQL(DBMS_SQL_TRANSLATOR_LIB)",
    kkt="[Kernel Compile] triggers",
    kktalt="[Kernel Compile] triggers alter trigger",
    kktf="[kernel compile triggers polymorphic table functions] ",
    kktf_icd_env_get="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_GET(C)",
    kktf_icd_env_proj="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_PROJ(C)",
    kktf_icd_env_put="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_PUT(C)",
    kktf_icd_env_px="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_PX(C)",
    kktf_icd_env_rcnt="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_RCNT(C)",
    kktf_icd_env_samp="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_SAMP(C)",
    kktf_icd_getptf_id="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_GETPTF_ID(C)",
    kktf_icd_rr_fix="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_RR_FIX(C)",
    kktf_icd_rr_var="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_RR_VAR(C)",
    kktfcstore_exists="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFCSTORE_EXISTS(C)",
    kktfcstoreexists="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFCSTORE_EXISTS(C)",
    kktficdcstoreallbol="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREALLBOL(C)",
    kktficdcstoreallchr="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREALLCHR(C)",
    kktficdcstorealldat="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREALLDAT(C)",
    kktficdcstoreallnum="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREALLNUM(C)",
    kktficdcstoreexists="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFCSTORE_EXISTS CSTORE_EXISTS",
    kktficdcstoregetbol="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREGETBOL(C)",
    kktficdcstoregetchar="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFICDCSTOREGETVC2 CSTORE_GET",
    kktficdcstoregetdat="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREGETDAT(C)",
    kktficdcstoregetnum="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREGETNUM(C)",
    kktficdcstoregetvc2="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDCSTOREGETVC2(C)",
    kktficdenvget="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_GET(C)",
    kktficdenvproj="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_PROJ(C)",
    kktficdenvput="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_PUT(C)",
    kktficdenvpx="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_PX(C)",
    kktficdenvrcnt="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_RCNT(C)",
    kktficdenvsamp="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_ENV_SAMP(C)",
    kktficdgetptfid="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_GETPTF_ID(C)",
    kktficdrrfix="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_RR_FIX(C)",
    kktficdrrvar="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTF_ICD_RR_VAR(C)",
    kktficdxstoreclear="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFXSTORE_CLEAR XSTORE_CLEAR",
    kktficdxstoreexists="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFXSTORE_EXISTS XSTORE_EXISTS",
    kktficdxstoregetbol="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTOREGETBOL(C)",
    kktficdxstoregetchar="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFICDXSTOREGETVC2 XSTORE_GET",
    kktficdxstoregetdat="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTOREGETDAT(C)",
    kktficdxstoregetnum="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTOREGETNUM(C)",
    kktficdxstoregetvc2="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTOREGETVC2(C)",
    kktficdxstoreremove="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFXSTORE_REMOVE XSTORE_REMOVE",
    kktficdxstoresetbol="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTORESETBOL(C)",
    kktficdxstoresetchar="[kernel compile triggers polymorphic table functions] DBMS_TF.KKTFICDXSTORESETVC2 XSTORE_SET",
    kktficdxstoresetdat="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTORESETDAT(C)",
    kktficdxstoresetnum="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTORESETNUM(C)",
    kktficdxstoresetvc2="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFICDXSTORESETVC2(C)",
    kktfxstore_clear="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFXSTORE_CLEA(C)",
    kktfxstore_exists="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFXSTORE_EXISTS(C)",
    kktfxstore_remove="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFXSTORE_REMOVE(C)",
    kktfxstoreclear="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFXSTORE_CLEA(C)",
    kktfxstoreexists="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFXSTORE_EXISTS(C)",
    kktfxstoreremove="[kernel compile triggers polymorphic table functions] SYS.DBMS_TF.KKTFXSTORE_REMOVE(C)",
    kktget="[Kernel Compile triggers] ??",
    kktiddlt="[Kernel Compile triggers] SYS.DBMS_DDL_INTERNAL.IS_DDL_TRIGGER(DBMS_TRIGGER_LIB)",
    kkx="[Kernel Compilation eXternal] ",
    kkxa="[Kernel Compilation eXternal Asynch RPC]",
    kkxacar="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXACAR(C)",
    kkxacst="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXACST(C)",
    kkxactl="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXACTL(C)",
    kkxadtl="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXADTL(C)",
    kkxagac="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGAC(C)",
    kkxagad="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.GET_ANYDATA_ARG(DBMS_DEFER_QUERY_UTL_LIB)",
    kkxagaf="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGAF(C)",
    kkxagat="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGAT(C)",
    kkxagbl="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGBL(C)",
    kkxagca="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGCA(C)",
    kkxagcl="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGCL(C)",
    kkxagda="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGDA(C)",
    kkxagids="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGIDS(C)",
    kkxagiym="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGIYM(C)",
    kkxagna="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGNA(C)",
    kkxagnc="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGNC(C)",
    kkxagnl="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGNL(C)",
    kkxagnv="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGNV(C)",
    kkxagonv="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGONV(C)",
    kkxagrd="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGRD(C)",
    kkxagrw="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGRW(C)",
    kkxagtm="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGTM(C)",
    kkxagts="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGTS(C)",
    kkxagtsltz="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGTSLTZ(C)",
    kkxagtstz="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGTSTZ(C)",
    kkxagttz="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGTTZ(C)",
    kkxagva="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.KKXAGVA(C)",
    kkxasd="[Kernel Compilation eXternal Asynch RPC] SYS.DBMS_DEFER_QUERY_UTL.SET_DISABLED(DBMS_DEFER_QUERY_UTL_LIB)",
    kkxb="[Kernel Compilation eXterna]external tables",
    kkxccg1="[Kernel Compilation eXterna] SYS.DBMS_PREPROCESSOR.KKXCCG1(C)",
    kkxccg2="[Kernel Compilation eXterna] SYS.DBMS_PREPROCESSOR.KKXCCG2(C)",
    kkxccg3="[Kernel Compilation eXterna] SYS.DBMS_PREPROCESSOR.KKXCCG3(C)",
    kkxcg1="[Kernel Compilation eXterna]DBMS_PREPROCESSOR.KKXCG1 GET_PP_SOURCE_LINES",
    kkxcg2="[Kernel Compilation eXterna]DBMS_PREPROCESSOR.KKXCG2 GET_PP_SOURCE_LINES",
    kkxcg3="[Kernel Compilation eXterna]DBMS_PREPROCESSOR.KKXCG3 GET_PP_SOURCE_LINES",
    kkxcls="[Kernel Compilation eXterna]close cursor",
    kkxcmp="[Kernel Compilation eXterna]compile (all compilation phases)",
    kkxerae="[Kernel Compilation eXterna] SYS.DBMS_OUTPUT.KKXERAE(C)/SYS.DBMS_RCVMAN.KKXERAE(C)",
    kkxere0="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE0(C)",
    kkxere1="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE1(C)",
    kkxere2="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE2(C)",
    kkxere3="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE3(C)",
    kkxere4="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE4(C)",
    kkxere5="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE5(C)",
    kkxere6="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE6(C)",
    kkxere7="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE7(C)",
    kkxere8="[Kernel Compilation eXterna] SYS.DBMS_SYS_ERROR.KKXERE8(C)",
    kkxexe="[Kernel Compilation eXterna]execute plsql",
    kkxhtmldb_verify_user="[Kernel Compilation eXterna] SYS.HTMLDB_SYSTEM.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)/SYS.WWV_FLOW_VAL.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)",
    kkxhtmldbverifyuser="[Kernel Compilation eXterna] SYS.HTMLDB_SYSTEM.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)/SYS.WWV_FLOW_VAL.VERIFY_USER_INTERNAL(WWV_FLOW_VAL_LIB)",
    kkxj="[Kernel Compilation eXternal] [Kernel Compile execute java]",
    kkxjexe="[Kernel Compilation eXternal] [Kernel Compile execute java] execute",
    kkxl="[Kernel Compile eXternal Lob]",
    kkxl_append="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_APPEND(C)",
    kkxl_clob2file="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CLOB2FILE(C)",
    kkxl_close="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CLOSE(C)",
    kkxl_compare="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COMPARE(C)",
    kkxl_converttoblob="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CONVERTTOBLOB(C)",
    kkxl_converttoclob="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CONVERTTOCLOB(C)",
    kkxl_copy="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COPY(C)",
    kkxl_copy_dbfs_link="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COPY_DBFS_LINK(C)",
    kkxl_copy_from_dbfs_link="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COPY_FROM_DBFS_LINK(C)",
    kkxl_createtemporary="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CREATETEMPORARY(C)",
    kkxl_dbfs_link_generate_path="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_DBFS_LINK_GENERATE_PATH(C)",
    kkxl_delete="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_DELETE(C)",
    kkxl_erase="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ERASE(C)",
    kkxl_fileclose="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILECLOSE(C)",
    kkxl_filecloseall="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILECLOSEAL(C)",
    kkxl_fileexists="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEEXISTS(C)",
    kkxl_filegetname="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEGETNAME(C)",
    kkxl_fileisopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEISOPEN(C)",
    kkxl_fileopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEOPEN(C)",
    kkxl_freetemporary="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FREETEMPORARY(C)",
    kkxl_get_dbfs_link="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GET_DBFS_LINK(C)",
    kkxl_get_dbfs_link_state="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GET_DBFS_LINK_STATE(C)",
    kkxl_get_storage_limit="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GET_STORAGE_LIMIT(C)",
    kkxl_getchunksize="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETCHUNKSIZE(C)",
    kkxl_getlength="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETLENGTH(C)",
    kkxl_getmimetype="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETMIMETYPE(C)",
    kkxl_getoptions="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETOPTIONS(C)",
    kkxl_getshr="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETSHR(C)",
    kkxl_insert="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_INSERT(C)",
    kkxl_instr="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_INSTR(C)",
    kkxl_isopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISOPEN(C)",
    kkxl_isremote="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISREMOTE(C)",
    kkxl_issecurefile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISSECUREFILE(C)",
    kkxl_istemporary="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISTEMPORARY(C)",
    kkxl_loadblobfromfile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_LOADBLOBFROMFILE(C)",
    kkxl_loadclobfromfile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_LOADCLOBFROMFILE(C)",
    kkxl_loadfromfile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_LOADFROMFILE(C)",
    kkxl_move="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_MOVE(C)",
    kkxl_move_to_dbfs_link="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_MOVE_TO_DBFS_LINK(C)",
    kkxl_open="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_OPEN(C)",
    kkxl_read="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_READ(C)",
    kkxl_replace="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_REPLACE(C)",
    kkxl_set_dbfs_link="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SET_DBFS_LINK(C)",
    kkxl_setmimetype="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SETMIMETYPE(C)",
    kkxl_setoptions="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SETOPTIONS(C)",
    kkxl_substr="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SUBSTR(C)",
    kkxl_trim="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_TRIM(C)",
    kkxl_write="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_WRITE(C)",
    kkxl_writeappend="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_WRITEAPPEND(C)",
    kkxlappend="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_APPEND(C)",
    kkxlcisopen="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.ISOPEN(UTL_SYS_CMP_LIB)",
    kkxlclob2file="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CLOB2FILE(C)",
    kkxlclose="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CLOSE(C)",
    kkxlcompare="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COMPARE(C)",
    kkxlcomplzadd="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_ADD(UTL_SYS_CMP_LIB)",
    kkxlcomplzclose="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_CLOSE(UTL_SYS_CMP_LIB)",
    kkxlcomplzlob="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_BLOB(UTL_SYS_CMP_LIB)/SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_BFILE(UTL_SYS_CMP_LIB)",
    kkxlcomplzopen="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_COMPRESS_OPEN(UTL_SYS_CMP_LIB)",
    kkxlcompulzclose="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_CLOSE(UTL_SYS_CMP_LIB)",
    kkxlcompulzextract="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_EXTRACT(UTL_SYS_CMP_LIB)",
    kkxlcompulzlob="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_BLOB(UTL_SYS_CMP_LIB)/SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_BFILE(UTL_SYS_CMP_LIB)",
    kkxlcompulzopen="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.LZ_UNCOMPRESS_OPEN(UTL_SYS_CMP_LIB)",
    kkxlconverttoblob="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CONVERTTOBLOB(C)",
    kkxlconverttoclob="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CONVERTTOCLOB(C)",
    kkxlcopy="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COPY(C)",
    kkxlcopydbfslink="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COPY_DBFS_LINK(C)",
    kkxlcopyfromdbfslink="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_COPY_FROM_DBFS_LINK(C)",
    kkxlcpinit="[Kernel Compile eXternal Lob] SYS.UTL_SYS_COMPRESS.INITIALIZE_I(UTL_SYS_CMP_LIB)",
    kkxlcreatetemporary="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_CREATETEMPORARY(C)",
    kkxldbfslinkgeneratepath="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_DBFS_LINK_GENERATE_PATH(C)",
    kkxldelete="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_DELETE(C)",
    kkxlerase="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ERASE(C)",
    kkxlfileclose="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILECLOSE(C)",
    kkxlfilecloseall="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILECLOSEAL(C)",
    kkxlfileexists="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEEXISTS(C)",
    kkxlfilegetname="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEGETNAME(C)",
    kkxlfileisopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEISOPEN(C)",
    kkxlfileopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FILEOPEN(C)",
    kkxlfreetemporary="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_FREETEMPORARY(C)",
    kkxlgetchunksize="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETCHUNKSIZE(C)",
    kkxlgetdbfslink="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GET_DBFS_LINK(C)",
    kkxlgetdbfslinkstate="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GET_DBFS_LINK_STATE(C)",
    kkxlgetlength="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETLENGTH(C)",
    kkxlgetmimetype="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETMIMETYPE(C)",
    kkxlgetoptions="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETOPTIONS(C)",
    kkxlgetshr="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GETSHR(C)",
    kkxlgetstoragelimit="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_GET_STORAGE_LIMIT(C)",
    kkxlinsert="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_INSERT(C)",
    kkxlinstr="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_INSTR(C)",
    kkxlisopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISOPEN(C)",
    kkxlisremote="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISREMOTE(C)",
    kkxlissecurefile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISSECUREFILE(C)",
    kkxlistemporary="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_ISTEMPORARY(C)",
    kkxlloadblobfromfile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_LOADBLOBFROMFILE(C)",
    kkxlloadclobfromfile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_LOADCLOBFROMFILE(C)",
    kkxlloadfromfile="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_LOADFROMFILE(C)",
    kkxlmove="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_MOVE(C)",
    kkxlmovetodbfslink="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_MOVE_TO_DBFS_LINK(C)",
    kkxlnu="[Kernel Compile eXternal Lob] execute lob DBMS_LOBUTIL",
    kkxlnu_cpprmdedup="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_CPPRMDEDUP(C)",
    kkxlnu_getdedupset="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_GETDEDUPSET(C)",
    kkxlnu_getinode="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_GETINODE(C)",
    kkxlnu_getlobmap="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_GETLOBMAP(C)",
    kkxlnucpprm="[Kernel Compile eXternal Lob] execute lob DBMS_LOBUTIL KKXLNU_CPPRMDEDUP",
    kkxlnucpprmdedup="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_CPPRMDEDUP(C)",
    kkxlnugd="[Kernel Compile eXternal Lob] execute lob DBMS_LOBUTIL KKXLNU_GETDEDUPSET",
    kkxlnugetdedupset="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_GETDEDUPSET(C)",
    kkxlnugetinode="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_GETINODE(C)",
    kkxlnugetlobmap="[Kernel Compile eXternal Lob] SYS.DBMS_LOBUTIL.KKXLNU_GETLOBMAP(C)",
    kkxlnugi="[Kernel Compile eXternal Lob] execute lob DBMS_LOBUTIL KKXLNU_GETINODE",
    kkxlnugl="[Kernel Compile eXternal Lob] execute lob DBMS_LOBUTIL KKXLNU_GETLOBMAP",
    kkxlopen="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_OPEN(C)",
    kkxlr="[Kernel Compile eXternal Lob] execute lob DBMS_LOB",
    kkxlr_append="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_APPEND",
    kkxlr_close="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_CLOSE",
    kkxlr_compare="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_COMPORE",
    kkxlr_converttoblob="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_CONVERTTOBLOB",
    kkxlr_converttoclob="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_CONVERTTOCLOB",
    kkxlr_copy="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_COPY",
    kkxlr_erase="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_ERASE",
    kkxlr_get_storage_limit="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_GET_STORAGE_LIMIT",
    kkxlr_instr="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_INSTR",
    kkxlr_open="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_OPEN",
    kkxlr_read="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_READ",
    kkxlr_substr="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_SUBSTR",
    kkxlr_trim="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_TRIM",
    kkxlr_write="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_WRITE",
    kkxlr_writeappend="[Kernel Compile eXternal Lob] execute lob DBMS_LOB KKXL_WRITE KKXL_WRITEAPPEND",
    kkxlread="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_READ(C)",
    kkxlreplace="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_REPLACE(C)",
    kkxlsetdbfslink="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SET_DBFS_LINK(C)",
    kkxlsetmimetype="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SETMIMETYPE(C)",
    kkxlsetoptions="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SETOPTIONS(C)",
    kkxlsubstr="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_SUBSTR(C)",
    kkxltrim="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_TRIM(C)",
    kkxlwrite="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_WRITE(C)",
    kkxlwriteappend="[Kernel Compile eXternal Lob] SYS.DBMS_LOB.KKXL_WRITEAPPEND(C)",
    kkxpfr="[Kernel Compilation eXterna]PGA free",
    kkxpp="[Kernel Compilation eXterna] Kernel Compile eXecute Pipe(Private)",
    kkxppp="[Kernel Compilation eXterna]private pipe",
    kkxrd="[Kernel Compilation eXterna]DBMS_ROWID",
    kkxrpc="[Kernel Compilation eXterna]rpc",
    kkxscrptparse="[Kernel Compilation eXterna] SYS.DBMS_SQLPLUS_SCRIPT.PARSE(DBMS_SQLPLUS_SCRIPT_LIB)",
    kkxsem="[Kernel Compilation eXterna]semantic phase",
    kkxsexe="[Kernel Compilation eXterna]execute a cursor",
    kkxsexr="[Kernel Compilation eXterna]execute with returning binds",
    kkxsfcn="[Kernel Compilation eXterna]scalar fetch n rows",
    kkxsscfch="[Kernel Compilation eXterna]scalar fetch",
    kkxt="[Kernel Compilation eXternal Trigger]",
    kkxtcs="[Kernel Compilation eXternal Trigger] trace pl/sql call stack",
    kkxtexe="[Kernel Compilation eXternal Trigger] trigger execute",
    kkxtgos="[Kernel Compilation eXternal Trigger] SYS.DBMS_REPUTIL.KKXTGOS(C)",
    kkxtgsv="[Kernel Compilation eXternal Trigger] SYS.DBMS_INTERNAL_TRIGGER.KKXTGSV(C)",
    kkxtilc="[Kernel Compilation eXternal Trigger] SYS.DBMS_INTERNAL_TRIGGER.KKXTILC(C)",
    kkxtios="[Kernel Compilation eXternal Trigger] SYS.DBMS_REPUTIL.KKXTIOS(C)",
    kkxtmit="[Kernel Compilation eXternal Trigger] SYS.DBMS_INTERNAL_TRIGGER.KKXTMIT(C)",
    kkxtr2v="[Kernel Compilation eXternal Trigger] SYS.DBMS_REPUTIL.KKXTR2V(C)",
    kkxtusv="[Kernel Compilation eXternal Trigger] SYS.DBMS_INTERNAL_TRIGGER.KKXTUSV(C)",
    kkxuexe="[Kernel Compilation eXterna]stub execute",
    kkxwtp="[Kernel Compilation eXterna] Kernel Compilation PL/SQL Compiler",
    kky="[Kerner Compilation sYstem/session] ",
    kkyasy="[Kerner Compilation sYstem/session] alter system driver",
    kkz="[Kernel Compilation Security] ",
    kkzg="[Kernel Compilation Security] Kernel Compile Znapshot Generation",
    kkzgdcol="[Kernel Compilation Security] security get distinct column. This function checks the column chain for a frodef and mark the columns needed for materialized view.",
    kkzgna="[Kernel Compilation Security] security generate name",
    kkzi_is_param_taken="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.IS_PARAM_NM_TAKEN(DBMS_SNAPSHOT_LIB)",
    kkzi_is_xmltab_objrel="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.IS_XMLTAB_OBJREL(DBMS_SNAPSHOT_LIB)",
    kkzi_reg_idx_param="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.REG_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzi_test_dml_refresh_trigger="[Kernel Compilation Security] SYS.DBMS_REDEFINITION_INTERNAL.TEST_DML_REFRESH_TRIGGER(DBMS_SNAPSHOT_LIB)",
    kkzi_xmlidx_parmstr="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.GET_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzi_xmlidx_sxtab="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.GET_XMLIDX_SX_TAB(DBMS_SNAPSHOT_LIB)",
    kkziacset="[Kernel Compilation Security] SYS.DBMS_IREFRESH.SET_AUTOCOMMIT(DBMS_SNAPSHOT_LIB)",
    kkziaord="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.ABORT_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzibcrd="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIBCR(C)",
    kkzibfqn="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_FULLY_QUALIFIED_NAME(DBMS_SNAPSHOT_LIB)",
    kkzibonm="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_OBJECT_NAME_INT(DBMS_SNAPSHOT_LIB)",
    kkzibpkce="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_PK_BY_EOID(DBMS_SNAPSHOT_LIB)",
    kkzibponm="[Kernel Compilation Security] security DBMS_SNAPSHOT_UTL.GET_OBJECT_NAME_INT",
    kkzibsrd="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIBSR(C)",
    kkzibsu="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.SET_UP_INT(DBMS_SNAPSHOT_LIB)",
    kkzibtbto="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_TYPEINFO_BY_TOID(DBMS_SNAPSHOT_LIB)",
    kkzibvl="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.VERIFY_LOG_INT(DBMS_SNAPSHOT_LIB)",
    kkzibwu="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.WRAP_UP(DBMS_SNAPSHOT_LIB)",
    kkzichkprivs="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.CHECK_PRIVS(DBMS_SNAPSHOT_LIB)",
    kkziciti="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZICITI(C)",
    kkzickusrpriv="[Kernel Compilation Security] SYS.DBMS_ISNAPSHOT.CHECK_USRPRIV(DBMS_SNAPSHOT_LIB)",
    kkzicls="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.CLEANUP_SUBSCRIPTION(DBMS_SNAPSHOT_LIB)",
    kkzicort="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.CAN_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzicort_batched_parts="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.CAN_REDEF_INT_BATCH(DBMS_SNAPSHOT_LIB)",
    kkzicortbatchedparts="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.CAN_REDEF_INT_BATCH(DBMS_SNAPSHOT_LIB)",
    kkzicp3g="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.CHECK_PERMISSION_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_basic="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VBASIC(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_prog="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VPROG(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_setb="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_SETB(DBMS_SNAPSHOT_LIB)",
    kkzicptable_vdollar_waitb="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_WAITB(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarbasic="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VBASIC(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarprog="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_VPROG(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarsetb="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_SETB(DBMS_SNAPSHOT_LIB)",
    kkzicptablevdollarwaitb="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS_WAITB(DBMS_SNAPSHOT_LIB)",
    kkzidlused="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.DIRECT_LOAD_USED(DBMS_SNAPSHOT_LIB)",
    kkzidro="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIDRO(C)",
    kkzidrrg="[Kernel Compilation Security] SYS.DBMS_REPCAT_RGT_CUST2.DROP_REFRESH_GROUP(DBMS_SNAPSHOT_LIB)",
    kkzienms="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIENM(C)",
    kkzieoms="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIEOM(C)",
    kkziess="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIES(C)",
    kkziexecddl="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.PARSE_DDL(DBMS_SNAPSHOT_LIB)",
    kkzifenq="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.RELEASE_ENQ_SNAPSHOTS(DBMS_SNAPSHOT_LIB)",
    kkziford="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.FINISH_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzifr3g="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.REFRESH_KERNEL_INTERFACE(DBMS_SNAPSHOT_LIB)",
    kkzigbdb="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIGBDB(C)",
    kkzigenq="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.GET_ENQ_SNAPSHOTS(DBMS_SNAPSHOT_LIB)",
    kkziglnm="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_LOG_NAME(DBMS_SNAPSHOT_LIB)",
    kkzigltyp="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_LOG_TYPE(DBMS_SNAPSHOT_LIB)",
    kkzigmbc="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_MAX_BYTES_PER_CHAR(DBMS_SNAPSHOT_LIB)",
    kkzigmv3g="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_COLM_MASKVEC(DBMS_SNAPSHOT_LIB)",
    kkzigpe="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.GET_PARALLEL_ENV(DBMS_SNAPSHOT_LIB)",
    kkzigpki="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_PK_CONSTRAINT_INFO(DBMS_SNAPSHOT_LIB)",
    kkzigrcol="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.GET_RELATIONAL_COLUMNS(DBMS_SNAPSHOT_LIB)",
    kkzigsp="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.GET_SESSION_ENV(DBMS_SNAPSHOT_LIB)",
    kkzigtn="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.GET_TABLE_NAME(DBMS_SNAPSHOT_LIB)",
    kkzigunqnm="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.GET_UNQ_NAME(DBMS_SNAPSHOT_LIB)",
    kkzii_o2n="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.TRANS_IN_OLD2NEW(DBMS_SNAPSHOT_LIB)",
    kkziibtrd="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZIIBTRD(C)",
    kkziicsu="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.IAS_CREATE_MV_DDL(DBMS_SNAPSHOT_LIB)",
    kkziio2n="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.TRANS_IN_OLD2NEW(DBMS_SNAPSHOT_LIB)",
    kkziisparamtaken="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.IS_PARAM_NM_TAKEN(DBMS_SNAPSHOT_LIB)",
    kkziisusercreatedidx="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.IS_USER_CREATED(DBMS_SNAPSHOT_LIB)",
    kkziisxmltabobjrel="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.IS_XMLTAB_OBJREL(DBMS_SNAPSHOT_LIB)",
    kkzilnr3g="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.LOC_NAM_RES3G(DBMS_SNAPSHOT_LIB)",
    kkzimlt="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.MASTER_LOG_TYPE(DBMS_SNAPSHOT_LIB)",
    kkzimroa="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.MODIFY_RO_ATTRIBUTE(DBMS_SNAPSHOT_LIB)",
    kkzio_n2o="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.TRANS_OUT_NEW2OLD(DBMS_SNAPSHOT_LIB)",
    kkziofln="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.INSTANTIATE_OFFLINE(DBMS_SNAPSHOT_LIB)",
    kkziofvs="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.VALIDATE_SQL(DBMS_SNAPSHOT_LIB)",
    kkzion2o="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.TRANS_OUT_NEW2OLD(DBMS_SNAPSHOT_LIB)",
    kkziorset="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.SET_REDEF_SESSION(DBMS_SNAPSHOT_LIB)",
    kkzipllg="[Kernel Compilation Security] SYS.DBMS_ISNAPSHOT.KKZIPLLG(DBMS_SNAPSHOT_LIB)",
    kkzipsl_xid="[Kernel Compilation Security] SYS.DBMS_ISNAPSHOT.KKZIPSL_XID(DBMS_SNAPSHOT_LIB)",
    kkzipslxid="[Kernel Compilation Security] SYS.DBMS_ISNAPSHOT.KKZIPSL_XID(DBMS_SNAPSHOT_LIB)",
    kkzirdobj="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.REGISTER_DEP_OBJ_INT(DBMS_SNAPSHOT_LIB)",
    kkziregidxparam="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.REG_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzisbdb="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZISBD(C)",
    kkziset="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.SETUP(DBMS_SNAPSHOT_LIB)",
    kkzisetaclmv="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.SET_I_AM_AN_ACLMV(DBMS_SNAPSHOT_LIB)",
    kkzisf3g="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.SCHEDULE_KERNEL_INTERFACE(DBMS_SNAPSHOT_LIB)",
    kkzisint="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.SYNC_INTERIM_INT(DBMS_SNAPSHOT_LIB)",
    kkzisord="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.START_REDEF_INT(DBMS_SNAPSHOT_LIB)",
    kkzispe="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.SET_PARALLEL_ENV(DBMS_SNAPSHOT_LIB)",
    kkzisr_chk_tbl_priv="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_COMMON.CHECK_PRIVS_ON_TABLE_PRIVATE(DBMS_SNAPSHOT_LIB)",
    kkzisr_do_refr_op="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.DO_REFRESH_OPN_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisr_prepstlog="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.PREPARE_STAGING_LOG_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisr_regmviews="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.REGISTER_MVIEWS_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisr_throwerr="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.THROW_ERROR(DBMS_SNAPSHOT_LIB)",
    kkzisrchktblpriv="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_COMMON.CHECK_PRIVS_ON_TABLE_PRIVATE(DBMS_SNAPSHOT_LIB)",
    kkzisrdorefrop="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.DO_REFRESH_OPN_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisro="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZISRO(C)",
    kkzisrprepstlog="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.PREPARE_STAGING_LOG_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisrregmviews="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.REGISTER_MVIEWS_INTERNAL(DBMS_SNAPSHOT_LIB)",
    kkzisrthrowerr="[Kernel Compilation Security] SYS.DBMS_SYNC_REFRESH_INTERNAL.THROW_ERROR(DBMS_SNAPSHOT_LIB)",
    kkzissp="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_KKXRCA.SET_SESSION_ENV(DBMS_SNAPSHOT_LIB)",
    kkzisu="[Kernel Compilation Security] security DBMS_SNAPSHOT_UTL.SUBSCRIBE",
    kkzisub="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.SUBSCRIBE(DBMS_SNAPSHOT_LIB)",
    kkzitestdmlrefreshtrigger="[Kernel Compilation Security] SYS.DBMS_REDEFINITION_INTERNAL.TEST_DML_REFRESH_TRIGGER(DBMS_SNAPSHOT_LIB)",
    kkzitti="[Kernel Compilation Security] SYS.DBMS_SNAP_INTERNAL.KKZITTI(C)",
    kkziudobj="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.UNREGISTER_DEP_OBJ_INT(DBMS_SNAPSHOT_LIB)",
    kkziulph="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.UPDATE_LOG_PLACEHOLDER_INT(DBMS_SNAPSHOT_LIB)",
    kkzivcmp="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.KKZIVCMP(C)",
    kkzivfc="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.VERIFY_FC_AGE(DBMS_SNAPSHOT_LIB)",
    kkzivld="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.VALIDATE(DBMS_SNAPSHOT_LIB)",
    kkzivordclr="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.VDOLLAR_ORD_CLR(DBMS_SNAPSHOT_LIB)",
    kkzivordini="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.VDOLLAR_ORD_INIT(DBMS_SNAPSHOT_LIB)",
    kkziwrp="[Kernel Compilation Security] SYS.DBMS_SNAPSHOT_UTL.WRAPUP(DBMS_SNAPSHOT_LIB)",
    kkzixmlidxparmstr="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.GET_XMLIDX_PARAMSTR(DBMS_SNAPSHOT_LIB)",
    kkzixmlidxsxtab="[Kernel Compilation Security] SYS.DBMS_REDEFINITION.GET_XMLIDX_SX_TAB(DBMS_SNAPSHOT_LIB)",
    kkzp="[Kernel Compilation Security] Kernel K(mumble) Znapshot PL/SQL interface",
    kkzrgrc="[Kernel Compilation Security] SYS.DBMS_SNAP_REPAPI.GENERATE_REFRESH_CONTEXT(DBMS_REPAPI_LIB)",
    kl="[Kernel Loader] ",
    klc="[Kernel Loader] column array builder",
    klcli="[Kernel Loader] C Level Interface to loader",
    klclil1r="[Kernel Loader] column array builder c level interface load 1 row",
    klcs="[Kernel Loader] column array builder character set",
    klcslod="[Kernel Loader] column array builder character set load NLS data object",
    kll="[Kernel Loader] library",
    kllcqgf="[Kernel Loader] library circular queue get free slot",
    klllr="[Kernel Loader] library logical record",
    klm="[Kernel Loader] memory",
    klmalf="[Kernel Loader] memory allocate freeable memory",
    km="[kernel multi threaded/mman] ",
    kmc="[Kernel Multi-stated/multi-threaded server Circuit cmpt] ",
    kmcadq="[Kernel Multi-stated/multi-threaded server Circuit cmpt] add circuit to a queue",
    kmcdflu="[Kernel Multi-stated/multi-threaded server Circuit cmpt] flush. perform the flush operation, forces the data in the current send buffer to get flushed out to the user.",
    kmcdlc="[Kernel Multi-stated/multi-threaded server Circuit cmpt] state object delete routine",
    kmcdrv="[Kernel Multi-stated/multi-threaded server Circuit cmpt] driver",
    kmcmbf="[Kernel Multi-stated/multi-threaded server Circuit cmpt] mark buffer",
    kmcrowrt="[Kernel Multi-stated/multi-threaded server Circuit cmpt] private functions",
    kmd="[Kernel Multi-threaded server's Dispatcher] ",
    kmdmai="[Kernel Multi-threaded server's Dispatcher] main loop",
    kmdrdp="[Kernel Multi-threaded server's Dispatcher] run a dispatcher process",
    kmdu2s="[Kernel Multi-threaded server's Dispatcher] route messages from user to server",
    kmgs="[kernel multi threaded/mman] manage (sga) space (?)",
    kmgs_create_request="[kernel multi threaded/mman] manage (sga) space (?) creates and waits for a memory resize request involving a requestor",
    kmgs_immediate_req="[kernel multi threaded/mman] manage (sga) space (?) immediate mode request interface function",
    kmgs_sleep_wait="[kernel multi threaded/mman] manage (sga) space (?) this function should be used in kmgs whenever immediate mode memory is requested from auto-sga",
    kmgsdrv="[kernel multi threaded/mman] manage (sga) space (?) driver",
    kml="[kernel multi threaded/mman] listener registration (lreg)",
    kmlini="[kernel multi threaded/mman] listener registration (lreg) initialization",
    kmm="[Kernel Multi-threaded server/dispatcher Monitor] ",
    kmmd="[Kernel Multi-threaded server/dispatcher Monitor] dispatcher",
    kmml="[Kernel Multi-threaded server/dispatcher Monitor] listener",
    kmmlrl="[Kernel Multi-threaded server/dispatcher Monitor] listener remote listener",
    kmmrdp="[Kernel Multi-threaded server/dispatcher Monitor] run dispatcher process",
    kmms="[Kernel Multi-threaded server/dispatcher Monitor] server",
    kmn="[Kernel Multi-threaded Network layer] ",
    kmnsbf="[Kernel Multi-threaded Network layer] ??",
    kmnsbm="[Kernel Multi-threaded Network layer] buffer memory allocation callback",
    kmp="[kernel multi threaded/mman] pool",
    kn="[Kernel Replication] ",
    kna="[Kernel Replication apply] ",
    knac="[Kernel Replication apply] coordinator",
    knah="[Kernel Replication apply] HA DB",
    knahsma="[Kernel Replication apply] HA DB slave main",
    knahspx="[Kernel Replication apply] HA DB process transaction",
    knaladmaddautocdr="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ADD_AUTO_CDR_INT(DBMS_LOGREP_LIB)",
    knaladmaddautocdrcolgroup="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ADD_AUTO_CDR_COLGROUP_INT(DBMS_LOGREP_LIB)",
    knaladmaddautocdrdeltares="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ADD_AUTO_CDR_DELTA_RES_INT(DBMS_LOGREP_LIB)",
    knaladmalterautocdr="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ALTER_AUTO_CDR_INT(DBMS_LOGREP_LIB)",
    knaladmalterautocdrcolgroup="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.ALTER_AUTO_CDR_COLGROUP_INT(DBMS_LOGREP_LIB)",
    knaladmimportacdrmetadata="[Kernel Replication] SYS.DBMS_GOLDENGATE_IMP.ACDR_UPDATE_METADATA(DBMS_LOGREP_LIB)",
    knaladmremoveautocdr="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.REMOVE_AUTO_CDR_INT(DBMS_LOGREP_LIB)",
    knaladmremoveautocdrcolgroup="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.REMOVE_AUTO_CDR_COLGROUP_INT(DBMS_LOGREP_LIB)",
    knaladmremoveautocdrdeltares="[Kernel Replication] SYS.DBMS_GOLDENGATE_ADM_INT_INVOK.REMOVE_AUTO_CDR_DELTA_RES_INT(DBMS_LOGREP_LIB)",
    knalextractfromuserprops="[Kernel Replication] SYS.DBMS_APPLY_ERROR.PROCESS_USER_PROPERTIES(DBMS_LOGREP_LIB)",
    knalf="[Kernel Replication apply] reader",
    knalialter="[Kernel Replication] SYS.DBMS_APPLY_ADM_INTERNAL.ALTER_APPLY_INTERNAL(DBMS_LOGREP_LIB)",
    knalicreate="[Kernel Replication] SYS.DBMS_APPLY_ADM_INTERNAL.CREATE_APPLY_INTERNAL(DBMS_LOGREP_LIB)",
    knalidrop="[Kernel Replication] SYS.DBMS_APPLY_ADM_INTERNAL.DROP_APPLY(DBMS_LOGREP_LIB)",
    knaligetapplynum="[Kernel Replication] SYS.DBMS_APPLY_PROCESS.GET_APPLY#(DBMS_LOGREP_LIB)",
    knalisetinstscn="[Kernel Replication] SYS.DBMS_APPLY_ADM.SET_INSTANTIATION_SCN(DBMS_LOGREP_LIB)",
    knalkdinv="[Kernel Replication] SYS.DBMS_APPLY_ADM_INTERNAL.INVALIDATE_DEST_OBJ(DBMS_LOGREP_LIB)",
    knalperr="[Kernel Replication] SYS.DBMS_APPLY_ERROR.IN(DBMS_LOGREP_LIB)/SYS.DBMS_APPLY_ERROR.PROCESS_ERRORS(DBMS_LOGREP_LIB)",
    knals_ddl_gcscn="[Kernel Replication] SYS.LCR$_DDL_RECORD.GET_COMMIT_SCN(LCR_DDL_LIB)",
    knals_ddl_gctime="[Kernel Replication] SYS.LCR$_DDL_RECORD.GET_COMMIT_TIME(LCR_DDL_LIB)",
    knals_execute_ddl="[Kernel Replication] SYS.LCR$_DDL_RECORD.EXECUTE(LCR_DDL_LIB)",
    knals_execute_dml="[Kernel Replication] SYS.LCR$_ROW_RECORD.EXECUTE(LCR_ROW_LIB)",
    knals_row_gcscn="[Kernel Replication] SYS.LCR$_ROW_RECORD.GET_COMMIT_SCN(LCR_ROW_LIB)",
    knals_row_gctime="[Kernel Replication] SYS.LCR$_ROW_RECORD.GET_COMMIT_TIME(LCR_ROW_LIB)",
    knalsddlgcscn="[Kernel Replication] SYS.LCR$_DDL_RECORD.GET_COMMIT_SCN(LCR_DDL_LIB)",
    knalsddlgctime="[Kernel Replication] SYS.LCR$_DDL_RECORD.GET_COMMIT_TIME(LCR_DDL_LIB)",
    knalsdropapr="[Kernel Replication] SYS.DBMS_APPLY_ADM_INTERNAL.DROP_APPLY_PROGRESS_REDO(DBMS_LOGREP_LIB)",
    knalsexecuteddl="[Kernel Replication] SYS.LCR$_DDL_RECORD.EXECUTE(LCR_DDL_LIB)",
    knalsexecutedml="[Kernel Replication] SYS.LCR$_ROW_RECORD.EXECUTE(LCR_ROW_LIB)",
    knalsgetsender="[Kernel Replication] SYS.DBMS_STREAMS.GET_SENDER_INTERNAL(DBMS_LOGREP_LIB)",
    knalspcleanapplyspill="[Kernel Replication] SYS.DBMS_XSTREAM_ADM_UTL.CLEAN_APPLY_SPILL(DBMS_LOGREP_LIB)",
    knalsrowgcscn="[Kernel Replication] SYS.LCR$_ROW_RECORD.GET_COMMIT_SCN(LCR_ROW_LIB)",
    knalsrowgctime="[Kernel Replication] SYS.LCR$_ROW_RECORD.GET_COMMIT_TIME(LCR_ROW_LIB)",
    knanr="[Kernel Replication apply] propogation receiver",
    knas="[Kernel Replication apply] slave",
    knasm2="[Kernel Replication apply] slave main 2",
    knasplcr="[Kernel Replication apply] slave process logical change record",
    knaspx="[Kernel Replication apply] slave process transaction",
    knasxstopclient="[Kernel Replication] SYS.DBMS_XSTREAM_ADM_UTL.STOP_XOUT_CLIENT(DBMS_LOGREP_LIB)",
    kncclog="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCLOG(C)",
    kncclpp="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCLPP(C)",
    knccpog="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCPOG(C)",
    knccppp="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCPP(C)",
    knccrog="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCROG(C)",
    knccrpi="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCRPI(C)",
    knccrpn="[Kernel Replication] SYS.DBMS_REPCAT_CACHE.KNCCRPN(C)",
    kncd="[Kernel replicatioN Dequeue Generic functions] ",
    kncdccp="[Kernel replicatioN Dequeue Generic functions] SYS.DBMS_ASYNCRPC_PUSH.KNCDCCP(C)",
    kncdgcs="[Kernel replicatioN Dequeue Generic functions] SYS.DBMS_ASYNCRPC_PUSH.KNCDGCS(C)",
    kncdgep="[Kernel replicatioN Dequeue Generic functions] SYS.DBMS_ASYNCRPC_PUSH.KNCDGEP(C)",
    kncdpdc="[Kernel replicatioN Dequeue Generic functions] SYS.DBMS_ASYNCRPC_PUSH.KNCDPDC(C)",
    kncdups="[Kernel replicatioN Dequeue Generic functions] SYS.DBMS_ASYNCRPC_PUSH.KNCDUPS(C)",
    kncead="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.ANYDATA_ARG(DBMS_DEFER_ENQ_UTL_LIB)",
    kncebla="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEBLA(C)",
    kncecha="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCECHA(C)",
    kncecla="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCECLA(C)",
    kncedta="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEDTA(C)",
    knceenq="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.ENQUE_CALL_INTERNAL(DBMS_DEFER_ENQ_UTL_LIB)",
    kncegcn="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEGCN(C)",
    kncegui="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEGUI(C)",
    knceids="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEIDS(C)",
    knceiym="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEIYM(C)",
    kncenua="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCENUA(C)",
    kncerbr="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCERBR(C)",
    kncerda="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCERDA(C)",
    kncertid="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.RESET_TRAN_ID(DBMS_DEFER_ENQ_UTL_LIB)",
    kncerwa="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCERWA(C)",
    kncetma="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCETMA(C)",
    kncetsa="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCETSA(C)",
    kncetsltz="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCETSLTZ(C)",
    kncetstz="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCETSTZ(C)",
    kncettz="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCETTZ(C)",
    kncevca="[Kernel Replication] SYS.DBMS_DEFER_ENQ_UTL.KNCEVCA(C)",
    kngocachep_ext="[Kernel Replication] SYS.DBMS_LOGREP_UTIL.LCR_CACHE_PURGE(DBMS_LOGREP_LIB)",
    kngocachepext="[Kernel Replication] SYS.DBMS_LOGREP_UTIL.LCR_CACHE_PURGE(DBMS_LOGREP_LIB)",
    knipiada="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.ANYDATA_ARG_INNER(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipibis="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.SET_REPOBJECT_FLAG_CALLOUT(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipibit="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.CHECK_REPOBJECT_FLAG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipibla="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.BLOB_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipical="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.INTERNAL_CALL(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipicha="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.CHAR_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipicla="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.CLOB_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipicrc="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.CHECK_REPOBJECT_CACHE(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipides="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.DESTINATION(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipidta="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.DATE_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipigdt="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.GET_NO_DEPENDENCY_TRACKING(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipiinv="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.INVALIDATE_INTERNAL_PKG_C_OUT(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipimip="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.MAKE_INTERNAL_PKG_INNER(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipinua="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.NUMBER_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipir2n="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.GET_NUM_FROM_RAW(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipirda="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.ROWID_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipirse="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.RAISE_SYSTEM_ERROR(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipirwa="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.RAW_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipisdt="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.SET_NO_DEPENDENCY_TRACKING(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipiudt="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL.UPDATE_DEPENDENCY_TRACKING(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipivca="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.VARCHAR2_ARG(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knipixec="[Kernel Replication] SYS.DBMS_REPCAT_INTERNAL_PACKAGE.EXECUTE_ERROR_CALL(DBMS_REPCAT_INTERNAL_PKG_LIB)",
    knl="[Kernel Streams Replication] ",
    knl_droptablesupplog="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.DROP_TABLE_SUPP_LOGGING(DBMS_LOGREP_LIB)",
    knlabortschemainst_cdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlabortschemainstcdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlaborttableinst_cdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlaborttableinstcdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlannotateddl="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.DDL_ANNOTATE(DBMS_LOGREP_LIB)",
    knlbumpscn="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.BUMP_SCN(DBMS_LOGREP_LIB)",
    knlc="[Kernel Streams Replication] streams replication capture",
    knlcabortglobalinst="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_GLOBAL_INST(DBMS_LOGREP_LIB)",
    knlcabortglobalinst_pdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcabortglobalinstpdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ABORT_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcanonicalize="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.CANONICALIZE(DBMS_LOGREP_LIB)",
    knlchkpdbaccesscl="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL_INVOK.CHECK_PDB_ACCESS(DBMS_LOGREP_LIB)",
    knlciaddlogfile="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ADD_LOGFILE(DBMS_LOGREP_LIB)",
    knlcialtercapture="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.ALTER_CAPTURE_INTERNAL(DBMS_LOGREP_LIB)",
    knlcicreatecapture="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.CREATE_CAPTURE_INTERNAL(DBMS_LOGREP_LIB)",
    knlcidropcapture="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.DROP_CAPTURE(DBMS_LOGREP_LIB)",
    knlciincludeextraattribute="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.INCLUDE_EXTRA_ATTRIBUTE(DBMS_LOGREP_LIB)",
    knlciwfit="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.WAIT_FOR_INFLIGHT_TXN(DBMS_LOGREP_LIB)",
    knlcompareposition="[Kernel Streams Replication] SYS.DBMS_XSTREAM_ADM.COMPARE_POSITION(DBMS_LOGREP_LIB)",
    knlcompatvartoint="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.COMPATIBLE_VARCHAR_TO_INT(DBMS_LOGREP_LIB)",
    knlconvertposition="[Kernel Streams Replication] SYS.DBMS_XSTREAM_ADM_INTERNAL.CONVERT_POSITION_INTERNAL(DBMS_LOGREP_LIB)",
    knlcprepglobalinst="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_GLOBAL_INST(DBMS_LOGREP_LIB)",
    knlcprepglobalinst_pdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcprepglobalinstpdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_GLOBAL_INST_ONE_PDB(DBMS_LOGREP_LIB)",
    knlcpreptabinst="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST(DBMS_LOGREP_LIB)",
    knlcpreptabinstuid="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST_UID(DBMS_LOGREP_LIB)",
    knlcsv="[Kernel Streams Replication] streams replication capture propogation sender",
    knldi_procsrcdroptable="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_TABLE_INT(DBMS_LOGREP_LIB)",
    knldi_procsrcdropuser="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_USER_INT(DBMS_LOGREP_LIB)",
    knldi_procsrcnewtable="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_TABLE_INT(DBMS_LOGREP_LIB)",
    knldi_procsrcnewuser="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_USER_INT(DBMS_LOGREP_LIB)",
    knldiprocsrcdroptable="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_TABLE_INT(DBMS_LOGREP_LIB)",
    knldiprocsrcdropuser="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_DROP_USER_INT(DBMS_LOGREP_LIB)",
    knldiprocsrcnewtable="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_TABLE_INT(DBMS_LOGREP_LIB)",
    knldiprocsrcnewuser="[Kernel Streams Replication] SYS.DBMS_LOGREP_DEF_PROC_UTL.PROCESS_SRC_NEW_USER_INT(DBMS_LOGREP_LIB)",
    knldisabletdupworkspace="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.DISABLE_TDUP_WRKSPC_INT(DBMS_LOGREP_LIB)",
    knldroptablesupplog="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.DROP_TABLE_SUPP_LOGGING(DBMS_LOGREP_LIB)",
    knlenabletdupworkspace="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.ENABLE_TDUP_WORKSPACE_INT(DBMS_LOGREP_LIB)",
    knlexeonpkg="[Kernel Streams Replication] SYS.DBMS_STREAMS_ADM_UTL_INVOK.EXE_ON_PKG(DBMS_LOGREP_LIB)",
    knlfalt="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_INTERNAL_INVOK.ALTER_FILE_GROUP_3GL(DBMS_FILE_GROUP_LIB)",
    knlfcanonsid="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_UTL.CANONICALIZE_SIDEN30(DBMS_FILE_GROUP_LIB)",
    knlfchk="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_UTL_INVOK.CHECK_PRIVILEGE_ON_FILE_GROUP(DBMS_FILE_GROUP_LIB)",
    knlfcre="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_INTERNAL_INVOK.CREATE_FILE_GROUP_3GL(DBMS_FILE_GROUP_LIB)",
    knlfdrp="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_INTERNAL_INVOK.DROP_FILE_GROUP_3GL(DBMS_FILE_GROUP_LIB)",
    knlfgop="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP.GRANT_OBJECT_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfgsp="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP.GRANT_SYSTEM_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfhsp="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_UTL_INVOK.HAS_SYSTEM_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfraisedperrors="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP_UTL.RAISE_DP_ERRORS(DBMS_FILE_GROUP_LIB)",
    knlfrop="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP.REVOKE_OBJECT_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlfrsp="[Kernel Streams Replication] SYS.DBMS_FILE_GROUP.REVOKE_SYSTEM_PRIVILEGE(DBMS_FILE_GROUP_LIB)",
    knlgcompat="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_STR_COMPAT(DBMS_LOGREP_LIB)",
    knlgcscn="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_CONSISTENT_SCN(DBMS_LOGREP_LIB)",
    knlgetaprtype="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.UNPICKLE_PROGRESS_REDO_META(DBMS_LOGREP_LIB)",
    knlgetcscnfrompos="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_COMMIT_SCN_FROM_POSITION(DBMS_LOGREP_LIB)/SYS.LCR$_ROW_RECORD.GET_COMMIT_SCN_FROM_POSITION(DBMS_LOGREP_LIB)",
    knlgetggflags="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.GET_GG_SESS_FLAGS_INT(DBMS_LOGREP_LIB)",
    knlgetobjname="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL_INVOK.GET_OBJECT_NAME(DBMS_LOGREP_LIB)",
    knlgetprocusecontext="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_PROCUSE_CONTEXT_INTERNAL(DBMS_LOGREP_LIB)",
    knlgetscnfrompos="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_SCN_FROM_POSITION(DBMS_LOGREP_LIB)/SYS.LCR$_ROW_RECORD.GET_SCN_FROM_POSITION(DBMS_LOGREP_LIB)",
    knlgetsubsetrules="[Kernel Streams Replication] SYS.DBMS_STREAMS_ADM_IVK.GET_SUBSET_RULES(DBMS_LOGREP_LIB)",
    knlgetugaprocusecontext="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_PROC_USE_CONTEXT_INT(DBMS_LOGREP_LIB)",
    knlgmt="[Kernel Streams Replication] SYS.DBMS_STREAMS_ADM_IVK.GET_MESSAGE_TRACKING_INTERNAL(DBMS_LOGREP_LIB)",
    knlgrantadmin="[Kernel Streams Replication] SYS.DBMS_XSTREAM_AUTH_IVK.GRANT_ADMIN_PRIVILEGE_PDBS(DBMS_LOGREP_LIB)",
    knlgrt="[Kernel Streams Replication] SYS.DBMS_STREAMS_ADM_IVK.GET_TAG_INTERNAL(DBMS_LOGREP_LIB)",
    knlgsn="[Kernel Streams Replication] SYS.DBMS_STREAMS.GET_STREAMS_NAME(DBMS_LOGREP_LIB)",
    knlgst="[Kernel Streams Replication] SYS.DBMS_STREAMS.GET_STREAMS_TYPE(DBMS_LOGREP_LIB)",
    knlispreobj="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.VALIDATE_PREPARE_TABLE(DBMS_LOGREP_LIB)",
    knlisswitchuser="[Kernel Streams Replication] SYS.DBMS_LOGREP_IMP.IS_SWITCH_USER(DBMS_LOGREP_LIB)",
    knlistdupwrkspenabled="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.IS_TDUP_WRKSPC_ENABLED_INT(DBMS_LOGREP_LIB)",
    knll_ddl_cons="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.set_source_database_name(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.construct(LCR_DDL_LIB)",
    knll_ddl_gbown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knll_ddl_gbtnm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knll_ddl_gcompat="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_COMPATIBLE_INTERNAL(LCR_DDL_LIB)",
    knll_ddl_gcsma="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knll_ddl_gct="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_COMMAND_TYPE(LCR_DDL_LIB)",
    knll_ddl_gcusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_CURRENT_USER(LCR_DDL_LIB)",
    knll_ddl_gddl="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_DDL_TEXT(LCR_DDL_LIB)",
    knll_ddl_gea="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knll_ddl_gedt="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_EDITION_NAME(LCR_DDL_LIB)",
    knll_ddl_get_position="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_POSITION(LCR_DDL_LIB)",
    knll_ddl_get_src_time="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_SOURCE_TIME(LCR_DDL_LIB)",
    knll_ddl_get_threadnum="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_DDL_LIB)",
    knll_ddl_glusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_LOGON_USER(LCR_DDL_LIB)",
    knll_ddl_gonm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_OBJECT_NAME(LCR_DDL_LIB)",
    knll_ddl_gotp="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_OBJECT_TYPE(LCR_DDL_LIB)",
    knll_ddl_gown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_OBJECT_OWNER(LCR_DDL_LIB)",
    knll_ddl_gscn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.MAP_LCR(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.GET_SCN(LCR_DDL_LIB)",
    knll_ddl_gsdn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knll_ddl_gsrn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_ROOT_NAME(LCR_DDL_LIB)",
    knll_ddl_gtag="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_TAG(LCR_DDL_LIB)",
    knll_ddl_gtxid="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_TRANSACTION_ID(LCR_DDL_LIB)",
    knll_ddl_intg="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.IS_NULL_TAG(LCR_DDL_LIB)",
    knll_ddl_sbown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knll_ddl_sbtnm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knll_ddl_scsma="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knll_ddl_sct="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_COMMAND_TYPE(LCR_DDL_LIB)",
    knll_ddl_scusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_CURRENT_USER(LCR_DDL_LIB)",
    knll_ddl_sddl="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_DDL_TEXT(LCR_DDL_LIB)",
    knll_ddl_sea="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knll_ddl_sedt="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_EDITION_NAME(LCR_DDL_LIB)",
    knll_ddl_slusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_LOGON_USER(LCR_DDL_LIB)",
    knll_ddl_sonm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_OBJECT_NAME(LCR_DDL_LIB)",
    knll_ddl_sotp="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_OBJECT_TYPE(LCR_DDL_LIB)",
    knll_ddl_sown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_OBJECT_OWNER(LCR_DDL_LIB)",
    knll_ddl_ssdn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knll_ddl_ssrn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_ROOT_NAME(LCR_DDL_LIB)",
    knll_ddl_stag="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_TAG(LCR_DDL_LIB)",
    knll_prc_gcompat="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_COMPATIBLE(LCR_PRC_LIB)",
    knll_prc_gcurusr="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_CURRENT_USER(LCR_PRC_LIB)",
    knll_prc_gdefusr="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_DEFAULT_USER(LCR_PRC_LIB)",
    knll_prc_get_position="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_POSITION(LCR_PRC_LIB)",
    knll_prc_get_src_time="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_TIME(LCR_PRC_LIB)",
    knll_prc_get_threadnum="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_PRC_LIB)",
    knll_prc_glogusr="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_LOGON_USER(LCR_PRC_LIB)",
    knll_prc_gpknm="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_NAME(LCR_PRC_LIB)",
    knll_prc_gpkown="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_OWNER(LCR_PRC_LIB)",
    knll_prc_gprms="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PARAMETERS(LCR_PRC_LIB)",
    knll_prc_gprnm="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PROCEDURE_NAME(LCR_PRC_LIB)",
    knll_prc_gpub="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PUBLICATION(LCR_PRC_LIB)",
    knll_prc_groot="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_ROOT_NAME(LCR_PRC_LIB)",
    knll_prc_gscn="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.map_lcr(LCR_PRC_LIB)/SYS.LCR$_PROCEDURE_RECORD.GET_SCN(LCR_PRC_LIB)",
    knll_prc_gsdn="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_DATABASE_NAME(LCR_PRC_LIB)",
    knll_prc_gtag="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_TAG(LCR_PRC_LIB)",
    knll_prc_gtxid="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_TRANSACTION_ID(LCR_PRC_LIB)",
    knll_prc_intg="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.IS_NULL_TAG(LCR_PRC_LIB)",
    knll_row_acol="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.ADD_COLUMN(LCR_ROW_LIB)",
    knll_row_cons="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.set_source_database_name(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.construct(LCR_ROW_LIB)",
    knll_row_dcol="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.DELETE_COLUMN(LCR_ROW_LIB)",
    knll_row_gcompat="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_COMPATIBLE_INTERNAL(LCR_ROW_LIB)",
    knll_row_gct="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_COMMAND_TYPE(LCR_ROW_LIB)",
    knll_row_gcvl="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_VALUE(LCR_ROW_LIB)",
    knll_row_gcvls="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_VALUES(LCR_ROW_LIB)",
    knll_row_gea="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knll_row_get_base_oid="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_BASE_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knll_row_get_objn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knll_row_get_position="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_POSITION(LCR_ROW_LIB)",
    knll_row_get_src_time="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_SOURCE_TIME(LCR_ROW_LIB)",
    knll_row_get_text="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knll_row_get_text_bind="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knll_row_get_threadnum="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_ROW_LIB)",
    knll_row_get_wc="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knll_row_get_wc_bind="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knll_row_glinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LOB_INFORMATION(LCR_ROW_LIB)",
    knll_row_glninfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LONG_INFORMATION(LCR_ROW_LIB)",
    knll_row_glsize="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knll_row_goff="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LOB_OFFSET(LCR_ROW_LIB)",
    knll_row_gonm="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_OBJECT_NAME(LCR_ROW_LIB)",
    knll_row_gown="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_OBJECT_OWNER(LCR_ROW_LIB)",
    knll_row_gscn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.MAP_LCR(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.GET_SCN(LCR_ROW_LIB)",
    knll_row_gsdn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knll_row_gsrn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_ROOT_NAME(LCR_ROW_LIB)",
    knll_row_gtag="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_TAG(LCR_ROW_LIB)",
    knll_row_gtxid="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_TRANSACTION_ID(LCR_ROW_LIB)",
    knll_row_gxinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_XML_INFORMATION(LCR_ROW_LIB)",
    knll_row_intg="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.IS_NULL_TAG(LCR_ROW_LIB)",
    knll_row_is_stmt_lcr="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.IS_STATEMENT_LCR(LCR_ROW_LIB)",
    knll_row_kcols="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.KEEP_COLUMNS(LCR_ROW_LIB)",
    knll_row_long2lob="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.CONVERT_LONG_TO_LOB_CHUNK(LCR_ROW_LIB)",
    knll_row_rcol="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.RENAME_COLUMN(LCR_ROW_LIB)",
    knll_row_sct="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_COMMAND_TYPE(LCR_ROW_LIB)",
    knll_row_scvl="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_VALUE(LCR_ROW_LIB)",
    knll_row_scvls="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_VALUES(LCR_ROW_LIB)",
    knll_row_sea="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knll_row_set_text="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_ROW_TEXT(LCR_ROW_LIB)",
    knll_row_slinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_LOB_INFORMATION(LCR_ROW_LIB)",
    knll_row_slsize="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knll_row_soff="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_LOB_OFFSET(LCR_ROW_LIB)",
    knll_row_sonm="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_OBJECT_NAME(LCR_ROW_LIB)",
    knll_row_sown="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_OBJECT_OWNER(LCR_ROW_LIB)",
    knll_row_ssdn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knll_row_ssrn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_ROOT_NAME(LCR_ROW_LIB)",
    knll_row_stag="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_TAG(LCR_ROW_LIB)",
    knll_row_sxinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_XML_INFORMATION(LCR_ROW_LIB)",
    knllcrinttoext="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.CONVERT_INT_TO_EXT_LCR(DBMS_LOGREP_LIB)",
    knllcrtoxml="[Kernel Streams Replication] SYS.DBMS_STREAMS_LCR_INT.CONVERT_LCR_TO_XML_INT(DBMS_LOGREP_LIB)",
    knllddlcons="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.set_source_database_name(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.construct(LCR_DDL_LIB)",
    knllddlgbown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knllddlgbtnm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knllddlgcompat="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_COMPATIBLE_INTERNAL(LCR_DDL_LIB)",
    knllddlgcsma="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knllddlgct="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_COMMAND_TYPE(LCR_DDL_LIB)",
    knllddlgcusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_CURRENT_USER(LCR_DDL_LIB)",
    knllddlgddl="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_DDL_TEXT(LCR_DDL_LIB)",
    knllddlgea="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knllddlgedt="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_EDITION_NAME(LCR_DDL_LIB)",
    knllddlgetposition="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_POSITION(LCR_DDL_LIB)",
    knllddlgetsrctime="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_SOURCE_TIME(LCR_DDL_LIB)",
    knllddlgetthreadnum="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_DDL_LIB)",
    knllddlglusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_LOGON_USER(LCR_DDL_LIB)",
    knllddlgonm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_OBJECT_NAME(LCR_DDL_LIB)",
    knllddlgotp="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_OBJECT_TYPE(LCR_DDL_LIB)",
    knllddlgown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_OBJECT_OWNER(LCR_DDL_LIB)",
    knllddlgscn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.MAP_LCR(LCR_DDL_LIB)/SYS.LCR$_DDL_RECORD.GET_SCN(LCR_DDL_LIB)",
    knllddlgsdn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knllddlgsrn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_ROOT_NAME(LCR_DDL_LIB)",
    knllddlgtag="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_TAG(LCR_DDL_LIB)",
    knllddlgtxid="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.GET_TRANSACTION_ID(LCR_DDL_LIB)",
    knllddlintg="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.IS_NULL_TAG(LCR_DDL_LIB)",
    knllddlsbown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_OWNER(LCR_DDL_LIB)",
    knllddlsbtnm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_BASE_TABLE_NAME(LCR_DDL_LIB)",
    knllddlscsma="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_CURRENT_SCHEMA(LCR_DDL_LIB)",
    knllddlsct="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_COMMAND_TYPE(LCR_DDL_LIB)",
    knllddlscusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_CURRENT_USER(LCR_DDL_LIB)",
    knllddlsddl="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_DDL_TEXT(LCR_DDL_LIB)",
    knllddlsea="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_EXTRA_ATTRIBUTE(LCR_DDL_LIB)",
    knllddlsedt="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_EDITION_NAME(LCR_DDL_LIB)",
    knllddlslusr="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_LOGON_USER(LCR_DDL_LIB)",
    knllddlsonm="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_OBJECT_NAME(LCR_DDL_LIB)",
    knllddlsotp="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_OBJECT_TYPE(LCR_DDL_LIB)",
    knllddlsown="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_OBJECT_OWNER(LCR_DDL_LIB)",
    knllddlssdn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_SOURCE_DATABASE_NAME(LCR_DDL_LIB)",
    knllddlssrn="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_ROOT_NAME(LCR_DDL_LIB)",
    knllddlstag="[Kernel Streams Replication] SYS.LCR$_DDL_RECORD.SET_TAG(LCR_DDL_LIB)",
    knllprcgcompat="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_COMPATIBLE(LCR_PRC_LIB)",
    knllprcgcurusr="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_CURRENT_USER(LCR_PRC_LIB)",
    knllprcgdefusr="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_DEFAULT_USER(LCR_PRC_LIB)",
    knllprcgetposition="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_POSITION(LCR_PRC_LIB)",
    knllprcgetsrctime="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_TIME(LCR_PRC_LIB)",
    knllprcgetthreadnum="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_PRC_LIB)",
    knllprcglogusr="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_LOGON_USER(LCR_PRC_LIB)",
    knllprcgpknm="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_NAME(LCR_PRC_LIB)",
    knllprcgpkown="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PACKAGE_OWNER(LCR_PRC_LIB)",
    knllprcgprms="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PARAMETERS(LCR_PRC_LIB)",
    knllprcgprnm="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PROCEDURE_NAME(LCR_PRC_LIB)",
    knllprcgpub="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_PUBLICATION(LCR_PRC_LIB)",
    knllprcgroot="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_ROOT_NAME(LCR_PRC_LIB)",
    knllprcgscn="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.map_lcr(LCR_PRC_LIB)/SYS.LCR$_PROCEDURE_RECORD.GET_SCN(LCR_PRC_LIB)",
    knllprcgsdn="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_SOURCE_DATABASE_NAME(LCR_PRC_LIB)",
    knllprcgtag="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_TAG(LCR_PRC_LIB)",
    knllprcgtxid="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.GET_TRANSACTION_ID(LCR_PRC_LIB)",
    knllprcintg="[Kernel Streams Replication] SYS.LCR$_PROCEDURE_RECORD.IS_NULL_TAG(LCR_PRC_LIB)",
    knllrowacol="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.ADD_COLUMN(LCR_ROW_LIB)",
    knllrowcons="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.set_source_database_name(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.construct(LCR_ROW_LIB)",
    knllrowdcol="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.DELETE_COLUMN(LCR_ROW_LIB)",
    knllrowgcompat="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_COMPATIBLE_INTERNAL(LCR_ROW_LIB)",
    knllrowgct="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_COMMAND_TYPE(LCR_ROW_LIB)",
    knllrowgcvl="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_VALUE(LCR_ROW_LIB)",
    knllrowgcvls="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_VALUES(LCR_ROW_LIB)",
    knllrowgea="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knllrowgetbaseoid="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_BASE_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knllrowgetobjn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_OBJECT_ID_INTERNAL(LCR_ROW_LIB)",
    knllrowgetposition="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_POSITION(LCR_ROW_LIB)",
    knllrowgetsrctime="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_SOURCE_TIME(LCR_ROW_LIB)",
    knllrowgettext="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knllrowgettextbind="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_ROW_TEXT(LCR_ROW_LIB)",
    knllrowgetthreadnum="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_THREAD_NUMBER_INTERNAL(LCR_ROW_LIB)",
    knllrowgetwc="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knllrowgetwcbind="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_WHERE_CLAUSE(LCR_ROW_LIB)",
    knllrowglinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LOB_INFORMATION(LCR_ROW_LIB)",
    knllrowglninfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LONG_INFORMATION(LCR_ROW_LIB)",
    knllrowglsize="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knllrowgoff="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_LOB_OFFSET(LCR_ROW_LIB)",
    knllrowgonm="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_OBJECT_NAME(LCR_ROW_LIB)",
    knllrowgown="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_OBJECT_OWNER(LCR_ROW_LIB)",
    knllrowgscn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.MAP_LCR(LCR_ROW_LIB)/SYS.LCR$_ROW_RECORD.GET_SCN(LCR_ROW_LIB)",
    knllrowgsdn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knllrowgsrn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_ROOT_NAME(LCR_ROW_LIB)",
    knllrowgtag="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_TAG(LCR_ROW_LIB)",
    knllrowgtxid="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_TRANSACTION_ID(LCR_ROW_LIB)",
    knllrowgxinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.GET_XML_INFORMATION(LCR_ROW_LIB)",
    knllrowintg="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.IS_NULL_TAG(LCR_ROW_LIB)",
    knllrowisstmtlcr="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.IS_STATEMENT_LCR(LCR_ROW_LIB)",
    knllrowkcols="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.KEEP_COLUMNS(LCR_ROW_LIB)",
    knllrowlong2lob="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.CONVERT_LONG_TO_LOB_CHUNK(LCR_ROW_LIB)",
    knllrowrcol="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.RENAME_COLUMN(LCR_ROW_LIB)",
    knllrowsct="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_COMMAND_TYPE(LCR_ROW_LIB)",
    knllrowscvl="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_VALUE(LCR_ROW_LIB)",
    knllrowscvls="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_VALUES(LCR_ROW_LIB)",
    knllrowsea="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_EXTRA_ATTRIBUTE(LCR_ROW_LIB)",
    knllrowsettext="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_ROW_TEXT(LCR_ROW_LIB)",
    knllrowslinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_LOB_INFORMATION(LCR_ROW_LIB)",
    knllrowslsize="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_LOB_OPERATION_SIZE(LCR_ROW_LIB)",
    knllrowsoff="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_LOB_OFFSET(LCR_ROW_LIB)",
    knllrowsonm="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_OBJECT_NAME(LCR_ROW_LIB)",
    knllrowsown="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_OBJECT_OWNER(LCR_ROW_LIB)",
    knllrowssdn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_SOURCE_DATABASE_NAME(LCR_ROW_LIB)",
    knllrowssrn="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_ROOT_NAME(LCR_ROW_LIB)",
    knllrowstag="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_TAG(LCR_ROW_LIB)",
    knllrowsxinfo="[Kernel Streams Replication] SYS.LCR$_ROW_RECORD.SET_XML_INFORMATION(LCR_ROW_LIB)",
    knlog="[Kernel Streams Replication] streams replication goldengate",
    knlprepschemainst_cdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlprepschemainstcdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_SCHEMA_INST_CDB(DBMS_LOGREP_LIB)",
    knlprepsynctabs="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_SYNC_TABLE_LIST(DBMS_LOGREP_LIB)",
    knlpreptableinst_cdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlpreptableinstcdb="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.PREPARE_TABLE_INST_CDB(DBMS_LOGREP_LIB)",
    knlrevokeadmin="[Kernel Streams Replication] SYS.DBMS_XSTREAM_AUTH_IVK.REVOKE_ADMIN_PRIVILEGE_PDBS(DBMS_LOGREP_LIB)",
    knlrsconn="[Kernel Streams Replication] SYS.DBMS_RECOVERABLE_SCRIPT.CONNECT_CALLOUT(DBMS_RECO_SCRIPT_LIB)",
    knlrsdisconn="[Kernel Streams Replication] SYS.DBMS_RECOVERABLE_SCRIPT.DISCONNECT_CALLOUT(DBMS_RECO_SCRIPT_LIB)",
    knlrsebsn="[Kernel Streams Replication] SYS.DBMS_RECOVERABLE_SCRIPT.EXECUTE_BLOCK_CALLOUT(DBMS_RECO_SCRIPT_LIB)",
    knlsaoerr="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.ALTER_OBJECT_ERROR_NOTIFIER(DBMS_LOGREP_LIB)",
    knlsaooper="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM.SET_DML_HANDLER_INTERNAL(DBMS_LOGREP_LIB)",
    knlsetallocatedmemory="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SET_ALLOCATED_MEMORY(DBMS_LOGREP_LIB)",
    knlsetccamaxpercentage="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SET_CCA_MAX_PERCENTAGE(DBMS_LOGREP_LIB)",
    knlsetggflags="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.SET_GG_SESS_FLAGS_INT(DBMS_LOGREP_LIB)",
    knlsetxstreambit="[Kernel Streams Replication] SYS.DBMS_XSTREAM_ADM_UTL.SET_GG_XSTREAM_BIT(DBMS_LOGREP_LIB)",
    knlsicmpoldval="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.COMPARE_OLD_VALUES_INTERNAL(DBMS_LOGREP_LIB)",
    knlsiinst="[Kernel Streams Replication] SYS.DBMS_LOGREP_IMP_INTERNAL.INSTANTIATE(DBMS_LOGREP_LIB)",
    knlsiitb="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.INVALIDATE_TABLE_OBJECT(DBMS_LOGREP_LIB)",
    knlsiregremobj="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.REGISTER_REMOTE_OBJECT(DBMS_LOGREP_LIB)",
    knlsiscc="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.SET_CONSTRAINT_COLUMNS(DBMS_LOGREP_LIB)",
    knlsisoc="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.SET_OBJECT_CONSTRAINT(DBMS_LOGREP_LIB)",
    knlsivalremcol="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.VALIDATE_REMOTE_COLUMN(DBMS_LOGREP_LIB)",
    knlsmt="[Kernel Streams Replication] SYS.DBMS_STREAMS_ADM_IVK.SET_MESSAGE_TRACKING_INTERNAL(DBMS_LOGREP_LIB)",
    knlspval="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SET_PARAMETER(DBMS_LOGREP_LIB)",
    knlsrt="[Kernel Streams Replication] SYS.DBMS_STREAMS_ADM_IVK.SET_TAG(DBMS_LOGREP_LIB)",
    knlssaf="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SET_STREAMS_AUTO_FILTER(DBMS_LOGREP_LIB)",
    knlsskeycol="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM.SET_KEY_COLUMNS_INTERNAL(DBMS_LOGREP_LIB)",
    knlstartproc="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.START_PROCESS(DBMS_LOGREP_LIB)",
    knlstopproc="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.STOP_PROCESS(DBMS_LOGREP_LIB)",
    knlstoreprepareinfo="[Kernel Streams Replication] SYS.DBMS_CAPTURE_ADM_INTERNAL.STORE_PREPARE_INFO(DBMS_LOGREP_LIB)",
    knltcfe="[Kernel Streams Replication] SYS.DBMS_STREAMS_TBS_INT.CHECK_FILE_EXISTS_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltchk="[Kernel Streams Replication] SYS.DBMS_STREAMS_TBS_INT_INVOK.CHECK_PRIVILEGE_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltcpn="[Kernel Streams Replication] SYS.DBMS_STREAMS_TBS_INT.COMPARE_PATH_NAMES_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltdel="[Kernel Streams Replication] SYS.DBMS_STREAMS_TBS_INT.REMOVE_FILE_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltgfn="[Kernel Streams Replication] SYS.DBMS_STREAMS_TBS_INT.GENERATE_FILE_NAME_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knltpfn="[Kernel Streams Replication] SYS.DBMS_STREAMS_TBS_INT.PARSE_FILE_NAME_CALLOUT(DBMS_STREAMS_TBS_LIB)",
    knlu_mt_purge_btree="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_PURGE(DBMS_LOGREP_LIB)",
    knlu_mt_resize_btree="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_RESIZE_INT(DBMS_LOGREP_LIB)",
    knlu_txn_purge_btree="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.STREAMS_TRANSACTION_PURGE_INT(DBMS_LOGREP_LIB)",
    knluenst="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.ENSURE_STREAMS(DBMS_LOGREP_LIB)",
    knlugetconstraint="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_CONSTRAINT_NAME(DBMS_LOGREP_LIB)",
    knluisbit="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.IS_BUILT_IN_TYPE(DBMS_LOGREP_LIB)",
    knluisctassupdml="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.IS_CTAS_NO_DML_SESS_INT(DBMS_LOGREP_LIB)",
    knluisfootriggset="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.IS_FOO_TRIG_FIRE_AT_SESS_INT(DBMS_LOGREP_LIB)",
    knluisminingcharsetcompatible="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.IS_CHARSET_COMP_FOR_MINING(DBMS_LOGREP_LIB)",
    knlulock3gl="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_LOCK(DBMS_LOGREP_LIB)",
    knlulock_3gl="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.GET_LOCK(DBMS_LOGREP_LIB)",
    knlumtpurgebtree="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_PURGE(DBMS_LOGREP_LIB)",
    knlumtresizebtree="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.MESSAGE_TRACKING_RESIZE_INT(DBMS_LOGREP_LIB)",
    knlunpickleapr="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.UNPICKLE_APPLY_PROGRESS_REDO(DBMS_LOGREP_LIB)",
    knlunpicklelsbypr="[Kernel Streams Replication] SYS.DBMS_APPLY_ADM_INTERNAL.UNPICKLE_LSBY_PROGRESS_REDO(DBMS_LOGREP_LIB)",
    knlunumsubs="[Kernel Streams Replication] SYS.DBMS_XSTREAM_ADM_UTL.NUM_SUBSCRIBERS(DBMS_LOGREP_LIB)",
    knlurse="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.RAISE_SYSTEM_ERROR_3GL(DBMS_LOGREP_LIB)",
    knlursw="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.RAISE_SYSTEM_WARNING_3GL(DBMS_LOGREP_LIB)",
    knluscntopos="[Kernel Streams Replication] SYS.DBMS_XSTREAM_ADM_UTL.CONVERT_SCN_TO_POS(DBMS_LOGREP_LIB)",
    knluset3xidenflag="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SET_3X_IDEN(DBMS_LOGREP_LIB)",
    knlusetctassupdml="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.SET_CTAS_SESS_CTX_INT(DBMS_LOGREP_LIB)",
    knlusetfootrigg="[Kernel Streams Replication] SYS.DBMS_XSTREAM_GG_INTERNAL.SET_FOO_TRIGGER_CONTXT_INT(DBMS_LOGREP_LIB)",
    knlusetsupplog="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SET_SUPP_LOGGING(DBMS_LOGREP_LIB)",
    knlustrcmpcs="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.STRCMP_CS(DBMS_LOGREP_LIB)",
    knlustreamsadmincheck="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL_INVOK.CHECK_DV_STREAMS_ADMIN(DBMS_LOGREP_LIB)",
    knlutxnpurgebtree="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.STREAMS_TRANSACTION_PURGE_INT(DBMS_LOGREP_LIB)",
    knluunlock3gl="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.RELEASE_LOCK(DBMS_LOGREP_LIB)",
    knluunlock_3gl="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.RELEASE_LOCK(DBMS_LOGREP_LIB)",
    knlxmltolcr="[Kernel Streams Replication] SYS.DBMS_STREAMS_LCR_INT.CONVERT_XML_TO_LCR_INT(DBMS_LOGREP_LIB)",
    knlzseshasrol="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.SESS_HAS_ROLE(DBMS_LOGREP_LIB)",
    knlzusrhasrol="[Kernel Streams Replication] SYS.DBMS_LOGREP_UTIL.USER_HAS_ROLE(DBMS_LOGREP_LIB)",
    knpc_gcticd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_GCTICD(C)",
    knpc_pricd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_PRICD(C)",
    knpc_puicd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_PUICD(C)",
    knpc_sqbicd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_SQBICD(C)",
    knpcgcticd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_GCTICD(C)",
    knpcpricd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_PRICD(C)",
    knpcpuicd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_PUICD(C)",
    knpcsqbicd="[Kernel Replication] SYS.DBMS_ASYNCRPC_PUSH.KNPC_SQBICD(C)",
    knps="[Kernel Replication] Parallel propagation Slave",
    knsq="[Kernel Replication] streams/goldengate message queueing",
    knst="[Kernel Replication] streams/goldengate",
    knt="[Kernel Replication] (internal) triggers",
    kntxit="[Kernel Replication] (internal) triggers execute internal triggers",
    kntxlp="[Kernel Replication] (internal) triggers exeucte internal triggers for LOB piecewise",
    kntxrl="[Kernel Replication] (internal) triggers execute replication trigger for LOB",
    ko="[Kernel Object] ",
    koc="[Kernel Object Cache manager] ",
    kocbeg="[Kernel Object Cache manager] begin transaction",
    koccngt="[Kernel Object Cache manager] ??",
    kocdsgt="[Kernel Object Cache manager] ??",
    kocedd="[Kernel Object Cache manager] end duration",
    kocgor="[Kernel Object Cache manager] ??",
    kociih="[Kernel Object Cache manager] instantiate an instance in the object heap",
    kocpnm="[Kernel Object Cache manager] pin an object by name",
    kod="[kernel objects data manager (pickler)] ",
    kod2ppic="[kernel objects data manager (pickler)] pickle an object into an image",
    kodin2p="[kernel objects data manager (pickler)] map a name to an pref",
    kodpunp="[kernel objects data manager (pickler)] unpickle an image into an object",
    kodrdel="[kernel objects data manager (pickler)] SYS.UTL_REF.DELETE_OBJECT(DBMS_UTL_REF_LIB)",
    kodrlk="[kernel objects data manager (pickler)] SYS.UTL_REF.LOCK_OBJECT(DBMS_UTL_REF_LIB)",
    kodrsel="[kernel objects data manager (pickler)] SYS.UTL_REF.SELECT_OBJECT(DBMS_UTL_REF_LIB)",
    kodrslk="[kernel objects data manager (pickler)] SYS.UTL_REF.LOCK_OBJECT(DBMS_UTL_REF_LIB)",
    kodrslsn="[kernel objects data manager (pickler)] SYS.UTL_REF.SELECT_OBJECT_WITH_CR(DBMS_UTL_REF_LIB)",
    kodrupd="[kernel objects data manager (pickler)] SYS.UTL_REF.UPDATE_OBJECT(DBMS_UTL_REF_LIB)",
    koh="[Kernel Object Heap manager] ",
    kohaii="[Kernel Object Heap manager] allocate and initialize an instance",
    kohalc="[Kernel Object Heap manager] allocate memory chunk",
    kohatd="[Kernel Object Heap manager] allocate using TDs",
    kohdee="[Kernel Object Heap manager] duration entry end",
    kohdmpins="[Kernel Object Heap manager] ??",
    kohdtg="[Kernel Object Heap manager] duration table get a duration entry",
    kohedu="[Kernel Object Heap manager] end an user duration",
    kohrsc="[Kernel Object Heap manager] resize memory chunk",
    koi="[Kernel Object Interface] ",
    koicadt="[Kernel Object Interface] construct ADT",
    koicupt="[Kernel Object Interface] construct UPT",
    koio="[Kernel Object Interface] ?",
    koiocon="[Kernel Object Interface] ? constructor",
    koionew="[Kernel Object Interface] ? create (and pin) a new named instance",
    koiopnm="[Kernel Object Interface] ? pin an object by name",
    kok="[Kernel Object Kernel-side] ",
    koka="[Kernel Object Kernel-side] access",
    kokbtns="[Kernel Object Kernel-side] type check the nested select operator",
    kokd="[Kernel Object Kernel-side] driver",
    kokdn2p="[Kernel Object Kernel-side] driver map a name to an pref",
    koke="[Kernel Object Kernel-side] OBJECTS images",
    koki="[Kernel Object Kernel-side Id generator] ",
    kokl="[Kernel Object Kernel-side Lob access] ",
    kokl3="[Kernel Object Kernel-side temporary LOB support] ",
    kokla="[Kernel Object Kernel-side anydata LOB support] ",
    koklcopy="[Kernel Object Kernel-side Lob access] lob copy",
    koklcpb2c="[Kernel Object Kernel-side Lob access] copy binary data into lob",
    koklcre="[Kernel Object Kernel-side Lob access] lob create",
    koklcwrite="[Kernel Object Kernel-side Lob access] lob write",
    kokleva="[Kernel Object Kernel-side Lob access] lob evaluate",
    kokli="[Kernel Object Kernel-side Lob access] internal",
    kokliclo="[Kernel Object Kernel-side Lob access] internal create with another locator",
    kokligrd="[Kernel Object Kernel-side Lob access] internal initialize kdllfn with row data",
    koklivrl="[Kernel Object Kernel-side Lob access] internal verify the row containing the lob is locked",
    koklm="[Kernel Object Kernel-side Lob access] lob Default",
    koklread="[Kernel Object Kernel-side Lob access] read",
    kokltrim="[Kernel Object Kernel-side Lob access] trim",
    koklv="[Kernel Object Kernel-side Lob access] lob default",
    kokm="[Kernel Object Kernel-side] methods",
    kokmrwo="[Kernel Object Kernel-side] methods get new RWO vector enhanced with ordering",
    kokn="[Kernel Object Kernel-side Naming] ",
    koknmpn="[Kernel Object Kernel-side Naming] map name and oid",
    koko="[Kernel Object Kernel-side] objects?",
    kokoupkl="[Kernel Object Kernel-side] objects? unpickle into and instance",
    koks="[Kernel Object Kernel-side] semantic analysis",
    kokscupd="[Kernel Object Kernel-side] semantic analysis check for updatability of column and change adf flag",
    koksxlv="[Kernel Object Kernel-side] semantic analysis xform operand tree into an L-Value",
    kokt="[Kernel Object Compilation Type manager] ",
    kokt2="[Kernel Object Compilation Type manager 2] ",
    kokt3="[Kernel Object Compilation Type manager 3] ",
    kokv="[Kernel Object Kernel-side object View support] ",
    kol="[Kernel Object c Language interface] ",
    kola="[Kernel Object Lob] ",
    kolace="[Kernel Object Lob] XDB CSX print",
    kolaerrorhandler="[Kernel Object Lob] error handler",
    kolars="[Kernel Object Lob] XDB CSX print",
    kolc="[Kernel Object Collection] ",
    kolccst="[Kernel Object Collection] construct element callback",
    kolcins="[Kernel Object Collection] inset space for the element at the given index",
    kolcpupkl="[Kernel Object Collection] unpickle collection",
    kole="[Kernel Object Lob] default",
    kolf="[Kernel Objects File] ",
    kolfgdir="[Kernel Objects File] get directory object path and filenames",
    kolfopen="[Kernel Objects File] open a file",
    koll="[Kernel Object Lob] locator",
    kollgsz="KOLL Get the SiZe of the input lob locator",
    kollrsz="[Kernel Object Lob] locator resize and initialize a lob locator",
    kolo="[Kernel Object] OBJECTS anydata",
    kolr="[Kernel Object Lob] refcount",
    kols="[Kernel Object] ?",
    kolsins="[Kernel Object] insert space for the element at the given index",
    kolstins="[Kernel Object] tree insert space for the element at the given index",
    koluislc="[Kernel Object] SYS.UTL_COLL.IS_LOCATOR(DBMS_UTL_COLL_LIB)",
    kope2pic="[Kernel Object] pickler mumbo jumbo",
    kopetrv="[Kernel Object] kop engine and traverse",
    kopldsinit="[Kernel Object] kop lds initialize a pre-allocated lds",
    kos="[Kernel Object] stream interfaces for images/objects",
    kosibegin="[Kernel Object] stream interfaces for images/objects image begin",
    kosiend="[Kernel Object] stream interfaces for images/objects image end callback",
    kot="[Kernel Open Type Manager] ",
    kotg="[Kernel Open Type Manager accessor (Get) routines] ",
    kotgtyp="[Kernel Open Type Manager accessor (Get) routine types] ",
    koxs="[Kernel Object] OBJECTS streams",
    koxsihread="[Kernel Object] OBJECTS streams image handle write from buffer",
    kp="[Kernel Programmatic Interface] ",
    kpbf="[Kernel Programmatic Interface] progint miscellaneous",
    kpbfcopy="[Kernel Programmatic Interface] SYS.DBMS_FILE_TRANSFER.COPY_FILE_I(DBMS_FILE_TRANSFER_LIB)",
    kpbfget="[Kernel Programmatic Interface] SYS.DBMS_FILE_TRANSFER.GET_FILE_I(DBMS_FILE_TRANSFER_LIB)",
    kpbfput="[Kernel Programmatic Interface] SYS.DBMS_FILE_TRANSFER.PUT_FILE_I(DBMS_FILE_TRANSFER_LIB)",
    kpce="[Kernel Programmatic Interface] multi threaded network",
    kpcesend="[Kernel Programmatic Interface] streams advanaced queuing ??",
    kpceterm="[Kernel Programmatic Interface] multi threaded network terminate any connections from this layer",
    kpcm="[Kernel Programmatic Interface] streams advanced queuing",
    kpdb="[Kernel Programmatic Interface] pluggable database",
    kpdbchecknft="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCHECKNF(C)",
    kpdbcheckplugcompatible="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCHECKPLUGCOMPATIBLE(C)",
    kpdbchklockdown="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCHKLOCKDOWN(C)",
    kpdbcleanresolve="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCLEANRESOLVE(C)",
    kpdbcleanuptask="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCLEANUPTASK(C)",
    kpdbconverttolocal="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCONVERTTOLOCAL(C)",
    kpdbcreatecftables="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCREATECFTABLE(C)",
    kpdbcvupdatecrossconstats="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBCVUPDATECROSSCONSTATS(C)",
    kpdbdescribe="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBDESCRIBE(C)",
    kpdbdropcftables="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBDROPCFTABLE(C)",
    kpdbexecoraclescript="[Kernel Programmatic Interface] SYS.DBMS_PDB.EXEC_AS_ORACLE_SCRIPT(DBMS_PDB_LIB)",
    kpdbfcopytaskcbk="[Kernel Programmatic Interface] pluggable database parallel copy or move file task callback",
    kpdbfdeletefile="[Kernel Programmatic Interface] pluggable database delete a file based on copy or move",
    kpdbfdsetprofexplicit="[Kernel Programmatic Interface] SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETPROFEXPLICIT(C)",
    kpdbfdsetroleexplicit="[Kernel Programmatic Interface] SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETROLEEXPLICIT(C)",
    kpdbfdsetsharing="[Kernel Programmatic Interface] SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETSHARING(C)",
    kpdbfdsetuserexplicit="[Kernel Programmatic Interface] SYS.DBMS_PDB_ALTER_SHARING.KPDBFDSETUSEREXPLICIT(C)",
    kpdbisvalidpath="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBISVALIDPATH(C)",
    kpdblong2varchar2="[Kernel Programmatic Interface] SYS.CDBVIEW_INTERNAL.long2varchar2_i(DBMS_PDB_LIB)",
    kpdbmomovedata="[Kernel Programmatic Interface] SYS.DBMS_PDB_APP_CON.MOVE_DATA(DBMS_PDB_LIB)",
    kpdbnoncdb2pdb="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBNONCDB2PDB(C)",
    kpdbpopulatesynctable="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBPOPULATESYNCTABL(C)",
    kpdbrecover="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBRECOVER(C)",
    kpdbsync="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBSYN(C)",
    kpdbupdatecrossconstats="[Kernel Programmatic Interface] pluggable database DBMS_PDB.KPDBCVUPDATECROSSCONSTRATS UPDATE_CDBVW_STATS",
    kpdbupdatevsn="[Kernel Programmatic Interface] SYS.DBMS_PDB.KPDBUPDATEVS(C)",
    kpedbgcrash="[Kernel Programmatic Interface] ??",
    kpedbgsignalhandler="[Kernel Programmatic Interface] ??",
    kpfs="[Kernel Programmatic Interface] NPI",
    kpin="[Kernel Programmatic Interface] progint miscellaneous",
    kpk="[Kernel Programmatic Interface] OCI",
    kpkhetp="[Kernel Programmatic Interface] SYS.HAEN_TXFM_TEXT.haen_txfm_text(DBMS_HAEVENTNOT_PRVT_LIB)",
    kpkptresolvetnsname="[Kernel Programmatic Interface] SYS.DBMS_TNS.RESOLVE_TNSNAME(DBMS_TNS_LIB)",
    kpm="[Kernel Programmatic Interface] transparent session migration",
    kpn="[Kernel Programmatic Interface] OCI",
    kpndbcon="[Kernel Programmatic Interface] OCI ??",
    kpo="[Kernel Programmatic Oracle]",
    kpoal8="[Kernel Programmatic Oracle ALI] V8 bundled execution",
    kpoaq="[Kernel Programmatic Oracle ALI] streams advanaced queuing",
    kpoauth="[Kernel Programmatic Oracle] authenticate",
    kpoclsa="[Kernel Programmatic Oracle] close all cursors",
    kpodny="[Kernel Programmatic Oracle] describe any arguments used",
    kpodp="[Kernel Programmatic Oracle] direct path load",
    kpodpp="[Kernel Programmatic Oracle] direct path load ??",
    kpodsca="[Kernel Programmatic Oracle] V8 Describe Any(OCIDescribeAny)",
    kpofchswcbk="[Kernel Programmatic Oracle] fetch switch callback",
    kpofrws="[Kernel Programmatic Oracle] ??",
    kpogsk="[Kernel Programmatic Oracle] initializes the session and returns the encrypted session key",
    kpohal="[Kernel Programmatic Oracle] This is the memory allocator that uses kpcch (the common heap module)",
    kpolal="[Kernel Programmatic Oracle] lob allocator",
    kpolnb="[Kernel Programmatic Oracle] ??",
    kpolob="[Kernel Programmatic Oracle] lob operations",
    kpon="[Kernel Programmatic Oracle] notification",
    kponcoord="[Kernel Programmatic Oracle] streams advanaced queuing ??",
    kpond="[Kernel Programmatic Oracle] notification advanced queuing",
    kpone="[Kernel Programmatic Oracle] notification event monitor",
    kponemn="[Kernel Programmatic Oracle] notification event monitor main. emon main loop",
    kponepms="[Kernel Programmatic Oracle] streams advanaced queuing ??",
    kponprmsg="[Kernel Programmatic Oracle] streams advanaced queuing ??",
    kponpurgeunreachloc="[Kernel Programmatic Oracle] notification remove registrations for unreachable locations",
    kponsnd="[Kernel Programmatic Oracle] streams advanaced queuing ??",
    kpoodr="[Kernel Programmatic Oracle] replaces ttcdrv to handle pisdef in fastpath mode",
    kpoodrc="[Kernel Programmatic Oracle] replaces ttcdrv to handle pisdef in fastpath mode ??",
    kpoopq="[Kernel Programmatic Oracle] set keyword value pair",
    kpooprx="[Kernel Programmatic Oracle] open, parse, and optionally execute",
    kpoq="[Kernel Programmatic Oracle] result cache",
    kpor="[Kernel Programmatic Oracle RPC callback for streaming] ",
    kporpc="[Kernel Programmatic Oracle RPC callback for streaming] the oracle side function to start rpc",
    kposc="[Kernel Programmatic Oracle] scrollable cursors",
    kpotc="[Kernel Programmatic Oracle] setting up trusted external procedure callbacks",
    kpotx="[Kernel Programmatic OCI Transaction] ",
    kpotxcap="[Kernel Programmatic OCI Transaction] commit, abort and prepare",
    kpotxen="[Kernel Programmatic OCI Transaction] 2-phase end transaction driver",
    kpov="[Kernel Programmatic Oracle] distributed transaction coordination",
    kpoxcappcontbeginreplay="[Kernel Programmatic Oracle] SYS.DBMS_APP_CONT_PRVT.BEGIN_REPLAY(DBMS_APP_CONT_PRVT_LIB2)",
    kpoxcappcontendreplay="[Kernel Programmatic Oracle] SYS.DBMS_APP_CONT_PRVT.END_REPLAY(DBMS_APP_CONT_PRVT_LIB2)",
    kpoxcappcontpreparereplay="[Kernel Programmatic Oracle] SYS.DBMS_APP_CONT_PRVT.PREPARE_REPLAY_INT(DBMS_APP_CONT_PRVT_LIB2)",
    kpp2="[Kernel Programmatic Interface] parse routine for dimensions",
    kpp3="[Kernel Programmatic Interface] parse routine for create/alter/drop summary statements",
    kppl="[Kernel Programmatic Interface] database resistent connection pool",
    kppliatpcp="[Kernel Programmatic Interface] SYS.DBMS_CONNECTION_POOL.ALTER_PARAM(DBMS_CONNECTION_POOL_LIB)",
    kpplicfgcp="[Kernel Programmatic Interface] SYS.DBMS_CONNECTION_POOL.CONFIGURE_POOL(DBMS_CONNECTION_POOL_LIB)",
    kpplistpcp="[Kernel Programmatic Interface] SYS.DBMS_CONNECTION_POOL.STOP_POOL(DBMS_CONNECTION_POOL_LIB)",
    kpplistrcp="[Kernel Programmatic Interface] SYS.DBMS_CONNECTION_POOL.START_POOL(DBMS_CONNECTION_POOL_LIB)",
    kpr="[Kernel PRogrammatic interface] ",
    kprb="[Kernel PRogrammatic interface Bundled operations] ",
    kprball="[Kernel PRogrammatic interface Bundled operations] execute all bundled kpr/rpi operations",
    kprbalo="[Kernel PRogrammatic interface Bundled operations] allocator callback",
    kprbbin="[Kernel PRogrammatic interface Bundled operations] number of bind variables",
    kprc="[Kernel Programatic interface Rpi Copy routines] ",
    kprccu="[Kernel Programatic interface Rpi Copy routines] copy data given Uac",
    kprcdt="[Kernel Programatic interface Rpi Copy routines] copy data",
    kprlob="[Kernel Programmatic Recursive LOB functions] ",
    kps="[Kernel Programmatic Interface] transparent session migration",
    kpscrcap="[Kernel Programmatic Interface] SYS.DBMS_SESSION_STATE.SS_CAPTURE(DBMS_SS_LIB)",
    kpscrmrk="[Kernel Programmatic Interface] SYS.DBMS_SESSION_STATE.SS_MARK_CAPTURE(DBMS_SS_LIB)",
    kpscrres="[Kernel Programmatic Interface] SYS.DBMS_SESSION_STATE.SS_RESTORE(DBMS_SS_LIB)",
    kpscrumk="[Kernel Programmatic Interface] SYS.DBMS_SESSION_STATE.SS_UNMARK_CAPTURE(DBMS_SS_LIB)",
    kptsc="[Kernel Programmatic Interface] callback functions for streaming operations for replication",
    kpu="[Kernel Programmatic Interface] user",
    kpuaq="[Kernel Programmatic Interface] user streams advanaced queuing",
    kpuc="[Kernel Programmatic Interface] user cursor management functions",
    kpucp="[Kernel Programmatic Interface] user cursor management functions client side connection pooling support",
    kpudcn2c="[Kernel Programmatic Interface] user convert Number to Character string",
    kpudp="[Kernel Programmatic Interface] user DPAPI Load",
    kpuexec="[Kernel Programmatic Interface] user execute",
    kpuexecv8="[Kernel Programmatic Interface] user execute execute V8",
    kpufch="[Kernel Programmatic Interface] user fetch one or more rows",
    kpuhh="[Kernel Programmatic Interface] user handle heap",
    kpuhhalo="[Kernel Programmatic Interface] user handle heap allocate memory freeable",
    kpuhhmrk="[Kernel Programmatic Interface] user handle heap mark",
    kpun="[Kernel Programmatic Interface] user streams advanced queuing",
    kpur="[Kernel Programmatic Interface] user remote",
    kpurcs="[Kernel Programmatic Interface] user remote call with service context",
    kpurcsc="[Kernel Programmatic Interface] user remote call with service context remote call with service context, callbacks",
    kpureq="[Kernel Programmatic Interface] user remote request (a statement to be executed)",
    kpuvers="[Kernel Programmatic Interface] user version",
    kpuzxs="[Kernel Programmatic Interface] user XS midtier",
    kq="[Kernel Query] ",
    kqaiconn="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAICONN(C)",
    kqaidisc="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAIDISC(C)",
    kqaigcsi="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAIGCSI(C)",
    kqaigcss="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAIGCSS(C)",
    kqaignp="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAIGNP(C)",
    kqaipcs="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAIPCS(C)",
    kqaipde="[Kernel Query] SYS.PBSDE.KQAIPDE(C)",
    kqairjd="[Kernel Query] SYS.DBMS_JAVA_DUMP.KQAIRJD(C)",
    kqaisnp="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAISNP(C)",
    kqaivsn="[Kernel Query] SYS.DBMS_DEBUG_JDWP.KQAIVSN(C)/SYS.DBMS_JAVA_DUMP.KQAIVSN(C)/SYS.PBSDE.KQAIVSN(C)",
    kqan="[Kernel Query] server side debug operations",
    kqap="[Kernel Query] server side debug operations",
    kqas="[Kernel Query] server side debug operations",
    kqd="[Kernel Query processing layer Dictionary management] ",
    kqdgtc="[Kernel Query processing layer Dictionary management] return an open and parsed cursor for a statement",
    kqdobr="[Kernel Query processing layer Dictionary management] read obj$ row using (owner#,name,namespace,remoteowner,linkname) as key",
    kqdobu="[Kernel Query processing layer Dictionary management] verify object uniqueness (?)",
    kqdunr="[Kernel Query processing layer Dictionary management] get user id using name as key",
    kqf="[Kernel SQL Fixed Object management] ",
    kqfd="[Kernel SQL Fixed Object management] direct access to fixed tables",
    kqfp="[Kernel Query Fixed Packages] ",
    kqfrs="[Kernel Query Fixed tables Row Source] ",
    kql="[Kernel SQL Library manager] ",
    kqladdschemareference="[Kernel SQL Library manager] add a schema during semantic checking",
    kqlb="[Kernel SQL Library Bootstrapping Support] ",
    kqlchg="[Kernel Query] callback of kglfls to flush changes to disk",
    kqlclo="[Kernel SQL Library manager] cleanup nonexistent objects in OBJ$",
    kqld="[Kernel SQL Library dictionary callbacks] ",
    kqldprr="[Kernel SQL Library dictionary callbacks] parent referential constraint read",
    kqlfbct="[Kernel SQL Library manager] ??",
    kqlfbctc="[Kernel SQL Library manager] ??",
    kqlfgl="[Kernel SQL Library manager] get row for Lock, fixed table support",
    kqlfgx="[Kernel SQL Library manager] get row for access table entry, fixed table support",
    kqlftl="[Kernel SQL Library manager] cache fixed Table for Locks callback",
    kqlfxp="[Kernel SQL Library manager] ??",
    kqlidp="[Kernel Query] invalidate all the dependents on the procedure to be dropped",
    kqllod="[Kernel SQL Library manager] database object load",
    kqlm="[Kernel SQL Library Multi-instance manager] ",
    kqlmbpil="[Kernel SQL Library Multi-instance manager] background process a pin instance lock",
    kqlmcdlod="[Kernel SQL Library Multi-instance manager] mcode heap load",
    kqlnfy="[Kernel SQL Library manager] notify",
    kqlobjlod="[Kernel SQL Library manager] object load",
    kqlobld="[Kernel SQL Library manager] object load",
    kqlobpn="[Kernel SQL Library manager] object pin heaps and load data pieces",
    kqlp="[Kernel SQL Library manager] sharing of sql statements",
    kqlpim="[Kernel SQL Library manager] sharing of sql statements pin and load more heaps",
    kqlplslod="[Kernel SQL Library manager] sharing of sql statements pl/sql object load",
    kqlr="[Kernel SQL Library Remote] ",
    kqlrddsc="[Kernel SQL Library Remote] describe callback function",
    kqlrds="[Kernel SQL Library Remote] describe a cursor at the default host",
    kqlrld="[Kernel SQL Library Remote] load a remote library object",
    kqls="[Kernel SQL subordinate Set manager] ",
    kqlsadd="[Kernel SQL subordinate Set manager] add a new element to a subordinate set",
    kqlsget="[Kernel SQL subordinate Set manager] get full constraint definition",
    kqlslod="[Kernel SQL subordinate Set manager] load all subordinate set elements for a given heap",
    kqludp="[Kernel SQL Library manager] update with dependencies",
    kqlunac="[Kernel SQL Library manager] unauthenticate dependents of an object",
    kqlvld="[Kernel SQL Library manager] validate an object",
    kqr="[Kernel SQL Row cache management] ",
    kqreqd="[Kernel SQL Row cache management] reacquires latch before removing enqueue",
    kqrfr="[Kernel SQL Row cache management] free",
    kqrfrc="[Kernel SQL Row cache management] free cache",
    kqrfrpo="[Kernel SQL Row cache management] free pinned object(?)",
    kqrhsh="[Kernel SQL Row cache management] hash",
    kqrpre="[Kernel SQL Row cache management] read a parent cache object",
    kqrpre1="[Kernel SQL Row cache management] read a parent cache object additional 1",
    kqrprl="[Kernel SQL Row cache management] parent release enqueue",
    kqrrls="[Kernel SQL Row cache management] release lock",
    kqrsfd="[Kernel SQL Row cache management] find a subordinate cache object",
    kqrso="[Kernel SQL Row cache management] acquires kqrplt latch to find object in subordinate list",
    kqrsrd="[Kernel SQL Row cache management] subordinate cache object read",
    kr="[Kernel Recovery] ",
    kra="[Kernel Recovery] area function",
    krb="[Kernel Recovery Backup/Restore] ",
    krb1g="[Kernel Recovery Backup/Restore] read (and optionally validate) first block of file",
    krbabr="[Kernel Recovery Backup/Restore] auto block media recovery",
    krbb="[Kernel Recovery Backup/restore Backup set creation] ",
    krbb2ec="[Kernel Recovery Backup/restore Backup set creation] write backuplog records to controlfile at end of backup set",
    krbb3fwb="[Kernel Recovery Backup/restore Backup set creation] finish write buffer for creation of compressed backup pieces",
    krbbcdo="[Kernel Recovery Backup/restore Backup set creation] compression do",
    krbbpc="[Kernel Recovery Backup/restore Backup set creation] piece create",
    krbc="[Kernel Recovery backup/Restore controlfile] ",
    krbd="[Kernel Recovery Backup/restore Device control] ",
    krbdgdal="[Kernel Recovery Backup/restore Device control] ??",
    krbdrel="[Kernel Recovery Backup/restore Device control] ??",
    krbfgh="[Kernel Recovery Backup/Restore] read first block with kGfd. the block must have a kcbh header",
    krbfghv="[Kernel Recovery Backup/Restore] read first block with kGfd. the block must have a kcbh header Datafile/control header block Validation. callback from krb1g.",
    krbi="[Kernel Recovery Backup/restore ICDs] ",
    krbi_beg_register_auxdfc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_BEG_REGISTER_AUXDFC(C)",
    krbi_chkcompalg="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CHKCOMPALG(C)",
    krbi_cleanup_backup_records="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_BACKUP_RECORD(C)",
    krbi_cleanup_foreign_al="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_FOREIGN_A(C)",
    krbi_cleanup_foreign_all="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_CLEANUP_FOREIGN_ALL CLEANUPFOREIGNARCHIVEDLOGS",
    krbi_cleanup_pgax="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_PGA(C)",
    krbi_clear_controlfile="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_CLEARCONTROLFILE CLEARCONTROLFILE",
    krbi_clearcontrolfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEARCONTROLFIL(C)",
    krbi_create_fra_acc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ACC(C)",
    krbi_create_fra_adc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ADC(C)",
    krbi_create_restorepoint="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_CREATE_RESTPOINT CREATERESTOREPOINT",
    krbi_create_restpoint="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_RESTPOINT(C)",
    krbi_create_xml="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_XML(C)",
    krbi_describeremotepdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_DESCRIBEREMOTEPDB(C)",
    krbi_dupfileexists="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_DUPFILEEXISTS(C)",
    krbi_flashback_cf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_FLASHBACK_CF(C)",
    krbi_free_storage_space="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_FREE_STORAGE_SPACE(C)",
    krbi_gconnect_id="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GCONNECT_ID(C)",
    krbi_get_primary_constr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GET_PRIMARY_CONSTR(C)",
    krbi_get_standby_constr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GET_STANDBY_CONSTR(C)",
    krbi_getdupcopy="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_GETDUPCOPY GETDUPLICATEDDATAFILECOPY",
    krbi_getdupdcopy="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETDUPDCOPY(C)",
    krbi_getguid="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETGUID(C)",
    krbi_getstandbyfname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETSTANDBYFNAME(C)",
    krbi_getxttsname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSNAME(C)",
    krbi_getxttsplugname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSPLUGNAME(C)",
    krbi_init_fra_metadata="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_INIT_FRA_METADAT(C)",
    krbi_network_backupdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPDF(C)",
    krbi_network_backuprl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPRL(C)",
    krbi_network_backupsf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPS(C)",
    krbi_network_rdfhdr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_RDFHDR(C)",
    krbi_network_setmsb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_SETMSB(C)",
    krbi_parse_plugxml="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PARSE_PLUGXML(C)",
    krbi_pdb_time_check="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PDB_TIME_CHECK(C)",
    krbi_preplugin_do_mediarcv="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_DO_MEDIARCV(C)",
    krbi_preplugin_trans="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_TRANS(C)",
    krbi_prepluginrcv_addfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_ADDFILE(C)",
    krbi_prepluginrcv_cancel="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_CANCE(C)",
    krbi_prepluginrcv_start="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_START(C)",
    krbi_read_action="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_READ_ACTION",
    krbi_recover_add_file="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_FILE(C)",
    krbi_recover_add_pdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_PDB(C)",
    krbi_recover_cancel="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_CANCE(C)",
    krbi_recover_do="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_DO(C)",
    krbi_recover_start="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_START(C)",
    krbi_register_auxdfc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_REGISTER_AUXDFC(C)",
    krbi_remdupfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_REMDUPFIL(C)",
    krbi_remstandbysyncfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_REMSTANDBYSYNCFIL(C)",
    krbi_restoreexttfileto="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_RESTOREXTTFILETO RESTOREXTTFILETO",
    krbi_restorexttfileto="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RESTOREXTTFILETO(C)",
    krbi_rman_usage="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RMAN_USAGE(C)",
    krbi_save_action="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_SAVE_ACTION",
    krbi_sdbuname_tspitr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_SDBUNAME_TSPITR(C)",
    krbi_standbysyncfileexists="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_STANDBYSYNCFILEEXISTS(C)",
    krbi_switch_prim_bct="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_SWITCH_PRIM_BC(C)",
    krbi_unlockremotepdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_UNLOCKREMOTEPDB(C)",
    krbi_wrtdupcopy="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBI_WRTDUPDCOPY WRITEDUPLICATEDDATAFILECOPY",
    krbi_wrtdupdcopy="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_WRTDUPDCOPY(C)",
    krbi_wrtstandbyfname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_WRTSTANDBYFNAME(C)",
    krbi_xttrestore="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_XTTRESTORE(C)",
    krbiabf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIABF(C)",
    krbiadft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIADFT(C)",
    krbiaor="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIAOR(C)",
    krbiarcfn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIARCFN(C)",
    krbiaux="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIAUX(C)",
    krbibab="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBAB(C)",
    krbibackuppiecebackup="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBACKUPPIECEBACKUP(C)",
    krbibackupsetpiece="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBACKUPSETPIECE(C)",
    krbibcf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBCF(C)",
    krbibckdmpfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBCKDMPFILE(C)",
    krbibcle="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBCL(C)",
    krbibdcp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBDCP(C)",
    krbibdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBDF(C)",
    krbibdg="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBDG(C)",
    krbibdmr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBDMR(C)",
    krbibds="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBDS(C)",
    krbibegregisterauxdfc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_BEG_REGISTER_AUXDFC(C)",
    krbibgf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBGF(C)",
    krbibis="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBI(C)",
    krbiblkstat="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBLKSTAT(C)",
    krbibmrc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBMR(C)",
    krbibmrs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBMRS(C)",
    krbibpc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBPC(C)",
    krbibrf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBRF(C)",
    krbibrl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBRL(C)",
    krbibrpsby="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBRPSBY(C)",
    krbibsdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBSDF(C)",
    krbibsf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBS(C)",
    krbibsrl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBSRL(C)",
    krbibsta="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBSTA(C)",
    krbibufc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBUFC(C)",
    krbibv="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIBV(C)",
    krbicbbp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICBBP(C)",
    krbicbs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICBS(C)",
    krbiccf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICCF(C)",
    krbicdcp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICDCP(C)",
    krbicdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICDF(C)",
    krbicf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICF(C)",
    krbichkcompalg="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CHKCOMPALG(C)",
    krbickeepf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICKEEPF(C)",
    krbickpt="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICKPT(C)",
    krbicleanupbackuprecords="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_BACKUP_RECORD(C)",
    krbicleanupforeignal="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_FOREIGN_A(C)",
    krbicleanuppgax="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEANUP_PGA(C)",
    krbiclearcontrolfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CLEARCONTROLFIL(C)",
    krbiclrl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICLR(C)",
    krbicmus="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICMUS(C)",
    krbicreatefraacc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ACC(C)",
    krbicreatefraadc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_FRA_ADC(C)",
    krbicreaterestpoint="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_RESTPOINT(C)",
    krbicreatexml="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_CREATE_XML(C)",
    krbicrl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICRL(C)",
    krbicror="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICROR(C)",
    krbicrs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICRS(C)",
    krbicrsr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICRSR(C)",
    krbicsl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICSL(C)",
    krbicssn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICSSN(C)",
    krbictset="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICTSET(C)",
    krbicuc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICUC(C)",
    krbicup="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICUP(C)",
    krbicus="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICU(C)",
    krbicvrt="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBICVRT(C)",
    krbid2rf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBID2RF(C)",
    krbidab="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDAB(C)",
    krbidbp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDBP(C)",
    krbiddf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDDF(C)",
    krbideft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDEFT(C)",
    krbidescriberemotepdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_DESCRIBEREMOTEPDB(C)",
    krbidf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDF(C)",
    krbidrl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDRL(C)",
    krbidrm="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDRM(C)",
    krbidsta="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDSTA(C)",
    krbidupfileexists="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_DUPFILEEXISTS(C)",
    krbidvac="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDVAC(C)",
    krbidvcm="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDVCM(C)",
    krbidvda="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDVDA(C)",
    krbidvq="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIDVQ(C)",
    krbiesjnp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIESJNP(C)",
    krbifbaf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIFBAF(C)",
    krbifbc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIFB(C)",
    krbifbf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIFBF(C)",
    krbifbs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIFBS(C)",
    krbiffr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIFFR(C)",
    krbiflashbackcf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_FLASHBACK_CF(C)",
    krbifreestoragespace="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_FREE_STORAGE_SPACE(C)",
    krbifsft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIFSFT(C)",
    krbigaln="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGALN(C)",
    krbigconnectid="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GCONNECT_ID(C)",
    krbigcs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGCS(C)",
    krbigdgn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGDGN(C)",
    krbigetdupdcopy="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETDUPDCOPY(C)",
    krbigetguid="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETGUID(C)",
    krbigetprimaryconstr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GET_PRIMARY_CONSTR(C)",
    krbigetstandbyconstr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GET_STANDBY_CONSTR(C)",
    krbigetstandbyfname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETSTANDBYFNAME(C)",
    krbigetxttsname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSNAME(C)",
    krbigetxttsplugname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_GETXTTSPLUGNAME(C)",
    krbigfno="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGFNO(C)",
    krbigpn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGPN(C)",
    krbigtsc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGTSC(C)",
    krbigtsn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIGTSN(C)",
    krbiialbac="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIIALBAC(C)",
    krbiif="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIIF(C)",
    krbiimsb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIIMSB(C)",
    krbiimsc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIIMSC(C)",
    krbiimsr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIIMSR(C)",
    krbiinins="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIININ(C)",
    krbiinitframetadata="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_INIT_FRA_METADAT(C)",
    krbiisomf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIISOMF(C)",
    krbimaux="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIMAUX(C)",
    krbimrsr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIMRSR(C)",
    krbimxi="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIMXI(C)",
    krbinbaf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBAF(C)",
    krbinbdmr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBDMR(C)",
    krbinbeg="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBEG(C)",
    krbinblkstat="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBLKSTAT(C)",
    krbinbrc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBR(C)",
    krbinbrfs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBRFS(C)",
    krbinbrs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINBR(C)",
    krbinend="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINEN(C)",
    krbinettransfer="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINETTRANSFER(C)",
    krbinetworkbackupdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPDF(C)",
    krbinetworkbackuprl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPRL(C)",
    krbinetworkbackupsf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_BACKUPS(C)",
    krbinetworkrdfhdr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_RDFHDR(C)",
    krbinetworksetmsb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_NETWORK_SETMSB(C)",
    krbinfn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINFN(C)",
    krbingni="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINGNI(C)",
    krbinpcf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINPCF(C)",
    krbinpdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBINPDF(C)",
    krbiomfn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIOMFN(C)",
    krbiovac="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBIOVAC",
    krbiparseplugxml="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PARSE_PLUGXML(C)",
    krbipba="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPBA(C)",
    krbipbb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPBB(C)",
    krbipbcf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPBCF(C)",
    krbipbdc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPBDC(C)",
    krbipbdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPBDF(C)",
    krbipbr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPBR(C)",
    krbipcgn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPCGN(C)",
    krbipcn="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPC(C)",
    krbipdbtimecheck="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PDB_TIME_CHECK(C)",
    krbipdl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPDL(C)",
    krbipgo="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPG(C)",
    krbipqb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPQB(C)",
    krbipqr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPQR(C)",
    krbipra="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPRA(C)",
    krbiprcf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPRCF(C)",
    krbiprdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPRDF(C)",
    krbipreplugindomediarcv="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_DO_MEDIARCV(C)",
    krbiprepluginrcvaddfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_ADDFILE(C)",
    krbiprepluginrcvcancel="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_CANCE(C)",
    krbiprepluginrcvstart="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGINRCV_START(C)",
    krbipreplugintrans="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_PREPLUGIN_TRANS(C)",
    krbiprm="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPRM(C)",
    krbipsft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPSFT(C)",
    krbipvl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIPVL(C)",
    krbiragf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRAG(C)",
    krbiran="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRA(C)",
    krbirbp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRBP(C)",
    krbircdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRCDF(C)",
    krbircft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRCFT(C)",
    krbircle="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRCLE(C)",
    krbircp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRCP(C)",
    krbirdalhd="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRDALHD(C)",
    krbirdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRDB(C)",
    krbirdft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRDFT(C)",
    krbirdhd="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRDHD(C)",
    krbirecfs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRECFS(C)",
    krbirecoveraddfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_FILE(C)",
    krbirecoveraddpdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_ADD_PDB(C)",
    krbirecovercancel="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_CANCE(C)",
    krbirecoverdo="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_DO(C)",
    krbirecoverstart="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RECOVER_START(C)",
    krbiregisterauxdfc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_REGISTER_AUXDFC(C)",
    krbiremdupfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_REMDUPFIL(C)",
    krbiremstandbysyncfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_REMSTANDBYSYNCFIL(C)",
    krbirerr="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBIRERR Raise error",
    krbiresdmpfile="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRESDMPFILE(C)",
    krbirestorexttfileto="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RESTOREXTTFILETO(C)",
    krbiri="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIR(C)",
    krbirmanusage="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_RMAN_USAGE(C)",
    krbirrl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRRL(C)",
    krbirrm="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRR(C)",
    krbirrng="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRRNG(C)",
    krbirsdf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRSDF(C)",
    krbirsft="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRSFT(C)",
    krbirsp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRSP(C)",
    krbirsqlexec="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRSQLEXEC(C)",
    krbirsta="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRSTA(C)",
    krbirvd="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIRV(C)",
    krbisal="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISAL(C)",
    krbisbtv="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISBTV(C)",
    krbisdbunametspitr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_SDBUNAME_TSPITR(C)",
    krbisf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISF(C)",
    krbisl="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISL(C)",
    krbislp="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBISL SETLIMIT, GETLIMIT DBMS_BACKUP_RESTORE.KRBISLP SLEEP",
    krbismsb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISMSB(C)",
    krbismsc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISMSC(C)",
    krbisprm="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISPRM(C)",
    krbisrid="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISRID(C)",
    krbisrm="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISRM(C)",
    krbistandbysyncfileexists="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_STANDBYSYNCFILEEXISTS(C)",
    krbistc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISTC(C)",
    krbistcs="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISTCS(C)",
    krbiswitch="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISWITCH(C)",
    krbiswitchprimbct="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_SWITCH_PRIM_BC(C)",
    krbiswtf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBISWTF(C)",
    krbitdblk="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBITDBLK(C)",
    krbitdbunlk="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBITDBUNL(C)",
    krbitrc="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBITRC",
    krbitsat="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBITSAT(C)",
    krbiufc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIUFC(C)",
    krbiufr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIUFR(C)",
    krbiunlockremotepdb="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_UNLOCKREMOTEPDB(C)",
    krbiuphd="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIUPHD(C)",
    krbiursr="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIURSR(C)",
    krbiurt="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIURT(C)",
    krbival="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVAL(C)",
    krbivala="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVALA(C)",
    krbivalblk="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVALBLK(C)",
    krbivale="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVAL(C)",
    krbivaln="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVALN(C)",
    krbivals="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVAL(C)",
    krbivalv="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVALV(C)",
    krbivbp="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVBP(C)",
    krbivdc="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVDC(C)",
    krbivts="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIVTS(C)",
    krbiwrtdupdcopy="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_WRTDUPDCOPY(C)",
    krbiwrtstandbyfname="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_WRTSTANDBYFNAME(C)",
    krbiwtrc="[Kernel Recovery Backup/Restore] DBMS_BACKUP_RESTORE.KRBIWTRC WRITETRACE",
    krbixttrestore="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBI_XTTRESTORE(C)",
    krbizerf="[Kernel Recovery Backup/restore ICDs] SYS.DBMS_BACKUP_RESTORE.KRBIZERF(C)",
    krbm="[Kernel Recovery Backup/Restore] miscellaneous functions",
    krbo="[Kernel Recovery Backup/Restore] optimisation",
    krbr="[Kernel Recovery Backup/restore Restore] ",
    krbrcc="[Kernel Recovery Backup/restore Restore] clean up conversation",
    krbrpr="[Kernel Recovery Backup/restore Restore] piece read",
    krbrr="[Kernel Recovery Backup/restore Restore] reread corrupt block",
    krbrrp="[Kernel Recovery Backup/restore Restore] reread corrupt block from back piece",
    krbx="[Kernel Recovery Backup/Restore] proxy copy controller",
    krby="[Kernel Recovery Backup/Restore] image copy",
    krc="[Kernel Recovery Block Change Tracking] ",
    krccacp="[Kernel Recovery Block Change Tracking] advance the checkpoint",
    krccckp="[Kernel Recovery Block Change Tracking] checkpoint",
    krcpabs="[Kernel Recovery Block Change Tracking] I am ctwr",
    krcptmo="[Kernel Recovery Block Change Tracking] ctwr timeout action, this is the main loop",
    krcrfi="[Kernel Recovery Block Change Tracking] read file. rman is traversing the bitmaps to find enough historical bitmap data.",
    krd="[Kernel Recovery datafiles] (media and standby)",
    krd_do_mrp="[Kernel Recovery datafiles] (media and standby) do managed recovery processing",
    krd_end_rcv="[Kernel Recovery datafiles] (media and standby) end media recovery",
    krd_implicit_rcv="[Kernel Recovery datafiles] (media and standby) IMPLICIT ReCoVery for standby open/activation",
    krdrsb="[Kernel Recovery datafiles] (media and standby) read from standby (?)",
    krdsmr="[Kernel Recovery datafiles] (media and standby) serial? slave? media recovery",
    krf="[Kernel Recovery] flashback",
    krf_flashback_db="[Kernel Recovery] flashback flashback a database from a client other than RMAN",
    krf_restore_driver="[Kernel Recovery] flashback restore the files in the restore set/flashback restore of the database",
    krfbbuildrestoreset="[Kernel Recovery] flashback adds a list if files to flashback to the flashback context",
    krfgdelfb1="[Kernel Recovery] flashback calculate deleted space (?)",
    krfgfbtofree="[Kernel Recovery] flashback calculate free space",
    krfxfblog="[Kernel Recovery] flashback fixed table callback routine for x$kcrfblog",
    krp="[Kernel Recovery] recovery",
    krp_check_slave_exit="[Kernel Recovery] recovery wait for ksv slaves to exit",
    krp_slave_apply="[Kernel Recovery] recovery main redo apply loop",
    krp_slave_main="[Kernel Recovery] recovery main pmr slave callback",
    krpi="[Kernel Recovery] recovery dbms_pitr support",
    krpiacp="[Kernel Recovery] SYS.DBMS_PITR.KRPIACP(C)",
    krpibexp="[Kernel Recovery] SYS.DBMS_PITR.KRPIBEX(C)",
    krpibimp="[Kernel Recovery] SYS.DBMS_PITR.KRPIBIMP(C)",
    krpibts="[Kernel Recovery] SYS.DBMS_PITR.KRPIBTS(C)",
    krpicpt="[Kernel Recovery] SYS.DBMS_PITR.KRPICPT(C)",
    krpidfv="[Kernel Recovery] SYS.DBMS_PITR.KRPIDFV(C)",
    krpists="[Kernel Recovery] SYS.DBMS_PITR.KRPISTS(C)",
    krs="[Kernel Recovery standby/dataguard (?)]",
    krsa="[Kernel Recovery standby/dataguard (?)] access and lock",
    krsc="[Kernel Recovery standby/dataguard (?)] crash recovery",
    krsd="[Kernel Recovery standby/dataguard (?)] destination",
    krsh="[Kernel Recovery standby/dataguard (?)] helper",
    krsm="[Kernel Recovery standby/dataguard (?)] managed recovery process",
    krsn="[Kernel Recovery standby/dataguard (?)] network/transport",
    krso="[Kernel Recovery standby/dataguard (?)] monitor",
    krsr="[Kernel Recovery standby/dataguard (?)] remote file server",
    krss="[Kernel Recovery standby/dataguard (?)] scheduler",
    krt="[Kernel Recovery] tablespaces",
    krta2bz="[Kernel Recovery] tablespaces obtain blocksize of tablespace",
    krta2rfn="[Kernel Recovery] tablespaces obtain file number (mos says absolute file number)",
    krtchk="[Kernel Recovery] tablespaces check consistency (with control file)",
    krtcktt="[Kernel Recovery] tablespaces check temporary tablespace configuration",
    krv="[Kernel Recovery] recovery",
    krvarf="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVARF(C)",
    krvcp="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVCP(C)",
    krvend="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVEN(C)",
    krvg="[Kernel Recovery] recovery generation of redo with DDL",
    krvgdrm="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVGDRM(C)",
    krvgdrm2="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVGDRM2(C)",
    krviad102to101="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_102TO101(DBMS_LOGMNR_LIB)",
    krviad11202to112="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11202TO112(DBMS_LOGMNR_LIB)",
    krviad112to11="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_112TO11(DBMS_LOGMNR_LIB)",
    krviad11to102="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11TO102(DBMS_LOGMNR_LIB)",
    krviad121to11204="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_121TO11204(DBMS_LOGMNR_LIB)",
    krviad12202to122="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_12202TO122(DBMS_LOGMNR_LIB)",
    krviad122to12="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12(DBMS_LOGMNR_LIB)",
    krviad122to12202="[Kernel Recovery] recovery DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12 DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12202",
    krvialf="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.ADD_LOG_FILE(DBMS_LOGMNR_LIB)",
    krviarscn="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.ADVANCE_READ_SCN(DBMS_LOGMNR_LIB)",
    krviats="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.ATTACH_SESSION(DBMS_LOGMNR_LIB)",
    krviau101to102="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_101TO102(DBMS_LOGMNR_LIB)",
    krviau102to11="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_102TO11(DBMS_LOGMNR_LIB)",
    krviau11204to121="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11204TO121(DBMS_LOGMNR_LIB)",
    krviau11to112="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_11TO112(DBMS_LOGMNR_LIB)",
    krviau122to12202="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_122TO12202(DBMS_LOGMNR_LIB)",
    krviau12to122="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.AGESPILL_12TO122(DBMS_LOGMNR_LIB)",
    krvicdng="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.DOWNGRADE_CKPT(DBMS_LOGMNR_LIB)",
    krvicl="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVICL(DBMS_LOGMNR_LIB)",
    krvicp="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.COLUMN_PRESENT(DBMS_LOGMNR_LIB)",
    krvics="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.CREATE_SESSION(DBMS_LOGMNR_LIB)",
    krvicupg="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.UPGRADE_CKPT(DBMS_LOGMNR_LIB)",
    krvidcd="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.DUMP_CKPT_DATA(DBMS_LOGMNR_LIB)",
    krvidib="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIDIB(DBMS_LOGMNR_LIB)",
    krvidpd="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.DUMP_PAGEOUT_DATA(DBMS_LOGMNR_LIB)",
    krvidscd="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.DUMP_STREAMS_CKPT_DATA(DBMS_LOGMNR_LIB)",
    krvidss="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.DESTROY_SESSION(DBMS_LOGMNR_LIB)",
    krvidts="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.DETACH_SESSION(DBMS_LOGMNR_LIB)",
    krviftsi="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIFTSI(DBMS_LOGMNR_LIB)",
    krvigenq="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIGENQ(DBMS_LOGMNR_LIB)",
    krvigrg="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.GET_ROOT_GLOBAL_NAME(DBMS_LOGMNR_LIB)",
    krvigsss="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIGSSS(DBMS_LOGMNR_LIB)",
    krviisac="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIISAC(DBMS_LOGMNR_LIB)",
    krvilcj="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVILCJ(DBMS_LOGMNR_LIB)",
    krvild="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVILD(DBMS_LOGMNR_LIB)",
    krvilss="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVILSS(DBMS_LOGMNR_LIB)",
    krvilt="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVILT(DBMS_LOGMNR_LIB)",
    krvimv="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.MINE_VALUE(DBMS_LOGMNR_LIB)",
    krviplead="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIPLEAD(DBMS_LOGMNR_LIB)",
    krviplenter="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIPLENTER(DBMS_LOGMNR_LIB)",
    krviplexit="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIPLEXIT(DBMS_LOGMNR_LIB)",
    krvipliad="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIPLIAD(DBMS_LOGMNR_LIB)",
    krviplimm="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVIPLIMM(DBMS_LOGMNR_LIB)",
    krvips="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.PREPARE_SCN_RANGE(DBMS_LOGMNR_LIB)",
    krvirenq="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIRENQ(DBMS_LOGMNR_LIB)",
    krvirlf="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.REMOVE_LOG_FILE(DBMS_LOGMNR_LIB)",
    krvirm="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVIR(C)",
    krvirs="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.RELEASE_SCN_RANGE(DBMS_LOGMNR_LIB)",
    krvisda="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.SET_DICT_ATTR(DBMS_LOGMNR_LIB)",
    krvislegc="[Kernel Recovery] recovery DBMS_LOGMNR_INTERNAL.KRVISLEQC",
    krvisleqc="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVISLEQC(DBMS_LOGMNR_LIB)",
    krvisobj="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.SKIP_OBJ_C(DBMS_LOGMNR_LIB)",
    krvisrba="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.SKIP_RBA(DBMS_LOGMNR_LIB)",
    krvisscn="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.SKIP_SCN(DBMS_LOGMNR_LIB)",
    krvissp="[Kernel Recovery] SYS.DBMS_LOGMNR_SESSION_INT.SET_SESSION_PARAMS(DBMS_LOGMNR_LIB)",
    krvisxid="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.SKIP_XID(DBMS_LOGMNR_LIB)",
    krviuld="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIULD(DBMS_LOGMNR_LIB)",
    krviulss="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIULSS(DBMS_LOGMNR_LIB)",
    krviult="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.LOGMNR_KRVIULT(DBMS_LOGMNR_LIB)",
    krviusobj="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_OBJ_C(DBMS_LOGMNR_LIB)",
    krviusrba="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_RBA(DBMS_LOGMNR_LIB)",
    krviusscn="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_SCN(DBMS_LOGMNR_LIB)",
    krviusxid="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.UNSKIP_XID(DBMS_LOGMNR_LIB)",
    krvm="[Kernel Recovery] recovery mine",
    krvmv="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVMV(C)",
    krvprof="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVPROF(C)",
    krvrgse="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVRGSE(C)",
    krvrgse2="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVRGSE2(C)",
    krvrmgb="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVRMGB(C)",
    krvrrrf="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVRRRF(C)",
    krvrrse="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVRRS(C)",
    krvs="[Kernel Recovery] recovery apply service",
    krvspd="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVSPD(C)",
    krvssf="[Kernel Recovery] recovery apply service survive failure",
    krvstart="[Kernel Recovery] SYS.DBMS_LOGMNR.KRVSTART(C)",
    krvt="[Kernel Recovery] recovery log miner viewer support",
    krvugaclr="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVUGACL(C)",
    krvugaset="[Kernel Recovery] SYS.DBMS_LOGMNR_INTERNAL.KRVUGASE(C)",
    krvx="[Kernel Recovery] recovery extract",
    ks="[Kernel Service] ",
    ksa="[Kernel Service Asynchronous messages] ",
    ksaamb="[Kernel Service Asynchronous messages] allocate message buffer",
    ksadmb="[Kernel Service Asynchronous messages] deallocate message buffer",
    ksarcv="[Kernel Service Asynchronous messages] receive message",
    ksasnd="[Kernel Service Asynchronous messages] send asynchronous message",
    ksasndint="[Kernel Service Asynchronous messages] send asynchronous message send asynchronous message",
    ksb="[Kernel Service Background processes] ",
    ksbabs="[Kernel Service Background processes] action based server",
    ksbasend="[Kernel Service Background processes] asynchronous send message main loop",
    ksbckbast="[Kernel Service Background processes] check blocking asynchronous trap",
    ksbcti="[Kernel Service Background processes] call timeout/interrupts",
    ksbd="[Kernel Service Background processes] detached process",
    ksbmsg="[Kernel Service Background processes] call cpu count changed callbacks",
    ksbrdp="[Kernel Service Background processes] run a detached background process",
    ksbsrv="[Kernel Service Background processes] start a multi-stated server process",
    ksbt="[Kernel Service Background processes] background processes",
    ksbx="[Kernel Service Background processes] Xic cross instance calls",
    ksbxiaf="[Kernel Service Background processes] Xic cross instance calls ksbxic (cross instance calls) message and interrupt action",
    ksbxiafdomsg="[Kernel Service Background processes] Xic cross instance calls ksbxic (cross instance calls) message and interrupt action ksbxic and async xic static functions",
    ksc="[Kernel Service Component Notifier] ",
    kscn_to_ub8_impl="[Kernel Service Component Notifier] convert SCN to ub8",
    kscnfy="[Kernel Service Component Notifier] system notifications to be passed to components",
    kscs="[kernel service (VOS) cloud service] ",
    kscs_cloud_hcc_enabled="[kernel service (VOS) cloud service] should HCC be enabled?",
    kscs_clouddb_provider_detect="[kernel service (VOS) cloud service] in what cloud is this instance running",
    kscs_cloudprov_ut="[kernel service (VOS) cloud service] cloud provider utility. outputs where oracle detects it is running",
    kscs_cloudsim_paramcb="[kernel service (VOS) cloud service] cloud simulation parameter callback",
    kscs_enabled="[kernel service (VOS) cloud service] are we in a cloud?",
    kscs_is_exadata_or_oracle_cloud="[kernel service (VOS) cloud service] is this exadata or oracle cloud?",
    kscs_is_non_oracle_cloud="[kernel service (VOS) cloud service] is this a non oracle cloud?",
    kscs_is_on_premise="[kernel service (VOS) cloud service] is this on-premises?",
    kscs_process_param="[kernel service (VOS) cloud service] process cloud related parameters for determination of services",
    kscsinitcapprovider="[kernel service (VOS) cloud service] initialize capabilities per provider",
    ksd="[Kernel Service Debug internal errors] ",
    ksdacn="[Kernel Service Debug internal errors] action routines for parser",
    ksdddt_icd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDDDT_IC(C)",
    ksdddticd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDDDT_IC(C)",
    ksddoa="[Kernel Service Debug internal errors] debug support do an action",
    ksdfls_icd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDFLS_IC(C)",
    ksdflsicd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDFLS_IC(C)",
    ksdhng="[Kernel Service Debug internal errors] hang analyze",
    ksdind="[Kernel Service Debug internal errors] DBMS_SYSTEM.KSDIND_ICD KSDIND",
    ksdind_icd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDIND_ICD(C)",
    ksdindicd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDIND_ICD(C)",
    ksdnfsp_restore_df_perm="[Kernel Service Debug internal errors] SYS.DBMS_DNFS.KSDNFSP_RESTORE_DF_PERM(C)",
    ksdnfsprestoredfperm="[Kernel Service Debug internal errors] SYS.DBMS_DNFS.KSDNFSP_RESTORE_DF_PERM(C)",
    ksdocrl="[Kernel Service Debug internal errors] check if row is locked",
    ksdp="[Kernel Service Debug Parser] ",
    ksdpcg="[Kernel Service Debug Parser] post and check event in the specified event group",
    ksdpec="[Kernel Service Debug Parser] post event and check trigger condition",
    ksdprs="[Kernel Service Debug Parser] parse string",
    ksdwra="[Kernel Service Debug internal errors] write to alert",
    ksdwrf="[Kernel Service Debug internal errors] write to (trace) file",
    ksdwrt="[Kernel Service Debug internal errors] DBMS_SYSTEM.KSDWRT_ICD KSDWRT",
    ksdwrt_icd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDWRT_ICD(C)",
    ksdwrticd="[Kernel Service Debug internal errors] SYS.DBMS_SYSTEM.KSDWRT_ICD(C)",
    ksdxcb="[Kernel Service Debug internal errors] ksdx callback for sosd layer signal handler",
    ksdxen="[Kernel Service Debug internal errors] 2-task entry point",
    ksdxfdmp="[Kernel Service Debug internal errors] ksdx function: invoke named dump",
    ksdxfstk="[Kernel Service Debug internal errors] dump abridged os stack",
    ksdxftev="[Kernel Service Debug internal errors] set trace event",
    ksdxwcwpt="[Kernel Service Debug internal errors] create watchpoint",
    ksdxwdwpt="[Kernel Service Debug internal errors] delete watchpoint",
    kse="[Kernel Service Error manager] ",
    kse_dump_callers="[Kernel Service Error manager] translate an array that was filled in by kse_get_callers(), and put result into client buffer",
    kse_get_callers="[Kernel Service Error manager] fill in an array with caller PC values",
    kse_record_stack="[Kernel Service Error manager] callback implementation for 'record_callstack' trace",
    ksed="[Kernel Service Error manager] debug",
    ksedmp="[Kernel Service Error manager] debug dump process state",
    ksedst="[Kernel Service Error manager] debug dump the call stack",
    ksedst1="[Kernel Service Error manager] debug dump the call stack stack trace 1 helper",
    ksedsts="[Kernel Service Error manager] debug dump the call stack short stack",
    ksefic="[Kernel Service Error manager] kernel service error ??",
    kseget_caller="[Kernel Service Error manager] return a string representation of the calling function's location",
    kseinpre="[Kernel Service Error manager] kernel service error ??",
    ksepop="[Kernel Service Error manager] perform cleanup when an error frame is being popped",
    kserec1="[Kernel Service Error manager] record an error code",
    kserec4="[Kernel Service Error manager] record an error code",
    kserin="[Kernel Service Error manager] kernel service error ??",
    ksesec0="[Kernel Service Error manager] signal an error code",
    ksesec1="[Kernel Service Error manager] signal an error code",
    ksesic2="[Kernel Service Error manager] signal an internal error code",
    ksesin="[Kernel Service Error manager] signal an internal error (named)",
    ksf="[Kernel Service] functions",
    ksfd="[Kernel Service] functions disk IO",
    ksfd_addtoissueq="[Kernel Service] functions disk IO add requests to issue queue",
    ksfd_chkio="[Kernel Service] functions disk IO IO checker/io stats",
    ksfd_clear_pgaobjsc="[Kernel Service] functions disk IO clear pga objects",
    ksfd_do_io_verification="[Kernel Service] functions disk IO do IO verification",
    ksfd_get_physical_sectsz="[Kernel Service] functions disk IO read physical sectorsize from device",
    ksfd_gosdrq="[Kernel Service] functions disk IO get os dependent requests",
    ksfd_io="[Kernel Service] functions disk IO perform IO",
    ksfd_odm="[Kernel Service] functions disk IO oracle disks manager",
    ksfd_odmio="[Kernel Service] functions disk IO oracle disks manager IO",
    ksfd_osdrqfil="[Kernel Service] functions disk IO operating system dependent request",
    ksfd_sage_poosible="[Kernel Service] functions disk IO exadata offloading possible check",
    ksfd_sbio="[Kernel Service] functions disk IO submit block IO",
    ksfd_skgfqio="[Kernel Service] functions disk IO to system kernel generic file queue IO",
    ksfd_update_iostatstime="[Kernel Service] functions disk IO update statistics for X$KSFDSTFILE (V$IOSTAT_FILE)",
    ksfdaf="[Kernel Service] functions disk IO asm files",
    ksfdaio="[Kernel Service] functions disk IO asynchronous IO",
    ksfdbio="[Kernel Service] functions disk IO block IO",
    ksfdbio_updatestats="[Kernel Service] functions disk IO block IO update statistics for X$KSFDSTCMP (V$IOSTAT_FUNCTION)",
    ksfdckerr="[Kernel Service] functions disk IO check for errrors",
    ksfddumppga="[Kernel Service] functions disk IO dump ksfd PGA",
    ksfdfchkaio="[Kernel Service] functions disk IO check if aio can be done",
    ksfdgaiolmt="[Kernel Service] functions disk IO get aio limit",
    ksfdgfno="[Kernel Service] functions disk IO get file number",
    ksfdgo="[Kernel Service] functions disk IO execute IO",
    ksfdgpsz="[Kernel Service] functions disk IO get physical (sector) size",
    ksfdgrsz="[Kernel Service] functions disk IO get request size",
    ksfdmp="[Kernel Service] functions disk IO call the relevant dump routine",
    ksfdnfy="[Kernel Service] functions disk IO PDB open notifier",
    ksfdopn="[Kernel Service] functions disk IO open random access file fname",
    ksfdpcl="[Kernel Service] functions disk IO process IO completion",
    ksfdpgadump="[Kernel Service] functions disk IO ksfd dump PGA routine",
    ksfdpoll="[Kernel Service] functions disk IO poll for IO completion",
    ksfdread="[Kernel Service] functions disk IO read random access file in sync mode",
    ksfdss="[Kernel Service functions disk IO snapshot (clonedb)]",
    ksfdss_fob_is_snap="[Kernel Service functions disk IO snapshot (clonedb)]are files in file open block (fob) snapshot files?",
    ksfdss_testdb_renamefile="[Kernel Service functions disk IO snapshot (clonedb)]SYS.DBMS_DNFS.KSFDSS_TESTDB_RENAMEFILE(C)",
    ksfdss_unmountvolume="[Kernel Service functions disk IO snapshot (clonedb)]SYS.DBMS_DNFS.KSFDSS_UNMOUNTVOLUME(C)",
    ksfdsstestdbrenamefile="[Kernel Service functions disk IO snapshot (clonedb)]SYS.DBMS_DNFS.KSFDSS_TESTDB_RENAMEFILE(C)",
    ksfdssunmountvolume="[Kernel Service functions disk IO snapshot (clonedb)]SYS.DBMS_DNFS.KSFDSS_UNMOUNTVOLUME(C)",
    ksfdwat="[Kernel Service] functions disk IO wait for IOs to finish",
    ksfdwtio="[Kernel Service] functions disk IO wait for IO",
    ksfflt="[Kernel Service] functions free latch",
    ksfglt="[Kernel Service] functions get latch",
    ksfh="[Kernel Service File i/o Helper component] ",
    ksfm="[Kernel Service functions file mapping]",
    ksfmplsdropall="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.DROP_ALL_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsdropelement="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.DROP_ELEMENT_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsdropfile="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.DROP_FILE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplslockmap="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.LOCK_MAP_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsmapelement="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.MAP_ELEMENT_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsmapfile="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.MAP_FILE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsremvstale="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.REMOVE_STALE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsrestore="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.RESTORE_CALLOUT(DBMS_MAP_LIB)",
    ksfmplsunlockmap="[Kernel Service functions file mapping] SYS.DBMS_STORAGE_MAP.UNLOCK_MAP_CALLOUT(DBMS_MAP_LIB)",
    ksfpec="[Kernel Service] functions io post an event",
    ksfq="[Kernel Service seQuential File i/o interface] ",
    ksfq_alo="[Kernel Service seQuential File i/o interface] allocate device",
    ksfqfcls="[Kernel Service seQuential File i/o interface] close a sequential file",
    ksfqxdes="[Kernel Service seQuential File i/o interface] ??",
    ksfsc1="[Kernel Service OFS file system] callback",
    ksfsd="[Kernel Service OFS file system] dispatcher",
    ksfsm="[Kernel Service OFS file system] metadata",
    ksfsp="[Kernel Service OFS file system] DBMS_FS",
    ksfsp_destroy_fs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_DESTROY_FS(C)",
    ksfsp_make_fs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_MAKE_FS(C)",
    ksfsp_mount_fs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_MOUNT_FS(C)",
    ksfsp_unmount_fs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_UNMOUNT_FS(C)",
    ksfspdestroyfs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_DESTROY_FS(C)",
    ksfspmakefs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_MAKE_FS(C)",
    ksfspmountfs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_MOUNT_FS(C)",
    ksfspunmountfs="[Kernel Service OFS file system] SYS.DBMS_FS.KSFSP_UNMOUNT_FS(C)",
    ksfv="[Kernel Service File i/o serVer component] ",
    ksi="[Kernel Service layer Instance locks] ",
    ksim="[Kernel Service Instance Manager] ",
    ksimgchg="[Kernel Service Instance Manager] group state change",
    ksimprintgroupmemcache="[Kernel Service Instance Manager] print out group memory cache (oradebug)",
    ksimprintgroupmempga="[Kernel Service Instance Manager] print out pga group memory (oradebug)",
    ksipc="[Kernel Service layer Instance locks] VOS IPC",
    ksipcon="[Kernel Service layer Instance locks] VOS IPC convert a group lock",
    ksipget="[Kernel Service layer Instance locks] get a group lock (synchronous interface to DLM for lock get)",
    ksiprls="[Kernel Service layer Instance locks] release a group lock",
    ksires="[Kernel Service] instance locking release",
    ksk="[Kernel Service Resource Manager] ",
    kskadjcpuutil="[Kernel Service Resource Manager] adjust cpu utilization (adjusted for instance caging)",
    kskchk="[Kernel Service Resource Manager] check resource state for RM",
    kskgetpgalimit="[Kernel Service Resource Manager] get pga limit",
    kskinitrm="[Kernel Service Resource Manager] initialise resource manager",
    kskiorm="[Kernel Service Resource Manager] I/O resource manager",
    ksklheld="[Kernel Service Resource Manager] lock held",
    kskosstatact="[Kernel Service Resource Manager] operating system statistics act (get os statistics)",
    kskpthr="[Kernel Service Resource Manager] post thread",
    kskthbcall="[Kernel Service Resource Manager] thread begin call",
    kskthbwt="[Kernel Service Resource Manager] thread begin wait",
    kskthecall="[Kernel Service Resource Manager] thread end call",
    kskthewt="[Kernel Service Resource Manager] thread end wait",
    kskthexit="[Kernel Service Resource Manager] thread exit",
    kskthrsod="[Kernel Service Resource Manager] thread state object delete",
    kskvmstatact="[Kernel Service Resource Manager] measure swap-in and swap-out (and generate error if amount is more than 2% of real memory)",
    kskwait_timed_cpu="[Kernel Service Resource Manager] resource manager wait routine",
    ksl="[Kernel Service layer Latching & Wait-post] ",
    ksl_get_child_latch_range="[Kernel Service layer Latching & Wait-post] get all child latches for a range",
    ksl_get_child_latches="[Kernel Service layer Latching & Wait-post] get all child latches",
    ksl_get_shared_latch="[Kernel Service layer Latching & Wait-post] get latch in shared mode",
    ksl_get_shared_latch_int="[Kernel Service layer Latching & Wait-post] get latch in shared mode (12.2)",
    ksl_post_proc="[Kernel Service layer Latching & Wait-post] post a single process",
    ksl_postm="[Kernel Service layer Latching & Wait-post] post multiple processes",
    ksl_postm_add="[Kernel Service layer Latching & Wait-post] post multiple processes add a process",
    ksl_postm_do_posts="[Kernel Service layer Latching & Wait-post] post multiple processes post processes",
    ksl_postm_init="[Kernel Service layer Latching & Wait-post] post multiple processes initialise",
    ksl_skgslgts="[Kernel Service layer Latching & Wait-post] spin get of exclusive latch (11g)",
    ksl_update_post_stats="[Kernel Service layer Latching & Wait-post] update processing of posting stats ao. in x$kslpr",
    kslawe="[Kernel Service layer Latching & Wait-post] add post-wait entry",
    kslccll="[Kernel Service layer Latching & Wait-post] clean up after a given latch",
    kslcll="[Kernel Service layer Latching & Wait-post] clean up after a given latch",
    kslcllt="[Kernel Service layer Latching & Wait-post] clean up after a given latch clean up after a given latch",
    kslclt="[Kernel Service layer Latching & Wait-post] create child latch",
    kslconx="[Kernel Service layer Latching & Wait-post] convert latch from shared to exclusive",
    ksle="[Kernel Service layer Latching & Wait-post] event wait",
    kslf2c="[Kernel Service layer Latching & Wait-post] free two child latches",
    kslfre="[Kernel Service layer Latching & Wait-post] free latch",
    kslfred="[Kernel Service layer Latching & Wait-post] free latch free latch, debugging version",
    kslg2c="[Kernel Service layer Latching & Wait-post] get two child latches of the same parent",
    kslg2csl="[Kernel Service layer Latching & Wait-post] get two child latches of the same parent shared latches",
    kslges="[Kernel Service layer Latching & Wait-post] get exclusive latch slow spinning in a loop",
    kslgess="[Kernel Service layer Latching & Wait-post] get exclusive latch slow spinning in a loop shared latch",
    kslgetl="[Kernel Service layer Latching & Wait-post] get latch",
    kslgetsl="[Kernel Service layer Latching & Wait-post] get a shared latch",
    kslgpl="[Kernel Service layer Latching & Wait-post] get parent and child latches",
    kslilcr="[Kernel Service layer Latching & Wait-post] invoke latch cleanup routine",
    ksliwat="[Kernel Service layer Latching & Wait-post] inner wait function; setup a wait that times out",
    ksliwat_cleanup="[Kernel Service layer Latching & Wait-post] inner wait function; setup a wait that times out cleanup post/wait entry",
    kslpsemf="[Kernel Service layer Latching & Wait-post] post semaphores",
    kslpslf="[Kernel Service layer Latching & Wait-post] post list of foregrounds",
    kslpspr="[Kernel Service layer Latching & Wait-post] post the process with that latch",
    kslpwrp_int="[Kernel Service layer Latching & Wait-post] post/wait read post type (to choose single or multi process posting; guess)",
    kslskgs="[Kernel Service layer Latching & Wait-post] spin get of shared latch",
    kslwait="[Kernel Service layer Latching & Wait-post] wait for n centi-seconds or until posted",
    kslwaitctx="[Kernel Service layer Latching & Wait-post] wait for n centi-seconds or until posted wait context; wait until timeout",
    kslwaitns="[Kernel Service layer Latching & Wait-post] wait for n centi-seconds or until posted wait to be awakened w/o calling into the db scheduler",
    kslwat="[Kernel Service layer Latching & Wait-post] wat for event",
    kslwlmod="[Kernel Service layer Latching & Wait-post] wait list modification",
    kslwlscan="[Kernel Service layer Latching & Wait-post] scan write list",
    kslwt="[Kernel Service layer Latching & Wait-post] wait interface",
    kslwt_end_snapshot="[Kernel Service layer Latching & Wait-post] wait interface end snapshot",
    kslwt_update_stats_int="[Kernel Service layer Latching & Wait-post] wait interface update statistics",
    kslwtbctx="[Kernel Service layer Latching & Wait-post] wait interface begin context/wait",
    kslwtectx="[Kernel Service layer Latching & Wait-post] wait interface end context/wait",
    ksm="[Kernel Service Memory component] ",
    ksm_prepage_sga_seg="[Kernel Service Memory component] sga segment selection for prepaging",
    ksmals="[Kernel Service Memory component] allocate stack",
    ksmapg="[Kernel Service Memory component] callback for allocating a pga extent",
    ksmapply_v2="[Kernel Service Memory component] used for prepaging; apply prepage?",
    ksmarfg="[Kernel Service Memory component] allocate real free pga(?)",
    ksmasg="[Kernel Service Memory component] callback for allocating an sga extent. the sga is fixed size",
    ksmcpg="[Kernel Service Memory component] create (variable) pga",
    ksmcsg="[Kernel Service Memory component] create sga",
    ksmd="[Kernel Service Memory component] state object memory (?)",
    ksmdfr="[Kernel Service Memory component] state object memory (?) free memory",
    ksmdpg="[Kernel Service Memory component] state object memory (?) deallocate the variable pga. just free top pga heap, the callback will free the extents to osd.",
    ksmem_="[Kernel Service Memory component] manipulation",
    ksmerr="[Kernel Service Memory component] cleanup any stack memory allocated within the given error frame",
    ksmf="[Kernel Service Memory component] fixed sga",
    ksmfpg="[Kernel Service Memory component] fixed sga free memory pages",
    ksmh="[Kernel Service Memory component] any heap",
    ksmlsg="[Kernel Service Memory component] check for errors which occured during sga allocation and mapping",
    ksmp="[Kernel Service Memory component] pga heap",
    ksmpgd_cancel_detail="[Kernel Service Memory component] pga heap PGA_DETAIL_CANCEL (oradebug/alter session)",
    ksmpgd_dump_detail="[Kernel Service Memory component] pga heap dumps pga detail to tracefile. 1 dumps all, otherwise ora pid",
    ksmpgd_get_detail="[Kernel Service Memory component] pga heap PGA_DETAIL_GET (oradebug/alter session)",
    ksmprepage="[Kernel Service Memory component] pga heap prepage function (only used by sa00?)",
    ksmprepage_memory="[Kernel Service Memory component] pga heap prepage function (only used by sa00?) actual prepage function",
    ksmrf="[Kernel Service Memory component] real free heap",
    ksmrf_init_alloc="[Kernel Service Memory component] real free heap initiate allocation of memory",
    ksms="[Kernel Service Memory component] sga heap",
    ksmshu="[Kernel Service Memory component] sga heap instance shutdown final check on sga",
    ksmsq="[Kernel Service Memory component] sga heap message queue services",
    ksmu="[Kernel Service Memory component] uga heap",
    ksmudr="[Kernel Service Memory component] uga heap stack segment underflow, free the current stack segment and restore ?",
    ksmuga="[Kernel Service Memory component] uga heap allocate user session global data",
    ksmugf="[Kernel Service Memory component] uga heap release session global memory",
    ksmuhe="[Kernel Service Memory component] uga heap allocate the uga heap using the parent heap specified if state = KSMUGCRE",
    ksmupg="[Kernel Service Memory component] uga heap check for references in the session global area to process",
    ksmuse="[Kernel Service Memory component] uga heap set pointers to newly allocated memory?",
    ksmxm="[Kernel Service Memory component] extended memory (persistent memory)",
    ksmxm_alloc_handle="[Kernel Service Memory component] extended memory (persistent memory) allocate handle",
    ksmxm_allocate_areas="[Kernel Service Memory component] extended memory (persistent memory) allocate areas",
    ksmxm_apply="[Kernel Service Memory component] extended memory (persistent memory) apply",
    ksmxm_attach_xga="[Kernel Service Memory component] extended memory (persistent memory) attach xga",
    ksmxm_calculate_memory_info_per_node="[Kernel Service Memory component] extended memory (persistent memory) calculate memory info per node",
    ksmxm_check_area_exists="[Kernel Service Memory component] extended memory (persistent memory) check area exists",
    ksmxm_create_get_memory_stats="[Kernel Service Memory component] extended memory (persistent memory) create get memory statistics",
    ksmxm_create_region="[Kernel Service Memory component] extended memory (persistent memory) create region",
    ksmxm_create_xga="[Kernel Service Memory component] extended memory (persistent memory) create xga",
    ksmxm_create_xga_metadata="[Kernel Service Memory component] extended memory (persistent memory) create xga create xga metadata",
    ksmxm_destroy_xga="[Kernel Service Memory component] extended memory (persistent memory) destroy xga",
    ksmxm_detach_xga="[Kernel Service Memory component] extended memory (persistent memory) detach xga",
    ksmxm_display_xga_segments_info="[Kernel Service Memory component] extended memory (persistent memory) display xga segments info",
    ksmxm_distribute_bc_xmem_regions="[Kernel Service Memory component] extended memory (persistent memory) distribute buffer cache regions",
    ksmxm_distribute_imc_xmem_regions="[Kernel Service Memory component] extended memory (persistent memory) distribute in-memory column store regions",
    ksmxm_distribute_region_cb="[Kernel Service Memory component] extended memory (persistent memory) distribute region callback",
    ksmxm_dump_xga_info="[Kernel Service Memory component] extended memory (persistent memory) dump sga info",
    ksmxm_get_area_name="[Kernel Service Memory component] extended memory (persistent memory) get area name",
    ksmxm_init="[Kernel Service Memory component] extended memory (persistent memory) initialize",
    ksmxm_prepage="[Kernel Service Memory component] extended memory (persistent memory) prepage xga",
    ksmxmnfy="[Kernel Service Memory component] extended memory (persistent memory) notify",
    ksn="[Kernel Service] two task",
    kso="[Kernel Server Operation] ",
    kso_prespawn_queue_disable="[Kernel Server Operation] SYS.DBMS_PROCESS.STOP_POOL(DBMS_PROCESS_LIB)",
    kso_prespawn_queue_enable="[Kernel Server Operation] SYS.DBMS_PROCESS.START_POOL(DBMS_PROCESS_LIB)",
    kso_prespawn_queue_update="[Kernel Server Operation] SYS.DBMS_PROCESS.CONFIGURE_POOL(DBMS_PROCESS_LIB)",
    ksols="[Kernel Server Operation] object level statistics(?)",
    ksolt="[Kernel Server Operation] lightweight threads",
    ksopid_alive="[Kernel Server Operation] pid alive check",
    ksoprespawnqueuedisable="[Kernel Server Operation] SYS.DBMS_PROCESS.STOP_POOL(DBMS_PROCESS_LIB)",
    ksoprespawnqueueenable="[Kernel Server Operation] SYS.DBMS_PROCESS.START_POOL(DBMS_PROCESS_LIB)",
    ksoprespawnqueueupdate="[Kernel Server Operation] SYS.DBMS_PROCESS.CONFIGURE_POOL(DBMS_PROCESS_LIB)",
    ksp="[Kernel Service layer system Parameters] ",
    ksp_param_handle_param="[Kernel Service layer system Parameters] allocate a set of chunks for parameter data",
    ksp_spfile="[Kernel Service layer system Parameters] spfile file management",
    ksp_spfile_open="[Kernel Service layer system Parameters] spfile file management open",
    ksp_spfile_write="[Kernel Service layer system Parameters] spfile file management write",
    kspallmod="[Kernel Service] (ksp)allmod - kernel service parameter",
    kspgetinsttype="[Kernel Service layer system Parameters] validate instance_type",
    kspgir="[Kernel Service layer system Parameters] get range",
    kspgpnicd="[Kernel Service] SYS.DBMS_UTILITY.KSPGPNICD(C)",
    kspgsp="[Kernel Service layer system Parameters] get string parameter",
    ksppt="[Kernel Service layer system Parameters] parameter table",
    kspptval="[Kernel Service layer system Parameters] parameter table value",
    ksprcvsp="[Kernel Service layer system Parameters] receive spfile information for write to spfile",
    ksq="[Kernel Service enQueues] ",
    ksqcmi="[Kernel Service enQueues] change lock mode internal",
    ksqcnl="[Kernel Service enQueues] convert an enqueue's mode",
    ksqcnv="[Kernel Service enQueues] convert an enqueue's mode",
    ksqcov="[Kernel Service enQueues] convert an enqueue's mode",
    ksqded="[Kernel Service enQueues] deadlock check",
    ksqdel="[Kernel Service enQueues] release an enqueue",
    ksqdldnl="[Kernel Service enQueues] deadlock dump ktagetg0",
    ksqdmc="[Kernel Service enQueues] dump lock",
    ksqdmp="[Kernel Service enQueues] dump details",
    ksqenqalloc="[Kernel Service enQueues] allocate an enqueue",
    ksqgel="[Kernel Service enQueues] get and allocate enqueue",
    ksqgelctx="[Kernel Service enQueues] get and allocate enqueue context",
    ksqget="[Kernel Service enQueues] get an enqueue",
    ksqgtl="[Kernel Service enQueues] get an enqueue",
    ksqrcl="[Kernel Service enQueues] release an enqueue",
    ksqsgn="[Kernel Service enQueues] procedure to register database name for ?",
    ksqsod="[Kernel Service enQueues] state object delete",
    ksr="[Kernel Service reliable messages]",
    ksrma="[Kernel Service reliable messages] ksrma",
    ksrmf="[Kernel Service reliable messages] ksrmf",
    kss="[Kernel Service state object]",
    kss_del_cb="[Kernel Service state object] delete callback",
    kss_delete_children="[Kernel Service state object] delete children of SO",
    kssadd="[Kernel Service state object] add new SO",
    kssadf="[Kernel Service state object] add SO from free list",
    kssdch="[Kernel Service state object] delete children of SO",
    kssdch_int="[Kernel Service state object] delete children of SO internal",
    kssdct="[Kernel Service state object] delete children of specified type",
    kssdel="[Kernel Service state object] delete SO",
    kssdmh="[Kernel Service state object] dump children of a SO",
    kssdmp="[Kernel Service state object] dump children of a SO",
    kssmc="[Kernel Service state object] registration caches",
    kssrmf="[Kernel Service state object] delete SO",
    kssxdl="[Kernel Service state object] delete SO ignoring errors, cleans latches",
    kst="[Kernel Service trace (x$trace)]",
    kstdmp="[Kernel Service trace (x$trace)] In-memory trace dump",
    kstdump="[Kernel Service trace (x$trace)] In-memory trace dump",
    kstm="[Kernel Service trace (x$trace)] time manager",
    kstmchkdrift="[Kernel Service trace (x$trace)] time manager check drift",
    kstmgethighresustick="[Kernel Service trace (x$trace)] time manager get high resolution time",
    ksu="[Kernel Service User management] ",
    ksu_detactive_tac="[Kernel Service User management] deactivete time accounting",
    ksu_dispatch_tac="[Kernel Service User management] dispatch timed-out actions (updates wait interface)",
    ksu_update_eoc_stats="[Kernel Service User management] update end of call state(?)",
    ksucin="[Kernel Service User management] check interrupt",
    ksuclc="[Kernel Service User management] cleanup current call",
    ksucln="[Kernel Service User management] cleanup detached process",
    ksuclnwt="[Kernel Service User management] cleanup detached process wait for specified time in seconds",
    ksucre="[Kernel Service User management] create user session",
    ksucresg="[Kernel Service User management] create user session in process create session with a process group specified",
    ksucri="[Kernel Service User management] create general session",
    ksucrp="[Kernel Service User management] create and initialise process",
    ksuded="[Kernel Service User management] user disconnect",
    ksudel="[Kernel Service User management] delete specified user session",
    ksudlc="[Kernel Service User management] delete call",
    ksudlp="[Kernel Service User management] delete process. called when user detaches or cleanup by pmon",
    ksudmp="[Kernel Service User management] dump process state object",
    ksudps="[Kernel Service User management] dump process state",
    ksudss="[Kernel Service User management] dump system state",
    ksugetblocker="[Kernel Service User management] get blocker",
    ksugrs="[Kernel Service User management] create recursive session",
    ksugtcpums="[Kernel Service User management] get cpu measurement",
    ksugti="[Kernel Service User management] returns the interrupt set without signaling the error",
    ksuitm="[Kernel Service User management] user ??",
    ksuklms="[Kernel Service User management] Takes an array of sessions and kill them",
    ksul="[Kernel Service User Language manager] ",
    ksumcl="[Kernel Service User management] multi(?) check for process to be alive (checks pmon)",
    ksup="[Kernel Service User management] processes",
    ksupalv="[Kernel Service User management] processes process alive check",
    ksupd="[Kernel Service User management] processes planned draining",
    ksupdprocpls="[Kernel Service User management] SYS.DBMS_APP_CONT.PLAN_MAINT_ICD(DBMS_APP_CONT_PMT_LIB)",
    ksupop="[Kernel Service User management] processes pop (restore) user or recursive call",
    ksupr="[Kernel Service User management] processes process object",
    ksuprc="[Kernel Service User management] processes process object process recursive call",
    ksupucg="[Kernel Service User management] processes push user call general",
    ksur="[Kernel Service User management] resource usage",
    ksus="[Kernel Service User management] statistics",
    ksuse="[Kernel Service User management] statistics sessions",
    ksusgn="[Kernel Service User management] statistics session signature",
    ksusig="[Kernel Service User management] signals an error to the process",
    ksut="[Kernel Service User management] timer",
    ksuwaitsysevent="[Kernel Service User management] seems to deal with channels (x$ksrchdl, x$ksrcctx)",
    ksux="[Kernel Service User management] instance",
    ksuxda="[Kernel Service User management] instance attempt to delete all processes that are marked dead",
    ksuxdl="[Kernel Service User management] instance delete state object for PMON",
    ksuxds="[Kernel Service User management] delete session, instance acquires the ksupol, the SO latch protects access to the sniper bit",
    ksuxfl="[Kernel Service User management] instance find dead processes and cleanup their latches. called by PMON",
    ksv="[Kernel Service slave management]",
    ksvcheckwait="[Kernel Service slave management] validate waiting situation",
    ksvcreate="[Kernel Service slave management] create slave process",
    ksvrdp="[Kernel Service slave management] run generic detached slave process",
    ksvsend="[Kernel Service slave management] send message to slave process",
    ksvsubmit="[Kernel Service slave management] submit request for ASM Onnn slave process",
    ksvwait="[Kernel Service slave management] setup waiting",
    ksvworkwait="[Kernel Service slave management] wait for submitted work",
    ksw="[Kernel Service workgroup]",
    ksws="[Kernel Service Workgroup Services] ",
    ksws_int_tag_sess="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.INT_TAG_SESSION(DBMS_SERVICE_LIB)",
    ksws_kill_sess="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IKILL_SESSION(DBMS_SERVICE_LIB)",
    ksws_map_rc="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_ERR.I_MAP_ERROR(DBMS_SERVICE_LIB)",
    ksws_map_rc_to_error="[Kernel Service Workgroup Services] workgroup services DBMS_SERVICE.I_MAP_ERROR (?)",
    ksws_plug_crs="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IPLUG_CRS_SERVICES(DBMS_SERVICE_LIB)",
    kswsdls="[Kernel Service Workgroup Services] workgroup services delete service",
    kswsgethash="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.GET_HASH(DBMS_SERVICE_PRVT_LIB)",
    kswsgetosstat="[Kernel Service Workgroup Services] workgroup services get host cpu utilization",
    kswsics="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.ICREATE_SERVICE(DBMS_SERVICE_LIB)",
    kswsics_nvp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.ICREATE_SERVICE(DBMS_SERVICE_LIB)",
    kswsics_nvp_p="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.ICREATE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsicsnvp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.ICREATE_SERVICE(DBMS_SERVICE_LIB)",
    kswsicsnvpp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.ICREATE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsidl="[Kernel Service Workgroup Services] workgroup services DBMS_SERVICE.IDELETE_SERVICE",
    kswsidls="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IDELETE_SERVICE(DBMS_SERVICE_LIB)",
    kswsidls_p="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.IDELETE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsidlsp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.IDELETE_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsims="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IMODIFY_SERVICE(DBMS_SERVICE_LIB)",
    kswsims_nvp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IMODIFY_SERVICE(DBMS_SERVICE_LIB)",
    kswsims_nvp_p="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.IMODIFY_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsimsnvp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IMODIFY_SERVICE(DBMS_SERVICE_LIB)",
    kswsimsnvpp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.IMODIFY_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsinttagsess="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.INT_TAG_SESSION(DBMS_SERVICE_LIB)",
    kswsiss="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.ISTART_SERVICE(DBMS_SERVICE_LIB)",
    kswsiss_p="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.ISTART_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsissp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.ISTART_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsists="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.ISTOP_SERVICE(DBMS_SERVICE_LIB)",
    kswsists_p="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.ISTOP_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswsistsp="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_PRVT.ISTOP_SERVICE(DBMS_SERVICE_PRVT_LIB)",
    kswskillsess="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IKILL_SESSION(DBMS_SERVICE_LIB)",
    kswsmaprc="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE_ERR.I_MAP_ERROR(DBMS_SERVICE_LIB)",
    kswsplugcrs="[Kernel Service Workgroup Services] SYS.DBMS_SERVICE.IPLUG_CRS_SERVICES(DBMS_SERVICE_LIB)",
    ksx="[Kernel Service Cross Instance] ",
    ksxa="[Kernel Service Cross Instance] parallel affinity",
    ksxb1bqb="[Kernel Service Cross Instance] memcpy buffer to qb and increment the qb",
    ksxmcln="Kernel Service Cross Instance] SYS.DBMS_STATS_INTERNAL.PURGE_ORPHAN_ENTRIES_CALLOUT(DBMS_STATS_LIB)",
    ksxp="[Kernel Service Cross Instance IPC] ",
    ksxpcnhent="[Kernel Service Cross Instance IPC] ??",
    ksxplstdmp="[Kernel Service Cross Instance IPC] ??",
    ksxprcvimd="[Kernel Service Cross Instance IPC] ??",
    ksxpwait="[Kernel Service Cross Instance IPC] ??",
    ksxr="[Kernel Service Cross Instance] broadcast",
    ksxrpollremote="[Kernel Service Cross Instance] broadcast poll for remote messages",
    ksxrrcvmsg="[Kernel Service Cross Instance] broadcast receive message",
    ksz="[Kernel Service] oracle storage server (OSS) server layer",
    ksz_cln_proc1="[Kernel Service] ??",
    kt="kernel transaction",
    kta="[Kernel Transaction table Access] ",
    ktaadm="[Kernel Transaction table Access] get all dml locks",
    ktaftt="[Kernel Transaction table Access] free temporary table",
    ktagdm="[Kernel Transaction table Access] get dml lock",
    ktagetg0="[Kernel Transaction table Access] get generic dml lock",
    ktagetp="[Kernel Transaction table Access] get partition lock",
    ktaiam="[Kernel Transaction table Access] internal allocate dml lock",
    ktaidm="[Kernel Transaction table Access] internal delete dml lock",
    ktaifm="[Kernel Transaction table Access] internal find dml lock",
    ktam_getcontentco="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.GETCONTENTCO(DBMS_APBACKEND_LIB)",
    ktam_isapdebugon="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.ISAPDEBUGON(DBMS_APBACKEND_LIB)",
    ktam_isreadableonly="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.ISREADABLEONLY(DBMS_APBACKEND_LIB)",
    ktam_remove_backupfile="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.REMOVEBACKUPFILE(DBMS_APBACKEND_LIB)",
    ktam_sendcommand="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.SENDCOMMANDINTERNAL(DBMS_APBACKEND_LIB)",
    ktam_write_tarball="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.WRITETARBALL(DBMS_APBACKEND_LIB)",
    ktam_writecontentco="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.WRITECONTENTCO(DBMS_APBACKEND_LIB)",
    ktamgetcontentco="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.GETCONTENTCO(DBMS_APBACKEND_LIB)",
    ktamisapdebugon="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.ISAPDEBUGON(DBMS_APBACKEND_LIB)",
    ktamisreadableonly="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.ISREADABLEONLY(DBMS_APBACKEND_LIB)",
    ktamp_getcontentco="[Kernel Transaction table Access] DBMS_APBACKEND.GETCONTENTCO",
    ktamp_remove_backupfile="[Kernel Transaction table Access] DBMS_APBACKEND.REMOVEBACKUPFILE",
    ktamp_send_command="[Kernel Transaction table Access] DBMS_APBACKEND.SENDCOMMANDINTERNAL",
    ktamp_write_tarball="[Kernel Transaction table Access] DBMS_APBACKEND.WRITETARBALL",
    ktamp_writecontentco="[Kernel Transaction table Access] DBMS_APBACKEND.WRITECONTENTCO",
    ktamremovebackupfile="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.REMOVEBACKUPFILE(DBMS_APBACKEND_LIB)",
    ktamsendcommand="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.SENDCOMMANDINTERNAL(DBMS_APBACKEND_LIB)",
    ktamwritecontentco="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.WRITECONTENTCO(DBMS_APBACKEND_LIB)",
    ktamwritetarball="[Kernel Transaction table Access] SYS.DBMS_APBACKEND.WRITETARBALL(DBMS_APBACKEND_LIB)",
    ktb="[Kernel Transaction Block] ",
    ktbapundo="[Kernel Transaction Block] apply undo",
    ktbchg2="[Kernel Transaction Block] (header) change",
    ktbconv="[Kernel Transaction Block] block convert",
    ktbdbc="[Kernel Transaction Block] fast block cleanout function",
    ktbdbh="[Kernel Transaction Block] Block header dump - common/txn/lcltx",
    ktbdbhw="[Kernel Transaction Block] dump function",
    ktbdisc="[Kernel Transaction Block] ITL dump",
    ktbgcl="[Kernel Transaction Block] performs ITL cleanout for RC and CU blocks",
    ktbgcl1="[Kernel Transaction Block] performs ITL cleanout for RC and CU blocks general clean 1",
    ktbgcur="[Kernel Transaction Block] get",
    ktbgds="[Kernel Transaction Block] get dependent SCN",
    ktbgfc="[Kernel Transaction Block] flush cleanout to disk",
    ktbgfi="[Kernel Transaction Block] get free ITL",
    ktbgwl="[Kernel Transaction Block] generate write list (?)",
    ktbibi="[Kernel Transaction Block] Rolling back this uba will give a before image of the it",
    ktbico="[Kernel Transaction Block] committed transaction",
    ktbisc="[Kernel Transaction Block] ITL scan",
    ktbita="[Kernel Transaction Block] active as of last cleanout (csc) ",
    ktbiup="[Kernel Transaction Block] commit time is an upper bound",
    ktbrcl="[Kernel Transaction Block] ITL cleanout routine",
    ktbt="[Kernel Transaction Block Table] ",
    ktbtdu="[Kernel Transaction Block] dump data area",
    ktbtul="[Kernel Transaction Block Table] unlock ITLs",
    ktbtunlk="[Kernel Transaction Block Table] unlock all based on block type",
    ktc="[Kernel Transaction Control] ",
    ktcbgn="[Kernel Transaction Control] begin transaction",
    ktcbod="[Kernel Transaction Control] delete the given branch state object and put it on the freelist",
    ktcccdel="[Kernel Transaction Control] commit callback delete",
    ktccommittxn="[Kernel Transaction Control] main commit function, calls ktcCommitTxn_new",
    ktccommittxn_new="[Kernel Transaction Control] main commit function, calls ktcCommitTxn_new main commit function",
    ktcddt="[Kernel Transaction Control] delete distributed transaction",
    ktcdso="[Kernel Transaction Control] delete state object",
    ktcgtx="[Kernel Transaction Control] get action global area",
    ktcifc="[Kernel Transaction Control] idl flush contexts",
    ktcnex_cq_queryid="SYS.DBMS_CHANGE_NOTIFICATION.CQ_NOTIFICATION_QUERYID(DBMS_CHNF_LIB)",
    ktcnexaqreg="SYS.DBMS_CHANGE_NOTIFICATION.INTERNAL_AQ_REGISTER(DBMS_CHNF_LIB)",
    ktcnexaqunreg="SYS.DBMS_CHANGE_NOTIFICATION.INTERNAL_AQ_UNREGISTER(DBMS_CHNF_LIB)",
    ktcnexcqqueryid="SYS.DBMS_CHANGE_NOTIFICATION.CQ_NOTIFICATION_QUERYID(DBMS_CHNF_LIB)",
    ktcnexcregctx="SYS.DBMS_CHANGE_NOTIFICATION.CREATE_NEW_REGCTX(DBMS_CHNF_LIB)",
    ktcnexgcstr="SYS.DBMS_CHANGE_NOTIFICATION.INTERNAL_GET_CONNECT_STR(DBMS_CHNF_LIB)",
    ktcnexoldreg="SYS.DBMS_CHANGE_NOTIFICATION.ENABLE_REG(DBMS_CHNF_LIB)",
    ktcnexregend="SYS.DBMS_CHANGE_NOTIFICATION.REG_END(DBMS_CHNF_LIB)",
    ktcnexrowth="SYS.DBMS_CHANGE_NOTIFICATION.SET_ROWID_THRESHOLD(DBMS_CHNF_LIB)",
    ktcnexuregid="SYS.DBMS_CHANGE_NOTIFICATION.GET_UNIQUE_REGISTRATION_ID(DBMS_CHNF_LIB)",
    ktcrab="[Kernel Transaction Control] real abort",
    ktcrcm="[Kernel Transaction Control] real commit",
    ktcsod="[Kernel Transaction Control] state object procedure vector definition",
    ktcxcb="[Kernel Transaction Control] fixed table callback for x$ktcxb",
    ktd="[Kernel Transaction Distributed] ",
    ktdbas="[Kernel Transaction Distributed] BASe",
    ktdbgn="[Kernel Transaction Distributed] begin",
    ktdcmt="[Kernel Transaction Distributed] commit",
    ktdrev="[Kernel Transaction Distributed] recovery",
    kte="[Kernel Transaction Extent Management] ",
    ktec="[Kernel Transaction Extent Concurrent operations] ",
    ktecgetsh="[Kernel Transaction Extent Concurrent operations] get segment header",
    ktecgsc="[Kernel Transaction Extent Concurrent operations] get segment header and auto-convert",
    ktecgshx="[Kernel Transaction Extent Concurrent operations] ??",
    kteclck="[Kernel Transaction Extent Concurrent operations] set extent map lock",
    ktef="[Kernel Transaction Extent Flush extent map] ",
    ktehw="[Kernel Transaction Extent - High Water mark operations] ",
    ktein="[Kernel Transaction Extent - INformation operations] ",
    kteinmap="[Kernel Transaction Extent Management] information operations return extent map",
    kteinxtt="[Kernel Transaction Extent Management] information operations extents",
    ktel="[Kernel Transaction Extent Management] loader",
    ktelck="[Kernel Transaction Extent Management] loader set segment header extent map lock",
    ktelrwi="[Kernel Transaction Extent Management] loader redoless write initialize",
    kteop="[Kernel Transaction Extent - OPerations] ",
    kteopins="[Kernel Transaction Extent - OPerations] s insert a formatted extent after the high water mark",
    kteopmerge="[Kernel Transaction Extent - OPerations] s marge extent extent maps",
    kteu="[Kernel Transaction Extent Management] redo support for segment header/extent map changes",
    ktf="kernel transaction flashback support",
    ktfa="kernel transaction flashback support flashback archive",
    ktfa_add_table_to_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.ADD_TABLE_TO_APPLICATION",
    ktfa_disable_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.DISABLE_APPLICATION",
    ktfa_disassociate_fba="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.DISASSOCIATE_FBA_INTERNAL",
    ktfa_do_health_check="kernel transaction flashback support flashback archive do a health check",
    ktfa_drop_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.DROP_APPLICATION",
    ktfa_enable_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.ENABLE_APPLICATION",
    ktfa_extend_mappings="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.EXTEND_MAPPINGS",
    ktfa_get_sys_context="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.GET_SYS_CONTEXT",
    ktfa_import_history="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.IMPORT_HISTORY",
    ktfa_lock_down_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.LOCK_DOWN_APPLICATION",
    ktfa_purge_context="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.PURGE_CONTEXT",
    ktfa_reassociate_fba="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.REASSOCIATE_FBA_INTERNAL",
    ktfa_register_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.REGISTER_APPLICATION",
    ktfa_remtabfapp="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.REMOVE_TABLE_FROM_APPLICATION",
    ktfa_set_context_level="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.SET_CONTEXT_LEVEL",
    ktfa_unlock_application="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.UNLOCK_APPLICATION",
    ktfactht="kernel transaction flashback support flashback archive DBMS_FLASHBACK_ARCHIVE.CREATE_TEMP_HISTORY_TABLE",
    ktfaex_addtabtapp="SYS.DBMS_FLASHBACK_ARCHIVE.ADD_TABLE_TO_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_ctht="SYS.DBMS_FLASHBACK_ARCHIVE.CREATE_TEMP_HISTORY_TABLE(DBMS_FDA_LIB)",
    ktfaex_davt="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_ASOF_VALID_TIME(DBMS_FDA_LIB)",
    ktfaex_disapp="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_disassociate="SYS.DBMS_FLASHBACK_ARCHIVE.DISASSOCIATE_FBA_INTERNAL(DBMS_FDA_LIB)",
    ktfaex_dropapp="SYS.DBMS_FLASHBACK_ARCHIVE.DROP_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_eavt="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_AT_VALID_TIME(DBMS_FDA_LIB)",
    ktfaex_enapp="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_extend_mappings="SYS.DBMS_FLASHBACK_ARCHIVE.EXTEND_MAPPINGS(DBMS_FDA_LIB)",
    ktfaex_get_sys_context="SYS.DBMS_FLASHBACK_ARCHIVE.GET_SYS_CONTEXT_INTERNAL(DBMS_FDA_LIB)",
    ktfaex_import_history="SYS.DBMS_FLASHBACK_ARCHIVE.IMPORT_HISTORY(DBMS_FDA_LIB)",
    ktfaex_ldapp="SYS.DBMS_FLASHBACK_ARCHIVE.LOCK_DOWN_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_purge_context="SYS.DBMS_FLASHBACK_ARCHIVE.PURGE_CONTEXT(DBMS_FDA_LIB)",
    ktfaex_reassociate="SYS.DBMS_FLASHBACK_ARCHIVE.REASSOCIATE_FBA(DBMS_FDA_LIB)",
    ktfaex_register="SYS.DBMS_FLASHBACK_ARCHIVE.REGISTER_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_remtabfapp="SYS.DBMS_FLASHBACK_ARCHIVE.REMOVE_TABLE_FROM_APPLICATION(DBMS_FDA_LIB)",
    ktfaex_set_context_level="SYS.DBMS_FLASHBACK_ARCHIVE.SET_CONTEXT_LEVEL(DBMS_FDA_LIB)",
    ktfaex_ulapp="SYS.DBMS_FLASHBACK_ARCHIVE.UNLOCK_APPLICATION(DBMS_FDA_LIB)",
    ktfaexaddtabtapp="SYS.DBMS_FLASHBACK_ARCHIVE.ADD_TABLE_TO_APPLICATION(DBMS_FDA_LIB)",
    ktfaexctht="SYS.DBMS_FLASHBACK_ARCHIVE.CREATE_TEMP_HISTORY_TABLE(DBMS_FDA_LIB)",
    ktfaexdavt="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_ASOF_VALID_TIME(DBMS_FDA_LIB)",
    ktfaexdisapp="SYS.DBMS_FLASHBACK_ARCHIVE.DISABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaexdisassociate="SYS.DBMS_FLASHBACK_ARCHIVE.DISASSOCIATE_FBA_INTERNAL(DBMS_FDA_LIB)",
    ktfaexdropapp="SYS.DBMS_FLASHBACK_ARCHIVE.DROP_APPLICATION(DBMS_FDA_LIB)",
    ktfaexeavt="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_AT_VALID_TIME(DBMS_FDA_LIB)",
    ktfaexenapp="SYS.DBMS_FLASHBACK_ARCHIVE.ENABLE_APPLICATION(DBMS_FDA_LIB)",
    ktfaexextendmappings="SYS.DBMS_FLASHBACK_ARCHIVE.EXTEND_MAPPINGS(DBMS_FDA_LIB)",
    ktfaexgetsyscontext="SYS.DBMS_FLASHBACK_ARCHIVE.GET_SYS_CONTEXT_INTERNAL(DBMS_FDA_LIB)",
    ktfaeximporthistory="SYS.DBMS_FLASHBACK_ARCHIVE.IMPORT_HISTORY(DBMS_FDA_LIB)",
    ktfaexldapp="SYS.DBMS_FLASHBACK_ARCHIVE.LOCK_DOWN_APPLICATION(DBMS_FDA_LIB)",
    ktfaexpurgecontext="SYS.DBMS_FLASHBACK_ARCHIVE.PURGE_CONTEXT(DBMS_FDA_LIB)",
    ktfaexreassociate="SYS.DBMS_FLASHBACK_ARCHIVE.REASSOCIATE_FBA(DBMS_FDA_LIB)",
    ktfaexregister="SYS.DBMS_FLASHBACK_ARCHIVE.REGISTER_APPLICATION(DBMS_FDA_LIB)",
    ktfaexremtabfapp="SYS.DBMS_FLASHBACK_ARCHIVE.REMOVE_TABLE_FROM_APPLICATION(DBMS_FDA_LIB)",
    ktfaexsetcontextlevel="SYS.DBMS_FLASHBACK_ARCHIVE.SET_CONTEXT_LEVEL(DBMS_FDA_LIB)",
    ktfaexulapp="SYS.DBMS_FLASHBACK_ARCHIVE.UNLOCK_APPLICATION(DBMS_FDA_LIB)",
    ktfb="kernel transaction flashback support bitmapped space manipulation of files/tablespaces",
    ktfbh="kernel transaction flashback support bitmapped space manipulation of files/tablespaces header",
    ktfbt="kernel transaction flashback support bitmapped space manipulation of files/tablespaces extents",
    ktfbtexcfg="SYS.DBMS_FBT.FBT_CLEAR_ANALYZE_FLAG(DBMS_FBT_LIB)",
    ktfbtexsfg="SYS.DBMS_FBT.FBT_SET_ANALYZE_FLAG(DBMS_FBT_LIB)",
    ktfbtgex="kernel transaction flashback support bitmapped space manipulation of files/tablespaces extents get a free extent",
    ktfd="kernel transaction flashback support dictionary based extent management",
    ktfedml="kernel transaction flashback support KUPP$PROC.ENABLE_FLASHBACK_DMLS",
    ktfexedml="SYS.KUPP$PROC.ENABLE_FLASHBACK_DMLS(DBMS_TRAN_LIB)",
    ktfexgscnn="SYS.DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER(DBMS_TRAN_LIB)",
    ktfexscntot="SYS.SCN_TO_TIMESTAMP.scn_to_timestamp(DBMS_TRAN_LIB)",
    ktfexsnrb="SYS.DBMS_FLASHBACK.ENABLE_AT_SYSTEM_CHANGE_NUMBER(DBMS_TRAN_LIB)",
    ktfexsrb="SYS.DBMS_FLASHBACK.ENABLE_AT_TIME(DBMS_TRAN_LIB)",
    ktfexsrd="SYS.DBMS_FLASHBACK.DISABLE(DBMS_TRAN_LIB)",
    ktfexttoscn="SYS.TIMESTAMP_TO_SCN.timestamp_to_scn(DBMS_TRAN_LIB)",
    ktfgscnn="kernel transaction flashback support DBMS_FLASHBACK.GET_SYSTEM_CHANGE_NUMBER",
    ktfsnrb="kernel transaction flashback support DBMS_FLASHBACK.ENABLE_AT_SYSTEM_CHANGE_NUMBER",
    ktfsrb="kernel transaction flashback support DBMS_FLASHBACK.ENABLE_AT_TIME",
    ktfsrd="kernel transaction flashback support DBMS_FLASHBACK.DISABLE",
    ktft="kernel transaction flashback support temporary file manipulation",
    ktftb_backout_names="SYS.DBMS_FLASHBACK.INTERNAL_NAMES_BACKOUT(DBMS_TRAN_LIB)",
    ktftb_backout_xids="SYS.DBMS_FLASHBACK.INTERNAL_XIDS_BACKOUT(DBMS_TRAN_LIB)",
    ktftbbackoutnames="SYS.DBMS_FLASHBACK.INTERNAL_NAMES_BACKOUT(DBMS_TRAN_LIB)",
    ktftbbackoutxids="SYS.DBMS_FLASHBACK.INTERNAL_XIDS_BACKOUT(DBMS_TRAN_LIB)",
    ktftbp_backout_xids="kernel transaction flashback support temporary file manipulation DBMS_FLASHBACK.INTERNAL_XIDS_BACKOUT",
    ktfwtsm="kernel transaction flashback support write timestamp",
    kti="kernel transaction in memory undo(?)",
    ktilm="DBMS_ILM",
    ktilm_flush_one_seg="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_SEGMENT_ACCESS_INTERNAL",
    ktilm_flush_rowmaps="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_ROWMAPS",
    ktilm_flush_seg="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_ALL_SEGMENTS",
    ktilm_flush_seg_rowmaps="kernel transaction in memory undo(?) DBMS_ILM.FLUSH_ALL_SEGMENTS DBMS_ILM.FLUSH_SEGMENT_ROWMAP_INTERNAL",
    ktilmex_flush_col_stats="SYS.DBMS_ILM.FLUSH_COL_STATS(DBMS_ILM_LIB)",
    ktilmex_flush_one_seg="SYS.DBMS_ILM.FLUSH_SEGMENT_ACCESS_INTERNAL(DBMS_ILM_LIB)",
    ktilmex_flush_rowmaps="SYS.DBMS_ILM.FLUSH_ROWMAPS(DBMS_ILM_LIB)",
    ktilmex_flush_seg_rowmap="SYS.DBMS_ILM.FLUSH_SEGMENT_ROWMAP_INTERNAL(DBMS_ILM_LIB)",
    ktilmex_flush_segs="SYS.DBMS_ILM.FLUSH_ALL_SEGMENTS(DBMS_ILM_LIB)",
    ktilmexflushcolstats="SYS.DBMS_ILM.FLUSH_COL_STATS(DBMS_ILM_LIB)",
    ktilmexflushoneseg="SYS.DBMS_ILM.FLUSH_SEGMENT_ACCESS_INTERNAL(DBMS_ILM_LIB)",
    ktilmexflushrowmaps="SYS.DBMS_ILM.FLUSH_ROWMAPS(DBMS_ILM_LIB)",
    ktilmexflushsegrowmap="SYS.DBMS_ILM.FLUSH_SEGMENT_ROWMAP_INTERNAL(DBMS_ILM_LIB)",
    ktilmexflushsegs="SYS.DBMS_ILM.FLUSH_ALL_SEGMENTS(DBMS_ILM_LIB)",
    ktl="[Kernel Tranaction List blocks changed] ",
    ktldbl="[Kernel Tranaction List blocks changed] delete list of block SO's",
    ktli_upgradeupdateinstidalllogs="[Kernel Tranaction List blocks changed] DBMS_SECUREFILE_LOG_ADMIN.UPGRADE_INST_ALL_LOGS",
    ktlidestroyalllogmig="[Kernel Tranaction List blocks changed] SYS.DBMS_SECUREFILE_LOG_ADMIN.DESTROY_ALL_LOGS(DBMS_TLOG_LIB)",
    ktlidestroyalllogs_mig="[Kernel Tranaction List blocks changed] DBMS_SECUREFILE_LOG_ADMIN.DESTROY_ALL_LOGS",
    ktliupdinstidalllogs="[Kernel Tranaction List blocks changed] SYS.DBMS_SECUREFILE_LOG_ADMIN.UPGRADE_INST_ALL_LOGS(DBMS_TLOG_LIB)",
    ktm="[Kernel Transaction Monitor Component (SMON)] ",
    ktma="[Kernel Transaction Monitor Component (SMON)] IM transaction ADG",
    ktmb="[Kernel Transaction Monitor Component (SMON)] IM transaction block",
    ktmc="[Kernel Transaction Monitor Component (SMON)] IM transaction concurrency",
    ktmirc="[Kernel Transaction Monitor Component (SMON)] instance recovery",
    ktmjs="[Kernel Transaction Monitor Component (SMON)] IM transaction journal scan",
    ktmmon="[Kernel Transaction Monitor Component (SMON)] tx monitor background timeout action (smon)",
    ktmpj="[Kernel Transaction Monitor Component (SMON)] IM transaction private journal",
    ktmpjinvalidaterow="[Kernel Transaction Monitor Component (SMON)] IM transaction private journal invalidates the row in a private journal",
    ktmpjupdinmemextstat="[Kernel Transaction Monitor Component (SMON)] IM transaction private journal update inmemory extent statistics",
    ktmr="[Kernel Transaction Monitor Component (SMON)] IM transaction read",
    ktmres="[Kernel Transaction Monitor Component (SMON)] IM transaction read resource cleanup routine",
    ktmsj="[Kernel Transaction Monitor Component (SMON)] IM transaction shared journal",
    ktmsmonmain="[Kernel Transaction Monitor Component (SMON)] main smon routine",
    ktp="[Kernel Transaction Parallel] ",
    ktpcmt="[Kernel Transaction Parallel] commit transaction",
    ktpr="[Kernel Transaction Parallel] recovery",
    ktprbeg="[Kernel Transaction Parallel] recovery begin",
    ktr="[Kernel Transaction Read Consistency] ",
    ktrexc="[Kernel Transaction Read Consistency] examine blocks (consistent gets - examination)",
    ktrexf="[Kernel Transaction Read Consistency] examine blocks (returns best candidate)",
    ktrgcm="[Kernel Transaction Read Consistency] common cr read code; build a cr buffer by applying undo",
    ktrget="[Kernel Transaction Read Consistency] get a read consistent block",
    ktrgtc="[Kernel Transaction Read Consistency] get a read consistent block and call back client",
    ktri="[Kernel Transaction Read Consistency] DBMS_RESUMABLE",
    ktriabt="[Kernel Transaction Read Consistency] SYS.DBMS_RESUMABLE.ABORT(DBMS_RESUMABLE_LIB)",
    ktrigst="[Kernel Transaction Read Consistency] SYS.DBMS_RESUMABLE.GET_SESSION_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrigt="[Kernel Transaction Read Consistency] SYS.DBMS_RESUMABLE.GET_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrisst="[Kernel Transaction Read Consistency] SYS.DBMS_RESUMABLE.SET_SESSION_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrist="[Kernel Transaction Read Consistency] SYS.DBMS_RESUMABLE.SET_TIMEOUT(DBMS_RESUMABLE_LIB)",
    ktrsexec="[Kernel Transaction Read Consistency] space management execute",
    ktrvac="[Kernel Transaction Read Consistency] validate active transactions(?)",
    kts="[Kernel Transaction Segment management] ",
    kts4emchk="[Kernel Transaction Segment management] extended semantic check of the block",
    kts4smck="[Kernel Transaction Segment management] semantic check of the block",
    ktsa="[Kernel Transaction Segment Space analysis] ",
    ktsap3gl1="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl10="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_QUOTAS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl11="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_FROM_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl12="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl13="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_RELOCATE_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl14="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_STATES(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl15="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_MOVEBLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl16="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_EXTBLKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl17="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_DUMP_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl18="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl19="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl2="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl20="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_REPAIR(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl21="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_SYNCHWM(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl22="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.FLUSH_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl23="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.PURGE_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl24="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.NGLOB_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl25="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_REPAIR_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl26="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_EXTEND_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl27="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.DROP_EMPTY_SEGMENTS_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl28="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.MAT_DEF_SEG_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl29="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_AFFINITY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl3="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_DROP_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl30="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.HEAT_MAP_SEGMENT_SETMAXSIZE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl31="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl32="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl33="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_LOAD(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl34="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl35="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl36="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_AREA_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl37="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_TREE_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl4="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl5="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl6="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl7="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl8="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_EXTENTS(DBMS_SPACE_ADMIN_LIB)",
    ktsap3gl9="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_BLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_1="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_10="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_QUOTAS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_11="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_FROM_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_12="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_MIGRATE_TO_LOCAL(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_13="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_RELOCATE_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_14="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_STATES(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_15="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_MOVEBLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_16="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_SEGMENT_EXTBLKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_17="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_DUMP_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_18="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_19="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_2="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_20="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_REPAIR(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_21="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.ASSM_SEGMENT_SYNCHWM(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_22="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.FLUSH_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_23="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.PURGE_LOBSEGMENT_STATS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_24="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.NGLOB_SEGMENT_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_25="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_REPAIR_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_26="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_EXTEND_SFILE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_27="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.DROP_EMPTY_SEGMENTS_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_28="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.MAT_DEF_SEG_INT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_29="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_AFFINITY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_3="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_DROP_CORRUPT(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_30="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.HEAT_MAP_SEGMENT_SETMAXSIZE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_31="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_32="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_33="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_SEGMENT_LOAD(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_34="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_CREATE(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_35="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_TABLESPACE_DROP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_36="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_AREA_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_37="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.IMC_TREE_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_4="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_DUMP(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_5="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_VERIFY(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_6="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_FIX_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_7="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.TABLESPACE_REBUILD_BITMAPS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_8="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_EXTENTS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_3gl_9="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE_ADMIN.SEGMENT_NUMBER_BLOCKS(DBMS_SPACE_ADMIN_LIB)",
    ktsap_cmp_ratio="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_CMP_RATIO(C)",
    ktsap_create_table_cost="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_CREATE_TABLE_COST(C)",
    ktsap_object_space_usage="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_OBJECT_SPACE_USAGE(C)",
    ktsap_verify_shrink_candidate="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_VERIFY_SHRINK_CANDIDATE(C)",
    ktsapcmpratio="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_CMP_RATIO(C)",
    ktsapcreatetablecost="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_CREATE_TABLE_COST(C)",
    ktsapobjectspaceusage="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_OBJECT_SPACE_USAGE(C)",
    ktsaps="[Kernel Transaction Segment Space analysis] space analysis plsql space; dbms_space_admin",
    ktsaps_create_table_cost="[Kernel Transaction Segment Space analysis] space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAP_CREATE_TABLE_COST",
    ktsaps_dropdf="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_DROPDF(C)",
    ktsaps_info="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_INFO(C)",
    ktsaps_info2="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_INFO2(C)",
    ktsaps_nglob_info="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_NGLOB_INFO(C)",
    ktsaps_nglob_info2="[Kernel Transaction Segment Space analysis] space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAPS_NGLOB_INFO DBMS_SPACE_ADMIN.KTSAPS_NGLOB_INFO2",
    ktsaps_object_space_usage="[Kernel Transaction Segment Space analysis] space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAP_OBJECTS_SPACE_USAGE",
    ktsaps_sf_info_fast="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_SF_INFO_FAST(C)",
    ktsaps_verify_shrink_candidate="[Kernel Transaction Segment Space analysis] space analysis plsql space; dbms_space_admin DBMS_SPACE_ADMIN.KTSAP_VERIFY_SHRINK_CANDIDATE",
    ktsapsdropdf="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_DROPDF(C)",
    ktsapsinfo="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_INFO(C)",
    ktsapsinfo2="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_INFO2(C)",
    ktsapsnglobinfo="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_NGLOB_INFO(C)",
    ktsapssfinfofast="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAPS_SF_INFO_FAST(C)",
    ktsapverifyshrinkcandidate="[Kernel Transaction Segment Space analysis] SYS.DBMS_SPACE.KTSAP_VERIFY_SHRINK_CANDIDATE(C)",
    ktsb="[Kernel Transaction Segment Bitmap management] ",
    ktsbfbl="[Kernel Transaction Segment Bitmap management] SYS.DBMS_SPACE.KTSBFBL(C)",
    ktsbusp="[Kernel Transaction Segment Bitmap management] SYS.DBMS_SPACE.KTSBUSP(C)",
    ktscbr="[Kernel Transaction Segment CallBack Routines] ",
    ktsclsb="[Kernel Transaction Segment Bitmap management] coalesce free space",
    ktsf="[Kernel Transaction Segment management] file",
    ktsf_gsp="[Kernel Transaction Segment management] file get space",
    ktsfbfmt="[Kernel Transaction Segment management] file format block and link",
    ktsfsmhwm="[Kernel Transaction Segment management] file segment move high water mark",
    ktsfsnblk="[Kernel Transaction Segment management] file new block",
    ktsftcmove="[Kernel Transaction Segment management] file ??",
    ktsfunlk="[Kernel Transaction Segment management] file undo free list",
    ktsfx="[Kernel Transaction Segment dataFile eXtension mgmt] ",
    ktsl="[Kernel Transaction Segment management] lob",
    ktsl_disp_gsp_driver="[Kernel Transaction Segment management] lob dispenser get space driver",
    ktsl_fill_dispenser_main="[Kernel Transaction Segment management] lob fill dispenser main loop",
    ktsl_format_cfs_hbb="[Kernel Transaction Segment management] lob format commited free space hash bucket block",
    ktsl_format_ehdr="[Kernel Transaction Segment management] lob format extent header block",
    ktsl_format_ufs_hbb="[Kernel Transaction Segment management] lob format uncommitted free space hash bucket block",
    ktsl_ins_fsb="[Kernel Transaction Segment management] lob insert into free space block",
    ktsla="[Kernel Transaction Segment management] lob space allocation",
    ktsla_cfsgsp_main="[Kernel Transaction Segment management] lob space allocation committed free space get space main",
    ktsla_format_ufs_fsg="[Kernel Transaction Segment management] lob space allocation format uncommitted free space FSG block",
    ktsla_hbb_gsp="[Kernel Transaction Segment management] lob space allocation hash bucket block get space",
    ktsla_ins_fsg="[Kernel Transaction Segment management] lob space allocation insert into FSG",
    ktslagsp="[Kernel Transaction Segment management] lob space allocation get space",
    ktslagsp_main="[Kernel Transaction Segment management] lob space allocation get space main routine",
    ktsld="[Kernel Transaction Segment management] lob delete",
    ktsld_fsp="[Kernel Transaction Segment management] lob delete free space",
    ktsld_ins_hbb="[Kernel Transaction Segment management] lob delete insert into hash bucket block",
    ktsldfsp_main="[Kernel Transaction Segment management] lob delete free space main procedure",
    ktslf="[Kernel Transaction Segment management] lob free allocated space",
    ktslfbupd="[Kernel Transaction Segment management] lob free allocated space buffer update",
    ktslfsp="[Kernel Transaction Segment management] lob free allocated space procedure",
    ktslgfs="[Kernel Transaction Segment management] lob get free space",
    ktslghb="[Kernel Transaction Segment management] lob get hash bucket block",
    ktslj="[Kernel Transaction Segment management] lob slave process",
    ktsmg="[Kernel Transaction Segment management] merge",
    ktsmg_icmt="[Kernel Transaction Segment management] merge insert direct load commit. called by transaction code at commit.",
    ktsmg_seg="[Kernel Transaction Segment management] merge segments",
    ktsmgaex="[Kernel Transaction Segment management] merge DBMS_UNDO_ADV.IF_AUTO_EXTEND",
    ktsmgbpr="[Kernel Transaction Segment management] merge DBMS_UNDO_ADV.GET_BEST_POSSIBLE_RETENTION",
    ktsmgexadv="[Kernel Transaction Segment management] SYS.PRVT_UADV.EXECUTE(DBMS_UNDOADV_LIB)",
    ktsmgexaex="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.IF_AUTO_EXTEND(DBMS_UNDOADV_LIB)",
    ktsmgexbpr="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.GET_BEST_POSSIBLE_RETENTION(DBMS_UNDOADV_LIB)",
    ktsmgexhlth="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.GET_UNDO_HEALTH(DBMS_UNDOADV_LIB)",
    ktsmgexmql="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.GET_LONGEST_QUERY(DBMS_UNDOADV_LIB)",
    ktsmgexmsz="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.MAXSIZE(DBMS_UNDOADV_LIB)",
    ktsmgexru="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.GET_REQUIRED_UNDO(DBMS_UNDOADV_LIB)",
    ktsmgexruarr="[Kernel Transaction Segment management] SYS.DBMS_UNDO_ADV.GET_REQUIRED_UNDO(DBMS_UNDOADV_LIB)",
    ktsmgmql="[Kernel Transaction Segment management] merge DBMS_UNDO_ADV.GET_LONGEST_QUERY",
    ktsmgmsz="[Kernel Transaction Segment management] merge DBMS_UNDO_ADV.MAXSIZE",
    ktsmgru="[Kernel Transaction Segment management] merge DBMS_UNDO_ADV.GET_REQUIRED_UNDO",
    ktsmgruarr="[Kernel Transaction Segment management] merge DBMS_UNDO_ADV.GET_REQUIRED_UNDO DBMS_UNDO_ADV.GET_REQUIRED_UNDO",
    ktsp="[Kernel Transaction Segment management] segment pagetable",
    ktspffbmb="[Kernel Transaction Segment management] segment pagetable format first level bitmap block",
    ktspffc="[Kernel Transaction Segment management] segment pagetable Fill First Level bmb dbas",
    ktspfmdb="[Kernel Transaction Segment management] segment pagetable format a range of data blocks",
    ktspfmtrng="[Kernel Transaction Segment management] segment pagetable format one range or less of data blocks",
    ktspfpblk="[Kernel Transaction Segment management] segment pagetable pin useful block",
    ktspfsbmb="[Kernel Transaction Segment management] segment pagetable format second level bitmap block",
    ktspfsrch="[Kernel Transaction Segment management] segment pagetable first level bitmap block search",
    ktspfsteal="[Kernel Transaction Segment management] segment pagetable Search cache for Pointer to data area of LII bitmap block",
    ktspftbmb="[Kernel Transaction Segment management] segment pagetable format bitmap, formats lob persistent undo blocks(?)",
    ktspfupdst="[Kernel Transaction Segment management] segment pagetable ??",
    ktspgetf="[Kernel Transaction Segment management] segment pagetable Get next set of L1s",
    ktspgfblk3="[Kernel Transaction Segment management] segment pagetable let L1 BMB",
    ktspgsp_cbk="[Kernel Transaction Segment management] segment pagetable Get Space for inserts",
    ktspgsp_cbk1="[Kernel Transaction Segment management] segment pagetable Get Space for inserts Get Space for inserts bitmap segment only",
    ktspgsp_main="[Kernel Transaction Segment management] segment pagetable get space for inserts",
    ktsplbfmb="[Kernel Transaction Segment management] segment pagetable reclaim free fatblocks from lob index",
    ktsplbrecl="[Kernel Transaction Segment management] segment pagetable reclaim lob",
    ktspmlhwm="[Kernel Transaction Segment management] segment pagetable Move the Low High Water Mark. Called when a range of blocks is formatted",
    ktspsc="[Kernel Transaction Segment management] segment pagetable search cache",
    ktspscan_bmb="[Kernel Transaction Segment management] segment pagetable search cache scan the level 1 bitmap blocks",
    ktss="[Kernel Transaction Space management segment procedures] ",
    ktssdrp_segment="[Kernel Transaction Space management segment procedures] converts segment to temp in preparation for dropping",
    ktssdt_segs="[Kernel Transaction Space management segment procedures] drops stray temporary segments (creates cursor to check)",
    ktssof="[Kernel Transaction Space management segment procedures] callback for the x$ktsso implementation",
    ktst="[Kernel Transaction Segment management] sort management",
    ktstdropobj="[Kernel Transaction Temporary Sort mgmnt] drop the temporary space object",
    ktstdt="[Kernel Transaction Temporary Sort mgmnt] deletes the sort handle (ktstused) state object",
    ktsx="[Kernel Transaction Temporary Extent mgmnt] ",
    ktsx_endtx="[Kernel Transaction Temporary Extent mgmnt] end add extent transaction",
    ktsxr_add="[Kernel Transaction Temporary Extent mgmnt] redoless add extent to a segment",
    ktsxs_add="[Kernel Transaction Temporary Extent mgmnt] add extent to a segment",
    ktsxterr="[Kernel Transaction Temporary Extent mgmnt] find extent error",
    ktt="[Kernel Transaction Tablespace] ",
    ktte_ts_gettarget="[Kernel Transaction Tablespace] check if the tbs needs to be extended",
    ktu="[Kernel Transaction Undo] ",
    ktu4smck="[Kernel Transaction Undo] semantic check of the block",
    ktu4ubck="[Kernel Transaction Undo] undo block check",
    ktuabt="[Kernel Transaction Undo] abort",
    ktuapundo="[Kernel Transaction Undo] apply undo",
    ktubgn="[Kernel Transaction Undo] begin transaction",
    ktubko="[Kernel Transaction Undo] get undo record to rollback transaction, non-cr only",
    ktubnd="[Kernel Transaction Undo] bind undo segment",
    ktubsy="[Kernel Transaction Undo] check if an extent can be reclaimed using extent commit time",
    ktuc="[Kernel Transaction Undo called from Cache layer] ",
    ktuchg="[Kernel Transaction Undo] write logs and perform changes",
    ktucmt="[Kernel Transaction Undo] commit transaction",
    ktudba="[Kernel Transaction Undo] convert from usn to dba",
    ktudecrustat="[Kernel Transaction Undo] decrement undo usage statistics in the resource maanger",
    ktudnx="[Kernel Transaction Undo] decrease active transaction count",
    ktugct="[Kernel Transaction Undo] get commit times for transction ids in the data block's ITL",
    ktugti="[Kernel Transaction Undo] ??",
    ktugur="[Kernel Transaction Undo] generate undo and redo",
    ktugus="[Kernel Transaction Undo] get undo segment header",
    ktugusc="[Kernel Transaction Undo] get undo segment header get undo segment",
    ktuim="[Kernel Transaction Undo] in memory",
    ktuisonline1="[Kernel Transaction Undo] return undo segment info if undo segment is online",
    ktundo="[Kernel Transaction Undo] undo",
    ktunfy="[Kernel Transaction Undo] notification procedure",
    ktur="[Kernel Transaction Undo] recovery",
    kturbk="[Kernel Transaction Undo] recovery rollback for CR only, reads undo record pointed by uba and call ktundo to back out the change",
    kturbt="[Kernel Transaction Undo] recovery rollback to time scn",
    kturcm="[Kernel Transaction Undo] recovery redo commit",
    kturcrbackoutonechg="[Kernel Transaction Undo] recovery consistent read; backout change",
    kturcurrbackoutonechg="[Kernel Transaction Undo] recovery current read; backout change",
    kturdb="[Kernel Transaction Undo] recovery write undo data to undo block",
    kturdh="[Kernel Transaction Undo] recovery write undo header data to undo block",
    kturef="[Kernel Transaction Undo] recovery rollback examine candidate undo block",
    kturgetundorec="[Kernel Transaction Undo] recovery get an undo record",
    kturrecover="[Kernel Transaction Undo] recovery recover",
    kturrecoveractivetxns="[Kernel Transaction Undo] recovery recover active transactions",
    kturrecovertxn="[Kernel Transaction Undo] recovery recover transaction",
    kturrecovertxnmain="[Kernel Transaction Undo] recovery recover transaction main procedure",
    kturrecoverundosegment="[Kernel Transaction Undo] recovery recover undo segment",
    ktursal="[Kernel Transaction Undo] recovery shrink undo segments",
    ktursn="[Kernel Transaction Undo] recovery rollback segments shrink numbered",
    ktursp="[Kernel Transaction Undo] recovery rollback to savepoint",
    ktursr="[Kernel Transaction Undo] recovery rollback segments shrink requested",
    ktusrs="[Kernel Transaction Undo] shrink rollback segments",
    ktuulc="[Kernel Transaction Undo] unlock (?)",
    ktz="[Kernel TranZaction testing] ",
    ku="[Kernel Utility] ",
    kubsagtdescribeclose="[Kernel Utility] SYS.KUBSAGT.DESCRIBE_CLOSE(KUBSAGT_LIB)",
    kubsagtdescribegetinfo="[Kernel Utility] SYS.KUBSAGT.DESCRIBE_GETINFO(KUBSAGT_LIB)",
    kubsagtdescribeopen="[Kernel Utility] SYS.KUBSAGT.DESCRIBE_OPEN(KUBSAGT_LIB)",
    kubsagtdescribeversion="[Kernel Utility] SYS.KUBSAGT.DESCRIBE_VERSION(KUBSAGT_LIB)",
    kubsagtfetchclose="[Kernel Utility] SYS.KUBSAGT.FETCH_CLOSE(KUBSAGT_LIB)",
    kubsagtfetchdata="[Kernel Utility] SYS.KUBSAGT.FETCH_DATA(KUBSAGT_LIB)",
    kubsagtfetchinit="[Kernel Utility] SYS.KUBSAGT.FETCH_INIT(KUBSAGT_LIB)",
    kubsagtfetchopen="[Kernel Utility] SYS.KUBSAGT.FETCH_OPEN(KUBSAGT_LIB)",
    kubsdesc="[Kernel Utility] SYS.KUBSD$DESC_INT.KUBSDESC(KUBSDLIB)",
    kueuld="[Kernel Utility Export UnLoaDer routine] ",
    kup="[Kernel Utility dataPump] ",
    kupc="[Kernel Utility dataPump] queue services",
    kupc_load="[Kernel Utility dataPump] SYS.KUPD$DATA.CONVENTIONAL_LOAD_CALLOUT(KUPCLIB)",
    kupcload="[Kernel Utility dataPump] SYS.KUPD$DATA.CONVENTIONAL_LOAD_CALLOUT(KUPCLIB)",
    kupd="[Kernel Utility dataPump Data Package] ",
    kupd_load="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.LOAD_DATA(KUPDLIB)",
    kupd_meta="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.FETCH_METADATA(KUPDLIB)",
    kupd_netload="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.NETLOAD_DATA(KUPDLIB)",
    kupd_unload="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.UNLOAD_DATA(KUPDLIB)",
    kupdload="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.LOAD_DATA(KUPDLIB)",
    kupdmeta="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.FETCH_METADATA(KUPDLIB)",
    kupdnetload="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.NETLOAD_DATA(KUPDLIB)",
    kupdunload="[Kernel Utility dataPump Data Package] SYS.KUPD$DATA_INT.UNLOAD_DATA(KUPDLIB)",
    kupf="[Kernel Utility dataPump File Manager] ",
    kupfxclosectx="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.CLOSE_CONTEXT(KUPFLIB)",
    kupfxcredmpfile="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.CREATE_DUMP_FILE(KUPFLIB)",
    kupfxcrekeyinfo="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.CREATE_KEY_INFO(KUPFLIB)",
    kupfxdeldmpfile="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.DELETE_DUMP_FILE(KUPFLIB)",
    kupfxencpwd="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.ENCPWD(KUPFLIB)",
    kupfxexmdmpfile="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.EXAMINE_DUMP_FILE(KUPFLIB)",
    kupfxflushlob="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.FLUSH_LOB(KUPFLIB)",
    kupfxgetblkbufsizes="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_BLKBUF_SIZES(KUPFLIB)",
    kupfxgetdebugevent="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_DEBUG_EVENT(KUPFLIB)",
    kupfxgetdefcredential="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_DEFAULT_CREDENTIAL(KUPFLIB)",
    kupfxgetdeffilename="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_DEFAULT_FILENAME(KUPFLIB)",
    kupfxgetfmttime="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_FORMATTED_TIME(KUPFLIB)",
    kupfxgetfullfilename="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_FULL_FILENAME(KUPFLIB)",
    kupfxgetmaxcswidth="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GET_MAX_CSWIDTH(KUPFLIB)",
    kupfxgetobfpwd="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.GTOP(KUPFLIB)",
    kupfxinit="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.INIT(KUPFLIB)",
    kupfxinitdfi="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.INIT(KUPFLIB)",
    kupfxisdmprestfile="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.IS_DUMPFILE_A_RESTFILE(KUPFLIB)",
    kupfxopenctx="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.OPEN_CONTEXT(KUPFLIB)",
    kupfxparsefilename="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.PARSE_FILENAME(KUPFLIB)",
    kupfxparseuri="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.PARSE_URI(KUPFLIB)",
    kupfxreadlob="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.READ_LOB(KUPFLIB)",
    kupfxrelfiles="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.RELEASE_FILES(KUPFLIB)",
    kupfxsetdebug="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.SET_DEBUG(KUPFLIB)",
    kupfxsettransparams="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.SET_TRANS_PARAMS(KUPFLIB)",
    kupfxterm="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.TERM(KUPFLIB)",
    kupfxverkeyinfo="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.VERIFY_KEY_INFO(KUPFLIB)",
    kupfxwritelob="[Kernel Utility dataPump File Manager] SYS.KUPF$FILE_INT.WRITE_LOB(KUPFLIB)",
    kupm="[Kernel Utility dataPump] master control process",
    kupmuar="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.WRITEAUDITRECORD(KUPULIB)",
    kuppchus="[Kernel Utility dataPump] SYS.KUPP$PROC.CHANGE_USER_INT(KUPP_PROC_LIB)",
    kuppcki="[Kernel Utility dataPump] SYS.KUPP$PROC.CHECK_FOR_INTERRUPT(KUPP_PROC_LIB)",
    kuppcrmp="[Kernel Utility dataPump] SYS.KUPP$PROC.CREATE_MASTER_PROCESS_INT(KUPP_PROC_LIB)",
    kuppcrwpr="[Kernel Utility dataPump] SYS.KUPP$PROC.CREATE_WORKER_INT(KUPP_PROC_LIB)",
    kuppcws="[Kernel Utility dataPump] SYS.KUPP$PROC.CHECK_WORKER_STATUS_INT(KUPP_PROC_LIB)",
    kuppddop="[Kernel Utility dataPump] SYS.KUPP$PROC.DEFAULT_DOP(KUPP_PROC_LIB)",
    kuppdewp="[Kernel Utility dataPump] SYS.KUPP$PROC.DELETE_WORKER_PROCESSES_INT(KUPP_PROC_LIB)",
    kuppetact="[Kernel Utility dataPump] SYS.KUPP$PROC.WORKER_EXTTBL_ACTIVE(KUPP_PROC_LIB)",
    kuppetina="[Kernel Utility dataPump] SYS.KUPP$PROC.WORKER_EXTTBL_INACTIVE(KUPP_PROC_LIB)",
    kuppetn="[Kernel Utility dataPump] SYS.KUPP$PROC.WORKER_EXTTBL_FULLNAME(KUPP_PROC_LIB)",
    kuppgcit="[Kernel Utility dataPump] SYS.KUPP$PROC.GET_CIT_FLAG(KUPP_PROC_LIB)",
    kuppgedf="[Kernel Utility dataPump] SYS.KUPP$PROC.GET_EVENT_DEBUG_FLAGS(KUPP_PROC_LIB)",
    kuppgnls="[Kernel Utility dataPump] SYS.KUPP$PROC.GET_NLS_ALTER_SESSION(KUPP_PROC_LIB)",
    kuppgwe="[Kernel Utility dataPump] SYS.KUPP$PROC.GET_WORKER_EXCEPTION(KUPP_PROC_LIB)",
    kuppindn="[Kernel Utility dataPump] SYS.KUPP$PROC.INIT_DONE(KUPP_PROC_LIB)",
    kuppja="[Kernel Utility dataPump] SYS.KUPP$PROC.JOB_ALIVE_INT(KUPP_PROC_LIB)",
    kuppkwp="[Kernel Utility dataPump] SYS.KUPP$PROC.KILL_WORKER(KUPP_PROC_LIB)",
    kuppmdop="[Kernel Utility dataPump] SYS.KUPP$PROC.MAX_DOP(KUPP_PROC_LIB)",
    kuppopten="[Kernel Utility dataPump] SYS.KUPP$PROC.OPTION_ENABLED_CALLOUT(KUPP_PROC_LIB)",
    kuppscit="[Kernel Utility dataPump] SYS.KUPP$PROC.SET_CIT_FLAG(KUPP_PROC_LIB)",
    kuppsdbg="[Kernel Utility dataPump] SYS.KUPP$PROC.SET_DEBUG_INT(KUPP_PROC_LIB)",
    kuppsecld="[Kernel Utility dataPump] SYS.KUPP$PROC.SEC_TT_LOADED(KUPP_PROC_LIB)",
    kuppsecul="[Kernel Utility dataPump] SYS.KUPP$PROC.SEC_TT_UNLOADED(KUPP_PROC_LIB)",
    kuppsip="[Kernel Utility dataPump] SYS.KUPP$PROC.SHUTDOWN_IN_PROGRESS_INT(KUPP_PROC_LIB)",
    kuppsrw="[Kernel Utility dataPump] SYS.KUPP$PROC.SET_REMOTE_WORKER_INT(KUPP_PROC_LIB)",
    kupptwa="[Kernel Utility dataPump] SYS.KUPP$PROC.TOTAL_WORKERS_ALIVE(KUPP_PROC_LIB)",
    kuppwami="[Kernel Utility dataPump] SYS.KUPP$PROC.WHAT_AM_I_INT(KUPP_PROC_LIB)",
    kuppwmid="[Kernel Utility dataPump] SYS.KUPP$PROC.WHATS_MY_ID_INT(KUPP_PROC_LIB)",
    kuppwmnm="[Kernel Utility dataPump] SYS.KUPP$PROC.WHATS_MY_NAME_INT(KUPP_PROC_LIB)",
    kuppwop="[Kernel Utility dataPump] SYS.KUPP$PROC.WHAT_ORACLE_PRODUCT(KUPP_PROC_LIB)",
    kuppwpi="[Kernel Utility dataPump] SYS.KUPP$PROC.WORKER_PROCESS_INIT_INT(KUPP_PROC_LIB)",
    kuppwsi="[Kernel Utility dataPump] SYS.KUPP$PROC.WORKER_SERVICE_INIT_INT(KUPP_PROC_LIB)",
    kupux10glogonallowed="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.TEN_G_LOGON_ALLOWED(KUPULIB)",
    kupuxcreatedir="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.CREATE_DIRECTORY(KUPULIB)",
    kupuxdecode="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DECODE(KUPULIB)",
    kupuxdhchkdigests="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_CHECK_DIGESTS(KUPULIB)",
    kupuxdhdecrypt="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_DECRYPT(KUPULIB)",
    kupuxdhencrypt="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_ENCRYPT(KUPULIB)",
    kupuxdhfreehandle="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_FREE_HANDLE(KUPULIB)",
    kupuxdhgenshrkey="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_GEN_SHARED_KEY(KUPULIB)",
    kupuxdhgetpubkey="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_GET_PUBLIC_KEY(KUPULIB)",
    kupuxdhnewhandle="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DH_NEW_HANDLE(KUPULIB)",
    kupuxdirscan="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.DIRECTORY_SCAN_INT(KUPULIB)",
    kupuxencode="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.ENCODE(KUPULIB)",
    kupuxgpdimpallowed="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.GPD_IMP_ALLOWED(KUPULIB)",
    kupuxissuperset="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.IS_SUPERSET_INT(KUPULIB)",
    kupuxmaxdpjobsget="[Kernel Utility dataPump] SYS.KUPU$UTILITIES_INT.MAX_DATAPUMP_JOBS_PER_PDB(KUPULIB)",
    kupv="[Kernel Utility dataPump] fixed table",
    kupvcrat="[Kernel Utility dataPump] fixed table KUPV$FT_INT.CREATE_ATTACH_ENTRY",
    kupvcreateattachentry="[Kernel Utility dataPump] SYS.KUPV$FT_INT.CREATE_ATTACH_ENTRY(KUPVLIB)",
    kupvcreatejobentry="[Kernel Utility dataPump] SYS.KUPV$FT_INT.CREATE_JOB_ENTRY(KUPVLIB)",
    kupvcrjb="[Kernel Utility dataPump] fixed table KUPV$FT_INT.CREATE_JOB_ENTRY",
    kupvdeleteattachentry="[Kernel Utility dataPump] SYS.KUPV$FT_INT.DELETE_ATTACH_ENTRY(KUPVLIB)",
    kupvdeletejobentry="[Kernel Utility dataPump] SYS.KUPV$FT_INT.DELETE_JOB_ENTRY(KUPVLIB)",
    kupvdlat="[Kernel Utility dataPump] fixed table KUPV$FT_INT.DELETE_ATTACH_ENTRY",
    kupvdljb="[Kernel Utility dataPump] fixed table KUPV$FT_INT.DELETE_JOB_ENTRY",
    kupvgeterrortext="[Kernel Utility dataPump] SYS.KUPV$FT_INT.GET_ERROR_TEXT(KUPVLIB)",
    kupvgtet="[Kernel Utility dataPump] fixed table KUPV$FT_INT.GET_ERROR_TEXT",
    kupviserrorfatal="[Kernel Utility dataPump] SYS.KUPV$FT_INT.FATAL_ERROR(KUPVLIB)",
    kupvisfe="[Kernel Utility dataPump] fixed table KUPV$FT_INT.FATAL_ERROR",
    kupvupdatejobentry="[Kernel Utility dataPump] SYS.KUPV$FT_INT.UPDATE_JOB_ENTRY(KUPVLIB)",
    kupvupjb="[Kernel Utility dataPump] fixed table KUPV$FT_INT.UPDATE_JOB_ENTRY",
    kuxcompare="[Kernel Utility] SYS.UTL_XML.COMPARE(UTL_XML_LIB)",
    kuxgetddlsrcfromxml="[Kernel Utility] SYS.UTL_XML.GETDDLSRCFROMXML(UTL_XML_LIB)",
    kuxgetfdo="[Kernel Utility] SYS.UTL_XML.KUX$_GETFDO(UTL_XML_LIB)",
    kuxgethashcode="[Kernel Utility] SYS.UTL_XML.GETHASHCODE(UTL_XML_LIB)",
    kuxgetnexttypeid="[Kernel Utility] SYS.UTL_XML.GETNEXTTYPEID(UTL_XML_LIB)",
    kuxhaststz="[Kernel Utility] SYS.UTL_XML.HASTSTZ(UTL_XML_LIB)",
    kuxisnameomf="[Kernel Utility] SYS.UTL_XML.ISNAMEOMF(UTL_XML_LIB)",
    kuxlong2clob="[Kernel Utility] SYS.UTL_XML.KUX$_LONG2CLOB(UTL_XML_LIB)",
    kuxmlclean="[Kernel Utility] SYS.UTL_XML.XMLCLEAN(UTL_XML_LIB)",
    kuxmldumpctxs="[Kernel Utility] SYS.UTL_XML.XMLDUMPCTXS(UTL_XML_LIB)",
    kuxmlinit="[Kernel Utility] SYS.UTL_XML.XMLINIT(UTL_XML_LIB)",
    kuxmlparseclob="[Kernel Utility] SYS.UTL_XML.XMLPARSE(UTL_XML_LIB)",
    kuxmlparseuri="[Kernel Utility] SYS.UTL_XML.XMLPARSE(UTL_XML_LIB)",
    kuxmlsetmemdebug="[Kernel Utility] SYS.UTL_XML.XMLSETMEMDEBUG_INT(UTL_XML_LIB)",
    kuxmlsetparseflag="[Kernel Utility] SYS.UTL_XML.XMLSETPARSEFLAG(UTL_XML_LIB)",
    kuxmlterm="[Kernel Utility] SYS.UTL_XML.XMLTERM(UTL_XML_LIB)",
    kuxparseexpr="[Kernel Utility] SYS.UTL_XML.PARSEEXPR(UTL_XML_LIB)",
    kuxparsequery="[Kernel Utility] SYS.UTL_XML.PARSEQUERY(UTL_XML_LIB)",
    kuxsetxmltransformengine="[Kernel Utility] SYS.UTL_XML.SETXMLTRANSFORMENGINE(UTL_XML_LIB)",
    kuxslloadfromfile="[Kernel Utility] SYS.UTL_XML.XSLLOADFROMFILE(UTL_XML_LIB)",
    kuxslresetparams="[Kernel Utility] SYS.UTL_XML.XSLRESETPARAMS(UTL_XML_LIB)",
    kuxslsetparam="[Kernel Utility] SYS.UTL_XML.XSLSETPARAM(UTL_XML_LIB)",
    kuxslsetstylesheet="[Kernel Utility] SYS.UTL_XML.XSLSETSTYLESHEET(UTL_XML_LIB)",
    kuxsltransformctoc="[Kernel Utility] SYS.UTL_XML.XSLTRANSFORM(UTL_XML_LIB)",
    kuxsltransformctox="[Kernel Utility] SYS.UTL_XML.XSLTRANSFORMCTOX(UTL_XML_LIB)",
    kuxsltransformxtoc="[Kernel Utility] SYS.UTL_XML.XSLTRANSFORMXTOC(UTL_XML_LIB)",
    kuxsltransformxtox="[Kernel Utility] SYS.UTL_XML.XSLTRANSFORMXTOX(UTL_XML_LIB)",
    kuxsscfind="[Kernel Utility] SYS.UTL_XML.SSCFIND(UTL_XML_LIB)",
    kuxsscgetctx="[Kernel Utility] SYS.UTL_XML.SSCGETCTX(UTL_XML_LIB)",
    kuxsscminimizecache="[Kernel Utility] SYS.UTL_XML.SSCMINIMIZECACHE(UTL_XML_LIB)",
    kuxsscparse="[Kernel Utility] SYS.UTL_XML.SSCPARSE(UTL_XML_LIB)",
    kuxsscpurge="[Kernel Utility] SYS.UTL_XML.SSCPURGE(UTL_XML_LIB)",
    kuxsscsetdebug="[Kernel Utility] SYS.UTL_XML.SSCSETDEBUG_INT(UTL_XML_LIB)",
    kuxtypehashcodeeq="[Kernel Utility] SYS.UTL_XML.TYPEHASHCODEEQ(UTL_XML_LIB)",
    kuxwindows32="[Kernel Utility] SYS.UTL_XML.WINDOWS32(UTL_XML_LIB)",
    kuz="[Kernel Utility] security (orapw utility)",
    kv="kernel performance",
    kvi="kernel performance information tables",
    kwq="[Kernel Advanced Queuing] ",
    kwqa="[Kernel AQ Administration] ",
    kwqa3gladdsubscriber="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ADDSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa3glagentexists11g="[Kernel AQ Administration] SYS.DBMS_PRVTAQIS.KWQA_3GL_INT_AGENTEXISTS11G(DBMS_AQADM_LIB)",
    kwqa3glaltercacheobject="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa3glalterqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERQUEUE(DBMS_AQADM_LIB)",
    kwqa3glaltersubscriber="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ALTERSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa3glaqpkg="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_AQPKG(DBMS_AQADM_LIB)",
    kwqa3glbegintrans="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_BEGINTRANS(DBMS_AQADM_LIB)",
    kwqa3glchangeqreplmod="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CHANGE_REP_MOD(DBMS_AQADM_LIB)",
    kwqa3glcheckquepriv="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKQUEPRIV(DBMS_AQADM_LIB)",
    kwqa3glchecksyspriv="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIV(DBMS_AQADM_LIB)",
    kwqa3glchecksysprivcusr="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIVCUSR(DBMS_AQADM_LIB)",
    kwqa3glcreateadtplodinfo="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEADTPLODINFO(DBMS_AQADM_LIB)",
    kwqa3glcreatecacheobject="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATECACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa3glcreatequeue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE(DBMS_AQADM_LIB)",
    kwqa3glcreatequeue12g="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE_12G(DBMS_AQADM_LIB)",
    kwqa3gldestroycacheobject="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DESTROYCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa3gldmpestack="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DMPESTACK(DBMS_AQADM_LIB)",
    kwqa3gldropqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPQUEUE(DBMS_AQADM_LIB)",
    kwqa3gldropregistrations="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPREGISTRATIONS(DBMS_AQADM_LIB)",
    kwqa3glendtrans="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ENDTRANS(DBMS_AQADM_LIB)",
    kwqa3gleventlevel="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EVENTLEVEL(DBMS_AQADM_LIB)",
    kwqa3glexecutestmt="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa3glexecutestmtbnddfn="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.KWQA_3GL_EXECUTESTMTBNDDFN(DBMS_AQADM_LIB)",
    kwqa3glexecutestmtcusr="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_EXECUTESTMTCUSR(DBMS_AQADM_LIB)",
    kwqa3glexecutestmtdv="[Kernel AQ Administration] SYS.DBMS_PRVTAQIM.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa3glfinddate="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_FIND_DATE(DBMS_AQADM_LIB)",
    kwqa3glgetparamsinqkgl="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa3glgetpassword="[Kernel AQ Administration] SYS.DBMS_PRVTAQIP.KWQA_3GL_GETPASSWORD(DBMS_AQADM_LIB)",
    kwqa3glgrant="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GRANT(DBMS_AQADM_LIB)",
    kwqa3glinvalidatequeue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_INVALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqa3glisstreamscaptureoff="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa3glisttsimport="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISTTSIMPORT(DBMS_AQADM_LIB)",
    kwqa3gllockqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUE(DBMS_AQADM_LIB)",
    kwqa3gllockqueuetable="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa3gllockqueuetable2="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa3glmarkinternaltables="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_MARK_INTERNAL_TABLES(DBMS_AQADM_LIB)",
    kwqa3glnfynoi="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NFYNOI(DBMS_AQADM_LIB)",
    kwqa3glntfntrcchk="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NTFNTRCCHK(DBMS_AQADM_LIB)",
    kwqa3glparseaqname="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_PARSEAQNAME(DBMS_AQADM_LIB)",
    kwqa3glprintremsublist="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PRINTREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa3glpurgecbkobj="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_CBK_OBJ(DBMS_AQADM_LIB)",
    kwqa3glpurgequeuetable="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_QUEUE_TABLE(DBMS_AQADM_LIB)",
    kwqa3glpurgeremsublist="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGEREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa3glpurgeschemasubtab="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGESCHEMASUBTAB(DBMS_AQADM_LIB)",
    kwqa3glqtcompat="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_QT_COMPAT(DBMS_AQADM_LIB)",
    kwqa3glremovesubscriber="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REMOVESUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa3glrevoke="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REVOKE(DBMS_AQADM_LIB)",
    kwqa3glscheduletmservice="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SCHEDULETMSERVICE(DBMS_AQADM_LIB)",
    kwqa3glsetcleartableflag="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_CLR_TABLE_FLAG(DBMS_AQADM_LIB)",
    kwqa3glsetmsgwait="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETMSGWAIT(DBMS_AQADM_LIB)",
    kwqa3glsetparamsinqkgl="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa3glsetregistrationname="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETREGISTRATIONNAME(DBMS_AQADM_LIB)",
    kwqa3glsetstreamscaptureoff="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa3glsettablestatslock="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_TABLE_STATS_LOCK(DBMS_AQADM_LIB)",
    kwqa3glsetviewflag="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_VIEW_FLAG(DBMS_AQADM_LIB)",
    kwqa3glspilledops="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.KWQA_3GL_SPILLED_OPS(DBMS_AQADM_LIB)",
    kwqa3glstartqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STARTQUEUE(DBMS_AQADM_LIB)",
    kwqa3glstopqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STOPQUEUE(DBMS_AQADM_LIB)",
    kwqa3glunsetparamsinqkgl="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UNSET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa3glupdkgqm="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDKGQM(DBMS_AQADM_LIB)",
    kwqa3glupdperstats="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDPERSTATS(DBMS_AQADM_LIB)",
    kwqa3glvalidatequeue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_VALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_addsubscriber="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ADDSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa_3gl_agentexists11g="[Kernel AQ Administration] SYS.DBMS_PRVTAQIS.KWQA_3GL_INT_AGENTEXISTS11G(DBMS_AQADM_LIB)",
    kwqa_3gl_altercacheobject="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa_3gl_alterqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ALTERQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_altersubscriber="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_ALTERSUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa_3gl_aqpkg="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_AQPKG(DBMS_AQADM_LIB)",
    kwqa_3gl_begintrans="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_BEGINTRANS(DBMS_AQADM_LIB)",
    kwqa_3gl_change_q_repl_mod="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CHANGE_REP_MOD(DBMS_AQADM_LIB)",
    kwqa_3gl_checkquepriv="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKQUEPRIV(DBMS_AQADM_LIB)",
    kwqa_3gl_checksyspriv="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIV(DBMS_AQADM_LIB)",
    kwqa_3gl_checksysprivcusr="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_CHECKSYSPRIVCUSR(DBMS_AQADM_LIB)",
    kwqa_3gl_createadtplodinfo="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEADTPLODINFO(DBMS_AQADM_LIB)",
    kwqa_3gl_createcacheobject="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATECACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa_3gl_createqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_createqueue_12g="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CREATEQUEUE_12G(DBMS_AQADM_LIB)",
    kwqa_3gl_destroycacheobject="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DESTROYCACHEOBJECT(DBMS_AQADM_LIB)",
    kwqa_3gl_dmpestack="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DMPESTACK(DBMS_AQADM_LIB)",
    kwqa_3gl_dropqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_dropregistrations="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_DROPREGISTRATIONS(DBMS_AQADM_LIB)",
    kwqa_3gl_endtrans="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ENDTRANS(DBMS_AQADM_LIB)",
    kwqa_3gl_eventlevel="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EVENTLEVEL(DBMS_AQADM_LIB)",
    kwqa_3gl_executestmt="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa_3gl_executestmt_dv="[Kernel AQ Administration] SYS.DBMS_PRVTAQIM.KWQA_3GL_EXECUTESTMT(DBMS_AQADM_LIB)",
    kwqa_3gl_executestmtbnddfn="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.KWQA_3GL_EXECUTESTMTBNDDFN(DBMS_AQADM_LIB)",
    kwqa_3gl_executestmtcusr="[Kernel AQ Administration] SYS.DBMS_AQADM_INV.KWQA_3GL_EXECUTESTMTCUSR(DBMS_AQADM_LIB)",
    kwqa_3gl_find_date="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_FIND_DATE(DBMS_AQADM_LIB)",
    kwqa_3gl_get_params_in_qkgl="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa_3gl_getpassword="[Kernel AQ Administration] SYS.DBMS_PRVTAQIP.KWQA_3GL_GETPASSWORD(DBMS_AQADM_LIB)",
    kwqa_3gl_grant="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_GRANT(DBMS_AQADM_LIB)",
    kwqa_3gl_invalidatequeue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_INVALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_isstreamscaptureoff="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa_3gl_isttsimport="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ISTTSIMPORT(DBMS_AQADM_LIB)",
    kwqa_3gl_lockqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_lockqueuetable="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa_3gl_lockqueuetable2="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_LOCKQUEUETABLE(DBMS_AQADM_LIB)",
    kwqa_3gl_mark_internal_tables="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_MARK_INTERNAL_TABLES(DBMS_AQADM_LIB)",
    kwqa_3gl_nfynoi="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NFYNOI(DBMS_AQADM_LIB)",
    kwqa_3gl_ntfntrcchk="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_NTFNTRCCHK(DBMS_AQADM_LIB)",
    kwqa_3gl_parseaqname="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_INT_PARSEAQNAME(DBMS_AQADM_LIB)",
    kwqa_3gl_printremsublist="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PRINTREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa_3gl_purge_cbk_obj="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_CBK_OBJ(DBMS_AQADM_LIB)",
    kwqa_3gl_purge_queue_table="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGE_QUEUE_TABLE(DBMS_AQADM_LIB)",
    kwqa_3gl_purgeremsublist="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGEREMSUBLIST(DBMS_AQADM_LIB)",
    kwqa_3gl_purgeschemasubtab="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_PURGESCHEMASUBTAB(DBMS_AQADM_LIB)",
    kwqa_3gl_qt_compat="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_QT_COMPAT(DBMS_AQADM_LIB)",
    kwqa_3gl_removesubscriber="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REMOVESUBSCRIBER(DBMS_AQADM_LIB)",
    kwqa_3gl_revoke="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_REVOKE(DBMS_AQADM_LIB)",
    kwqa_3gl_scheduletmservice="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SCHEDULETMSERVICE(DBMS_AQADM_LIB)",
    kwqa_3gl_set_clear_table_flag="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_CLR_TABLE_FLAG(DBMS_AQADM_LIB)",
    kwqa_3gl_set_params_in_qkgl="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa_3gl_set_table_stats_lock="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_TABLE_STATS_LOCK(DBMS_AQADM_LIB)",
    kwqa_3gl_set_view_flag="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SET_VIEW_FLAG(DBMS_AQADM_LIB)",
    kwqa_3gl_setmsgwait="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETMSGWAIT(DBMS_AQADM_LIB)",
    kwqa_3gl_setregistrationname="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETREGISTRATIONNAME(DBMS_AQADM_LIB)",
    kwqa_3gl_setstreamscaptureoff="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_SETSTREAMSCAPTUREOFF(DBMS_AQADM_LIB)",
    kwqa_3gl_spilled_ops="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.KWQA_3GL_SPILLED_OPS(DBMS_AQADM_LIB)",
    kwqa_3gl_startqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STARTQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_stopqueue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STOPQUEUE(DBMS_AQADM_LIB)",
    kwqa_3gl_unset_params_in_qkgl="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UNSET_PARAMS_IN_QKGL(DBMS_AQADM_LIB)",
    kwqa_3gl_updkgqm="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDKGQM(DBMS_AQADM_LIB)",
    kwqa_3gl_updperstats="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_UPDPERSTATS(DBMS_AQADM_LIB)",
    kwqa_3gl_validatequeue="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_VALIDATEQUEUE(DBMS_AQADM_LIB)",
    kwqaacset="[Kernel AQ Administration] SYS.DBMS_AQ_SYS_IMP_INTERNAL.KWQAACSET(C)/SYS.DBMS_AQADM_SYS.KWQAACSET(C)/SYS.DBMS_PRVTAQIS.KWQAACSET(C)",
    kwqaanalyzemc="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_ANALYZE_MSG_CACHE(DBMS_AQADM_LIB)",
    kwqabqprg="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.PURGE_BQ(DBMS_AQADM_LIB)",
    kwqacalculatemc="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_CALCULATE_MSG_CACHE(DBMS_AQADM_LIB)",
    kwqaddba="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.DISABLE_DB_ACCESS(DBMS_AQADM_LIB)",
    kwqadrpq="[Kernel AQ Administration] kernel advanced queuing administration drop queue",
    kwqaedba="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.ENABLE_DB_ACCESS(DBMS_AQADM_LIB)",
    kwqagetmaxstreamspool="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.GET_MAX_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqagetminstreamspool="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.GET_MIN_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqagetpassword="[Kernel AQ Administration] kernel advanced queuing administration DBMS_PRVTAQIP.KWQA_3GL_GETPASSWORD",
    kwqagetwatermark="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.GET_WATERMARK(DBMS_AQADM_LIB)",
    kwqaislogstby="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.IS_LOGICAL_STBY(DBMS_AQADM_LIB)",
    kwqaislsby="[Kernel AQ Administration] kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_LOGICAL_STBY",
    kwqaisoggdest="[Kernel AQ Administration] kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_OGG_DEST",
    kwqaisoggdestination="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.IS_OGG_DEST(DBMS_AQADM_LIB)",
    kwqaisoggsource="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.IS_OGG_SRC(DBMS_AQADM_LIB)",
    kwqaisoggsrc="[Kernel AQ Administration] kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_OGG_SRC",
    kwqaispri="[Kernel AQ Administration] kernel advanced queuing administration DBMS_AQADM_SYSCALLS.IS_PRIMARY",
    kwqaisprimary="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.IS_PRIMARY(DBMS_AQADM_LIB)",
    kwqaowner_pls="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.GET_OWNER_INSTANCE(DBMS_AQADM_LIB)",
    kwqaownerpls="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.GET_OWNER_INSTANCE(DBMS_AQADM_LIB)",
    kwqaqpdlob="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.KWQAQPDHASLOB(DBMS_AQADM_LIB)",
    kwqasetmaxstreamspool="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.SET_MAX_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqasetminstreamspool="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.SET_MIN_STREAMS_POOL(DBMS_AQADM_LIB)",
    kwqasetwatermark="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.SET_WATERMARK(DBMS_AQADM_LIB)",
    kwqastopmsgforwarding="[Kernel AQ Administration] SYS.DBMS_AQADM_SYSCALLS.KWQA_3GL_STOP_MSG_FORWARDING(DBMS_AQADM_LIB)",
    kwqauptr="[Kernel AQ Administration] SYS.DBMS_AQADM_SYS.KWQAUPTR(C)",
    kwqd="[Kernel Advanced Queuing] dequeue",
    kwqi="[Kernel AQ Interface] ",
    kwqiaddspilled="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.ADD_SPILLED_ENTRY(DBMS_AQ_LIB)",
    kwqiadtdeq="[Kernel AQ Interface Dequeue] DBMS_AQ.DEQUEUE",
    kwqiadtdequeue="[Kernel AQ Interface] SYS.DBMS_AQ.DEQUEUE(DBMS_AQ_LIB)",
    kwqiadtenq="[Kernel AQ Interface Dequeue] DBMS_AQ.ENQUEUE",
    kwqiadtenqueue="[Kernel AQ Interface] SYS.DBMS_AQ.ENQUEUE(DBMS_AQ_LIB)",
    kwqiautoplsreg="[Kernel AQ Interface] SYS.DBMS_AQ.CREATE_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqiautoplsstart="[Kernel AQ Interface] SYS.DBMS_AQ.ENABLE_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqiautoplsstop="[Kernel AQ Interface] SYS.DBMS_AQ.DISABLE_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqiautoplsunreg="[Kernel AQ Interface] SYS.DBMS_AQ.DROP_DEQUEUE_JOB(DBMS_AQ_LIB)",
    kwqic="[Kernel AQ Interface Common] ",
    kwqicaddnondursubshrdque="[Kernel AQ Interface Common] SYS.DBMS_AQJMS.AQ$_ADD_NONDURABLE_SUB_SQ(DBMS_AQ_LIB)",
    kwqicdelrow="[Kernel AQ Interface Common] kernel advanced queuing internal/plsql trusted callouts pre-12c notitication delete row from queue table",
    kwqicdrpnondursubshrdque="[Kernel AQ Interface Common] SYS.DBMS_AQJMS.AQ$_DROPNONDURABLE_SUB_SQ(DBMS_AQ_LIB)",
    kwqicgpc="[Kernel AQ Interface Common] kernel advanced queuing internal/plsql trusted callouts pre-12c notitication common get parsed cursor",
    kwqicgtoid="[Kernel AQ Interface Common] kernel advanced queuing internal/plsql trusted callouts pre-12c notitication internal common get TOID",
    kwqicheckoption="[Kernel AQ Interface Common] SYS.DBMS_AQADM_SYS.CHECKOPTION(DBMS_AQ_LIB)",
    kwqichkopt="[Kernel AQ Interface Common] kernel advanced queuing internal/plsql trusted callouts pre-12c notitication DBMS_AQADM_SYS.CHECKOPTION",
    kwqiclntaddnondursub="[Kernel AQ Interface Common] SYS.DBMS_AQJMS.AQ$_ADD_NONDURABLE_SUB_INT(DBMS_AQ_LIB)",
    kwqicrepbgcalout="[Kernel AQ Interface Common] SYS.DBMS_AQ.AQ$_BACKGROUND_OPER_INT(DBMS_AQ_LIB)",
    kwqicrepbgoper="[Kernel AQ Interface Common] kernel advanced queuing internal/plsql trusted callouts pre-12c notitication DBMS_AQ.AQ$_BACKGROUND_OPER_INT",
    kwqid="[Kernel AQ Interface Dequeue] ",
    kwqidbinfo="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.DBLINK_INFO(DBMS_AQ_LIB)",
    kwqideqarr="[Kernel AQ Interface Dequeue] DBMS_AQ.DEQUEUE_ARRAY",
    kwqideqarr0="[Kernel AQ Interface Dequeue] DBMS_AQ.DEQUEUE_ARRAY 0",
    kwqideqarray="[Kernel AQ Interface] SYS.DBMS_AQ.DEQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqideqarray0="[Kernel AQ Interface] SYS.DBMS_AQ.DEQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqidjqp="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.DECR_SRVNTFN_PROC(DBMS_AQ_LIB)",
    kwqidx81deq="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_DEQUEUE_IN",
    kwqidx81dequeue="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqidxdeq101="[Kernel AQ Interface Dequeue] DBMS_AQ.AQ$_DEQUEUE version 10.1",
    kwqidxdeq102="[Kernel AQ Interface Dequeue] DBMS_AQ.AQ$_DEQUEUE version 10.2",
    kwqidxdeq92="[Kernel AQ Interface Dequeue] DBMS_AQ.AQ$_DEQUEUE version 9.2",
    kwqidxdeqin="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_DEQUEUE_IN",
    kwqidxdeqin102="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_DEQUEUE_IN version 10.2",
    kwqidxdequeue101="[Kernel AQ Interface] SYS.DBMS_AQ.AQ$_DEQUEUE(DBMS_AQ_LIB)",
    kwqidxdequeue102="[Kernel AQ Interface] SYS.DBMS_AQ.AQ$_DEQUEUE(DBMS_AQ_LIB)",
    kwqidxdequeue92="[Kernel AQ Interface] SYS.DBMS_AQ.AQ$_DEQUEUE(DBMS_AQ_LIB)",
    kwqidxdequeuein="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqidxdequeuein102="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqie="[Kernel AQ Interface Enqueue] ",
    kwqienqarr="[Kernel AQ Interface Enqueue] DBMS_AQ.ENQUEUE_ARRAY",
    kwqienqarr0="[Kernel AQ Interface Enqueue] DBMS_AQ.ENQUEUE_ARRAY (in library DBMS_AQ_LIB)",
    kwqienqarray="[Kernel AQ Interface Enqueue] SYS.DBMS_AQ.ENQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqienqarray0="[Kernel AQ Interface Enqueue] SYS.DBMS_AQ.ENQUEUE_ARRAY(DBMS_AQ_LIB)",
    kwqiexenqueue="[Kernel AQ Interface Enqueue] SYS.DBMS_AQ.AQ$_ENQUEUE(DBMS_AQ_LIB)",
    kwqifetchnonpersdata="[Kernel AQ Interface] SYS.DBMS_AQJMS.FETCHNONPERSDATA_12C_CALLOUT(DBMS_AQ_LIB)",
    kwqigetcorrsender="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.GET_CORR_MSG(DBMS_AQ_LIB)",
    kwqigetdeqsort="[Kernel AQ Interface] SYS.DBMS_AQIN.GET_DEQ_SORT_IN(DBMS_AQ_LIB)",
    kwqigeterr="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.GETERR(DBMS_AQ_LIB)",
    kwqigetpay="[Kernel AQ Interface] SYS.DBMS_AQ_BQVIEW.GET_ADT_PAYLOAD(DBMS_AQ_LIB)",
    kwqigetpayop="[Kernel AQ Interface] SYS.DBMS_AQ_BQVIEW.GET_OPAQUE_PAYLOAD(DBMS_AQ_LIB)",
    kwqigetrawpay="[Kernel AQ Interface] SYS.DBMS_AQ_BQVIEW.GET_RAW_PAYLOAD(DBMS_AQ_LIB)",
    kwqigetreplay="[Kernel AQ Interface] SYS.DBMS_AQADM.GET_REPLAY_INFO(DBMS_AQ_LIB)",
    kwqigetretry="[Kernel AQ Interface] SYS.DBMS_AQIN.GET_MULTI_RETRY_IN(DBMS_AQ_LIB)",
    kwqigpv="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.GET_PARAMETER_VALUE(DBMS_AQ_LIB)",
    kwqigretry="[Kernel AQ Interface Dequeue] DBMS_AQIN.GET_MULTI_RETRY_IN",
    kwqigtusrforagnt="[Kernel AQ Interface] SYS.DBMS_AQJMS_INTERNAL.GET_DB_USERNAME_FOR_AGENT(DBMS_AQ_LIB)",
    kwqiisalive="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.ISALIVE(DBMS_AQ_LIB)",
    kwqijaddsub="[Kernel AQ Interface Dequeue] DBMS_AQJMS.AQ$_ADD_SUBSCRIBER_INT",
    kwqijaltsub="[Kernel AQ Interface Dequeue] DMBS_AQJMS.AQ$_ALTER_SUBSCRIBER",
    kwqijexenq="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_ENQUEUE_RAW",
    kwqijexenqueue="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_ENQUEUE_RAW(DBMS_AQ_LIB)/SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ(DBMS_AQ_LIB)",
    kwqijlisten="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_LISTEN(DBMS_AQ_LIB)",
    kwqijmsaddsub="[Kernel AQ Interface] SYS.DBMS_AQJMS.AQ$_ADD_SUBSCRIBER_INT(DBMS_AQ_LIB)",
    kwqijmsaltsub="[Kernel AQ Interface] SYS.DBMS_AQJMS.AQ$_ALTER_SUBSCRIBER_INT(DBMS_AQ_LIB)",
    kwqijmsregops="[Kernel AQ Interface] SYS.DBMS_AQJMS.AQ$_REGOPS(DBMS_AQ_LIB)",
    kwqijmsremsub="[Kernel AQ Interface] SYS.DBMS_AQJMS.AQ$_REMOVE_SUBSCRIBER_INT(DBMS_AQ_LIB)",
    kwqijopdxdeq="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_DEQUEUE_IN",
    kwqijopdxdeq102="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_DEQUEUE_IN version 10.2",
    kwqijopenq="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_ENQUEUE_OBJ",
    kwqijopqdxdequeue="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqijopqdxdequeue102="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_DEQUEUE_IN(DBMS_AQ_LIB)",
    kwqijopqenqueue="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ(DBMS_AQ_LIB)",
    kwqijops="[Kernel AQ Interface Dequeue] DBMS_AQJMS.AQ$_REGOPS",
    kwqijqnx="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.CHECK_FOR_EXIT(DBMS_AQ_LIB)",
    kwqijremsub="[Kernel AQ Interface Dequeue] DBMS_AQJMS.AQ$_REMOVE_SUBSCRIBER_INT",
    kwqilisten="[Kernel AQ Interface] SYS.DBMS_AQ.LISTEN(DBMS_AQ_LIB)",
    kwqinonaq="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.SET_PROC_NONAQ(DBMS_AQ_LIB)",
    kwqinrexenq="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL",
    kwqinrexenqueue="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL(DBMS_AQ_LIB)",
    kwqinrjopenq="[Kernel AQ Interface Dequeue] DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL",
    kwqinrjopqenqueue="[Kernel AQ Interface] SYS.DBMS_AQIN.AQ$_ENQUEUE_OBJ_NO_RECPL(DBMS_AQ_LIB)",
    kwqinrprcvraw="[Kernel AQ Interface] SYS.DBMS_AQADM.NONREPUDIATE_RECEIVER(DBMS_AQ_LIB)",
    kwqinrpreciever="[Kernel AQ Interface] SYS.DBMS_AQADM.NONREPUDIATE_RECEIVER(DBMS_AQ_LIB)",
    kwqinrpsenderadt="[Kernel AQ Interface] SYS.DBMS_AQADM.NONREPUDIATE_SENDER(DBMS_AQ_LIB)",
    kwqinrpsenderraw="[Kernel AQ Interface] SYS.DBMS_AQADM.NONREPUDIATE_SENDER(DBMS_AQ_LIB)",
    kwqintfncbk="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.RUN_CALLBACK(DBMS_AQ_LIB)",
    kwqiopqdeq="[Kernel AQ Interface Dequeue] DBMS_AQ.DEQUEUE",
    kwqiopqdequeue="[Kernel AQ Interface] SYS.DBMS_AQ.DEQUEUE(DBMS_AQ_LIB)",
    kwqiopqenq="[Kernel AQ Interface Dequeue] DBMS_AQ.ENQUEUE",
    kwqiopqenqueue="[Kernel AQ Interface] SYS.DBMS_AQ.ENQUEUE(DBMS_AQ_LIB)",
    kwqiplsdisablereg="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.DISABLE_REGISTRATION(DBMS_AQ_LIB)",
    kwqiplsenablereg="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.ENABLE_REGISTRATION(DBMS_AQ_LIB)",
    kwqiplspost="[Kernel AQ Interface] SYS.DBMS_AQ.POST(DBMS_AQ_LIB)",
    kwqiplsreg="[Kernel AQ Interface Dequeue] DBMS_AQ.REGISTER",
    kwqiplsregister="[Kernel AQ Interface] SYS.DBMS_AQ.REGISTER(DBMS_AQ_LIB)",
    kwqiplsunreg="[Kernel AQ Interface Dequeue] DBMS_AQ.UNREGISTER",
    kwqiplsunregister="[Kernel AQ Interface] SYS.DBMS_AQ.UNREGISTER(DBMS_AQ_LIB)",
    kwqiprocname="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.GET_PROCNAME(DBMS_AQ_LIB)",
    kwqipropaq="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.PROP_INTERNAL(DBMS_AQ_LIB)",
    kwqipropaq102="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.PROP_INTERNAL_102(DBMS_AQ_LIB)",
    kwqiprscmt="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.PRS_CMT(DBMS_AQ_LIB)",
    kwqiprsqtyp="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.PRS_QTYP(DBMS_AQ_LIB)",
    kwqiprsrbk="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.PRS_RBK(DBMS_AQ_LIB)",
    kwqiprsseq="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.PRS_SEQ(DBMS_AQ_LIB)",
    kwqiquest="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.CREATE_SPILLED_TABLES_IOTS(DBMS_AQ_LIB)",
    kwqiresetreplay="[Kernel AQ Interface] SYS.DBMS_AQADM.RESET_REPLAY_INFO(DBMS_AQ_LIB)",
    kwqisetcorrsender="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.RESET_CORR_MSG(DBMS_AQ_LIB)",
    kwqisetdeqsort="[Kernel AQ Interface] SYS.DBMS_AQIN.SET_DEQ_SORT_IN(DBMS_AQ_LIB)",
    kwqisetretry="[Kernel AQ Interface] SYS.DBMS_AQIN.SET_MULTI_RETRY_IN(DBMS_AQ_LIB)",
    kwqisretry="[Kernel AQ Interface Dequeue] DBMS_AQIN.SET_MULTI_RETRY_IN",
    kwqit="[Kernel AQ Interface Time Management] ",
    kwqitdsbtn="[Kernel AQ Interface Time Management] SYS.DBMS_AQADM_SYS.GET_TDSBTN(DBMS_AQ_LIB)",
    kwqithrowerror="[Kernel AQ Interface] SYS.DBMS_AQADM_SYS.THROW_ERROR(DBMS_AQ_LIB)",
    kwqitmmit="[Kernel AQ Interface Time Management] calback function which processes tables",
    kwqitmmsgs="[Kernel AQ Interface Time Management] messages",
    kwqitnmptme="[Kernel AQ Interface Time Management] newstyle multiconsumer queues",
    kwqitptm="[Kernel AQ Interface Time Management] perform time management",
    kwqj="[Kernel AQ Job Queue Scheduler] ",
    kwqladdalias="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.ADD_ALIAS_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdconnection1="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.ADD_CONNECTION_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdconnection2="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.ADD_CONNECTION_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdqueue="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.ADD_QUEUE_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdqueuetab="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.ADD_QUEUE_TAB_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqladdsubscriber="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.ADD_SUBSCRIBER_TO_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlbindagent="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.I_BIND_AGENT(DBMS_AQ_LDAP_LIB)",
    kwqldelalias="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.DEL_ALIAS_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelconnection="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.DEL_CONNECTION_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelqueue="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.DEL_QUEUE_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelqueuetab="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.DROP_QUEUE_TAB_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqldelsubscriber="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.DEL_SUBSCRIBER_FROM_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlmodqueue="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.MOD_QUEUE_IN_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlmodqueuetab="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.MOD_QUEUE_TAB_IN_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlmodsubscriber="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.MOD_SUBSCRIBER_IN_LDAP(DBMS_AQ_LDAP_LIB)",
    kwqlunbindagent="[Kernel Adavanced Queuing] SYS.DBMS_AQADM_SYS.I_UNBIND_AGENT(DBMS_AQ_LDAP_LIB)",
    kwqm="[Kernel AQ Multiconsume] queue IOT support",
    kwqmn="[Kernel AQ Multiconsume] queue IOT support time manager",
    kwqmnslv="[Kernel AQ Multiconsume] queue IOT support time manager slave callback called by ksvrdp",
    kwqmnstslv="[Kernel AQ Multiconsume] queue IOT support time manager start AQ slave process",
    kwqmstmgr="[Kernel AQ Multiconsume] queue IOT support scan time manager entries",
    kwqn="[Kernel AQ Notifier] ",
    kwqngetfrommail="[Kernel AQ Notifier] SYS.DBMS_AQELM.GET_SENDFROM(DBMS_AQELM_LIB)",
    kwqngethostmail="[Kernel AQ Notifier] SYS.DBMS_AQELM.GET_MAILHOST(DBMS_AQELM_LIB)",
    kwqngetportmail="[Kernel AQ Notifier] SYS.DBMS_AQELM.GET_MAILPORT(DBMS_AQELM_LIB)",
    kwqngetproxy="[Kernel AQ Notifier] SYS.DBMS_AQELM.GET_PROXY(DBMS_AQELM_LIB)",
    kwqngettxtimeout="[Kernel AQ Notifier] SYS.DBMS_AQELM.GET_TXTIMEOUT(DBMS_AQELM_LIB)",
    kwqnsetfrommail="[Kernel AQ Notifier] SYS.DBMS_AQELM.SET_SENDFROM(DBMS_AQELM_LIB)",
    kwqnsethostmail="[Kernel AQ Notifier] SYS.DBMS_AQELM.SET_MAILHOST(DBMS_AQELM_LIB)",
    kwqnsetportmail="[Kernel AQ Notifier] SYS.DBMS_AQELM.SET_MAILPORT(DBMS_AQELM_LIB)",
    kwqnsetproxy="[Kernel AQ Notifier] SYS.DBMS_AQELM.SET_PROXY(DBMS_AQELM_LIB)",
    kwqo="[Kernel Adavanced Queuing] insttype checking options",
    kwqp="[Kernel Adavanced Queuing] queueing propagation",
    kwqpmodspse="[Kernel Adavanced Queuing] SYS.DBMS_PRVTAQIP.KWQP_3GL_INT_MODPSENTRY(DBMS_AQ_LIB)",
    kwqs="[Kernel Adavanced Queuing] statistics handling",
    kwqu="[Kernel Adavanced Queuing] lob data",
    kwqvdsvc="[Kernel Adavanced Queuing] drop service",
    kwqx="[Kernel Adavanced Queuing] transformations",
    kwqxcreate="[Kernel Adavanced Queuing] transformations DBMS_TRANSFORMATION_INTERNAL.I_CREATE_TRANSFORMATION",
    kwqxcreatetrans="[Kernel Adavanced Queuing] SYS.DBMS_TRANSFORM_INTERNAL.I_CREATE_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwqxdelete="[Kernel Adavanced Queuing] transformations DBMS_TRANSFORMATION_INTERNAL.I_DROP_TRANSFORMATION",
    kwqxdroptrans="[Kernel Adavanced Queuing] SYS.DBMS_TRANSFORM_INTERNAL.I_DROP_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwqxevaltrans="[Kernel Adavanced Queuing] SYS.DBMS_TRANSFORM.COMPUTE_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwqxmodify="[Kernel Adavanced Queuing] transformations DBMS_TRANSFORMATION_INTERNAL.I_MODIFY_TRANSFORMATION",
    kwqxmodifytrans="[Kernel Adavanced Queuing] SYS.DBMS_TRANSFORM_INTERNAL.I_MODIFY_TRANSFORMATION(DBMS_TRANS_LIB)",
    kwrc="kernel rules engine evaluation(?)",
    kwre="kernel rules engine evaluation(?)",
    kwrsrcb="kernel ??",
    kwrxaddrule="SYS.DBMS_RULEADM_INTERNAL.ADD_RULE(DBMS_RULES_LIB)",
    kwrxalterevalctx="SYS.DBMS_RULEADM_INTERNAL.ALTER_EVALUATION_CONTEXT(DBMS_RULES_LIB)/SYS.DBMS_RULEADM_INTERNAL.IN(DBMS_RULES_LIB)",
    kwrxalterrule="SYS.DBMS_RULEADM_INTERNAL.I_ALTER_RULE(DBMS_RULES_LIB)",
    kwrxchkval="SYS.RE$NV_LIST.add_pair(DBMS_RULES_LIB)/SYS.RE$NV_LIST.get_value(DBMS_RULES_LIB)",
    kwrxcloseiter="SYS.DBMS_RULE.CLOSE_ITERATOR(DBMS_RULES_LIB)",
    kwrxcreateevalctx="SYS.DBMS_RULEADM_INTERNAL.I_CREATE_EVAL_CTX(DBMS_RULES_LIB)/SYS.DBMS_RULEADM_INTERNAL.IN(DBMS_RULES_LIB)",
    kwrxcreaterule="SYS.DBMS_RULEADM_INTERNAL.I_CREATE_RULE(DBMS_RULES_LIB)",
    kwrxcreateruleset="SYS.DBMS_RULEADM_INTERNAL.I_CREATE_RULE_SET(DBMS_RULES_LIB)",
    kwrxdropevalctx="SYS.DBMS_RULEADM_INTERNAL.DROP_EVALUATION_CONTEXT(DBMS_RULES_LIB)",
    kwrxdroprule="SYS.DBMS_RULEADM_INTERNAL.DROP_RULE(DBMS_RULES_LIB)",
    kwrxdropruleset="SYS.DBMS_RULEADM_INTERNAL.DROP_RULE_SET(DBMS_RULES_LIB)",
    kwrxevaluate="SYS.DBMS_RULE_INTERNAL.I_EVALUATE(DBMS_RULES_LIB)",
    kwrxevaluateexp="SYS.DBMS_RULE.EVALUATE_EXPRESSION(DBMS_RULES_LIB)",
    kwrxevaluateiter="SYS.DBMS_RULE.EVALUATE(DBMS_RULES_LIB)",
    kwrxevctxaddvar="SYS.DBMS_RULEADM_INTERNAL.I_EVALUATION_CONTEXT_ADD_VAR(DBMS_RULES_LIB)",
    kwrxexpins="SYS.DBMS_RULE_EXP_RL_INTERNAL.POPULATEEXPRULE(DBMS_RULES_LIB)",
    kwrxgetnexthit="SYS.DBMS_RULE.GET_NEXT_HIT(DBMS_RULES_LIB)",
    kwrxgrantobjpriv="SYS.DBMS_RULE_ADM.GRANT_OBJECT_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxgrantsyspriv="SYS.DBMS_RULE_ADM.GRANT_SYSTEM_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxisfastexp="SYS.DBMS_RULE.IS_FAST(DBMS_RULES_LIB)",
    kwrxops_int="SYS.DBMS_RULE_EXP_RL_INTERNAL.KWRXOPS_INT(DBMS_RULES_LIB)",
    kwrxopsint="SYS.DBMS_RULE_EXP_RL_INTERNAL.KWRXOPS_INT(DBMS_RULES_LIB)",
    kwrxpatchrpriv="SYS.DBMS_RULEADM_INTERNAL.PATCH_RULE_PRIV(DBMS_RULES_LIB)",
    kwrxregiactx="SYS.DBMS_RULEADM_INTERNAL.REGISTER_INTERNAL_ACTX(DBMS_RULES_LIB)/SYS.DBMS_RULEADM_INTERNAL.IN(DBMS_RULES_LIB)",
    kwrxremoverule="SYS.DBMS_RULEADM_INTERNAL.REMOVE_RULE(DBMS_RULES_LIB)",
    kwrxrevokobjpriv="SYS.DBMS_RULE_ADM.REVOKE_OBJECT_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxrevoksyspriv="SYS.DBMS_RULE_ADM.REVOKE_SYSTEM_PRIVILEGE(DBMS_RULES_LIB)",
    kwrxunregiactx="SYS.DBMS_RULEADM_INTERNAL.UNREGISTER_INTERNAL_ACTX(DBMS_RULES_LIB)",
    kwrxvalidateobj="SYS.DBMS_RULEADM_INTERNAL.VALIDATE_RE_OBJECT(DBMS_RULES_LIB)",
    kws="kernel streams advanced queuing",
    kwsa3gladdcsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDCSUB(DBMS_SQADM_LIB)",
    kwsa3gladddsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDDSUB(DBMS_SQADM_LIB)",
    kwsa3glalterdsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ALTERDSUB(DBMS_SQADM_LIB)",
    kwsa3gldrpcsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPCSUB(DBMS_SQADM_LIB)",
    kwsa3gldrpdsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPDSUB(DBMS_SQADM_LIB)",
    kwsa3gldrpntfnsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPNTFNSUB(DBMS_SQADM_LIB)",
    kwsa3gllockdsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_LOCKDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_addcsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDCSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_adddsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ADDDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_alterdsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_ALTERDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_drpcsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPCSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_drpdsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPDSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_drpntfnsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_DRPNTFNSUB(DBMS_SQADM_LIB)",
    kwsa_3gl_lockdsub="SYS.DBMS_SQADM_SYSCALLS.KWSA_3GL_LOCKDSUB(DBMS_SQADM_LIB)",
    kwsbg="kernel streams advanced queuing background",
    kwsbgshms="kernel streams advanced queuing background shutdown masters (AQ process coordinator)",
    kwsbit="kernel streams advanced queuing time manager for sharded queue",
    kwsbjc="kernel streams advanced queuing time manager for sharded queue",
    kwsbsm="kernel streams advanced queuing background",
    kwsbtm="kernel streams advanced queuing time manager for sharded queue",
    kwscb="kernel streams advanced queuing message cache",
    kwscp="kernel streams advanced queuing cross process",
    kwsdqwm="kernel streams advanced queuing message cache",
    kwsiadtenqrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiadteqshrdrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsiblobenqrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiblobeqshrdrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsijmseqshrdrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_SHARD_JMS(DBMS_AQ_LIB)",
    kwsiopqenqrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiopqeqshrdrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsipc="kernel streams advanced queuing cross process",
    kwsirawdeqcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.DEQUEUE(DBMS_AQ_LIB)",
    kwsirawdqcalout="kernel streams advanced queuing DBMS_AQ.DEQUEUE",
    kwsirawenqcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE(DBMS_AQ_LIB)",
    kwsirawenqrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_UNSHARDED(DBMS_AQ_LIB)",
    kwsiraweqshrdrepcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.ENQUEUE_INT_SHARD(DBMS_AQ_LIB)",
    kwsirepdeqcalout="[Kernel Adavanced Queuing] SYS.DBMS_AQ.DEQUEUE_REPL_INT(DBMS_AQ_LIB)",
    kwslb="kernel streams advanced queuing load balancer",
    kwsmb="kernel streams advanced queuing message cache",
    kwsmc="kernel streams advanced queuing message cache",
    kwsmsg="kernel streams advanced queuing message cache",
    kwsnsm="kernel streams advanced queuing subscription",
    kwspt="kernel streams advanced queuing partitioning",
    kwssa="kernel streams advanced queuing subscription",
    kwssb="kernel streams advanced queuing message cache",
    kwssh="kernel streams advanced queuing message cache",
    kwssi="kernel streams advanced queuing subscription",
    kx="[Kernel Execution] ",
    kxc="[Kernel Execution constraints] ",
    kxcb="[Kernel Execution constraints backup] ",
    kxcc="[Kernel Execution constraints catch all] ",
    kxcs="[Kernel eXecute Constraints: SQL statements] ",
    kxcsnn="[Kernel Execution] constraints sql statements signal a not null constraint violation",
    kxd="[Kernel Execution] exadata modules",
    kxdam="[Kernel Execution] exadata modules disk auto manage",
    kxdbc="[Kernel Execution] exadata modules backup compression for backup appliance",
    kxdbio="[Kernel Execution] exadata modules block level intelligent operations",
    kxdcm="[Kernel Execution] exadata modules metrics fixed table callbacks",
    kxdofl="[Kernel Execution] exadata modules offload",
    kxdr="[Kernel Execution] exadata modules DML driver entrypoint",
    kxdrs="[Kernel Execution] exadata modules DML driver entrypoint resilvering layer",
    kxf="[Kernel Execution] parallel query",
    kxfc="[Kernel Execution] parallel query coordinator",
    kxfp="[Kernel eXecute Fast (parallel) Process and buffer] ",
    kxfpb="[Kernel eXecute Fast (parallel) Buffer Allocation] ",
    kxfpbgpc="[Kernel eXecute Fast (parallel) Buffer Allocation] get permanent chunks",
    kxfpbgtc="[Kernel eXecute Fast (parallel) Buffer Allocation] buffer allocation get chunk",
    kxfpclinfo="[Kernel eXecute Fast (parallel) Process and buffer] get load info from instances",
    kxfpcrel="[Kernel eXecute Fast (parallel) Process and buffer] create local query server process",
    kxfpg1sg="[Kernel eXecute Fast (parallel) Process and buffer] get one server group",
    kxfpgettotalcpucount="[Kernel eXecute Fast (parallel) Process and buffer] get cpu counts for parallel sql profile recommendation",
    kxfpgsg="[Kernel eXecute Fast (parallel) Process and buffer] get server group (coordinator)",
    kxfpi="[Kernel eXecute Fast (parallel) Process and buffer] instance",
    kxfpiinfo="[Kernel eXecute Fast (parallel) Process and buffer] instance info; get information from instances",
    kxfpldbl="[Kernel eXecute Fast (parallel) Process and buffer] loadbalancing",
    kxfpnfy="[Kernel eXecute Fast (parallel) Process and buffer] notify",
    kxfpprocesserror="[Kernel eXecute Fast (parallel) Process and buffer] process error",
    kxfpqdqr="[Kernel eXecute Fast (parallel) Process and buffer] Queue DeQueue queue Reference",
    kxfpqidqr="[Kernel eXecute Fast (parallel) Process and buffer] Queue Internal DeQueue queue Reference",
    kxfpqput="[Kernel eXecute Fast (parallel) Process and buffer] put qb buffer back (create partial)",
    kxfpqrfdb="[Kernel eXecute Fast (parallel) Process and buffer] Queue ref free dequeued buffer",
    kxfpqrsod="[Kernel eXecute Fast (parallel) Process and buffer] queue ref state object delete",
    kxfpqsod="[Kernel eXecute Fast (parallel) Process and buffer] queue state object delete",
    kxfpqsrls="[Kernel eXecute Fast (parallel) Process and buffer] slave release",
    kxfprdp="[Kernel eXecute Fast (parallel) Process and buffer] run detached process",
    kxfprienq="[Kernel eXecute Fast (parallel) Process and buffer] Queue ref internal enqueue message",
    kxfprifdb="[Kernel eXecute Fast (parallel) Process and buffer] Queue ref internal free dequeued buffer",
    kxfq="[Kernel eXecute Fast table Queue and message queues] ",
    kxfqira="[Kernel eXecute Fast table Queue and message queues] initialize a TQ range",
    kxfqupp="[Kernel eXecute Fast table Queue and message queues] unpack message and put in sort buffer",
    kxfr="[Kernel eXecute Fast Rowid range manager] ",
    kxfrallocslaves="[Kernel eXecute Fast Rowid range manager] allocate slaves",
    kxfralo="[Kernel eXecute Fast Rowid range manager] allocate rowid ranges and slave processes",
    kxfrdefaultdop="[Kernel eXecute Fast Rowid range manager] calculate default DOP",
    kxfs="[Kernel Execution] parallel query slave",
    kxft="[Kernel Execution] parallel query parallel execution PTL",
    kxftaskload="[Kernel Execution] parallel query parallel execution PTL this is the load callback that is called for by qerfxFetch to get ...",
    kxfx="[Kernel eXecute Fast (parallel) sql eXecution] ",
    kxfxcp="[Kernel eXecute Fast (parallel) sql eXecution] client side (qc) interface",
    kxfxcw="[Kernel eXecute Fast (parallel) sql eXecution] kxfxrytab yields the (greatest) reply type expected from a",
    kxfxgs="[Kernel eXecute Fast (parallel) sql eXecution] get start",
    kxfxmai="[Kernel eXecute Fast (parallel) sql eXecution] slave process main entry point",
    kxfxq="[Kernel eXecute Fast (parallel) sql eXecution] queueing",
    kxfxse="[Kernel eXecute Fast (parallel) sql eXecution] execute",
    kxfxsexecute="[Kernel eXecute Fast (parallel) sql eXecution] slave execute",
    kxfxsp="[Kernel eXecute Fast (parallel) sql eXecution] open, parse, bind entire DFO",
    kxfxsstmtexecute="[Kernel eXecute Fast (parallel) sql eXecution] statement execute",
    kxh="[Kernel Execution: Hash Join] ",
    kxhf="[Kernel eXecution: Hash join File and memory management] ",
    kxhr="[Kernel eXecution: Hash join Row management] ",
    kxhrunpack="[Kernel eXecution: Hash join Row management] unpack a row",
    kxib="[Kernel Execution] index buffering operations",
    kxibdofinish="[Kernel Execution] index buffering operations do finish processing for a specified index",
    kxibfinish="[Kernel Execution] index buffering operations finish index maintenance processing",
    kxpar="[Kernel eXecute PArtition Row sources] ",
    kxrd="[Kernel eXecution Row source Delete] ",
    kxru="[Kernel eXecution Row source Update] ",
    kxs="[Kernel eXecute Shared cursor] ",
    kxsbnddmp="[Kernel eXecute Shared cursor] bind variable dump. master routine per bind for providing bind info in sql trace files.",
    kxsbndinf="[Kernel eXecute Shared cursor] bind variable information. provides actual bind data in sql trace files.",
    kxscln="[Kernel eXecute Shared cursor] cleanup instantiation object",
    kxscls="[Kernel eXecute Shared cursor] close",
    kxsclsr="[Kernel eXecute Shared cursor] close remote",
    kxsdiag8711391="[Kernel eXecute Shared cursor] Check for bug 8711391 (cursor lock user session state object deleted before close of the cursors)",
    kxsdump="kernel execution shared cursor ??",
    kxsfbb="[Kernel eXecute Shared cursor] free bind buffers(?)",
    kxsffir="[Kernel eXecute Shared cursor] function fire called when the appropriate heap is going away",
    kxsfreg="[Kernel Execution] register callbacks for the persistent, ephemeral and work heaps that can deallocate memory",
    kxsfreg2="[Kernel Execution] register callbacks for the persistent, ephemeral and work heaps that can deallocate memory",
    kxsgetruntimelock="[Kernel eXecute Shared cursor] get runtime lock",
    kxsopenacursor="[Kernel eXecute Shared cursor] open a cursor (local in PGA)",
    kxspoac="[Kernel eXecute Shared cursor] put oacdef into the cursor instantiation",
    kxssqlhash="[Kernel Execution] return the hash value and full hash value from the kgscComputeHash",
    kxsssa="[Kernel eXecute Shared cursor] session state array(?)",
    kxsssasetsqlid="[Kernel eXecute Shared cursor] session state array(?) prepare to update X$SUSE with sqlid, updateallssa performs this",
    kxsssaupdateallssa="[Kernel eXecute Shared cursor] session state array(?) update all session state array (X$KSUSE)",
    kxst="[Kernel eXecute Shared cursor] sql trace",
    kxstcls="[Kernel eXecute Shared cursor] sql trace trace cursor closing",
    kxstcol="[Kernel eXecute Shared cursor] sql trace collect. provide parse, execute and fetch statistics.",
    kxstcol2="[Kernel eXecute Shared cursor] sql trace collect. provide parse, execute and fetch statistics. for LOB types",
    kxstper="[Kernel eXecute Shared cursor] sql trace process error",
    kxstsql="[Kernel eXecute Shared cursor] sql trace sql processing. provide SQL information",
    kxsttracebinds="[Kernel eXecute Shared cursor] sql trace bind variable",
    kxsttraceclose="[Kernel eXecute Shared cursor] sql trace close tracefile",
    kxsttracewait="[Kernel eXecute Shared cursor] sql trace provide wait information",
    kxt="[Kernel eXecute Trigger - Instead-of trigger] ",
    kxtex1="[Kernel eXecute Trigger] ",
    kxti="[Kernel eXecute Trigger - Instead-of trigger] ",
    kxtiget="[Kernel eXecute Trigger - Instead-of trigger] ??",
    kxtivwt="[Kernel eXecute Trigger - Instead-of trigger] view with active trigger for current ML",
    kxto="[Kernel eXecute Trigger] ",
    kxtr="[Kernel eXecute Trigger] ",
    kxtt="[Kernel Execution] temporary table operations",
    kxttclnup="[Kernel Execution] temporary table operations clean up state object",
    kxttisptt="[Kernel Execution] SYS.DBMS_STATS.IS_PRIVATE_TEMP_TABLE(DBMS_STATS_LIB)",
    kxwph="[Kernel Execution] table/tabpart/cluster segment attribute management",
    kyw="Workload Management(DBMS_WLM)",
    kywmabtpln="SYS.DBMS_WLM.IABORT_WLMPLAN(DBMS_WLM_LIB)",
    kywmadclsfr="SYS.DBMS_WLM.IADD_WLMCLASSIFIERS(DBMS_WLM_LIB)",
    kywmchkpln="SYS.DBMS_WLM.ICHECK_WLMPLAN(DBMS_WLM_LIB)",
    kywmchkrmenable="SYS.DBMS_WLM.ICHECK_RM_ENABLE(DBMS_WLM_LIB)",
    kywmchkrmisoff="SYS.DBMS_WLM.ICHECK_RM_ISOFF(DBMS_WLM_LIB)",
    kywmchkrmplan="SYS.DBMS_WLM.ICHECK_RM_PLAN(DBMS_WLM_LIB)",
    kywmcrtpln="SYS.DBMS_WLM.ICREATE_WLMPLAN(DBMS_WLM_LIB)",
    kywmdelpln="SYS.DBMS_WLM.IDELETE_WLMPLAN(DBMS_WLM_LIB)",
    kywmgetcdbsetting="SYS.DBMS_WLM.IGET_CDB_SETTING(DBMS_WLM_LIB)",
    kywmgetdbinfo="SYS.DBMS_WLM.IGET_DB_INFO(DBMS_WLM_LIB)",
    kywmgetpomultiplier="SYS.DBMS_WLM.IGET_PO_MULTIPLIER(DBMS_WLM_LIB)",
    kywmisetpdbrmplan="SYS.DBMS_WLM.ISET_PDB_RM_PLAN(DBMS_WLM_LIB)",
    kywmsbmtpc="SYS.DBMS_WLM.ISUBMIT_WLMPCS(DBMS_WLM_LIB)",
    kywmsbmtpcinfo="SYS.DBMS_WLM.ISUBMIT_WLMPCINFO(DBMS_WLM_LIB)",
    kywmsbmtpln="SYS.DBMS_WLM.ISUBMIT_WLMPLAN(DBMS_WLM_LIB)",
    kywmsetdbidbmap="SYS.DBMS_WLM.ISET_DBI_DBMAP(DBMS_WLM_LIB)",
    kywmsetdbirmplan="SYS.DBMS_WLM.ISET_DBI_RM_PLAN(DBMS_WLM_LIB)",
    kywmsetdbmap="SYS.DBMS_WLM.ISET_DBMAP(DBMS_WLM_LIB)",
    kywmsetrmplan="SYS.DBMS_WLM.ISET_RM_PLAN(DBMS_WLM_LIB)",
    kywmupcggrpmap="SYS.DBMS_WLM.IUPDATE_CG_MAPS(DBMS_WLM_LIB)",
    kywmupcgmaps="SYS.DBMS_WLM.IUP_CG_MAPS(DBMS_WLM_LIB)",
    kywmuppdbcgmap="SYS.DBMS_WLM.IUPDATE_PDBCG_MAPS(DBMS_WLM_LIB)",
    kz="[Kernel Security] ",
    kza="[Kernel Security Auditing] ",
    kzaf_insert_audit_dp="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DP(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_dpapi="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DPAPI(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_dv="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DV(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_fga="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_ksacl="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_KSACL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_ols="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_OLS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_protocol="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_PROTOCOL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_rman="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_RMAN(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_standard="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_STANDARD(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzaf_insert_audit_xs="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_XS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditdp="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DP(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditdpapi="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DPAPI(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditdv="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_DV(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditfga="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditksacl="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_KSACL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditols="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_OLS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditprotocol="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_PROTOCOL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditrman="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_RMAN(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditstandard="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_STANDARD(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzafinsertauditxs="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT_LSBY.REPLAY_UA_XS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_add_hcol="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.ADD_HIDDEN_COLUMNS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_alter_part_interval="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.ALTER_PARTITION_INTERVAL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_check_tablespace_fga="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.CHECK_TABLESPACE_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_clean_atrail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.CLEAN_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_drop_old_uatrail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.DROP_OLD_UNIFIED_AUDTABLES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_enqueue_get_rel="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.ENQUEUE_GET_REL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_fga_operation_helper="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.FGA_OPERATION_HELPER(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_flush_ang_trail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.FLUSH_UNIFIED_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_get_commit_delay="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.GET_AUDIT_COMMIT_DELAY(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_get_lat_in_mem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.GET_LAST_ARCHIVE_TS_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_get_prop_in_mem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.GET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_import_audunified="[Kernel Security Auditing] SYS.AMGT$DATAPUMP.IMPORT_AUDUNIFIED_CONTENTS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_load_ang_files="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.LOAD_UNIFIED_AUDIT_FILES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_move_aud_tablespace="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.MOVE_STD_AUD_TABLESPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_atrail_property="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.UPDATE_ATRAIL_PROP_SGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_lat_in_mem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.SET_LAST_ARCH_TS_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_prop_in_mem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.SET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_set_uga_flags="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.UPDATE_KZAM_UGA_FLAGS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_setup_ang_trail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.SETUP_NG_AUDIT_TSPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_sig_err="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)/SYS.AMGT$DATAPUMP.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_trans_uniaud_data="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.TRANSFER_UNIAUD_RECS_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzam_write_trace="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.WRITE_TRACE_MESSAGE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamaddhcol="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.ADD_HIDDEN_COLUMNS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamalterpartinterval="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.ALTER_PARTITION_INTERVAL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamchecktablespacefga="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.CHECK_TABLESPACE_FGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamcleanatrail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.CLEAN_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamdropolduatrail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.DROP_OLD_UNIFIED_AUDTABLES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamenqueuegetrel="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.ENQUEUE_GET_REL(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamfgaoperationhelper="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.FGA_OPERATION_HELPER(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamflushangtrail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.FLUSH_UNIFIED_AUDIT_TRAIL_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamgetcommitdelay="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.GET_AUDIT_COMMIT_DELAY(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamgetlatinmem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.GET_LAST_ARCHIVE_TS_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamgetpropinmem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.GET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamimportaudunified="[Kernel Security Auditing] SYS.AMGT$DATAPUMP.IMPORT_AUDUNIFIED_CONTENTS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamloadangfiles="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.LOAD_UNIFIED_AUDIT_FILES_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzammoveaudtablespace="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.MOVE_STD_AUD_TABLESPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetatrailproperty="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.UPDATE_ATRAIL_PROP_SGA(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetlatinmem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.SET_LAST_ARCH_TS_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetpropinmem="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.SET_ATRAIL_PROP_IN_MEM(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetugaflags="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.UPDATE_KZAM_UGA_FLAGS(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsetupangtrail="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.SETUP_NG_AUDIT_TSPACE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamsigerr="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)/SYS.AMGT$DATAPUMP.RAISE_ORA_ERROR(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamtransuniauddata="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.TRANSFER_UNIAUD_RECS_INT(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzamwritetrace="[Kernel Security Auditing] AUDSYS.DBMS_AUDIT_MGMT.WRITE_TRACE_MESSAGE(AUDSYS.DBMS_AUDIT_MGMT_LIB)",
    kzang="[Kernel Security Auditing] audit next generation",
    kzangins="[Kernel Security Auditing] audit next generation insert record",
    kzap="[Kernel Security Auditing] audit policy",
    kzapicsp="[Kernel Security Auditing] SYS.DBMS_ZHELP_IR.CHECK_SYS_PRIV(DBMS_ZHELP_LIB)",
    kzar="[Kernel Security Auditing] audit application",
    kzc="[Kernel Security] Code-Based Access Control",
    kzcicrstatsdecryptnum="[Kernel Security] SYS.DBMS_CRYPTO_INTERNAL.STATS_DECRYPT_NUM_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrstatsdecryptraw="[Kernel Security] SYS.DBMS_CRYPTO_INTERNAL.STATS_DECRYPT_RAW_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrstatsencryptnum="[Kernel Security] SYS.DBMS_CRYPTO_INTERNAL.STATS_ENCRYPT_NUM_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrstatsencryptraw="[Kernel Security] SYS.DBMS_CRYPTO_INTERNAL.STATS_ENCRYPT_RAW_CALLOUT(CRYPTO_INTERNAL_LIB)",
    kzcicrupdatesensitivestats="[Kernel Security] SYS.DBMS_CRYPTO_INTERNAL.UPDATESENSITIVESTATS(CRYPTO_INTERNAL_LIB)",
    kzck="[Kernel Security] Code-Based Access Control encryption support",
    kzctx="[Kernel Security] Code-Based Access Control context routines",
    kzctxcdbli="[Kernel Security] Code-Based Access Control context routines construct DB link info",
    kzctxecc="[Kernel Security] SYS.DBMS_SESSION.KZCTXECC(C)",
    kzctxecc1="[Kernel Security] SYS.DBMS_SESSION.KZCTXECC1(C)",
    kzctxesc="[Kernel Security] SYS.DBMS_SESSION.KZCTXESC(C)",
    kzctxg="[Kernel Security] Code-Based Access Control context routines global_context",
    kzctxgci="[Kernel Security] SYS.DBMS_SESSION.KZCTXGC(C)",
    kzctxgjcc="[Kernel Security] SYS.DBMS_APPCTX.CLEAR_CONTEXT(DBMS_APPCTX_LIB)",
    kzctxgjsc="[Kernel Security] SYS.DBMS_APPCTX.SET_CONTEXT(DBMS_APPCTX_LIB)",
    kzctxgsi="[Kernel Security] SYS.DBMS_SESSION.KZCTXGSI(C)",
    kzctxscv="[Kernel Security] Code-Based Access Control context routines set context value",
    kzd="[Kernel Security Dictionary routines] ",
    kzdlkupgrade="[Kernel Security Dictionary routines] SYS.DBMS_DBLINK.UPGRADE(DBMS_DBLINK_LIB)",
    kzdopcl="[Kernel Security Dictionary routines] dictionary access support object privileges check routines?",
    kzdopg="[Kernel SQL Row cache management] KZD Object Privilege Get",
    kzdpcrd="[Kernel Security Dictionary routines] SYS.DBMS_TDE_TOOLKIT_FFI.DATAPUMP_DECRYPT(TDE_LIBRARY)",
    kzdpcre="[Kernel Security Dictionary routines] SYS.DBMS_TDE_TOOLKIT_FFI.DATAPUMP_ENCRYPT(TDE_LIBRARY)",
    kzdpepadp="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.ASSOCIATE_POLICY(DBMS_TSDP_LIB)",
    kzdpepalp="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.INTERNAL_ALTER_POLICY(DBMS_TSDP_LIB)",
    kzdpepapo="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.INTERNAL_ADD_POLICY(DBMS_TSDP_LIB)",
    kzdpepdpc="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.DISABLE_PROTECTION_COLUMN(DBMS_TSDP_LIB)",
    kzdpepdpo="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.DROP_POLICY(DBMS_TSDP_LIB)",
    kzdpepdps="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.DISABLE_PROTECTION_SOURCE(DBMS_TSDP_LIB)",
    kzdpepdpt="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.DISABLE_PROTECTION_TYPE(DBMS_TSDP_LIB)",
    kzdpepdsp="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.INTERNAL_DROP_POLICY(DBMS_TSDP_LIB)",
    kzdpepepc="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.ENABLE_PROTECTION_COLUMN(DBMS_TSDP_LIB)",
    kzdpepeps="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.ENABLE_PROTECTION_SOURCE(DBMS_TSDP_LIB)",
    kzdpepept="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_PROTECT.ENABLE_PROTECTION_TYPE(DBMS_TSDP_LIB)",
    kzdpmpalc="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.ALTER_SENSITIVE_COLUMN(DBMS_TSDP_LIB)",
    kzdpmpasc="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.ADD_SENSITIVE_COLUMN(DBMS_TSDP_LIB)",
    kzdpmpast="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.ADD_SENSITIVE_TYPE(DBMS_TSDP_LIB)",
    kzdpmpdst="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.DROP_SENSITIVE_TYPE(DBMS_TSDP_LIB)",
    kzdpmpdts="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.DROP_SENSITIVE_TYPE_SOURCE(DBMS_TSDP_LIB)",
    kzdpmpidx="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.INT_IMPORT_DISCOVERY_RESULT(DBMS_TSDP_LIB)",
    kzdpmpist="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.INT_IMPORT_SENSITIVE_TYPES(DBMS_TSDP_LIB)",
    kzdpmprco="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.DROP_SENSITIVE_COLUMN(DBMS_TSDP_LIB)",
    kzdpmprscs="[Kernel Security Dictionary routines] SYS.DBMS_TSDP_MANAGE.REMOVE_DISCOVERY_RESULT(DBMS_TSDP_LIB)",
    kzekmaptkp="[Kernel Security] SYS.DBMS_TTS.ADD_PROTECTED_CE_TAB_KEY_INT(DBMS_TTS_LIB)",
    kzekmgptkp="[Kernel Security] SYS.DBMS_TTS.GET_PROTECTED_CE_TAB_KEY_INT(DBMS_TTS_LIB)",
    kzfa="[Kernel Security Fine Grained Auditing] ",
    kzfaadp="[Kernel Security Fine Grained Auditing] SYS.DBMS_FGA.ADD_POLICY(DBMS_FGA_LIB)",
    kzfadrp="[Kernel Security Fine Grained Auditing] SYS.DBMS_FGA.DROP_POLICY(DBMS_FGA_LIB)",
    kzfaenp="[Kernel Security Fine Grained Auditing] SYS.DBMS_FGA.ENABLE_POLICY(DBMS_FGA_LIB)",
    kzft="[Kernel Security] fine grained auditing",
    kzia="[Kernel Security Identification and Authentication] ",
    kziaia="[Kernel Security Identification and Authentication] main identification and authentication function",
    kziavua="[Kernel Security Identification and Authentication] ??",
    kzl="[Kernel Security Label] ",
    kzld="[Kernel Security Label] ldap",
    kzlg="[Kernel Security Label] generic directory services integration",
    kzp="[Kernel Security Privileges] ",
    kzpcaobb="[Kernel Security Privileges] check for access on object using object",
    kzpchkbu="[Kernel Security Privileges] KZP CHecK privileges on an object w/ auth cache Buff",
    kzpchkc="[Kernel Security Privileges] check privileges on a object cyclic",
    kzppcaptureplsql="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.CAPTURE_DEPENDENCY_PRIVS(PRIV_PROFILE_LIB)",
    kzppcreatecapture="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.CREATE_CAPTURE(PRIV_PROFILE_LIB)",
    kzppdeleterun="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.DELETE_RUN(PRIV_PROFILE_LIB)",
    kzppdisablecapture="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.DISABLE_CAPTURE(PRIV_PROFILE_LIB)",
    kzppdropcapture="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.DROP_CAPTURE(PRIV_PROFILE_LIB)",
    kzppenablecapture="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.ENABLE_CAPTURE(PRIV_PROFILE_LIB)",
    kzppgenerateresult="[Kernel Security Privileges] SYS.DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT(PRIV_PROFILE_LIB)",
    kzppinsdc="[Kernel Security Privileges] SYS.DBMS_PRIV_CAPTURE.CAPTURE_PRIVILEGE_USE(PRIV_PROFILE_LIB)",
    kzppinsdc_str="[Kernel Security Privileges] SYS.DBMS_PRIV_CAPTURE.CAPTURE_PRIVILEGE_USE(PRIV_PROFILE_LIB)",
    kzppinsdcstr="[Kernel Security Privileges] SYS.DBMS_PRIV_CAPTURE.CAPTURE_PRIVILEGE_USE(PRIV_PROFILE_LIB)",
    kzppisdvsupported="[Kernel Security Privileges] SYS.IS_DV_SUPPORTED.is_dv_supported(PRIV_PROFILE_LIB)",
    kzppobjpriv="[Kernel Security Privileges] SYS.DBMS_PRIV_CAPTURE.SES_HAS_OBJ_PRIV(PRIV_PROFILE_LIB)",
    kzpprolepriv="[Kernel Security Privileges] SYS.DBMS_PRIV_CAPTURE.SES_HAS_ROLE_PRIV(PRIV_PROFILE_LIB)",
    kzppsyspriv="[Kernel Security Privileges] SYS.DBMS_PRIV_CAPTURE.SES_HAS_SYS_PRIV(PRIV_PROFILE_LIB)",
    kzr="[Kernel Zecurity Resource routines] ",
    kzra="[Kernel Zecurity Resource routines] virtual private database privileges",
    kzraacx="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ADD_POLICY_CONTEXT(DBMS_RLS_LIB)",
    kzraadp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ADD_POLICY(DBMS_RLS_LIB)/SYS.DBMS_RLS_INT.IN(DBMS_RLS_LIB)",
    kzracpg="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.CREATE_POLICY_GROUP(DBMS_RLS_LIB)",
    kzradcx="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.DROP_POLICY_CONTEXT(DBMS_RLS_LIB)",
    kzradm="[Kernel Zecurity Resource - VPD Data Masking] ",
    kzradmadd="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.ADD_POLICY",
    kzradmalter="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.ALTER_POLICY",
    kzradmdisable="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.DISABLE_POLICY",
    kzradmdrop="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.DROP_POLICY",
    kzradmenable="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.ENABLE_POLICY",
    kzradmfpmmask="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.FPM_MASK",
    kzradmfpmunmask="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.FPM_UNMASK",
    kzradmupdfull="[Kernel Zecurity Resource - VPD Data Masking] DBMS_REDACT_INT.UPDATE_FULL_REDACTION_VALUES",
    kzradpg="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.DELETE_POLICY_GROUP(DBMS_RLS_LIB)",
    kzradrp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.DROP_POLICY(DBMS_RLS_LIB)",
    kzraealgp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ALTER_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzraealp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ALTER_POLICY(DBMS_RLS_LIB)",
    kzraenp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ENABLE_POLICY(DBMS_RLS_LIB)",
    kzraflp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.REFRESH_POLICY(DBMS_RLS_LIB)",
    kzragenp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ENABLE_GROUPED_POLICY(DBMS_RLS_LIB)/SYS.DBMS_RLS_INT.DISABLE_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzragflp="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.REFRESH_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzraiisc="[Kernel Zecurity Resource routines] SYS.DBMS_XDSUTL.INVALIDATE_DSD_CACHE(DBMS_XDSUTL_LIB)",
    kzraivba="[Kernel Zecurity Resource routines] SYS.DBMS_XDSUTL.INVALIDATE_DSD_CACHE_BY_ACLID(DBMS_XDSUTL_LIB)",
    kzrapfg="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.DROP_GROUPED_POLICY(DBMS_RLS_LIB)",
    kzraptg="[Kernel Zecurity Resource routines] SYS.DBMS_RLS_INT.ADD_GROUPED_POLICY(DBMS_RLS_LIB)/SYS.DBMS_RLS_INT.IN(DBMS_RLS_LIB)",
    kzraxdsa="[Kernel Zecurity Resource routines] SYS.XS_DATA_SECURITY_INT.APPLY_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsa_int="[Kernel Zecurity Resource routines] SYS.XS_DIAG_INT.APPLY_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsaint="[Kernel Zecurity Resource routines] SYS.XS_DIAG_INT.APPLY_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsd="[Kernel Zecurity Resource routines] SYS.DBMS_XDS.DISABLE_XDS(DBMS_XDS_LIB)",
    kzraxdse="[Kernel Zecurity Resource routines] SYS.XS_DATA_SECURITY_INT.ENABLE_DISABLE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsf1="[Kernel Zecurity Resource routines] SYS.DBMS_XDS.REFRESH_DSD(DBMS_XDS_LIB)",
    kzraxdsf2="[Kernel Zecurity Resource routines] SYS.DBMS_XDS.REFRESH_DSD(DBMS_XDS_LIB)",
    kzraxdsr="[Kernel Zecurity Resource routines] SYS.XS_DATA_SECURITY_INT.REMOVE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsr_int="[Kernel Zecurity Resource routines] SYS.XS_DIAG_INT.REMOVE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxdsrint="[Kernel Zecurity Resource routines] SYS.XS_DIAG_INT.REMOVE_OBJECT_POLICY(DBMS_XDS_LIB)",
    kzraxpnm="[Kernel Zecurity Resource routines] SYS.XS_DATA_SECURITY_UTIL.VERIFY_OBJECTNAME(DBMS_XDS_LIB)/SYS.XS_DATA_SECURITY_UTIL_INT.VERIFY_OBJECTNAME(DBMS_XDS_LIB)",
    kzredact_apply_pe_col="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.APPLY_POLICY_EXPR_TO_COL(DBMS_REDACT_LIB)",
    kzredact_create_pe="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.CREATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredact_drop_pe="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.DROP_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredact_update_pe="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.UPDATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactadd="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ADD_POLICY(DBMS_REDACT_LIB)",
    kzredactadd_v2="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ADD_POLICY(DBMS_REDACT_LIB)",
    kzredactaddv2="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ADD_POLICY(DBMS_REDACT_LIB)",
    kzredactalter="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ALTER_POLICY(DBMS_REDACT_LIB)",
    kzredactalter_v2="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ALTER_POLICY(DBMS_REDACT_LIB)",
    kzredactalterv2="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ALTER_POLICY(DBMS_REDACT_LIB)",
    kzredactapplypecol="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.APPLY_POLICY_EXPR_TO_COL(DBMS_REDACT_LIB)",
    kzredactcreatepe="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.CREATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactdisable="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.DISABLE_POLICY(DBMS_REDACT_LIB)",
    kzredactdrop="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.DROP_POLICY(DBMS_REDACT_LIB)",
    kzredactdroppe="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.DROP_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactenable="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.ENABLE_POLICY(DBMS_REDACT_LIB)",
    kzredactfpmmask="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.FPM_MASK(DBMS_REDACT_LIB)",
    kzredactfpmunmask="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.FPM_UNMASK(DBMS_REDACT_LIB)",
    kzredactupdatepe="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.UPDATE_POLICY_EXPRESSION(DBMS_REDACT_LIB)",
    kzredactupdfull="[Kernel Zecurity Resource routines] SYS.DBMS_REDACT_INT.UPDATE_FULL_REDACTION_VALUES(DBMS_REDACT_LIB)",
    kzrt="[Kernel Zecurity Resource routines] virtual private database privileges",
    kzs="[Kernel Security] ",
    kzsob_des3decrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3DECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_des3encrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3ENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_desdecrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESDECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_desencrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsob_getkey="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.GETKEY(DBMS_OBFUSCATION_LIB)",
    kzsob_md5="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.MD5(DBMS_OBFUSCATION_LIB)",
    kzsobdes3decrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3DECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobdes3encrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DES3ENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobdesdecrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESDECRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobdesencrypt="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.DESENCRYPT(DBMS_OBFUSCATION_LIB)",
    kzsobgetkey="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.GETKEY(DBMS_OBFUSCATION_LIB)",
    kzsobmd5="[Kernel Security] SYS.DBMS_OBFUSCATION_TOOLKIT_FFI.MD5(DBMS_OBFUSCATION_LIB)",
    kzsp="[Kernel Security Privileges] privileges",
    kzsr="[Kernel Zecurity state for Remote logins] ",
    kzstc="[Kernel Security] SYS.DBMS_CRYPTO_FFI.COOKIE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstdecrypt="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.DECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstdeenvelope="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.DEENVELOPE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstdl="[Kernel Security] SYS.DBMS_CRYPTO_FFI.DECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstdr="[Kernel Security] SYS.DBMS_CRYPTO_FFI.DECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteclosepersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.CLOSEPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzstecreatepersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.CREATEPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzstegetpkcs7prot="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.GETPROTECTION(CRYPTO_TOOLKIT_LIBRARY)/SYS.DBMS_CRYPTO_TOOLKIT_FFI.IN(CRYPTO_TOOLKIT_LIBRARY)",
    kzstel="[Kernel Security] SYS.DBMS_CRYPTO_FFI.ENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstencrypt="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.ENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstenvelope="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.ENVELOPE(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteopenpersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.OPENPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzster="[Kernel Security] SYS.DBMS_CRYPTO_FFI.ENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzsteremovepersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.REMOVEPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzstesetpkcs7prot="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.SETPROTECTION(CRYPTO_TOOLKIT_LIBRARY)/SYS.DBMS_CRYPTO_TOOLKIT_FFI.IN(CRYPTO_TOOLKIT_LIBRARY)",
    kzstestorepersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.STOREPERSONA(CRYPTO_TOOLKIT_LIBRARY)",
    kzstgpfw_getpersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.GETPERSONAFROMWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstgpfwgetpersona="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.GETPERSONAFROMWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzsthash="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.HASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzsthl="[Kernel Security] SYS.DBMS_CRYPTO_FFI.HASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzsthr="[Kernel Security] SYS.DBMS_CRYPTO_FFI.HASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiabortidentity="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.ABORTIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiac="[Kernel Security] SYS.KUPU$UTILITIES_INT.INTALGCONV(KUPULIB)",
    kzsticreateidentity="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.CREATEIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstinitialize="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.INITIALIZE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstiremoveidentity="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.REMOVEIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstistoretrustedidentity="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.STORETRUSTEDIDENTITY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkdc_pkdecrypt="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKDECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkdcpkdecrypt="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKDECRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkec_pkencrypt="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkecpkencrypt="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.PKENCRYPT(CRYPTO_TOOLKIT_LIBRARY)",
    kzstkeyedhash="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.KEYEDHASH(CRYPTO_TOOLKIT_LIBRARY)",
    kzstml="[Kernel Security] SYS.DBMS_CRYPTO_FFI.MAC(CRYPTO_TOOLKIT_LIBRARY)",
    kzstmr="[Kernel Security] SYS.DBMS_CRYPTO_FFI.MAC(CRYPTO_TOOLKIT_LIBRARY)",
    kzstr="[Kernel Security] SYS.DBMS_CRYPTO_FFI.RANDOM(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrb_randombytes="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMBYTES(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrbrandombytes="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMBYTES(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrn_randomnumber="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMNUMBER(CRYPTO_TOOLKIT_LIBRARY)",
    kzstrnrandomnumber="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.RANDOMNUMBER(CRYPTO_TOOLKIT_LIBRARY)",
    kzstsd_signdetached="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.SIGNDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstsdsigndetached="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.SIGNDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstseedrandom="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.SEEDRANDOM(CRYPTO_TOOLKIT_LIBRARY)",
    kzstsign="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.SIGN(CRYPTO_TOOLKIT_LIBRARY)",
    kzstterminate="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.TERMINATE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstvalidate="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.VALIDATE(CRYPTO_TOOLKIT_LIBRARY)",
    kzstved_verifydetached="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.VERIFYDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstvedverifydetached="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.VERIFYDETACHED(CRYPTO_TOOLKIT_LIBRARY)",
    kzstverify="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.VERIFY(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwclosewallet="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.CLOSEWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwcreatewallet="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.CREATEWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwdestroywallet="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.DESTROYWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzstwopenwallet="[Kernel Security] SYS.DBMS_CRYPTO_TOOLKIT_FFI.OPENWALLET(CRYPTO_TOOLKIT_LIBRARY)",
    kzsu="[Kernel Security Privileges] XS principal",
    kzu="[Kernel Security Privileges] ",
    kzvcpfsqltext="[Kernel Security] DVSYS.DBMS_MACUTL.COPY_SQL_TEXT_FILTERED(DVSYS.KZV$UTL_LIBT)",
    kzvd="[Kernel Security] data vault",
    kzvdvedpf="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_FULL_DVAUTH(DVSYS.KZV$UTL_LIBT)",
    kzvdvedptb="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_TAB_DVAUTH(DVSYS.KZV$UTL_LIBT)",
    kzvdvedptransp="[Kernel Security] SYS.KUPM$MCP.CHECK_TTS_DVAUTH(DBMS_DATAPUMP_DV_LIB)",
    kzvdvedpts="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_TS_DVAUTH(DVSYS.KZV$UTL_LIBT)",
    kzvdversetev="[Kernel Security] DVSYS.DBMS_MACSEC_RULES.evaluate_tr(DVSYS.KZV$RUL_LIBT)",
    kzvdvexsgr="[Kernel Security] SYS.XS_PRINCIPAL.DV_ROLE_CHECK(DBMS_RXS_LIB)",
    kzvdvldaddrltors="[Kernel Security] DVSYS.DBMS_MACADM.ADD_RULE_TO_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldcreaterule="[Kernel Security] DVSYS.DBMS_MACADM.CREATE_RULE(KZV$RSRC_LIBT)",
    kzvdvldcreateruleset="[Kernel Security] DVSYS.DBMS_MACADM.CREATE_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvlddeleterlfromrs="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_RULE_FROM_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvlddeleterule="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_RULE(KZV$RSRC_LIBT)",
    kzvdvlddeleteruleset="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldrenamerule="[Kernel Security] DVSYS.DBMS_MACADM.RENAME_RULE(KZV$RSRC_LIBT)",
    kzvdvldrenameruleset="[Kernel Security] DVSYS.DBMS_MACADM.RENAME_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvldupdaterule="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_RULE(KZV$RSRC_LIBT)",
    kzvdvldupdateruleset="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_RULE_SET(KZV$RSRC_LIBT)",
    kzvdvssetup="[Kernel Security] DVSYS.EVENT.set_c(DVSYS.KZV$RUL_LIBT)",
    kzvfacget="[Kernel Security] DVSYS.DBMS_MACSEC.GET_FACTOR_EXT_CALLOUT(DVSYS.KZV$FAC_LIBT)",
    kzvfacset="[Kernel Security] DVSYS.DBMS_MACSEC.SET_FACTOR_EXT(DVSYS.KZV$FAC_LIBT)",
    kzvfactrust="[Kernel Security] DVSYS.DBMS_MACSEC.GET_TRUST_LEVEL_EXT(DVSYS.KZV$FAC_LIBT)",
    kzvgoldengateadmincheck0="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_GOLDENGATE_ADMIN(DVSYS.KZV$UTL_LIBT)",
    kzvgoldengateredoaxcheck0="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_GOLDENGATE_REDO_ACCESS(DVSYS.KZV$UTL_LIBT)",
    kzvisasdumpallowed="[Kernel Security] DVSYS.DBMS_MACUTL.ALTER_SYSTEM_DUMP_ALLOWED(DVSYS.KZV$UTL_LIBT)",
    kzviseventenabled="[Kernel Security] DVSYS.DBMS_MACUTL.IS_EVENT_ENABLED(DVSYS.KZV$UTL_LIBT)",
    kzvisroleenabled="[Kernel Security] DVSYS.DBMS_MACUTL.SESSION_ENABLED_ROLE(DVSYS.KZV$UTL_LIBT)/SYS.OLS_ENFORCEMENT.SESSION_ENABLED_ROLE(LBACSYS.LBAC$EVENT_LIBT)",
    kzvradmaddcrtopolicy="[Kernel Security] DVSYS.DBMS_MACADM.ADD_CMD_RULE_TO_POLICY(KZV$ADM_LIBT)",
    kzvradmaddnlsdata="[Kernel Security] DVSYS.DBMS_MACADM.ADD_NLS_DATA(KZV$ADM_LIBT)",
    kzvradmaddpolicyowner="[Kernel Security] DVSYS.DBMS_MACADM.ADD_OWNER_TO_POLICY(KZV$ADM_LIBT)",
    kzvradmaddrealmauth="[Kernel Security] DVSYS.DBMS_MACADM.ADD_AUTH_TO_REALM(KZV$ADM_LIBT)",
    kzvradmaddrealmobject="[Kernel Security] DVSYS.DBMS_MACADM.ADD_OBJECT_TO_REALM(KZV$ADM_LIBT)",
    kzvradmaddrlmtopolicy="[Kernel Security] DVSYS.DBMS_MACADM.ADD_REALM_TO_POLICY(KZV$ADM_LIBT)",
    kzvradmaud_callout="[Kernel Security] DVSYS.DBMS_MACAUD.CREATE_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmaudcallout="[Kernel Security] DVSYS.DBMS_MACAUD.CREATE_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmcheckmacsec="[Kernel Security] DVSYS.DBMS_MACADM.CHECK_MAINTAIN_MACSEC(KZV$ADM_LIBT)",
    kzvradmcreatecommrule="[Kernel Security] DVSYS.DBMS_MACADM.CREATE_COMMAND_RULE(KZV$ADM_LIBT)",
    kzvradmcreatepolicy="[Kernel Security] DVSYS.DBMS_MACADM.CREATE_POLICY(KZV$ADM_LIBT)",
    kzvradmcreaterealm="[Kernel Security] DVSYS.DBMS_MACADM.CREATE_REALM(KZV$ADM_LIBT)",
    kzvradmdelcrfrompolicy="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_CMD_RULE_FROM_POLICY(KZV$ADM_LIBT)",
    kzvradmdeletecommrule="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_COMMAND_RULE(KZV$ADM_LIBT)",
    kzvradmdeleterealm="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_REALM(KZV$ADM_LIBT)",
    kzvradmdeleterealmauth="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_AUTH_FROM_REALM(KZV$ADM_LIBT)",
    kzvradmdeleterealmobject="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_OBJECT_FROM_REALM(KZV$ADM_LIBT)",
    kzvradmdelpolicyowner="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_OWNER_FROM_POLICY(KZV$ADM_LIBT)",
    kzvradmdelrlmfrompolicy="[Kernel Security] DVSYS.DBMS_MACADM.DELETE_REALM_FROM_POLICY(KZV$ADM_LIBT)",
    kzvradmdisabledvaccts="[Kernel Security] DVSYS.DBMS_MACADM.DISABLE_DV_DICTIONARY_ACCTS(KZV$ADM_LIBT)",
    kzvradmdisabledvenforce="[Kernel Security] DVSYS.DBMS_MACADM.DISABLE_DV(KZV$ADM_LIBT)",
    kzvradmdisabledvpatchaudit="[Kernel Security] DVSYS.DBMS_MACADM.DISABLE_DV_PATCH_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmdisableevent="[Kernel Security] DVSYS.DBMS_MACADM.DISABLE_EVENT(KZV$ADM_LIBT)",
    kzvradmdisableoradebug="[Kernel Security] DVSYS.DBMS_MACADM.DISABLE_ORADEBUG(KZV$ADM_LIBT)",
    kzvradmdomainidentityadmincb="[Kernel Security] DVSYS.DBMS_MACADM.DOMAIN_IDENTITY_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmdroppolicy="[Kernel Security] DVSYS.DBMS_MACADM.DROP_POLICY(KZV$ADM_LIBT)",
    kzvradmenabledvaccts="[Kernel Security] DVSYS.DBMS_MACADM.ENABLE_DV_DICTIONARY_ACCTS(KZV$ADM_LIBT)",
    kzvradmenabledvenforce="[Kernel Security] DVSYS.DBMS_MACADM.ENABLE_DV_ENFORCE_INT(KZV$ADM_LIBT)",
    kzvradmenabledvpatchaudit="[Kernel Security] DVSYS.DBMS_MACADM.ENABLE_DV_PATCH_ADMIN_AUDIT(KZV$ADM_LIBT)",
    kzvradmenableevent="[Kernel Security] DVSYS.DBMS_MACADM.ENABLE_EVENT(KZV$ADM_LIBT)",
    kzvradmenableoradebug="[Kernel Security] DVSYS.DBMS_MACADM.ENABLE_ORADEBUG(KZV$ADM_LIBT)",
    kzvradmfactoradmincb="[Kernel Security] DVSYS.DBMS_MACADM.FACTOR_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmfactorlinkadmincb="[Kernel Security] DVSYS.DBMS_MACADM.FACTOR_LINK_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmfactortypeadmincb="[Kernel Security] DVSYS.DBMS_MACADM.FACTOR_TYPE_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmgrantdvauth="[Kernel Security] DVSYS.DBMS_MACADM.AUTHORIZE_DV_AUTH(KZV$ADM_LIBT)",
    kzvradmidentityadmincb="[Kernel Security] DVSYS.DBMS_MACADM.IDENTITY_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmidentitymapadmincb="[Kernel Security] DVSYS.DBMS_MACADM.IDENTITY_MAP_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmmacpolicyadmincb="[Kernel Security] DVSYS.DBMS_MACADM.MAC_POLICY_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmpolicyfactoradmincb="[Kernel Security] DVSYS.DBMS_MACADM.POLICY_FACTOR_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmpolicylabeladmincb="[Kernel Security] DVSYS.DBMS_MACADM.POLICY_LABEL_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmrenamepolicy="[Kernel Security] DVSYS.DBMS_MACADM.RENAME_POLICY(KZV$ADM_LIBT)",
    kzvradmrenamerealm="[Kernel Security] DVSYS.DBMS_MACADM.RENAME_REALM(KZV$ADM_LIBT)",
    kzvradmrevokedvauth="[Kernel Security] DVSYS.DBMS_MACADM.REVOKE_DV_AUTH(KZV$ADM_LIBT)",
    kzvradmsanitycheck="[Kernel Security] DVSYS.CONFIGURE_DV_INTERNAL.DV_SANITY_CHECK(DVSYS.KZV$ADM_LIBT)/DVSYS.DBMS_MACADM.DV_SANITY_CHECK(KZV$ADM_LIBT)",
    kzvradmsecapproleadmincb="[Kernel Security] DVSYS.DBMS_MACADM.SECAPP_ROLE_ADMIN_CB(KZV$ADM_LIBT)",
    kzvradmsyncmetadata="[Kernel Security] DVSYS.CONFIGURE_DV_INTERNAL.CONFIG_PART1(DVSYS.KZV$ADM_LIBT)",
    kzvradmupdatecommrule="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_COMMAND_RULE(KZV$ADM_LIBT)",
    kzvradmupdatepolicydescr="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_POLICY_DESCRIPTION(KZV$ADM_LIBT)",
    kzvradmupdatepolicystate="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_POLICY_STATE(KZV$ADM_LIBT)",
    kzvradmupdaterealm="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_REALM(KZV$ADM_LIBT)",
    kzvradmupdaterealmauth="[Kernel Security] DVSYS.DBMS_MACADM.UPDATE_REALM_AUTH(KZV$ADM_LIBT)",
    kzvsec0="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR0_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec1="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR1_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec2="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR2_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec3="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR3_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec4="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR4_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec5="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR5_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsec6="[Kernel Security] DVSYS.DBMS_MACUTL.RAISE_ERROR6_EXT(DVSYS.KZV$UTL_LIBT)",
    kzvsetconfigmode="[Kernel Security] DVSYS.CONFIGURE_DV_INTERNAL.CONFIG_PART2(DVSYS.KZV$ADM_LIBT)",
    kzvsetctxdv="[Kernel Security] DVSYS.DBMS_MACOLS.CLEAN_DV_SESSION(DVSYS.KZV$UTL_LIBT)",
    kzvstreamsadmincheck0="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_STREAMS_ADMIN(DVSYS.KZV$UTL_LIBT)",
    kzvu_objprivcheck0="[Kernel Security] DVSYS.DBMS_MACUTL.USER_HAS_OBJECT_PRIVILEGE(DVSYS.KZV$UTL_LIBT)",
    kzvuobjprivcheck0="[Kernel Security] DVSYS.DBMS_MACUTL.USER_HAS_OBJECT_PRIVILEGE(DVSYS.KZV$UTL_LIBT)",
    kzvuserhasrole0="[Kernel Security] DVSYS.DBMS_MACUTL.USER_HAS_ROLE(DVSYS.KZV$UTL_LIBT)",
    kzvwrfpl="[Kernel Security] DVSYS.DBMS_MACOUT.KZVTRACEL(DVSYS.KZV$UTL_LIBT)",
    kzvwrfst="[Kernel Security] DVSYS.DBMS_MACOUT.KZVTRACEON(DVSYS.KZV$UTL_LIBT)",
    kzvxstreamadmincheck0="[Kernel Security] DVSYS.DBMS_MACUTL.CHECK_XSTREAM_ADMIN(DVSYS.KZV$UTL_LIBT)",
    kzx="[Kernel Security] XS Fusion Security",
    kzxa="[Kernel Security] XS Fusion Security XS ACL",
    kzxaud_tc_admin_audit="[Kernel Security] SYS.XS_ADMIN_INT.ADMIN_AUDIT_INTERNAL(DBMS_RXS_LIB)",
    kzxaudtcadminaudit="[Kernel Security] SYS.XS_ADMIN_INT.ADMIN_AUDIT_INTERNAL(DBMS_RXS_LIB)",
    kzxc="[Kernel Security] XS Fusion Security XS Security Class",
    kzxc_tc_delsecclass="[Kernel Security] SYS.DBMS_XS_SECCLASS_INT_FFI.DELETE_SEC_CLASS(DBMS_XSC_LIB)",
    kzxcgetleafprivilegesarray="[Kernel Security] SYS.DBMS_XS_SECCLASS_INT_FFI.GET_LEAF_PRIVILEGES(DBMS_XSC_LIB)",
    kzxctcdelsecclass="[Kernel Security] SYS.DBMS_XS_SECCLASS_INT_FFI.DELETE_SEC_CLASS(DBMS_XSC_LIB)",
    kzxd="[Kernel Security] XS Fusion Security XS Data Security",
    kzxerr="[Kernel Security] SYS.XS_ADMIN_UTIL.RAISE_ERROR(DBMS_RXS_LIB)",
    kzxh_delete_midtier_cache="[Kernel Security] SYS.XS_MTCACHE_INT.MIDTIER_CACHE_DELETE(DBMS_RXS_LIB)",
    kzxh_delete_seccls="[Kernel Security] SYS.DBMS_XS_MTCACHE_FFI.SECCLS_DELETE(DBMS_XSH_LIB)",
    kzxh_set_retention_time="[Kernel Security] SYS.XS_MTCACHE_INT.SET_RETENTION_TIME(DBMS_RXS_LIB)",
    kzxh_update_midtier_cache="[Kernel Security] SYS.XS_MTCACHE_INT.MIDTIER_CACHE_UPDATE(DBMS_RXS_LIB)",
    kzxh_update_seccls="[Kernel Security] SYS.DBMS_XS_MTCACHE_FFI.SECCLS_UPDATE(DBMS_XSH_LIB)",
    kzxhdeletemidtiercache="[Kernel Security] SYS.XS_MTCACHE_INT.MIDTIER_CACHE_DELETE(DBMS_RXS_LIB)",
    kzxhdeleteseccls="[Kernel Security] SYS.DBMS_XS_MTCACHE_FFI.SECCLS_DELETE(DBMS_XSH_LIB)",
    kzxhsetretentiontime="[Kernel Security] SYS.XS_MTCACHE_INT.SET_RETENTION_TIME(DBMS_RXS_LIB)",
    kzxhupdatemidtiercache="[Kernel Security] SYS.XS_MTCACHE_INT.MIDTIER_CACHE_UPDATE(DBMS_RXS_LIB)",
    kzxhupdateseccls="[Kernel Security] SYS.DBMS_XS_MTCACHE_FFI.SECCLS_UPDATE(DBMS_XSH_LIB)",
    kzxi="[Kernel Security] XS Fusion Security XS Administrative operation",
    kzxm="[Kernel Security] XS Fusion Security XS Administrative operation",
    kzxm_check_permission="[Kernel Security] SYS.XS_ADMIN_INT.CHECK_PERMISSION(DBMS_RXS_LIB)",
    kzxm_create_dependency="[Kernel Security] SYS.XS_ADMIN_INT.CREATE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxm_create_entity="[Kernel Security] SYS.XS_ADMIN_INT.CREATE_ENTITY(DBMS_RXS_LIB)",
    kzxm_delete_dependency="[Kernel Security] SYS.XS_ADMIN_INT.DELETE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxm_delete_entity="[Kernel Security] SYS.XS_ADMIN_INT.DELETE_ENTITY(DBMS_RXS_LIB)",
    kzxm_get_entity_id="[Kernel Security] SYS.XS_ADMIN_INT.GET_ENTITY_ID(DBMS_RXS_LIB)",
    kzxm_invalidate_entity="[Kernel Security] SYS.XS_ADMIN_INT.INVALIDATE_ENTITY(DBMS_RXS_LIB)",
    kzxm_validate_entity_name="[Kernel Security] SYS.XS_ADMIN_INT.VALIDATE_ENTITY_NAME(DBMS_RXS_LIB)",
    kzxmcheckpermission="[Kernel Security] SYS.XS_ADMIN_INT.CHECK_PERMISSION(DBMS_RXS_LIB)",
    kzxmcreatedependency="[Kernel Security] SYS.XS_ADMIN_INT.CREATE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxmcreateentity="[Kernel Security] SYS.XS_ADMIN_INT.CREATE_ENTITY(DBMS_RXS_LIB)",
    kzxmdeletedependency="[Kernel Security] SYS.XS_ADMIN_INT.DELETE_DEPENDENCY(DBMS_RXS_LIB)",
    kzxmdeleteentity="[Kernel Security] SYS.XS_ADMIN_INT.DELETE_ENTITY(DBMS_RXS_LIB)",
    kzxmgetentityid="[Kernel Security] SYS.XS_ADMIN_INT.GET_ENTITY_ID(DBMS_RXS_LIB)",
    kzxminvalidateentity="[Kernel Security] SYS.XS_ADMIN_INT.INVALIDATE_ENTITY(DBMS_RXS_LIB)",
    kzxmvalidateentityname="[Kernel Security] SYS.XS_ADMIN_INT.VALIDATE_ENTITY_NAME(DBMS_RXS_LIB)",
    kzxnt="[Kernel Security] XS Fusion Security XS Namespace template",
    kzxp_tc_blockprncchanges="[Kernel Security] SYS.DBMS_XS_SYSTEM_FFI.BLOCK_PRINCIPAL_CHANGES(DBMS_XSP_LIB)",
    kzxp_tc_checkxscallb="[Kernel Security] SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSCALLBACK(DBMS_XSP_LIB)",
    kzxp_tc_checkxsprov="[Kernel Security] SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSPROVISION(DBMS_XSP_LIB)",
    kzxp_tc_setxsaclresultsize="[Kernel Security] SYS.DBMS_XS_SYSTEM_FFI.SET_XS_ACL_RESULT_SIZE(DBMS_XSP_LIB)",
    kzxptcblockprncchanges="[Kernel Security] SYS.DBMS_XS_SYSTEM_FFI.BLOCK_PRINCIPAL_CHANGES(DBMS_XSP_LIB)",
    kzxptccheckxscallb="[Kernel Security] SYS.DBMS_XS_SYSTEM_FFI.CHECK_XSCALLBACK(DBMS_XSP_LIB)",
    kzxptccheckxscallback="[Kernel Security] XS Fusion Security DBMS_XS_SYSTEM_FFI.CHECK_XSCALLBACK",
    kzxptccheckxsprov="[Kernel Security] XS Fusion Security DBMS_XS_SYSTEM_FFI.CHECK_XSPROVISION",
    kzxptcsetxsaclresultsize="[Kernel Security] XS Fusion Security DBMS_XS_SYSTEM_FFI.SET_XS_ACL_RESULT_SIZE",
    kzxs="[Kernel Security] XS Fusion Security XS Session",
    kzxs_tc_abortattachsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ABORTATTACH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_addglobalcallback="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ADD_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxs_tc_assignuser="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ASSIGN_USER(DBMS_XSS_LIB)",
    kzxs_tc_attachsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ATTACH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_checkrole="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CHECK_ROLE(DBMS_XSS_LIB)",
    kzxs_tc_checksession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CHECK_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_createattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CREATE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_createnamespace="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CREATE_NAMESPACE(DBMS_XSS_LIB)",
    kzxs_tc_createsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CREATE_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_deleteattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DELETE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_deletenamespace="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DELETE_NAMESPACE(DBMS_XSS_LIB)",
    kzxs_tc_delglobalcallback="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DELETE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxs_tc_destroysession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DESTROY_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_detachsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DETACH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_disablerole="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DISABLE_ROLE(DBMS_XSS_LIB)",
    kzxs_tc_enablerole="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ENABLE_ROLE(DBMS_XSS_LIB)",
    kzxs_tc_getattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.GET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_getcookie="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.GET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxs_tc_getsidforcookie="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.GET_SESSIONID_FROM_COOKIE(DBMS_XSS_LIB)",
    kzxs_tc_reauthenticatesession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.REAUTH_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_resetattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.RESET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_savesession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SAVE_SESSION(DBMS_XSS_LIB)",
    kzxs_tc_set_default_ws="[Kernel Security] SYS.XS_ADMIN_UTIL.SET_DEFAULT_WORKSPACE_UGA(DBMS_XSS_LIB)",
    kzxs_tc_setattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxs_tc_setcookie="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxs_tc_setinactivetimeout="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_INACTIVITY_TIMEOUT(DBMS_XSS_LIB)",
    kzxs_tc_setnamespaceacl="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_ACL(DBMS_XSS_LIB)",
    kzxs_tc_setnamespacehandler="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_HANDLER(DBMS_XSS_LIB)",
    kzxs_tc_switchuser="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SWITCH_USER(DBMS_XSS_LIB)",
    kzxs_tc_updglobalcallback="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ENABLE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxsidp_tc_dodhexchange="[Kernel Security] SYS.DBMS_XS_SIDP.DODHEXCHANGE(DBMS_RXS_LIB)",
    kzxsidp_tc_fixdhkeysize="[Kernel Security] SYS.DBMS_XS_SIDP.FIXDHKEYSIZE(DBMS_RXS_LIB)",
    kzxsidptcdodhexchange="[Kernel Security] SYS.DBMS_XS_SIDP.DODHEXCHANGE(DBMS_RXS_LIB)",
    kzxsidptcfixdhkeysize="[Kernel Security] SYS.DBMS_XS_SIDP.FIXDHKEYSIZE(DBMS_RXS_LIB)",
    kzxsp="[Kernel Security] XS Fusion Security XS Session XS Security Class",
    kzxstcabortattachsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ABORTATTACH_SESSION(DBMS_XSS_LIB)",
    kzxstcaddglobalcallback="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ADD_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxstcassignuser="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ASSIGN_USER",
    kzxstcattachsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ATTACH_SESSION(DBMS_XSS_LIB)",
    kzxstccheckrole="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CHECK_ROLE(DBMS_XSS_LIB)",
    kzxstcchecksession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CHECK_SESSION(DBMS_XSS_LIB)",
    kzxstccreateattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CREATE_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxstccreatenamespace="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CREATE_NAMESPACE(DBMS_XSS_LIB)",
    kzxstccreatesession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.CREATE_SESSION(DBMS_XSS_LIB)",
    kzxstcdeleteattribute="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DELETE_ATTRIBUTE",
    kzxstcdeletenamespace="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.DELETE_NAMESPACE",
    kzxstcdelglobalcallback="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DELETE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxstcdestroysession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DESTROY_SESSION(DBMS_XSS_LIB)",
    kzxstcdetachsession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DETACH_SESSION(DBMS_XSS_LIB)",
    kzxstcdisablerole="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.DISABLE_ROLE(DBMS_XSS_LIB)",
    kzxstcenablerole="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.ENABLE_ROLE",
    kzxstcgetattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.GET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxstcgetcookie="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.GET_SESSION_COOKIE(DBMS_XSS_LIB)",
    kzxstcgetsidforcookie="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.GET_SESSIONID_FROM_COOKIE(DBMS_XSS_LIB)",
    kzxstcreauthenticatesession="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.REAUTH_SESSION(DBMS_XSS_LIB)",
    kzxstcresetattribute="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.RESET_ATTRIBUTE(DBMS_XSS_LIB)",
    kzxstcsavesession="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SAVE_SESSION",
    kzxstcsetattribute="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SET_ATTRIBUTE",
    kzxstcsetcookie="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SET_SESSION_COOKIE",
    kzxstcsetdefaultws="[Kernel Security] SYS.XS_ADMIN_UTIL.SET_DEFAULT_WORKSPACE_UGA(DBMS_XSS_LIB)",
    kzxstcsetinactivetimeout="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SET_INACTIVITY_TIMEOUT",
    kzxstcsetnamespaceacl="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_ACL(DBMS_XSS_LIB)",
    kzxstcsetnamespacehandler="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.SET_NAMESPACE_HANDLER(DBMS_XSS_LIB)",
    kzxstcswitchuser="[Kernel Security] XS Fusion Security XS Session DBMS_XS_SESSIONS_FFI.SWITCH_USER",
    kzxstcupdglobalcallback="[Kernel Security] SYS.DBMS_XS_SESSIONS_FFI.ENABLE_GLOBAL_CALLBACK(DBMS_XSS_LIB)",
    kzxu_add_proxy_to_schema="[Kernel Security] SYS.XS_PRINCIPAL_INT.ADD_PROXY_TO_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxu_check_exists_principal="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_EXISTS_PRINCIPAL(DBMS_XSU_LIB)",
    kzxu_check_security_create="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE(DBMS_XSU_LIB)",
    kzxu_check_security_create_rs="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE_RS(DBMS_XSU_LIB)",
    kzxu_check_security_delete="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE(DBMS_XSU_LIB)",
    kzxu_check_security_delete_rs="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE_RS(DBMS_XSU_LIB)",
    kzxu_check_security_update="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE(DBMS_XSU_LIB)",
    kzxu_check_security_update_rs="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE_RS(DBMS_XSU_LIB)",
    kzxu_generate_uid="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UID(DBMS_XSU_LIB)",
    kzxu_generate_uuid="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UUID(DBMS_XSU_LIB)",
    kzxu_invalidate_principal="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_PRINCIPAL(DBMS_XSU_LIB)",
    kzxu_invalidate_rolesets="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_ROLESETS(DBMS_XSU_LIB)",
    kzxu_remove_proxy_from_schema="[Kernel Security] SYS.XS_PRINCIPAL_INT.RM_PROXY_FROM_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_password="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_PASSWORD_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_profile="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_PROFILE_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_user_status="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_USER_STATUS_INTERNAL(DBMS_RXS_LIB)",
    kzxu_set_verifier="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_VERIFIER_INTERNAL(DBMS_RXS_LIB)",
    kzxuaddproxytoschema="[Kernel Security] SYS.XS_PRINCIPAL_INT.ADD_PROXY_TO_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxucheckexistsprincipal="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_EXISTS_PRINCIPAL(DBMS_XSU_LIB)",
    kzxuchecksecuritycreate="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE(DBMS_XSU_LIB)",
    kzxuchecksecuritycreaters="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_CREATE_RS(DBMS_XSU_LIB)",
    kzxuchecksecuritydelete="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE(DBMS_XSU_LIB)",
    kzxuchecksecuritydeleters="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_DELETE_RS(DBMS_XSU_LIB)",
    kzxuchecksecurityupdate="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE(DBMS_XSU_LIB)",
    kzxuchecksecurityupdaters="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.CHECK_SECURITY_UPDATE_RS(DBMS_XSU_LIB)",
    kzxugenerateuid="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UID(DBMS_XSU_LIB)",
    kzxugenerateuuid="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.GENERATE_UUID(DBMS_XSU_LIB)",
    kzxuinvalidateprincipal="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_PRINCIPAL(DBMS_XSU_LIB)",
    kzxuinvalidaterolesets="[Kernel Security] SYS.DBMS_XS_PRINCIPALS_INT.INVALIDATE_ROLESETS(DBMS_XSU_LIB)",
    kzxuremoveproxyfromschema="[Kernel Security] SYS.XS_PRINCIPAL_INT.RM_PROXY_FROM_SCHEMA_INTERNAL(DBMS_RXS_LIB)",
    kzxusetpassword="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_PASSWORD_INTERNAL(DBMS_RXS_LIB)",
    kzxusetprofile="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_PROFILE_INTERNAL(DBMS_RXS_LIB)",
    kzxusetuserstatus="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_USER_STATUS_INTERNAL(DBMS_RXS_LIB)",
    kzxusetverifier="[Kernel Security] SYS.XS_PRINCIPAL_INT.SET_VERIFIER_INTERNAL(DBMS_RXS_LIB)",
    kzxutcaddproxytoschema="[Kernel Security] XS Fusion Security XS_PRINCIPAL_INT.ADD_PROXY_TO_SCHEMA_INTERNAL",
    kzxutcremoveproxyfromschema="[Kernel Security] XS Fusion Security XS_PRINCIPAL_INT.RM_PROXY_FROM_SCHEMA_INTERNAL",
    kzxutcsetpassword="[Kernel Security] XS Fusion Security XS_PRINCIPAL_INT.SET_PASSWORD_INTERNAL",
    kzxutcsetprofile="[Kernel Security] XS Fusion Security XS_PRINCIPAL_INT.SET_PROFILE_INTERNAL",
    kzxutcsetuserstatus="[Kernel Security] XS Fusion Security XS_PRINCIPAL_INT.SET_USER_STATUS_INTERNAL",
    kzxutcsetverifier="[Kernel Security] XS Fusion Security XS_PRINCIPAL_INT.SET_VERIFIER_INTERNAL",
    kzxutil_validate_db_user="[Kernel Security] SYS.XS_ADMIN_UTIL.VALIDATE_DB_USER(DBMS_RXS_LIB)",
    kzxutil_validate_object_name="[Kernel Security] SYS.XS_ADMIN_UTIL.VALIDATE_DB_OBJECT_NAME(DBMS_RXS_LIB)",
    kzxutilcreatetemptable="[Kernel Security] SYS.XS_DIAG_INT.CREATE_TEMP_TABLE(DBMS_RXS_LIB)",
    kzxutildroptemptable="[Kernel Security] SYS.XS_DIAG_INT.DROP_TEMP_TABLE(DBMS_RXS_LIB)",
    kzxutilerr="[Kernel Security] XS Fusion Security XS_ADMIN_UTIL.RAISE_ERROR (?)",
    kzxutilvalidatedbuser="[Kernel Security] SYS.XS_ADMIN_UTIL.VALIDATE_DB_USER(DBMS_RXS_LIB)",
    kzxutilvalidateobjectname="[Kernel Security] SYS.XS_ADMIN_UTIL.VALIDATE_DB_OBJECT_NAME(DBMS_RXS_LIB)",
    kzxutilvalidaterule="[Kernel Security] SYS.XS_DIAG_INT.VALIDATE_RULES(DBMS_RXS_LIB)",
    last="SYS.PLITBLM.last(c)",
    ldi="date/time conversion",
    libc_start_main="(non oracle)libc support for starting the main function",
    limit="SYS.PLITBLM.limit(c)/SYS.SODA_OPERATION_T.LIMIT(DBMS_SODAOPR_LIB)",
    lis="PLSQL_KG_Interface",
    lm="low level math functions",
    lmtdcrel="low level math functions compare two double-precision float-point numbers",
    lnx="LnxLib - Math",
    lnxn2copt="converts an oracle number to a character string with option for padding",
    lnxn2coptg="converts an oracle number to a character string with option for padding with nls global",
    lnxqchk="private number check function",
    lobupdate="CTXSYS.TEXTINDEXMETHODS.ODCIIndexUtilCleanup(dr$lib)/CTXSYS.TEXTINDEXMETHODS.ODCIGetInterfaces(dr$lib)",
    lpx="xml parser",
    lpxfsm="xml parser FSM parser",
    lpxfsmsaxse="xml parser FSM parser ??",
    lpxmemfree="xml parser ??",
    ltid_icd="SYS.DBMS_TRANSACTION.LTID_ICD(C)",
    ltidicd="SYS.DBMS_TRANSACTION.LTID_ICD(C)",
    ltx="XDB",
    lxm="native language support",
    main="(non oracle)general c starting function",
    make_table_not_referenceable="SYS.DBMS_DDL.MAKE_TABLE_NOT_REFERENCEABLE(C)",
    make_table_referenceable="SYS.DBMS_DDL.MAKE_TABLE_REFERENCEABLE(C)",
    makeelement="XDB.DBMS_XMLDOM_ICD.MAKEELEMENT(C)",
    maketablenotreferenceable="SYS.DBMS_DDL.MAKE_TABLE_NOT_REFERENCEABLE(C)",
    maketablereferenceable="SYS.DBMS_DDL.MAKE_TABLE_REFERENCEABLE(C)",
    mapdocs="CTXSYS.DRVPARX.INDEXMAPDOCUMENTS2(DR$LIB)",
    md="[Spatial] ",
    md_idx_alter="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXALTER(ORDMD_IDX_LIBS)",
    md_idx_check_tts="[Spatial] MDSYS.MDPRVT_IDX.CHECK_TTS(ORDMD_IDX_LIBS)",
    md_idx_close="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIGetInterfaces(ORDMD_IDX_LIBS)",
    md_idx_cmt_txn="[Spatial] MDSYS.PRVT_IDX.CMT_IDX_CHNGS(ORDMD_IDX_LIBS)",
    md_idx_create="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXCREATE(ORDMD_IDX_LIBS)",
    md_idx_endcvrt="[Spatial] MDSYS.PRVT_IDX.CONVERT_ENDIAN(ORDMD_IDX_LIBS)/MDSYS.SDO_IDX.ENDIANCONVERT(ORDMD_IDX_LIBS)",
    md_idx_exchange_table_ptn="[Spatial] MDSYS.MDPRVT_IDX.EXCHANGE_TABLE_PTN(ORDMD_IDX_LIBS)",
    md_idx_id="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.INSERT_DELETE(ORDMD_IDX_LIBS)",
    md_idx_idrop="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXDROP(ORDMD_IDX_LIBS)",
    md_idx_nndistance="[Spatial] MDSYS.PRVT_IDX.NNDISTANCE(ORDMD_IDX_LIBS)",
    md_idx_prc_prms="[Spatial] MDSYS.SDO_IDX.PROCESS_PARAMS(ORDMD_IDX_LIBS)",
    md_idx_ptn_drp="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.EXECUTE_INDEX_PTN_DROP(ORDMD_IDX_LIBS)",
    md_idx_rewrite="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXREWRITE(ORDMD_IDX_LIBS)",
    md_idx_start="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_2p="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_2ptp="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_2ptpelem="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_qr="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_start_tp="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    md_idx_truncate="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXTRUNCATE(ORDMD_IDX_LIBS)",
    md_idx_upd="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDATE(ORDMD_IDX_LIBS)",
    md_idx_upd_part_meta="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDPARTMETADATA(ORDMD_IDX_LIBS)",
    md_lrs_clean_geom="[Spatial] MDSYS.MD_LRS.CLEAN_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    md_lrs_clip_seg="[Spatial] MDSYS.MD_LRS.CLIP_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_con_type="[Spatial] MDSYS.MD_LRS.CONNECTION_TYPE_FUN(ORDMD_LRS_LIBS)",
    md_lrs_concat_seg="[Spatial] MDSYS.MD_LRS.CONCATENATE_GEOM_SEGMENTS_FUN(ORDMD_LRS_LIBS)",
    md_lrs_define_seg="[Spatial] MDSYS.MD_LRS.DEFINE_GEOM_SEGMENT_PROC(ORDMD_LRS_LIBS)",
    md_lrs_is_defined="[Spatial] MDSYS.MD_LRS.IS_DEFINED_FUN(ORDMD_LRS_LIBS)",
    md_lrs_length_3d="[Spatial] MDSYS.MD_LRS.LRS_GEOM_LENGTH_3D(ORDMD_LRS_LIBS)",
    md_lrs_locate_pt="[Spatial] MDSYS.MD_LRS.LOCATE_PT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_offset_seg="[Spatial] MDSYS.MD_LRS.OFFSET_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_project_pt="[Spatial] MDSYS.MD_LRS.PROJECT_PT_FUN(ORDMD_LRS_LIBS)",
    md_lrs_reverse_geom="[Spatial] MDSYS.MD_LRS.REVERSE_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    md_rtree_alter="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXALTER(ORDMD_RTREE_LIBS)",
    md_rtree_close="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCLOSE(ORDMD_RTREE_LIBS)",
    md_rtree_create="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCREATE(ORDMD_RTREE_LIBS)",
    md_rtree_delete="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDELETE(ORDMD_RTREE_LIBS)",
    md_rtree_fetch="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXFETCH(ORDMD_RTREE_LIBS)",
    md_rtree_filter="[Spatial] MDSYS.SDO_RTREE_ADMIN.FILTER(ORDMD_RTREE_LIBS)",
    md_rtree_idrop="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDROP(ORDMD_RTREE_LIBS)",
    md_rtree_insert="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXINSERT(ORDMD_RTREE_LIBS)",
    md_rtree_start="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXSTART(ORDMD_RTREE_LIBS)",
    md_rtree_truncate="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXTRUNCATE(ORDMD_RTREE_LIBS)",
    md_trace="[Spatial] MDSYS.MDPRVT_IDX.MD_TRACE(ORDMD_IDX_LIBS)",
    md_udt="[Spatial] MDSYS.SDO_3GL.REGISTER_UDT(ORDMD_UDT_LIBS)",
    mdalphashape="[Spatial] MDSYS.SDO_3GL.ALPHA_SHAPE_INT(ORDMD_MBR_LIBS)",
    mdbpts="[Spatial] MDSYS.SDO_3GL.BEARING(ORDMD_UTL_LIBS)",
    mdbt_batch_insert="[Spatial] MDSYS.SEM_INDEXTYPE_IM.BT_BATCH_INSERT(ORDMD_SEM_LIBS)",
    mdbt_create="[Spatial] MDSYS.SEM_INDEXTYPE_IM.ODCIGetInterfaces(ORDMD_SEM_LIBS)",
    mdbt_destroy="[Spatial] MDSYS.SDO_SEM_OPERATOR.BT_DESTROY(ORDMD_SEM_LIBS)/MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY(ORDMD_SEM_LIBS)",
    mdbt_destroy_s="[Spatial] MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY_S(ORDMD_SEM_LIBS)",
    mdbt_search="[Spatial] MDSYS.SDO_SEM_OPERATOR.BT_SEARCH(ORDMD_SEM_LIBS)",
    mdbtbatchinsert="[Spatial] MDSYS.SEM_INDEXTYPE_IM.BT_BATCH_INSERT(ORDMD_SEM_LIBS)",
    mdbtcreate="[Spatial] MDSYS.SEM_INDEXTYPE_IM.ODCIGetInterfaces(ORDMD_SEM_LIBS)",
    mdbtdestroy="[Spatial] MDSYS.SDO_SEM_OPERATOR.BT_DESTROY(ORDMD_SEM_LIBS)/MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY(ORDMD_SEM_LIBS)",
    mdbtdestroys="[Spatial] MDSYS.SEM_INDEXTYPE_IM.BT_DESTROY_S(ORDMD_SEM_LIBS)",
    mdbtsearch="[Spatial] MDSYS.SDO_SEM_OPERATOR.BT_SEARCH(ORDMD_SEM_LIBS)",
    mdcentroid="[Spatial] MDSYS.SDO_3GL.CENTROID(ORDMD_MBR_LIBS)",
    mdconcavehull="[Spatial] MDSYS.SDO_3GL.CONCAVEHULL(ORDMD_MBR_LIBS)",
    mdconcavehull_b="[Spatial] MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconcavehulla="[Spatial] MDSYS.SDO_3GL.CONCAVEHULL(ORDMD_MBR_LIBS)",
    mdconcavehulla_b="[Spatial] MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconcavehullab="[Spatial] MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconcavehullb="[Spatial] MDSYS.SDO_3GL.CONCAVEHULL_B(ORDMD_MBR_LIBS)",
    mdconvexhull="[Spatial] MDSYS.SDO_3GL.CONVEXHULL(ORDMD_MBR_LIBS)",
    mdcross180="[Spatial] MDSYS.SDO_UTIL.CROSS_180(ORDMD_MBR_LIBS)",
    mdcsdistance="[Spatial] MDSYS.SDO_3GL.DISTANCE(ORDMD_MBR_LIBS)",
    mdcsinvalidate="[Spatial] MDSYS.SDO_CS.SDO_CS_CONTEXT_INVALIDATE(ORDMD_CS_LIBS)",
    mdcslenarea="[Spatial] MDSYS.SDO_3GL.LENGTH_AREA(ORDMD_MBR_LIBS)",
    mdcspcadist="[Spatial] MDSYS.SDO_3GL.CLOSEST_POINTS(ORDMD_MBR_LIBS)",
    mdcstrid="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG(ORDMD_CS_LIBS)",
    mdcstrid2="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG_USING_RULES(ORDMD_CS_LIBS)",
    mdcstrid2_allow_arcs="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG_USING_RULES_WA(ORDMD_CS_LIBS)",
    mdcstrid2allowarcs="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG_USING_RULES_WA(ORDMD_CS_LIBS)",
    mdcstrid_allow_arcs="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG_WITH_ARCS(ORDMD_CS_LIBS)",
    mdcstridallowarcs="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG_WITH_ARCS(ORDMD_CS_LIBS)",
    mdcstrlyr="[Spatial] MDSYS.SDO_CS.TRANSFORM_LAYER_ACROSS_DIMS2(ORDMD_CS_LIBS)",
    mdcstrlyr2="[Spatial] MDSYS.SDO_CS.TFM_LAYER_ACROSS_DIMS_INTL(ORDMD_CS_LIBS)",
    mdcstrlyr_allow_arcs="[Spatial] MDSYS.SDO_CS.TRANSFORM_LAYER_ACROSS_DIMS2WA(ORDMD_CS_LIBS)",
    mdcstrlyrallowarcs="[Spatial] MDSYS.SDO_CS.TRANSFORM_LAYER_ACROSS_DIMS2WA(ORDMD_CS_LIBS)",
    mdcstrnm="[Spatial] MDSYS.SDO_CS.TRANSFORM_ORIG2(ORDMD_CS_LIBS)",
    mdcsvwkt="[Spatial] MDSYS.SDO_CS.INTL_VALIDATE_WKT(ORDMD_CS_LIBS)",
    mddconvert="[Spatial] MDSYS.SDO_UTIL.CONVERT_DISTANCE(ORDMD_UTL_LIBS)",
    mddiameter="[Spatial] MDSYS.SDO_3GL.DIAMETER(ORDMD_MBR_LIBS)",
    mddistance="[Spatial] MDSYS.SDO_3GL.DISTANCE(ORDMD_MBR_LIBS)",
    mdextract="[Spatial] MDSYS.SDO_UTIL.EXTRACT_INT(ORDMD_UTL_LIBS)",
    mdextractall="[Spatial] MDSYS.SDO_UTIL.EXTRACT_ALL_INT(ORDMD_UTL_LIBS)",
    mdextractvoids="[Spatial] MDSYS.SDO_UTIL.OCIEXTRACTVOIDS(ORDMD_UTL_LIBS)",
    mdfixselfintx="[Spatial] MDSYS.SDO_UTIL.OCIFIXSELFINTX(ORDMD_UTL_LIBS)",
    mdfromjsonc="[Spatial] MDSYS.SDO_UTIL.FROM_JSON(ORDMD_UTL_LIBS)",
    mdg3dconv="[Spatial] MDSYS.SDO_3GL.G3DCONV(ORDMD_MBR_LIBS)",
    mdgdaloci_dem="[Spatial] MDSYS.SDO_GEOR_GDAL.DEM_INT(SDO_GEOR_GDAL_LIB)",
    mdgdaloci_info="[Spatial] MDSYS.SDO_GEOR_GDAL.INFO_INT(SDO_GEOR_GDAL_LIB)",
    mdgdaloci_translate="[Spatial] MDSYS.SDO_GEOR_GDAL.TRANSLATE_INT(SDO_GEOR_GDAL_LIB)",
    mdgdalocidem="[Spatial] MDSYS.SDO_GEOR_GDAL.DEM_INT(SDO_GEOR_GDAL_LIB)",
    mdgdalociinfo="[Spatial] MDSYS.SDO_GEOR_GDAL.INFO_INT(SDO_GEOR_GDAL_LIB)",
    mdgdalocitranslate="[Spatial] MDSYS.SDO_GEOR_GDAL.TRANSLATE_INT(SDO_GEOR_GDAL_LIB)",
    mdgeomop="[Spatial] MDSYS.SDO_3GL.GEOM_OPERATION_INT(ORDMD_REL_LIBS)",
    mdgetnumelem="[Spatial] MDSYS.SDO_UTIL.OCIGETNUMELEM(ORDMD_UTL_LIBS)",
    mdgmdgetgeomdiminfo="[Spatial] MDSYS.MDPRVT_GMD.GET_GEOM_DIMINFO_INT(ORDMD_GMD_LIBS)",
    mdgmdgetgeommetadata="[Spatial] MDSYS.MDPRVT_GMD.GET_GEOM_METADATA_INT(ORDMD_GMD_LIBS)",
    mdgmdinvalidategeommetadata="[Spatial] MDSYS.MDPRVT_GMD.INVALIDATE_GEOM_INT(ORDMD_GMD_LIBS)",
    mdgnomonic="[Spatial] MDSYS.SDO_UTIL.INT_TOGNOMONIC(ORDMD_UTL_LIBS)",
    mdgr="[Spatial] spatial georaster",
    mdgrcacheocifetchsysdata="[Spatial] MDSYS.SDO_GEOR_INT.SDO_FETCH_SYSDATA(ORDMD_GEOR_LIBS)",
    mdgrcacheocifetchsysdataowner="[Spatial] MDSYS.SDO_GEOR_INT.SDO_FETCH_SYSDATA_OWNER_INT(ORDMD_GEOR_LIBS)",
    mdgrcacheociinvalidatesysdata="[Spatial] MDSYS.SDO_GEOR_INT.SDO_INVALIDATE_SYSDATA_CACHE(ORDMD_GEOR_LIBS)",
    mdhybridtiles="[Spatial] MDSYS.SDO_UTIL.INTERNAL_HYBRID_TILES(ORDMD_UTL_LIBS)",
    mdibytl="[Spatial] MDSYS.MD.MDIBYTL(C)",
    mdicbit="[Spatial] MDSYS.MD.MDICBIT(C)",
    mdicdf0="[Spatial] MDSYS.MD2.MDICDF0(C)",
    mdicdf1="[Spatial] MDSYS.MD2.MDICDF1(C)",
    mdicdf2="[Spatial] MDSYS.MD2.MDICDF2(C)",
    mdicdsz="[Spatial] MDSYS.MD2.MDICDSZ(C)",
    mdicell="[Spatial] MDSYS.MD.MDICELL(C)",
    mdickrf="[Spatial] MDSYS.MD.MDICKRF(C)",
    mdiclsz="[Spatial] MDSYS.MD.MDICLSZ(C)",
    mdicmcd="[Spatial] MDSYS.MD.MDICMCD(C)",
    mdicmpr="[Spatial] MDSYS.MD.MDICMPR(C)",
    mdicolp="[Spatial] MDSYS.MD.MDICOLP(C)",
    mdicomp="[Spatial] MDSYS.MD.MDICOMP(C)",
    mdidecd="[Spatial] MDSYS.MD.MDIDECD(C)",
    mdidist="[Spatial] MDSYS.MD.MDIDIST(C)",
    mdidxalter="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXALTER(ORDMD_IDX_LIBS)",
    mdidxchecktts="[Spatial] MDSYS.MDPRVT_IDX.CHECK_TTS(ORDMD_IDX_LIBS)",
    mdidxclose="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIGetInterfaces(ORDMD_IDX_LIBS)",
    mdidxcmttxn="[Spatial] MDSYS.PRVT_IDX.CMT_IDX_CHNGS(ORDMD_IDX_LIBS)",
    mdidxcreate="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXCREATE(ORDMD_IDX_LIBS)",
    mdidxendcvrt="[Spatial] MDSYS.PRVT_IDX.CONVERT_ENDIAN(ORDMD_IDX_LIBS)/MDSYS.SDO_IDX.ENDIANCONVERT(ORDMD_IDX_LIBS)",
    mdidxexchangetableptn="[Spatial] MDSYS.MDPRVT_IDX.EXCHANGE_TABLE_PTN(ORDMD_IDX_LIBS)",
    mdidxgetidxmetadata="[Spatial] MDSYS.MDPRVT_IDX.GET_INDEX_METADATA_INT(ORDMD_IDX_LIBS)",
    mdidxid="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.INSERT_DELETE(ORDMD_IDX_LIBS)",
    mdidxidrop="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXDROP(ORDMD_IDX_LIBS)",
    mdidxinvalidatecache="[Spatial] MDSYS.MDPRVT_IDX.INVALIDATE_CACHE_INT(ORDMD_IDX_LIBS)",
    mdidxnndistance="[Spatial] MDSYS.PRVT_IDX.NNDISTANCE(ORDMD_IDX_LIBS)",
    mdidxprcprms="[Spatial] MDSYS.SDO_IDX.PROCESS_PARAMS(ORDMD_IDX_LIBS)",
    mdidxptndrp="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.EXECUTE_INDEX_PTN_DROP(ORDMD_IDX_LIBS)",
    mdidxrewrite="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXREWRITE(ORDMD_IDX_LIBS)",
    mdidxstart="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstart2p="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstart2ptp="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstart2ptpelem="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstartqr="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxstarttp="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXSTART(ORDMD_IDX_LIBS)",
    mdidxtruncate="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXTRUNCATE(ORDMD_IDX_LIBS)",
    mdidxupd="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDATE(ORDMD_IDX_LIBS)",
    mdidxupdpartmeta="[Spatial] MDSYS.SDO_INDEX_METHOD_10I.ODCIINDEXUPDPARTMETADATA(ORDMD_IDX_LIBS)",
    mdiencd1="[Spatial] MDSYS.MD.MDIENCD1(C)",
    mdiencd2="[Spatial] MDSYS.MD.MDIENCD2(C)",
    mdifbv2dim="[Spatial] MDSYS.MD1.MDIFBV2DIM(C)",
    mdifcompare="[Spatial] MDSYS.MD1.MDIFCOMPARE(C)",
    mdifdat2dim="[Spatial] MDSYS.MD1.MDIFDAT2DIM(C)",
    mdifdecode="[Spatial] MDSYS.MD1.MDIFDECODE(C)",
    mdifdim2bv="[Spatial] MDSYS.MD1.MDIFDIM2BV(C)",
    mdifdim2date="[Spatial] MDSYS.MD1.MDIFDIM2DATE(C)",
    mdifdim2hv="[Spatial] MDSYS.MD1.MDIFDIM2HV(C)",
    mdifdim2lat="[Spatial] MDSYS.MD1.MDIFDIM2LAT(C)",
    mdifdim2lon="[Spatial] MDSYS.MD1.MDIFDIM2LON(C)",
    mdifencode="[Spatial] MDSYS.MD1.MDIFENCODE(C)",
    mdifhv2dim="[Spatial] MDSYS.MD1.MDIFHV2DIM(C)",
    mdifll2dim="[Spatial] MDSYS.MD1.MDIFLL2DIM(C)",
    mdigbit="[Spatial] MDSYS.MD.MDIGBIT(C)",
    mdigcid="[Spatial] MDSYS.MD.MDIGCID(C)",
    mdiglnln="[Spatial] MDSYS.MD2.MDIGLNLN(C)",
    mdigndm="[Spatial] MDSYS.MD.MDIGNDM(C)",
    mdigtid="[Spatial] MDSYS.MD.MDIGTID(C)",
    mdigtpb="[Spatial] MDSYS.MD.MDIGTPB(C)",
    mdihand="[Spatial] MDSYS.MD.MDIHAND(C)",
    mdihhor="[Spatial] MDSYS.MD.MDIHHOR(C)",
    mdihlen1="[Spatial] MDSYS.MD.MDIHLEN1(C)",
    mdihlen2="[Spatial] MDSYS.MD.MDIHLEN2(C)",
    mdihtob="[Spatial] MDSYS.MD.MDIHTOB(C)",
    mdihxor="[Spatial] MDSYS.MD.MDIHXOR(C)",
    mdiidlp="[Spatial] MDSYS.MD.MDIIDLP(C)",
    mdiidlr="[Spatial] MDSYS.MD.MDIIDLR(C)",
    mdiidpp="[Spatial] MDSYS.MD.MDIIDPP(C)",
    mdiidpr="[Spatial] MDSYS.MD.MDIIDPR(C)",
    mdiincl="[Spatial] MDSYS.MD.MDIINCL(C)",
    mdiint="[Spatial] MDSYS.MD2.MDIINT(C)",
    mdiintf="[Spatial] MDSYS.MD2.MDIINTF(C)",
    mdijtos="[Spatial] MDSYS.MD.MDIJTOS(C)",
    mdiltoe="[Spatial] MDSYS.MD.MDILTOE(C)",
    mdimbrll="[Spatial] MDSYS.MD.MDIMBRLL(C)",
    mdimbrur="[Spatial] MDSYS.MD.MDIMBRUR(C)",
    mdimtch="[Spatial] MDSYS.MD.MDIMTCH(C)",
    mdimxcd="[Spatial] MDSYS.MD.MDIMXCD(C)",
    mdincmp="[Spatial] MDSYS.MD.MDINCMP(C)",
    mdinsert_sdo_geom_md="[Spatial] MDSYS.SDO_UTIL.INSERT_SDO_GEOM_METADATA(ORDMD_UTL_LIBS)",
    mdinsertsdogeommd="[Spatial] MDSYS.SDO_UTIL.INSERT_SDO_GEOM_METADATA(ORDMD_UTL_LIBS)",
    mdinslogfilter="[Spatial] MDSYS.SDO_3GL.INSERT_LOG_FILTER(ORDMD_MBR_LIBS)",
    mdiorby="[Spatial] MDSYS.MD.MDIORBY(C)",
    mdipct0="[Spatial] MDSYS.MD2.MDIPCT0(C)",
    mdiptoe="[Spatial] MDSYS.MD.MDIPTOE(C)",
    mdirelf="[Spatial] MDSYS.MD2.MDIRELF(C)",
    mdirmde="[Spatial] MDSYS.MD.MDIRMDE(C)",
    mdirncd="[Spatial] MDSYS.MD.MDIRNCD(C)",
    mdirndm="[Spatial] MDSYS.MD.MDIRNDM(C)",
    mdisbdv="[Spatial] MDSYS.MD.MDISBDV(C)",
    mdisbit="[Spatial] MDSYS.MD.MDISBIT(C)",
    mdisbst="[Spatial] MDSYS.MD.MDISBST(C)",
    mdisc="[Spatial] MDSYS.MD.MDISC(C)",
    mdiscid="[Spatial] MDSYS.MD.MDISCID(C)",
    mdistid="[Spatial] MDSYS.MD.MDISTID(C)",
    mdistoj="[Spatial] MDSYS.MD.MDISTOJ(C)",
    mdistpb="[Spatial] MDSYS.MD.MDISTPB(C)",
    mditess="[Spatial] MDSYS.MD2.MDITESS(C)",
    mdivg="[Spatial] MDSYS.MD2.MDIVG(C)",
    mdjnlocicacheinvalidate="[Spatial] MDSYS.SDO_UTIL.INVALIDATE_GTT_CACHE(ORDMD_UTL_LIBS)",
    mdleak="[Spatial] MDSYS.SDO_3GL.MEMORY_LEAK(ORDMD_REL_LIBS)",
    mdlenarea="[Spatial] MDSYS.SDO_3GL.LENGTH_AREA(ORDMD_MBR_LIBS)",
    mdlrscleangeom="[Spatial] MDSYS.MD_LRS.CLEAN_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    mdlrsclipseg="[Spatial] MDSYS.MD_LRS.CLIP_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    mdlrsconcatseg="[Spatial] MDSYS.MD_LRS.CONCATENATE_GEOM_SEGMENTS_FUN(ORDMD_LRS_LIBS)",
    mdlrscontype="[Spatial] MDSYS.MD_LRS.CONNECTION_TYPE_FUN(ORDMD_LRS_LIBS)",
    mdlrsdefineseg="[Spatial] MDSYS.MD_LRS.DEFINE_GEOM_SEGMENT_PROC(ORDMD_LRS_LIBS)",
    mdlrsisdefined="[Spatial] MDSYS.MD_LRS.IS_DEFINED_FUN(ORDMD_LRS_LIBS)",
    mdlrslength3d="[Spatial] MDSYS.MD_LRS.LRS_GEOM_LENGTH_3D(ORDMD_LRS_LIBS)",
    mdlrslocatept="[Spatial] MDSYS.MD_LRS.LOCATE_PT_FUN(ORDMD_LRS_LIBS)",
    mdlrsoffsetseg="[Spatial] MDSYS.MD_LRS.OFFSET_GEOM_SEGMENT_FUN(ORDMD_LRS_LIBS)",
    mdlrsprojectpt="[Spatial] MDSYS.MD_LRS.PROJECT_PT_FUN(ORDMD_LRS_LIBS)",
    mdlrsreversegeom="[Spatial] MDSYS.MD_LRS.REVERSE_GEOMETRY_FUN(ORDMD_LRS_LIBS)",
    mdmaxdistance="[Spatial] MDSYS.SDO_3GL.MAXDISTANCE(ORDMD_MBR_LIBS)",
    mdmbb="[Spatial] MDSYS.SDO_3GL.MBB_RAW(ORDMD_MBR_LIBS)",
    mdmbr="[Spatial] MDSYS.SDO_3GL.EXTENT_OF_OBJECT(ORDMD_MBR_LIBS)",
    mdmbrgeom="[Spatial] MDSYS.SDO_3GL.MBR_GEOMETRY(ORDMD_MBR_LIBS)",
    mdmem_check_memleak="[Spatial] MDSYS.SDO_MEMORY.CHECK_MEMORY_LEAK(ORDMD_MEM_LIBS)",
    mdmem_end_memory_check="[Spatial] MDSYS.SDO_MEMORY.END_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmem_start_memory_check="[Spatial] MDSYS.SDO_MEMORY.START_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmemcheckmemleak="[Spatial] MDSYS.SDO_MEMORY.CHECK_MEMORY_LEAK(ORDMD_MEM_LIBS)",
    mdmemendmemorycheck="[Spatial] MDSYS.SDO_MEMORY.END_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmemstartmemorycheck="[Spatial] MDSYS.SDO_MEMORY.START_MEMORY_CHECK(ORDMD_MEM_LIBS)",
    mdmig="[Spatial] MDSYS.SDO_MIGRATE.MDMIG(ORDMD_MIG_LIBS)",
    mdmige="[Spatial] MDSYS.SDO_MIGRATE.MDMIGE(ORDMD_MIG_LIBS)",
    mdminbndcircle="[Spatial] MDSYS.SDO_3GL.MINBNDCIRCLE(ORDMD_MBR_LIBS)",
    mdns="[Spatial] multicast dns",
    mdnurbsapprox="[Spatial] MDSYS.SDO_UTIL.OCINURBSAPPROX(ORDMD_UTL_LIBS)",
    mdouterln="[Spatial] MDSYS.SDO_UTIL.OCIOUTERLN(ORDMD_UTL_LIBS)",
    mdpbd="[Spatial] MDSYS.SDO_UTIL.POINT_AT_BEARING_INTERNAL(ORDMD_UTL_LIBS)",
    mdpcclp="[Spatial] MDSYS.PRVT_PC.CLIP_PC_INTL(ORDMD_TNPC_LIBS)",
    mdpccrt="[Spatial] MDSYS.PRVT_PC.OCI_CREATE_PC(ORDMD_TNPC_LIBS)",
    mdpchilbert="[Spatial] MDSYS.SDO_PC_PKG.GET_HILBERT(ORDMD_TNPC_LIBS)",
    mdpchilberts="[Spatial] MDSYS.SDO_PC_PKG.GET_HILBERT(ORDMD_TNPC_LIBS)",
    mdpcp32bi="[Spatial] MDSYS.SDO_PC_PKG.PARSE_32BIT_INTS(ORDMD_TNPC_LIBS)",
    mdpcp64bd="[Spatial] MDSYS.SDO_PC_PKG.PARSE_64BIT_DOUBLES(ORDMD_TNPC_LIBS)",
    mdpcptid="[Spatial] MDSYS.PRVT_PC.GET_PT_IDS_INTL(ORDMD_TNPC_LIBS)",
    mdpctogm="[Spatial] MDSYS.PRVT_PC.TO_GEOMETRY_INTL(ORDMD_TNPC_LIBS)",
    mdpntonsurface="[Spatial] MDSYS.SDO_3GL.POINTONSURFACE(ORDMD_MBR_LIBS)",
    mdprcluster="[Spatial] MDSYS.SDO_PRIDX.MDPRCLUSTER(ORDMD_PRIDX_LIBS)",
    mdprtessellate="[Spatial] MDSYS.SDO_PRIDX.MDPRTESSELLATE(ORDMD_PRIDX_LIBS)",
    mdprtxfergm="[Spatial] MDSYS.SDO_PRIDX.MDPRTXFERGM(ORDMD_PRIDX_LIBS)",
    mdptn_table="[Spatial] MDSYS.SDO_UTIL.PARTITION_TABLE(ORDMD_RTREE_LIBS)",
    mdptntable="[Spatial] MDSYS.SDO_UTIL.PARTITION_TABLE(ORDMD_RTREE_LIBS)",
    mdquadtiles="[Spatial] MDSYS.SDO_UTIL.INTERNAL_QUAD_TILES(ORDMD_UTL_LIBS)",
    mdr="[Spatial] spatial indexing",
    mdrcnccom="[Spatial] spatial indexing ??",
    mdrefinemgon="[Spatial] MDSYS.SDO_UTIL.OCIREFINEMGON(ORDMD_UTL_LIBS)",
    mdrelate="[Spatial] MDSYS.SDO_3GL.RELATE(ORDMD_REL_LIBS)",
    mdrelate_func="[Spatial] MDSYS.SDO_3GL.RELATE(ORDMD_REL_LIBS)",
    mdrelatefunc="[Spatial] MDSYS.SDO_3GL.RELATE(ORDMD_REL_LIBS)",
    mdrelproc="[Spatial] MDSYS.SDO_3GL.RELATE_PROCESS(ORDMD_REL_LIBS)",
    mdremdups="[Spatial] MDSYS.SDO_UTIL.REMOVE_DUPLICATES(ORDMD_UTL_LIBS)",
    mdrtreealter="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXALTER(ORDMD_RTREE_LIBS)",
    mdrtreeclose="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCLOSE(ORDMD_RTREE_LIBS)",
    mdrtreecreate="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXCREATE(ORDMD_RTREE_LIBS)",
    mdrtreedelete="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDELETE(ORDMD_RTREE_LIBS)",
    mdrtreefetch="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXFETCH(ORDMD_RTREE_LIBS)",
    mdrtreefilter="[Spatial] MDSYS.SDO_RTREE_ADMIN.FILTER(ORDMD_RTREE_LIBS)",
    mdrtreeidrop="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXDROP(ORDMD_RTREE_LIBS)",
    mdrtreeinsert="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXINSERT(ORDMD_RTREE_LIBS)",
    mdrtreestart="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXSTART(ORDMD_RTREE_LIBS)",
    mdrtreetruncate="[Spatial] MDSYS.RTREE_INDEX_METHOD.ODCIINDEXTRUNCATE(ORDMD_RTREE_LIBS)",
    mdsamiratio="[Spatial] MDSYS.SDO_SAM.INTERSECTION_RATIO(ORDMD_SAM_LIBS)",
    mdsimpgeom="[Spatial] MDSYS.SDO_UTIL.OCISIMPGEOM(ORDMD_UTL_LIBS)",
    mdsridocigetcrsdims="[Spatial] MDSYS.MDPRVT_SRID.GET_DIMS(ORDMD_SRID_LIBS)",
    mdsridocigetcrsrefkind="[Spatial] MDSYS.MDPRVT_SRID.GET_REF_KIND(ORDMD_SRID_LIBS)",
    mdsridocigetsridtolerance="[Spatial] MDSYS.MDPRVT_SRID.GET_TOLERANCE(ORDMD_SRID_LIBS)",
    mdsridocigetsridunit="[Spatial] MDSYS.MDPRVT_SRID.GET_UNIT_INT(ORDMD_SRID_LIBS)",
    mdsridociinvalidatesrid="[Spatial] MDSYS.MDPRVT_SRID.SDO_INVALIDATE_SRID_INT(ORDMD_SRID_LIBS)",
    mdsridociissridgeodetic="[Spatial] MDSYS.MDPRVT_SRID.IS_GEODETIC_INT(ORDMD_SRID_LIBS)",
    mdstats_coll="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSCOLLECT(ORDMD_EXOP_LIBS)",
    mdstats_del="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSDELETE(ORDMD_EXOP_LIBS)",
    mdstats_func="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSFUNCTIONCOST(ORDMD_EXOP_LIBS)",
    mdstats_idxc="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSINDEXCOST(ORDMD_EXOP_LIBS)",
    mdstats_selv="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSSELECTIVITY(ORDMD_EXOP_LIBS)",
    mdstatscoll="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSCOLLECT(ORDMD_EXOP_LIBS)",
    mdstatsdel="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSDELETE(ORDMD_EXOP_LIBS)",
    mdstatsfunc="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSFUNCTIONCOST(ORDMD_EXOP_LIBS)",
    mdstatsidxc="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSINDEXCOST(ORDMD_EXOP_LIBS)",
    mdstatsselv="[Spatial] MDSYS.SDO_STATISTICS.ODCISTATSSELECTIVITY(ORDMD_EXOP_LIBS)",
    mdtnclp="[Spatial] MDSYS.PRVT_TIN.CLIP_TIN_INTL(ORDMD_TNPC_LIBS)",
    mdtncrt="[Spatial] MDSYS.PRVT_TIN.OCI_CREATE_TIN(ORDMD_TNPC_LIBS)",
    mdtndeleteseqmetadata="[Spatial] MDSYS.SDO_GEOR_DEF.DELETETINSEQMETAENTRY(ORDMD_GEOR_LIBS)",
    mdtndeletetinmetadata="[Spatial] MDSYS.SDO_GEOR_DEF.DELETETINPCMETAENTRY(ORDMD_GEOR_LIBS)",
    mdtntogm="[Spatial] MDSYS.PRVT_TIN.TO_GEOMETRY_INTL(ORDMD_TNPC_LIBS)",
    mdtojsonc="[Spatial] MDSYS.SDO_UTIL.TO_JSON_INT(ORDMD_UTL_LIBS)",
    mdtojsonv="[Spatial] MDSYS.SDO_UTIL.TO_JSON_VARCHAR_INT(ORDMD_UTL_LIBS)",
    mdtowktgeomc="[Spatial] MDSYS.SDO_UTIL.TO_WKBGEOMETRY_INT(ORDMD_UTL_LIBS)/MDSYS.SDO_UTIL.TO_WKTGEOMETRY_INT(ORDMD_UTL_LIBS)",
    mdtowktgeoms="[Spatial] MDSYS.SDO_UTIL.TO_WKTGEOMETRY_VARCHAR_INT(ORDMD_UTL_LIBS)",
    mdtrace="[Spatial] MDSYS.MDPRVT_IDX.MD_TRACE(ORDMD_IDX_LIBS)",
    mdtriangulate="[Spatial] MDSYS.SDO_3GL.TRIANGULATE(ORDMD_MBR_LIBS)",
    mdudt="[Spatial] MDSYS.SDO_3GL.REGISTER_UDT(ORDMD_UDT_LIBS)",
    mdusageociinvalidatefeature="[Spatial] MDSYS.MDPRVT_FEATURE.SDO_INVALIDATE_FEATURE(ORDMD_FEATURE_LIBS)",
    mdusageociregisterfeature="[Spatial] MDSYS.MDPRVT_FEATURE.SDO_REGISTER_FEATURE(ORDMD_FEATURE_LIBS)",
    mdutl_get_cpu_count="[Spatial] MDSYS.SDO_3GL.MDUTL_GET_CPU_COUNT(ORDMD_UTL_LIBS)",
    mdutl_get_event="[Spatial] MDSYS.SDO_3GL.GET_EVENT(ORDMD_UTL_LIBS)",
    mdutl_get_max_id="[Spatial] MDSYS.MD_NET.GET_MAX_ID(ORDMD_UTL_LIBS)",
    mdutl_is_int_rename="[Spatial] MDSYS.SDO_UTIL.IS_INTERNAL_RENAME(ORDMD_UTL_LIBS)",
    mdutl_is_numeric="[Spatial] MDSYS.SDO_UTIL.MDUTL_IS_NUMERIC(ORDMD_UTL_LIBS)",
    mdutl_is_spatial_enabled="[Spatial] MDSYS.SDO_UTIL.IS_INTERNAL_SPATIAL_ENABLED(ORDMD_UTL_LIBS)",
    mdutl_reset_event="[Spatial] MDSYS.SDO_3GL.RESET_EVENT(ORDMD_UTL_LIBS)",
    mdutl_set_event="[Spatial] MDSYS.SDO_3GL.SET_EVENT(ORDMD_UTL_LIBS)",
    mdutlgetcpucount="[Spatial] MDSYS.SDO_3GL.MDUTL_GET_CPU_COUNT(ORDMD_UTL_LIBS)",
    mdutlgetevent="[Spatial] MDSYS.SDO_3GL.GET_EVENT(ORDMD_UTL_LIBS)",
    mdutlgetmaxid="[Spatial] MDSYS.MD_NET.GET_MAX_ID(ORDMD_UTL_LIBS)",
    mdutlisintrename="[Spatial] MDSYS.SDO_UTIL.IS_INTERNAL_RENAME(ORDMD_UTL_LIBS)",
    mdutlisnumeric="[Spatial] MDSYS.SDO_UTIL.MDUTL_IS_NUMERIC(ORDMD_UTL_LIBS)",
    mdutlisspatialenabled="[Spatial] MDSYS.SDO_UTIL.IS_INTERNAL_SPATIAL_ENABLED(ORDMD_UTL_LIBS)",
    mdutlresetevent="[Spatial] MDSYS.SDO_3GL.RESET_EVENT(ORDMD_UTL_LIBS)",
    mdutlsetevent="[Spatial] MDSYS.SDO_3GL.SET_EVENT(ORDMD_UTL_LIBS)",
    mdvalgeom="[Spatial] MDSYS.SDO_3GL.VALIDATE_GEOM(ORDMD_REL_LIBS)",
    mdvalgeom_wc="[Spatial] MDSYS.SDO_3GL.VALIDATE_GEOM_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdvalgeomwc="[Spatial] MDSYS.SDO_3GL.VALIDATE_GEOM_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdvallayer_wc="[Spatial] MDSYS.SDO_3GL.VALIDATE_LAYER_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdvallayerwc="[Spatial] MDSYS.SDO_3GL.VALIDATE_LAYER_WITH_CONTEXT(ORDMD_REL_LIBS)",
    mdwdarcdensify="[Spatial] MDSYS.SDO_3GL.ARC_DENSIFY(ORDMD_WD_LIBS)",
    mdwdbuf="[Spatial] MDSYS.SDO_3GL.GENERATE_BUFFER_C(ORDMD_WD_LIBS)",
    mdwdist="[Spatial] MDSYS.SDO_3GL.WITHIN_DISTANCE(ORDMD_WD_LIBS)",
    mdwdist_func="[Spatial] MDSYS.SDO_3GL.WITHIN_DISTANCE(ORDMD_WD_LIBS)",
    mdwdistfunc="[Spatial] MDSYS.SDO_3GL.WITHIN_DISTANCE(ORDMD_WD_LIBS)",
    mdwidth="[Spatial] MDSYS.SDO_3GL.WIDTH(ORDMD_MBR_LIBS)",
    mem="[MEMory component] ",
    mergelayers="MDSYS.SDO_GEOR_INT.MERGELAYERS(ORDMD_GEOR_LIBS)",
    mergepatchpls="SYS.JDOM_T.mergepatch(DBMS_JDOM_LIB)",
    mergepatchstr="SYS.JDOM_T.mergepatch(DBMS_JDOM_LIB)",
    message="CTXSYS.DRUE.GETMSG(DR$LIB)",
    migrate80to81="SYS.MIGRATE_80SYSIMAGES_TO_81.migrate_80sysimages_to_81(UTL_OBJECTS_LIB)",
    migrate_80_to_81="SYS.MIGRATE_80SYSIMAGES_TO_81.migrate_80sysimages_to_81(UTL_OBJECTS_LIB)",
    msq="generating sql statements",
    msqcol="generating sql statements append column name",
    msqimb="[Make SQl Implementation B] ",
    msqrxq="generating sql statements make sql for remote execution",
    n="network",
    na="network authentication",
    name="Description",
    nau_ctl="network authentication aUthentication ConTroL",
    nazslon="network authentication Zecurity Log ON",
    nb="network buffer",
    nbi="network buffer incoming",
    nbicreate="network buffer incoming create buffer",
    nbiread="network buffer incoming read",
    nbireadline="network buffer incoming read a line",
    nbireadlinemb="network buffer incoming read a line multiple buffers(?)",
    nbireadlinesb="network buffer incoming read a line single buffer(?)",
    nbo="network buffer outgoing",
    nbocreate="network buffer outgoing create buffer",
    nboflush="network buffer outgoing flush buffer",
    nbowrite="network buffer outgoing write (to socket?)",
    nco="network network connection",
    ncodef="[Network COnnection component's ncoDEF interfaces] ",
    ncodfa="network network connection definition allocation, allocate a new ncodef",
    ncrorou="network receive OUT arguments for specified procedure",
    ncroxrend="network xfr record end",
    ncrsrend="network end record",
    ncrsrwrt="network Record WRiTe output buffer",
    new="network ??",
    next="SYS.PLITBLM.next(c)/SYS.SODA_CURSOR_T.NEXT(DBMS_SODACUR_LIB)",
    ngine="network ??",
    nhp="network http",
    nhpdestroyconnection="network http remove connection",
    nhpendconnection="network http end connection",
    nhpgetconnection="network http start connection",
    nhpnewconnection="network http create new connection",
    nhpreadline="network http read a line",
    nhpreadresponse="network http read response",
    nhpreqbegin="network http begin request",
    nhprespend="network http end response",
    nhprespget="network http get response",
    nhprespget0="network http get response 0 (?)",
    nhpreturnconnection="network http return connection",
    nhpsendrequest="network http send request",
    nhpsockavail="network http is socket available",
    nhpsockrecv="network http receive via network socket",
    nhpsocksend="network http send via network socket",
    nhpstartrequest="network http start request",
    ni="network interface",
    nimpl="network ??",
    nio="network interface [OS Dependent Network]ing",
    nioqer="network interface [OS Dependent Network]ing error",
    nioqrc="network interface [OS Dependent Network]ing receive",
    nioqsn="network interface [OS Dependent Network]ing send",
    nioqwa="network interface [OS Dependent Network]ing wait",
    nl="network library",
    nldatxt="network library put current date/time into string",
    nn="network names",
    normalize_and_convert_icd="SYS.DBMS_STATS.NORMALIZE_AND_CONVERT_ICD(C)",
    normalizeandconverticd="SYS.DBMS_STATS.NORMALIZE_AND_CONVERT_ICD(C)",
    npi="[Network Program Interface (two task, MTS)] ",
    npiall="[Network Program Interface (two task, MTS)] use bundled execution",
    npiane="[Network Program Interface (two task, MTS)] add new nco entry",
    npibeg="[Network Program Interface (two task, MTS)] maybe begin a distributed transaction branch, release local DX",
    npicom="[Network Program Interface (two task, MTS)] old style commit",
    npicon="[Network Program Interface (two task, MTS)] connect; connect and log on to an external database",
    npidri="[Network Program Interface (two task, MTS)] driver common",
    npidsa="[Network Program Interface (two task, MTS)] disconnect all",
    npidsc="[Network Program Interface (two task, MTS)] DiSConnect connection",
    npierr="[Network Program Interface (two task, MTS)] check for errors requiring ksesec, also reacquire DX lock",
    npil="[Kernel NPI Lob functions] ",
    npisnl="[Network Program Interface (two task, MTS)] set network link",
    npitcc="[Network Program Interface (two task, MTS)] Test/Clear connections",
    npixfr="[Network Program Interface (two task, MTS)] transfer",
    ns="network session",
    nsb="network session block(?)",
    nsbasic="network session block(?) basic",
    nsbasic_brc="network session block(?) basic block receive",
    nsbasic_bsd="network session block(?) basic block send",
    nsbrecv="network session block(?) receive",
    nsbsend="network session block(?) send",
    nscon="network session connect",
    nsdo="network session execute network session operation. NS protocol engine",
    nsevdansw="network session event deferred: complete deferred nsanswer operation",
    nsevrec="network session record: record event occurence",
    nsevwait="network session wait: wait for event notification on all registered connections",
    nsmal="network session memory allocate",
    nsntwrn="network session ??",
    nso="network session nest optimisation (sql transformation)",
    nsoqbc="network session nest optimisation (sql transformation) on query block",
    nsotruns="network session nest optimisation (sql transformation) traverse and unnest subquery",
    nsprecv="network session receive packet from network transport layer",
    nspsend="network session ??",
    nsrdr="network session packet reader",
    nstimexp="network session expire function. invoked by LTM with these specific arguments",
    nt="network transport",
    ntevque="network transport event vector query",
    ntm="network transport mailbox",
    ntp="network transport ipc",
    ntpfp="network transport ipc ?",
    ntpfprd="network transport ipc ? read",
    ntpfpwr="network transport ipc ? write",
    ntprd="network transport ipc read",
    ntt="network transport tcp/ip",
    ntt2err="network transport tcp/ip error procedure",
    nttctl="network transport tcp/ip control",
    nttfp="network transport tcp/ip ?",
    nttfprd="network transport tcp/ip ? read",
    nttfpwr="network transport tcp/ip ? write",
    nttrd="network transport tcp/ip basic read",
    nttwr="network transport tcp/ip ??",
    ntus="network transport unix domain sockets",
    ntz="network transport SSL",
    nu="network trace route utility",
    nz="network security",
    oba="operator buffer allocation",
    oci="oracle call interface",
    ociepacm="oracle call interface ??",
    ociextp="oracle call interface PLSQL External proc",
    ocilobcreatetemporary="DBMS_LOB.KKXL_CREATETEMPORARY",
    ocilobfilecloseall="DBMS_LOB.KKXL_FILECLOSEALL",
    ocilobfileexists="DBMS_LOB.KKXL_FILEEXISTS",
    ocilobfilegetname="DBMS_LOB.KKXL_FILEGETNAME",
    ocilobfileisopen="DBMS_LOB.KKXL_FILEISOPEN",
    ocilobfreetemporary="DBMS_LOB.KKXL_FREETEMPORARY",
    ocilobgetchunksize="DBMS_LOB.KKXL_GETCHUNKSIZE",
    ocilobgetlength="DBMS_LOB.KKXL_GETLENGTH",
    ocilobgetoptions="DBMS_LOB.KKXL_GETOPTIONS",
    ocilobisopen="DBMS_LOB.KKXL_ISOPEN",
    ocilobistemporary="DBMS_LOB.KKXL_ISTEMPORARY",
    ocilobloadfromfile="DBMS_LOB.KKXL_LOADFROMFILE",
    ocilobsetoptions="DBMS_LOB.KKXL_SETOPTIONS",
    ocistmtexecute="execute",
    ocistmtfetch="fetch",
    odcitabledescribe="SYS.ORA_FI_RIMP_T.ODCITableDescribe(ora_fi_lib)",
    odcitablefetch="SYS.HIVEMETADATA.ODCITABLESTART(DBMSHADOOPLIB)",
    odm="oracle disk manager",
    odm_io="oracle disk manager IO",
    ofs="oracle filesystem (ACFS)?",
    oid2int_name="XDB.DBMS_XMLSCHEMA_INT.XDB$OID2INTNAME(XMLSCHEMA_LIB)",
    oid2intname="XDB.DBMS_XMLSCHEMA_INT.XDB$OID2INTNAME(XMLSCHEMA_LIB)",
    onerror="SYS.JDOM_T.on_Error(DBMS_JDOM_LIB)",
    oper_spec="SYS.DBMS_EXPORT_EXTENSION.GET_OBJECT_SOURCE(EXTIDX_IMP_LIB)",
    operspec="SYS.DBMS_EXPORT_EXTENSION.GET_OBJECT_SOURCE(EXTIDX_IMP_LIB)",
    opi="[Oracle Program Interface] ",
    opiaba="[Oracle Program Interface] access bind (variable) array?",
    opiabt="[Oracle Program Interface] abort instance",
    opiamr="[Oracle Program Interface] Archival and Media Recovery",
    opibnd="[Oracle Program Interface] bind",
    opibnd0="[Oracle Program Interface] bind 0",
    opibrn="[Oracle Program Interface] bind reference numeric",
    opicca="[Oracle Program Interface] clear context area",
    opiclo="[Oracle Program Interface] close cursor",
    opicom="[Oracle Program Interface] oracle side, commit current transaction",
    opidcl="[Oracle Program Interface] cleanup after the sqlnet connection is terminated",
    opideferredsem="[Oracle Program Interface] perform deferred semantic analysis",
    opidr="[Oracle Program Interface] route current request",
    opidrv="[Oracle Program Interface] route current request driver, entry side into two task interface",
    opidsa="[Oracle Program Interface] array describe locals",
    opiefn="[Oracle Program Interface] execute function (?)",
    opiexe="[Oracle Program Interface] execute",
    opifch="[Oracle Program Interface] oracle side of the fetch interface",
    opifch2="[Oracle Program Interface] oracle side of the fetch interface main routine",
    opifcr="[Oracle Program Interface] fetch callback - fetch a row?",
    opifcs="[Oracle Program Interface] free cursors by session close",
    opigln="[Oracle Program Interface] Get LoNg column",
    opiierr="[Oracle Program Interface] internal error",
    opiino="[Oracle Program Interface] initialize opi",
    opikndf1="[Oracle Program Interface] OPIINO: Kernel route which sits on top of the SQL*Net driver. we asusme that only MTS uses this function right before it detaches the session.",
    opikndf2="[Oracle Program Interface] OPIINO: Kernel route which sits on top of the SQL*Net driver",
    opilof="[Oracle Program Interface] log off",
    opilon="[Oracle Program Interface] log on",
    opimai="[Oracle Program Interface] main",
    opimai_real="[Oracle Program Interface] main real oracle start point",
    opineeddeferredsem="[Oracle Program Interface] is deferred semantic analysis needed (if so (r1), returns from kksParseChildCursor and starts kksFullTypeCheck)",
    opiobv="[Oracle Program Interface] bind a variable",
    opiodr="[Oracle Program Interface] oracle code request driver, route the current request",
    opiomc="[Oracle Program Interface] map cursor",
    opiope="[Oracle Program Interface] open cursor",
    opiopr="[Oracle Program Interface] open cursor",
    opiosq="[Oracle Program Interface] prepare to parse a sql command",
    opiosq0="[Oracle Program Interface] prepare to parse a sql command 0",
    opiparse="[Oracle Program Interface] parse",
    opipbr="[Oracle Program Interface] process bind by reference chain",
    opipls="[Oracle Program Interface] contains opi bundled call executor and support routines",
    opiprs="[Oracle Program Interface] parse",
    opirip="[Oracle Program Interface] run independent process. invoked from special function sou2o direct call in opimai of detached process invocation. initializes fixed-PGA in RAM and SQL layers.",
    opisem="[Oracle Program Interface] semantic analysis driver",
    opistp="[Oracle Program Interface] stop oracle",
    opistr="[Oracle Program Interface] start oracle",
    opitca="[Oracle Program Interface] sets up context area",
    opitsk="[Oracle Program Interface] Two Task Oracle Side Function Dispatcher",
    opiul="[Oracle Program Interface] direct Loader",
    opix="[Oracle Program Interface] transfer command to remote",
    opixrb="[Oracle Program Interface] ??",
    opixrm="[Oracle Program Interface] transfer to remote check remote cursor",
    oprreplaceone="SYS.SODA_OPERATION_T.REPLACE_ONE(DBMS_SODAOPR_LIB)",
    oprreplaceoneandget="SYS.SODA_OPERATION_T.REPLACE_ONE_AND_GET(DBMS_SODAOPR_LIB)",
    ora_max_name_len_supported="SYS.DBMS_STANDARD.ora_max_name_len_supported(C)",
    oramaxnamelensupported="SYS.DBMS_STANDARD.ora_max_name_len_supported(C)",
    orp="oracle external pickler/opaque type interface",
    ort="OBJECTS Types",
    osn="Two Task",
    oss="oracle storage server",
    ossconf="oracle storage server configuration",
    osssec="oracle storage server security",
    owner_migrate_hc="SYS.DBMS_OBJECTS_APPS_UTILS.owner_migrate_update_hashcode(UTL_OBJECTS_LIB)",
    owner_migrate_tdo="SYS.DBMS_OBJECTS_APPS_UTILS.recompile_types(UTL_OBJECTS_LIB)",
    ownermigratehc="SYS.DBMS_OBJECTS_APPS_UTILS.owner_migrate_update_hashcode(UTL_OBJECTS_LIB)",
    ownermigratetdo="SYS.DBMS_OBJECTS_APPS_UTILS.recompile_types(UTL_OBJECTS_LIB)",
    p2c="PLSQL PSD standalones",
    p2icd="PL/SQL compiler",
    par="PLSQL KG interface",
    parse="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    parseblob="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    parseblobfrm="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    parseclob="SYS.JDOM_T.parse(DBMS_JDOM_LIB)",
    patchpls="SYS.JDOM_T.patch(DBMS_JDOM_LIB)",
    patchstr="SYS.JDOM_T.patch(DBMS_JDOM_LIB)",
    path_func1_xdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC1(XDB.RESOURCE_VIEW_LIB)",
    path_func_xdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    path_xdbhi="XDB.XDB_ANCOP.PATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    pathfunc1xdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC1(XDB.RESOURCE_VIEW_LIB)",
    pathfuncxdbhi="XDB.XDB_FUNCIMPL.UNDER_PATH_FUNC(XDB.RESOURCE_VIEW_LIB)",
    pathxdbhi="XDB.XDB_ANCOP.PATH_FUNC_INT(XDB.RESOURCE_VIEW_LIB)",
    pb="PLSQL code execution",
    pbbbl="SYS.PBREAK.PBBBL(C)",
    pbbdb="SYS.PBREAK.PBBDB(C)",
    pbbeb="SYS.PBREAK.PBBEB(C)",
    pbbevent="SYS.PBREAK.PBBEVENT(C)",
    pbbglm="SYS.PBREAK.PBBGLM(C)",
    pbbgln="SYS.PBREAK.PBBGLN(C)",
    pbbgpf="SYS.PBREAK.PBBGPF(C)",
    pbbhs="SYS.PBREAK.PBBHS(C)",
    pbbibacktrace="SYS.PBREAK.PBBIBACKTRACE(C)",
    pbbibreakpoints="SYS.PBREAK.PBBIBREAKPOINTS(C)",
    pbbicdisexe="SYS.PBREAK.PBBICDISEXE(C)",
    pbbicdvck="SYS.PBREAK.PBBICDVCK(C)",
    pbbiget="SYS.PBREAK.PBBIGET(C)",
    pbbigindexes="SYS.PBREAK.PBBIGINDEXES(C)",
    pbbilspkgs="SYS.PBREAK.PBBILSPKGS(C)",
    pbbioer="SYS.PBREAK.PBBIOER(C)",
    pbbiset="SYS.PBREAK.PBBISET(C)",
    pbbopt="SYS.PBREAK.PBBOPT(C)",
    pbbpbs="SYS.PBREAK.PBBPBS(C)",
    pbbpsl="SYS.PBREAK.PBBPSL(C)",
    pbbpslf="SYS.PBREAK.PBBPSLF(C)",
    pbbrb="SYS.PBREAK.PBBRB(C)",
    pbbsd="SYS.PBREAK.PBBSD(C)",
    pbbspf="SYS.PBREAK.PBBSPF(C)",
    pbcov3gsct="PLSQL code execution DBMS_PLSQL_CODE_COVERAGE.PBCOV3GSCT START_COVERAGE",
    pbcov3gstt="PLSQL code execution DBMS_PLSQL_CODE_COVERAGE.PBCOV3GSTT STOP_COVERAGE",
    pbmsg="PLSQL code execution ??",
    pbp3g="PLSQL code execution dbms_profiler",
    pbp3gfpd="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GFPD FLUSH_PROFILER FLUSH_DATA",
    pbp3gkcb="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GKCB GET_VERSION",
    pbp3gpp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GPP PAUSE_PROFILER",
    pbp3grp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GRP RESUME_PROFILER",
    pbp3gsrp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GSRP START_PROFILER",
    pbp3gstp="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GSTP STOP_PROFILER",
    pbp3gvck="PLSQL code execution dbms_profiler DBMS_PROFILER.PBP3GVCK INTERNAL_VERSION_CHECK",
    pbs="PLSQL code execution KNLDE",
    pbt3g="PLSQL code execution dbms_trace",
    pbt3gco="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GCO COMMENT_PLSQL_TRACE",
    pbt3glm="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GLM LIMIT_PLSQL_TRACE",
    pbt3gmt="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GMT SET_OR_CLEAR_TRACE",
    pbt3grn="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GRN GET_PLSQL_TRACE_RUNNUMBER",
    pbt3gtl="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GTL GET_PLSQL_TRACE_LEVEL",
    pbt3gvck="PLSQL code execution dbms_trace DBMS_TRACE.PBT3GVCK INTERNAL_VERSION_CHECK",
    pci="[PL/SQL] ",
    pckl="dbms_pickler",
    pcklfdo="SYS.DBMS_PICKLER.GET_FORMAT_BUFFER(DBMS_PICKLER_LIB)",
    pcklfun="SYS.DBMS_JAVA_TEST.CALL_STATIC_JAVA_METHOD(DBMS_PICKLER_LIB)",
    pckltds="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pckltds2="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pckltds3="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pckltds4="SYS.DBMS_PICKLER.GET_DESCRIPTORS(DBMS_PICKLER_LIB)",
    pcklupd="SYS.DBMS_PICKLER.UPDATE_THRU_REF(DBMS_PICKLER_LIB)",
    pcm="[PL/SQL] ",
    pd="PLSQL code execution",
    pdlifu="PLSQL code execution internal entrypoint for the PL/SQL code generator",
    pdn="PLSQL code execution codegen native",
    pdt="PLSQL code execution IDL; type generator",
    pdtidc="PLSQL code execution IDL; type generator PL/SQL Diana IDL to PL/SQL intermediate code IDL translator",
    pdtimb="PLSQL code execution IDL; type generator PL/SQL intermediate code IDL translator block module",
    pdtist="PLSQL code execution IDL; type generator PL/SQL intermediate code IDL translator statement support",
    pdtitf="PLSQL code execution IDL; type generator interested in finding the base",
    pdw="PLSQL code execution codegen IDL gen",
    pdx="PLSQL code execution codegen optimizer",
    pdy="PLSQL code execution codegen MCode gen",
    pdz="PLSQL code execution codegen infrastructure",
    pe="PLSQL code execution",
    pef="PLSQL code execution external proc",
    peftrusted="PLSQL code execution external proc execute a trusted callout",
    peibp="PLSQL code execution PLSQL KNLDE",
    peicnt="PLSQL code execution PL/SQL Controlled execution",
    pes="PLSQL code execution Shared Object Manager",
    pesacos="SYS.STANDARD.pesacos(c)",
    pesasin="SYS.STANDARD.pesasin(c)",
    pesatn2="SYS.STANDARD.pesatn2(c)",
    pesblt="PLSQL code execution Shared Object Manager built in interpreter",
    pesdbtz="SYS.STANDARD.pesdbtz(c)",
    pesguid="SYS.STANDARD.pesguid(c)",
    pesld="PLSQL code execution Shared Object Manager Native Code Loader",
    pesn2dsi="SYS.STANDARD.pesn2dsi(c)",
    pesn2ymi="SYS.STANDARD.pesn2ymi(c)",
    pessdt="SYS.STANDARD.pessdt(c)",
    pessdx="SYS.STANDARD.pessdx(c)",
    pessts="SYS.STANDARD.pessts(c)",
    pessysctx2="SYS.STANDARD.pessysctx2(c)",
    pessysctx3="SYS.STANDARD.pessysctx3(c)",
    pesuen="SYS.STANDARD.pesuen(c)",
    pesxco="SYS.STANDARD.pesxco(c)",
    pesxcp="SYS.STANDARD.pesxcp(c)",
    pesxlo="SYS.STANDARD.pesxlo(c)",
    pesxlt="SYS.STANDARD.pesxlt(c)",
    pesxup="SYS.STANDARD.pesxup(c)",
    pextproc="PLSQL code execution pefm call external procedure",
    pf="PLSQL Code Execution",
    pfr="PLSQL Code Execution runtime",
    pfrba_bind_array="PLSQL Code Execution runtime bind array",
    pfrci_compute_index="PLSQL Code Execution runtime compute index",
    pfrecl_excp_caught_locally="PLSQL Code Execution runtime exception caught locally",
    pfrexc="PLSQL Code Execution runtime plsql interpreter exception support",
    pfrfeb_format_error_backtrace="PLSQL Code Execution runtime format error backtrace",
    pfrfi_find_index="PLSQL Code Execution runtime find index",
    pfrfoe_flush_oci_error="PLSQL Code Execution runtime flush oci error",
    pfrfxh="PLSQL Code Execution runtime finds an exception handler",
    pfrrbt_record_backtrace="PLSQL Code Execution runtime record backtrace",
    pfrrun="PLSQL Code Execution runtime Interpreter Main Instruction Loop",
    pfrrun_no_tool="PLSQL Code Execution runtime Interpreter Main Instruction Loop fast interpretation loop",
    pfrsi_sort_index="PLSQL Code Execution runtime sort index",
    pfrsim_sort_index_main="PLSQL Code Execution runtime sort index main",
    pfrsqc="PLSQL Code Execution runtime callbacks for array sql and dml with returning",
    pfrstk="PLSQL Code Execution runtime runtime stack frame",
    pfrtcs="PLSQL Code Execution runtime trace call stack(?) calls kgitrc on each kgiob on the stack",
    pgm="PLSQL ILMS",
    ph="[PL/SQL] ",
    ph1="[PL/SQL] syntax",
    ph2="[PL/SQL] semantics phase 2",
    ph2blo="[PL/SQL] semantics phase 2 idl node D_BLOCK, D_DECL",
    ph2exp="[PL/SQL] semantics phase 2 process IDL class EXP",
    ph2ext="[PL/SQL] semantics phase 2 process IDL class EXP - top level",
    ph2gbi="[PL/SQL] semantics phase 2 initialize bind variable type information",
    ph2ima="[PL/SQL] semantics phase 2 images a",
    ph2its="[PL/SQL] semantics phase 2 process items",
    ph2obl="[PL/SQL] semantics phase 2 outermost block, outermost D_BLOCK in a body",
    ph2of1="[PL/SQL] semantics phase 2 D_F_CALL or D_PARM_C",
    ph2qlb="[PL/SQL] semantics phase 2 perform a schema.table lookup",
    ph2qlk="[PL/SQL] semantics phase 2 lookup the set of tables in a from clause in a database",
    ph2qqx="[PL/SQL] semantics phase 2 IDL node Q_EXP",
    ph2qs2="[PL/SQL] semantics phase 2 sql routines",
    ph2qst="[PL/SQL] semantics phase 2 main routine for sql statements, IDL node Q_SQL_ST",
    ph2qtx="[PL/SQL] semantics phase 2 IDL class TAB_EXP",
    ph2sbo="[PL/SQL] semantics phase 2 IDL node D_S_BODY",
    ph2sms="[PL/SQL] semantics phase 2 process statements",
    ph2stm="[PL/SQL] semantics phase 2 statement(?)",
    ph2uni="[PL/SQL] semantics phase 2 IDL class UNIT_BODY",
    pha="[PL/SQL] semantics",
    phdite="[PL/SQL] immediate type (S_OBJ_TY) of expressions",
    phdr="[PL/SQL] KG interface",
    phn="[PL/SQL] semantics",
    pi="PLSQL apps",
    pico="PLSQL apps utl_compress support",
    picomplz="SYS.UTL_COMPRESS.LZ_COMPRESS_I(UTL_CMP_LIB)",
    picompulz="SYS.UTL_COMPRESS.LZ_UNCOMPRESS(UTL_CMP_LIB)",
    picstk_actual_edition="SYS.UTL_CALL_STACK.PICSTK_ACTUAL_EDITION(C)",
    picstk_backtrace_depth="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_DEPTH(C)",
    picstk_backtrace_line="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_LINE(C)",
    picstk_backtrace_unit="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_UNIT(C)",
    picstk_dynamic_depth="SYS.UTL_CALL_STACK.PICSTK_DYNAMIC_DEPTH(C)",
    picstk_error_depth="SYS.UTL_CALL_STACK.PICSTK_ERROR_DEPTH(C)",
    picstk_error_msg="SYS.UTL_CALL_STACK.PICSTK_ERROR_MSG(C)",
    picstk_error_number="SYS.UTL_CALL_STACK.PICSTK_ERROR_NUMBER(C)",
    picstk_lexical_depth="SYS.UTL_CALL_STACK.PICSTK_LEXICAL_DEPTH(C)",
    picstk_owner="SYS.UTL_CALL_STACK.PICSTK_OWNER(C)",
    picstk_subprogram="SYS.UTL_CALL_STACK.PICSTK_SUBPROGRAM(C)",
    picstk_unit_line="SYS.UTL_CALL_STACK.PICSTK_UNIT_LINE(C)",
    picstk_unit_type="SYS.UTL_CALL_STACK.PICSTK_UNIT_TYPE(C)",
    picstkactualedition="SYS.UTL_CALL_STACK.PICSTK_ACTUAL_EDITION(C)",
    picstkbacktracedepth="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_DEPTH(C)",
    picstkbacktraceline="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_LINE(C)",
    picstkbacktraceunit="SYS.UTL_CALL_STACK.PICSTK_BACKTRACE_UNIT(C)",
    picstkdynamicdepth="SYS.UTL_CALL_STACK.PICSTK_DYNAMIC_DEPTH(C)",
    picstkerrordepth="SYS.UTL_CALL_STACK.PICSTK_ERROR_DEPTH(C)",
    picstkerrormsg="SYS.UTL_CALL_STACK.PICSTK_ERROR_MSG(C)",
    picstkerrornumber="SYS.UTL_CALL_STACK.PICSTK_ERROR_NUMBER(C)",
    picstklexicaldepth="SYS.UTL_CALL_STACK.PICSTK_LEXICAL_DEPTH(C)",
    picstkowner="SYS.UTL_CALL_STACK.PICSTK_OWNER(C)",
    picstksubprogram="SYS.UTL_CALL_STACK.PICSTK_SUBPROGRAM(C)",
    picstkunitline="SYS.UTL_CALL_STACK.PICSTK_UNIT_LINE(C)",
    picstkunittype="SYS.UTL_CALL_STACK.PICSTK_UNIT_TYPE(C)",
    pidacn="SYS.PIDL.pidacn(c)",
    pidanm="SYS.PIDL.pidanm(c)",
    pidaty="SYS.PIDL.pidaty(c)",
    pidbty="SYS.PIDL.pidbty(c)",
    pidkin="SYS.PIDL.pidkin(c)",
    pidnnm="SYS.PIDL.pidnnm(c)",
    pidrty="SYS.PIDL.pidrty(c)",
    pien="PLSQL apps utl_encode support",
    pienc264="SYS.UTL_ENCODE.BASE64_ENCODE_I(UTL_ENC_LIB)",
    pienc2m="SYS.UTL_ENCODE.MIMEHEADER_ENCODE_I(UTL_ENC_LIB)",
    pienc2qp="SYS.UTL_ENCODE.QUOTED_PRINTABLE_ENCODE_I(UTL_ENC_LIB)",
    pienc2t="SYS.UTL_ENCODE.TEXT_ENCODE_I(UTL_ENC_LIB)",
    pienc2uu="SYS.UTL_ENCODE.UUENCODE_I(UTL_ENC_LIB)",
    piencf64="SYS.UTL_ENCODE.BASE64_DECODE_I(UTL_ENC_LIB)",
    piencfm="SYS.UTL_ENCODE.MIMEHEADER_DECODE_I(UTL_ENC_LIB)",
    piencfqp="SYS.UTL_ENCODE.QUOTED_PRINTABLE_DECODE_I(UTL_ENC_LIB)",
    piencft="SYS.UTL_ENCODE.TEXT_DECODE_I(UTL_ENC_LIB)",
    piencfuu="SYS.UTL_ENCODE.UUDECODE_I(UTL_ENC_LIB)",
    pifi="PLSQL apps utl_file support",
    pifiat="SYS.UTL_FILE.FGETATTR_I(UTL_FIL_LIB)",
    pifica="SYS.UTL_FILE.FCLOSE_ALL_I(UTL_FIL_LIB)",
    pificl="SYS.UTL_FILE.FCLOSE_I(UTL_FIL_LIB)",
    pificp="SYS.UTL_FILE.FCOPY_I(UTL_FIL_LIB)",
    pififl="SYS.UTL_FILE.FFLUSH_I(UTL_FIL_LIB)",
    pifigch="SYS.UTL_FILE.FOPEN_NCHAR_I(UTL_FIL_LIB)",
    pifigl="SYS.UTL_FILE.GET_LINE_I(UTL_FIL_LIB)",
    pifigr="SYS.UTL_FILE.GET_LINE_RAW_I(UTL_FIL_LIB)",
    pifiio="SYS.UTL_FILE.FIS_OPEN_I(UTL_FIL_LIB)",
    pifimv="SYS.UTL_FILE.FRENAME_I(UTL_FIL_LIB)",
    pifinl="SYS.UTL_FILE.NEW_LINE_I(UTL_FIL_LIB)",
    pifiop="SYS.UTL_FILE.FOPEN_I(UTL_FIL_LIB)",
    pifipo="SYS.UTL_FILE.FGETPOS_I(UTL_FIL_LIB)",
    pifipr="SYS.UTL_FILE.PUT_RAW_I(UTL_FIL_LIB)",
    pifipu="SYS.UTL_FILE.PUT_BUFFER_I(UTL_FIL_LIB)",
    pifirm="SYS.UTL_FILE.FREMOVE_I(UTL_FIL_LIB)",
    pifisk="SYS.UTL_FILE.FSEEK_I(UTL_FIL_LIB)",
    pig_nd="SYS.PIDL.pig_nd(c)",
    pig_pt="SYS.PIDL.pig_pt(c)",
    pig_s2="SYS.PIDL.pig_s2(c)",
    pig_s4="SYS.PIDL.pig_s4(c)",
    pig_tx="SYS.PIDL.pig_tx(c)",
    pig_u1="SYS.PIDL.pig_u1(c)",
    pig_u2="SYS.PIDL.pig_u2(c)",
    pig_u4="SYS.PIDL.pig_u4(c)",
    pigd="PLSQL apps utl_gdk support",
    pigdkmn="SYS.UTL_GDK.MAP_NAME_I(UTL_GDK_LIB)",
    pigend="SYS.PIDL.pigend(c)",
    pigept="SYS.PIDL.pigept(c)",
    piges2="SYS.PIDL.piges2(c)",
    piges4="SYS.PIDL.piges4(c)",
    pigetx="SYS.PIDL.pigetx(c)",
    pigeu1="SYS.PIDL.pigeu1(c)",
    pigeu2="SYS.PIDL.pigeu2(c)",
    pigeu4="SYS.PIDL.pigeu4(c)",
    pignd="SYS.PIDL.pig_nd(c)",
    pigpt="SYS.PIDL.pig_pt(c)",
    pigs2="SYS.PIDL.pig_s2(c)",
    pigs4="SYS.PIDL.pig_s4(c)",
    pigsln="SYS.PIDL.pigsln(c)",
    pigsnd="SYS.PIDL.pigsnd(c)",
    pigtx="SYS.PIDL.pig_tx(c)",
    pigu1="SYS.PIDL.pig_u1(c)",
    pigu2="SYS.PIDL.pig_u2(c)",
    pigu4="SYS.PIDL.pig_u4(c)",
    piht="PLSQL apps utl_http support",
    pihtavailable="PLSQL apps utl_http support is connection available",
    pihtca="SYS.UTL_HTTP.ADD_COOKIE(UTL_HTT_LIB)",
    pihtcc="SYS.UTL_HTTP.GET_COOKIE_COUNT(UTL_HTT_LIB)",
    pihtcf="SYS.UTL_HTTP.GET_FIRST_COOKIE(UTL_HTT_LIB)",
    pihtcn="SYS.UTL_HTTP.GET_NEXT_COOKIE(UTL_HTT_LIB)",
    pihtconnect="PLSQL apps utl_http support setup tcp connection",
    pihtcrc="SYS.UTL_HTTP.CREATE_REQUEST_CONTEXT(UTL_HTT_LIB)",
    pihtcx="SYS.UTL_HTTP.CLEAR_COOKIES(UTL_HTT_LIB)",
    pihtdisconnect="PLSQL apps utl_http support disconnect tcp connection",
    pihtdrc="SYS.UTL_HTTP.DESTROY_REQUEST_CONTEXT(UTL_HTT_LIB)",
    pihtgbcs="SYS.UTL_HTTP.GET_BODY_CHARSET(UTL_HTT_LIB)",
    pihtgbcsf="SYS.UTL_HTTP.GET_BODY_CHARSET(UTL_HTT_LIB)",
    pihtgces="SYS.UTL_HTTP.GET_CONTENT_ENCODING_SUPPORT(UTL_HTT_LIB)",
    pihtgcksp="SYS.UTL_HTTP.GET_COOKIE_SUPPORT(UTL_HTT_LIB)",
    pihtgdc="SYS.UTL_HTTP.GET_DETAILED_SQLCODE(UTL_HTT_LIB)",
    pihtgdm="SYS.UTL_HTTP.GET_DETAILED_SQLERRM(UTL_HTT_LIB)",
    pihtgec="SYS.UTL_HTTP.GET_RESPONSE_ERROR_CHECK(UTL_HTT_LIB)",
    pihtges="SYS.UTL_HTTP.GET_DETAILED_EXCP_SUPPORT(UTL_HTT_LIB)",
    pihtgfrd="SYS.UTL_HTTP.GET_FOLLOW_REDIRECT(UTL_HTT_LIB)",
    pihtgpcsp="SYS.UTL_HTTP.GET_PERSISTENT_CONN_SUPPORT(UTL_HTT_LIB)",
    pihtgpxy="SYS.UTL_HTTP.GET_PROXY(UTL_HTT_LIB)",
    pihtgtxto="SYS.UTL_HTTP.GET_TRANSFER_TIMEOUT(UTL_HTT_LIB)",
    pihtgw="SYS.UTL_HTTP.GET_WALLET(UTL_HTT_LIB)",
    pihtinit="SYS.UTL_HTTP.INITIALIZE(UTL_HTT_LIB)",
    pihtmalloc="PLSQL apps utl_http support allocate memory",
    pihtnc="SYS.UTL_HTTP.GET_PERSISTENT_CONN_COUNT(UTL_HTT_LIB)",
    pihtnf="SYS.UTL_HTTP.GET_FIRST_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtnn="SYS.UTL_HTTP.GET_NEXT_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtnx="SYS.UTL_HTTP.CLOSE_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtpa="SYS.UTL_HTTP.GET_AUTHENTICATION(UTL_HTT_LIB)",
    pihtpbcs="SYS.UTL_HTTP.SET_RESP_BODY_CHARSET(UTL_HTT_LIB)",
    pihtpc="SYS.UTL_HTTP.GET_HEADER_COUNT(UTL_HTT_LIB)",
    pihtpe="SYS.UTL_HTTP.END_RESPONSE(UTL_HTT_LIB)",
    pihtpg="SYS.UTL_HTTP.GET_RESPONSE(UTL_HTT_LIB)",
    pihtph="SYS.UTL_HTTP.GET_HEADER(UTL_HTT_LIB)",
    pihtpl="SYS.UTL_HTTP.READ_LINE(UTL_HTT_LIB)",
    pihtpn="SYS.UTL_HTTP.GET_HEADER_BY_NAME(UTL_HTT_LIB)",
    pihtpr="SYS.UTL_HTTP.READ_RAW(UTL_HTT_LIB)",
    pihtpr_ptr="SYS.UTL_HTTP.READ_RAW_PTR(UTL_HTT_LIB)",
    pihtprptr="SYS.UTL_HTTP.READ_RAW_PTR(UTL_HTT_LIB)",
    pihtpt="SYS.UTL_HTTP.READ_TEXT(UTL_HTT_LIB)",
    pihtqa="SYS.UTL_HTTP.SET_AUTHENTICATION(UTL_HTT_LIB)",
    pihtqbcs="SYS.UTL_HTTP.SET_REQ_BODY_CHARSET(UTL_HTT_LIB)",
    pihtqces="SYS.UTL_HTTP.SET_REQ_CONTENT_ENC_SUPPORT(UTL_HTT_LIB)",
    pihtqcksp="SYS.UTL_HTTP.SET_COOKIE_SUPPORT(UTL_HTT_LIB)",
    pihtqe="SYS.UTL_HTTP.END_REQUEST(UTL_HTT_LIB)",
    pihtqec="SYS.UTL_HTTP.SET_REQ_RESPONSE_ERROR_CHECK(UTL_HTT_LIB)",
    pihtqfrd="SYS.UTL_HTTP.SET_FOLLOW_REDIRECT(UTL_HTT_LIB)",
    pihtqg="SYS.UTL_HTTP.BEGIN_REQUEST_I(UTL_HTT_LIB)",
    pihtqh="SYS.UTL_HTTP.SET_HEADER(UTL_HTT_LIB)",
    pihtql="SYS.UTL_HTTP.WRITE_LINE(UTL_HTT_LIB)",
    pihtqp="SYS.UTL_HTTP.SET_PROPERTY(UTL_HTT_LIB)",
    pihtqpc="SYS.UTL_HTTP.SET_REQ_PERSISTENT_CONN(UTL_HTT_LIB)",
    pihtqt="SYS.UTL_HTTP.WRITE_TEXT(UTL_HTT_LIB)",
    pihtqtxto="SYS.UTL_HTTP.SET_REQ_TRANSFER_TIMEOUT(UTL_HTT_LIB)",
    pihtqw="SYS.UTL_HTTP.WRITE_RAW(UTL_HTT_LIB)",
    pihtsbcs="SYS.UTL_HTTP.SET_BODY_CHARSET(UTL_HTT_LIB)",
    pihtsces="SYS.UTL_HTTP.SET_CONTENT_ENCODING_SUPPORT(UTL_HTT_LIB)",
    pihtscksp="SYS.UTL_HTTP.SET_COOKIE_SUPPORT(UTL_HTT_LIB)",
    pihtsec="SYS.UTL_HTTP.SET_RESPONSE_ERROR_CHECK(UTL_HTT_LIB)",
    pihtsend="PLSQL apps utl_http support send tcp request",
    pihtses="SYS.UTL_HTTP.SET_DETAILED_EXCP_SUPPORT(UTL_HTT_LIB)",
    pihtsfrd="SYS.UTL_HTTP.SET_FOLLOW_REDIRECT(UTL_HTT_LIB)",
    pihtspcsp="SYS.UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(UTL_HTT_LIB)",
    pihtspxy="SYS.UTL_HTTP.SET_PROXY(UTL_HTT_LIB)",
    pihtstxto="SYS.UTL_HTTP.SET_TRANSFER_TIMEOUT(UTL_HTT_LIB)",
    pihtsw="SYS.UTL_HTTP.SET_WALLET(UTL_HTT_LIB)",
    pii18n="PLSQL apps utl_i18n support",
    pii18n_common_list="SYS.UTL_I18N.COMMON_LIST_I(UTL_I18_LIB)",
    pii18n_get_max_character_size="SYS.UTL_I18N.GET_MAX_CHARACTER_SIZE(UTL_I18_LIB)",
    pii18n_get_translation="SYS.UTL_I18N.GET_TRANSLATION_I(UTL_I18_LIB)",
    pii18nc2="SYS.UTL_I18N.CONVERT2_CHAR(UTL_I18_LIB)/SYS.UTL_I18N.CONVERT2_NCHAR(UTL_I18_LIB)",
    pii18ncc="SYS.UTL_I18N.CONVERT_CHAR(UTL_I18_LIB)/SYS.UTL_I18N.CONVERT_NCHAR(UTL_I18_LIB)",
    pii18nch="SYS.UTL_I18N.GET_CHARSET_HANDLE(UTL_I18_LIB)",
    pii18ncommonlist="SYS.UTL_I18N.COMMON_LIST_I(UTL_I18_LIB)",
    pii18ncr="SYS.UTL_I18N.CONVERT_RAW(UTL_I18_LIB)",
    pii18ncv="SYS.UTL_I18N.CNV_XML_SQL(UTL_I18_LIB)",
    pii18ndc="SYS.UTL_I18N.GET_DEFCHARSET(UTL_I18_LIB)",
    pii18ner="SYS.UTL_I18N.ESCAPE_REF_I(UTL_I18_LIB)",
    pii18ngetmaxcharactersize="SYS.UTL_I18N.GET_MAX_CHARACTER_SIZE(UTL_I18_LIB)",
    pii18ngettranslation="SYS.UTL_I18N.GET_TRANSLATION_I(UTL_I18_LIB)",
    pii18ninit="SYS.UTL_I18N.INITIALIZE(UTL_I18_LIB)",
    pii18nm2="SYS.UTL_I18N.MAP_NAME_II(UTL_I18_LIB)",
    pii18nme="SYS.UTL_I18N.MAP_EMAIL(UTL_I18_LIB)",
    pii18nmn="SYS.UTL_I18N.MAP_NAME_I(UTL_I18_LIB)",
    pii18ntr="SYS.UTL_I18N.TRANSLITERATE(UTL_I18_LIB)",
    pii18nue="SYS.UTL_I18N.UNESCAPE_REFERENCE(UTL_I18_LIB)",
    pii18nvce="SYS.UTL_I18N.VALIDATE_CHARACTER_ENCODING(UTL_I18_LIB)",
    pii18nvce_clob="SYS.UTL_I18N.VALIDATE_CHARACTER_ENCODING(UTL_I18_LIB)",
    pii18nvceclob="SYS.UTL_I18N.VALIDATE_CHARACTER_ENCODING(UTL_I18_LIB)",
    pii18nvd="SYS.UTL_I18N.VALIDATE_SQLNAME(UTL_I18_LIB)",
    piin="PLSQL apps utl_inaddr support",
    piinadgha="SYS.UTL_INADDR.GET_HOST_ADDRESS_I(UTL_INA_LIB)",
    piinadghn="SYS.UTL_INADDR.GET_HOST_NAME_I(UTL_INA_LIB)",
    pilm="PLSQL apps utl_lms support",
    pilmsfm="SYS.UTL_LMS.FORMAT_MESSAGE(UTL_LMS_LIB)",
    pilmsgm="SYS.UTL_LMS.GET_MESSAGE(UTL_LMS_LIB)",
    pinl="PLSQL apps utl_nla support",
    pinlab_dasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlab_daxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlab_dcopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlab_ddot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlab_dgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlab_dgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlab_dgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlab_dger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlab_dnrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlab_drot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlab_drotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlab_dsbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlab_dscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlab_dspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlab_dspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlab_dspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlab_dswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlab_dsymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlab_dsymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlab_dsyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlab_dsyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlab_dsyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlab_dsyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlab_dtbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlab_dtbsm="PLSQL apps utl_nla support UTL_NLA.BLAS_TBMV_",
    pinlab_dtbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlab_dtpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlab_dtprv="PLSQL apps utl_nla support UTL_NLA.BLAS_TPMV_",
    pinlab_dtpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlab_dtrmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlab_dtrmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlab_dtrsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlab_dtrsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlab_idamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlab_isamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlab_sasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlab_saxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlab_scopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlab_sdot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlab_sgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlab_sgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlab_sgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlab_sger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlab_snrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlab_srot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlab_srotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlab_ssbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlab_sscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlab_sspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlab_sspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlab_sspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlab_sswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlab_ssymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlab_ssymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlab_ssyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlab_ssyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlab_ssyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlab_ssyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlab_stbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlab_stbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlab_stpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlab_stpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlab_strmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlab_strmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlab_strsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlab_strsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlabdasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlabdaxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlabdcopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlabddot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlabdgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlabdgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlabdgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlabdger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlabdnrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlabdrot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlabdrotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlabdsbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlabdscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlabdspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlabdspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlabdspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlabdswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlabdsymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlabdsymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlabdsyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlabdsyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlabdsyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlabdsyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlabdtbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlabdtbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlabdtpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlabdtpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlabdtrmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlabdtrmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlabdtrsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlabdtrsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlabidamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlabisamax="SYS.UTL_NLA.BLAS_IAMAX_(UTL_MAT_LIB)",
    pinlabsasum="SYS.UTL_NLA.BLAS_ASUM_(UTL_MAT_LIB)",
    pinlabsaxpy="SYS.UTL_NLA.BLAS_AXPY_(UTL_MAT_LIB)",
    pinlabscopy="SYS.UTL_NLA.BLAS_COPY_(UTL_MAT_LIB)",
    pinlabsdot="SYS.UTL_NLA.BLAS_DOT_(UTL_MAT_LIB)",
    pinlabsgbmv="SYS.UTL_NLA.BLAS_GBMV_(UTL_MAT_LIB)",
    pinlabsgemm="SYS.UTL_NLA.BLAS_GEMM_(UTL_MAT_LIB)",
    pinlabsgemv="SYS.UTL_NLA.BLAS_GEMV_(UTL_MAT_LIB)",
    pinlabsger="SYS.UTL_NLA.BLAS_GER_(UTL_MAT_LIB)",
    pinlabsnrm2="SYS.UTL_NLA.BLAS_NRM2_(UTL_MAT_LIB)",
    pinlabsrot="SYS.UTL_NLA.BLAS_ROT_(UTL_MAT_LIB)",
    pinlabsrotg="SYS.UTL_NLA.BLAS_ROTG_(UTL_MAT_LIB)",
    pinlabssbmv="SYS.UTL_NLA.BLAS_SBMV_(UTL_MAT_LIB)",
    pinlabsscal="SYS.UTL_NLA.BLAS_SCAL_(UTL_MAT_LIB)",
    pinlabsspmv="SYS.UTL_NLA.BLAS_SPMV_(UTL_MAT_LIB)",
    pinlabsspr="SYS.UTL_NLA.BLAS_SPR_(UTL_MAT_LIB)",
    pinlabsspr2="SYS.UTL_NLA.BLAS_SPR2_(UTL_MAT_LIB)",
    pinlabsswap="SYS.UTL_NLA.BLAS_SWAP_(UTL_MAT_LIB)",
    pinlabssymm="SYS.UTL_NLA.BLAS_SYMM_(UTL_MAT_LIB)",
    pinlabssymv="SYS.UTL_NLA.BLAS_SYMV_(UTL_MAT_LIB)",
    pinlabssyr="SYS.UTL_NLA.BLAS_SYR_(UTL_MAT_LIB)",
    pinlabssyr2="SYS.UTL_NLA.BLAS_SYR2_(UTL_MAT_LIB)",
    pinlabssyr2k="SYS.UTL_NLA.BLAS_SYR2K_(UTL_MAT_LIB)",
    pinlabssyrk="SYS.UTL_NLA.BLAS_SYRK_(UTL_MAT_LIB)",
    pinlabstbmv="SYS.UTL_NLA.BLAS_TBMV_(UTL_MAT_LIB)",
    pinlabstbsv="SYS.UTL_NLA.BLAS_TBSV_(UTL_MAT_LIB)",
    pinlabstpmv="SYS.UTL_NLA.BLAS_TPMV_(UTL_MAT_LIB)",
    pinlabstpsv="SYS.UTL_NLA.BLAS_TPSV_(UTL_MAT_LIB)",
    pinlabstrmm="SYS.UTL_NLA.BLAS_TRMM_(UTL_MAT_LIB)",
    pinlabstrmv="SYS.UTL_NLA.BLAS_TRMV_(UTL_MAT_LIB)",
    pinlabstrsm="SYS.UTL_NLA.BLAS_TRSM_(UTL_MAT_LIB)",
    pinlabstrsv="SYS.UTL_NLA.BLAS_TRSV_(UTL_MAT_LIB)",
    pinlal_dgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlal_dgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlal_dgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlal_dgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlal_dgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlal_dgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlal_dgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlal_dgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlal_dpbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlal_dposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlal_dppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlal_dptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlal_dsbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlal_dsbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlal_dspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlal_dspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlal_dspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlal_dstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlal_dstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlal_dsyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlal_dsyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlal_dsysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pinlal_sgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlal_sgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlal_sgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlal_sgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlal_sgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlal_sgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlal_sgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlal_sgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlal_spbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlal_sposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlal_sppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlal_sptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlal_ssbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlal_ssbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlal_sspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlal_sspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlal_sspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlal_sstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlal_sstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlal_ssyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlal_ssyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlal_ssysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pinlaldgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlaldgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlaldgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlaldgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlaldgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlaldgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlaldgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlaldgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlaldpbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlaldposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlaldppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlaldptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlaldsbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlaldsbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlaldspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlaldspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlaldspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlaldstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlaldstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlaldsyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlaldsyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlaldsysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pinlalsgbsv="SYS.UTL_NLA.LAPACK_GBSV_(UTL_MAT_LIB)",
    pinlalsgees="SYS.UTL_NLA.LAPACK_GEES_(UTL_MAT_LIB)",
    pinlalsgeev="SYS.UTL_NLA.LAPACK_GEEV_(UTL_MAT_LIB)",
    pinlalsgels="SYS.UTL_NLA.LAPACK_GELS_(UTL_MAT_LIB)",
    pinlalsgesdd="SYS.UTL_NLA.LAPACK_GESDD_(UTL_MAT_LIB)",
    pinlalsgesv="SYS.UTL_NLA.LAPACK_GESV_(UTL_MAT_LIB)",
    pinlalsgesvd="SYS.UTL_NLA.LAPACK_GESVD_(UTL_MAT_LIB)",
    pinlalsgtsv="SYS.UTL_NLA.LAPACK_GTSV_(UTL_MAT_LIB)",
    pinlalspbsv="SYS.UTL_NLA.LAPACK_PBSV_(UTL_MAT_LIB)",
    pinlalsposv="SYS.UTL_NLA.LAPACK_POSV_(UTL_MAT_LIB)",
    pinlalsppsv="SYS.UTL_NLA.LAPACK_PPSV_(UTL_MAT_LIB)",
    pinlalsptsv="SYS.UTL_NLA.LAPACK_PTSV_(UTL_MAT_LIB)",
    pinlalssbev="SYS.UTL_NLA.LAPACK_SBEV_(UTL_MAT_LIB)",
    pinlalssbevd="SYS.UTL_NLA.LAPACK_SBEVD_(UTL_MAT_LIB)",
    pinlalsspev="SYS.UTL_NLA.LAPACK_SPEV_(UTL_MAT_LIB)",
    pinlalsspevd="SYS.UTL_NLA.LAPACK_SPEVD_(UTL_MAT_LIB)",
    pinlalsspsv="SYS.UTL_NLA.LAPACK_SPSV_(UTL_MAT_LIB)",
    pinlalsstev="SYS.UTL_NLA.LAPACK_STEV_(UTL_MAT_LIB)",
    pinlalsstevd="SYS.UTL_NLA.LAPACK_STEVD_(UTL_MAT_LIB)",
    pinlalssyev="SYS.UTL_NLA.LAPACK_SYEV_(UTL_MAT_LIB)",
    pinlalssyevd="SYS.UTL_NLA.LAPACK_SYEVD_(UTL_MAT_LIB)",
    pinlalssysv="SYS.UTL_NLA.LAPACK_SYSV_(UTL_MAT_LIB)",
    pip_nd="SYS.PIDL.pip_nd(c)",
    pip_pt="SYS.PIDL.pip_pt(c)",
    pip_s2="SYS.PIDL.pip_s2(c)",
    pip_s4="SYS.PIDL.pip_s4(c)",
    pip_tx="SYS.PIDL.pip_tx(c)",
    pip_u1="SYS.PIDL.pip_u1(c)",
    pip_u2="SYS.PIDL.pip_u2(c)",
    pip_u4="SYS.PIDL.pip_u4(c)",
    pipnd="SYS.PIDL.pip_nd(c)",
    pippt="SYS.PIDL.pip_pt(c)",
    pips2="SYS.PIDL.pip_s2(c)",
    pips4="SYS.PIDL.pip_s4(c)",
    piptx="SYS.PIDL.pip_tx(c)",
    pipu1="SYS.PIDL.pip_u1(c)",
    pipu2="SYS.PIDL.pip_u2(c)",
    pipu4="SYS.PIDL.pip_u4(c)",
    pirg="PLSQL apps utl_raw support",
    pirg2bd="SYS.UTL_RAW.PIRG2BD(C)",
    pirg2bf="SYS.UTL_RAW.PIRG2BF(C)",
    pirg2bi="SYS.UTL_RAW.PIRG2BI(C)",
    pirg2mn="PLSQL apps utl_raw support UTL_RAW.PIRG2MN CAST_TO_NUMBER",
    pirg2nm="SYS.UTL_RAW.PIRG2NM(C)",
    pirg2nvc="SYS.UTL_RAW.PIRG2NVC(C)",
    pirg2rw="SYS.UTL_RAW.PIRG2RW(C)",
    pirg2vc="SYS.UTL_RAW.PIRG2VC(C)",
    pirgcmp="SYS.UTL_RAW.PIRGCMP(C)",
    pirgcnr="SYS.UTL_RAW.PIRGCNR(C)",
    pirgcom="SYS.UTL_RAW.PIRGCOM(C)",
    pirgcon="SYS.UTL_RAW.PIRGCON(C)",
    pirgcop="SYS.UTL_RAW.PIRGCOP(C)",
    pirgfbd="SYS.UTL_RAW.PIRGFBD(C)",
    pirgfbf="SYS.UTL_RAW.PIRGFBF(C)",
    pirgfbi="SYS.UTL_RAW.PIRGFBI(C)",
    pirgfnm="SYS.UTL_RAW.PIRGFNM(C)",
    pirglen="SYS.UTL_RAW.PIRGLEN(C)",
    pirgopr="SYS.UTL_RAW.PIRGOPR(C)",
    pirgovr="SYS.UTL_RAW.PIRGOVR(C)",
    pirgrev="SYS.UTL_RAW.PIRGREV(C)",
    pirgsub="SYS.UTL_RAW.PIRGSUB(C)",
    pirgtrn="SYS.UTL_RAW.PIRGTRN(C)",
    pirgtrs="SYS.UTL_RAW.PIRGTRS(C)",
    pirgxra="SYS.UTL_RAW.PIRGXRA(C)",
    pism="PLSQL apps utl_smtp support",
    pismescdot="SYS.UTL_SMTP.ESCAPE_DOT_I(UTL_SMT_LIB)",
    pismmacmd5="SYS.UTL_SMTP.MAC_MD5_I(UTL_SMT_LIB)",
    pismraise="SYS.UTL_SMTP.RAISE_I(UTL_SMT_LIB)",
    pitc="PLSQL apps utl_tcp support",
    pitcct="SYS.UTL_TCP.CONNECT_I(UTL_TCP_LIB)",
    pitcda="SYS.UTL_TCP.DISCONNECT_ALL_I(UTL_TCP_LIB)",
    pitcdct="SYS.UTL_TCP.DISCONNECT_I(UTL_TCP_LIB)",
    pitcfl="SYS.UTL_TCP.FLUSH_I(UTL_TCP_LIB)",
    pitcinit="SYS.UTL_TCP.INITIALIZE_I(UTL_TCP_LIB)",
    pitcr="SYS.UTL_TCP.READ_I(UTL_TCP_LIB)",
    pitcra="SYS.UTL_TCP.AVAILABLE_I(UTL_TCP_LIB)",
    pitcrl="SYS.UTL_TCP.READ_LINE_I(UTL_TCP_LIB)",
    pitcrt="SYS.UTL_TCP.READ_TEXT_I(UTL_TCP_LIB)",
    pitcssl="SYS.UTL_TCP.START_SSL_I(UTL_TCP_LIB)",
    pitcw="SYS.UTL_TCP.WRITE_I(UTL_TCP_LIB)",
    pitcwl="SYS.UTL_TCP.WRITE_LINE_I(UTL_TCP_LIB)",
    pitcwt="SYS.UTL_TCP.WRITE_TEXT_I(UTL_TCP_LIB)",
    pitrig_delete="XDB.XDB_PITRIG_PKG_01.PITRIG_DEL_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_delete_metadata="XDB.XDB_PITRIG_PKG_01.PITRIG_DELMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_drop="XDB.XDB_PITRIG_PKG.PITRIG_DROP_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_drop_metadata="XDB.XDB_PITRIG_PKG.PITRIG_DROPMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_update="XDB.XDB_PITRIG_PKG_01.PITRIG_UPD_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrig_update_metadata="XDB.XDB_PITRIG_PKG_01.PITRIG_UPDMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdelete="XDB.XDB_PITRIG_PKG_01.PITRIG_DEL_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdeletemetadata="XDB.XDB_PITRIG_PKG_01.PITRIG_DELMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdrop="XDB.XDB_PITRIG_PKG.PITRIG_DROP_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigdropmetadata="XDB.XDB_PITRIG_PKG.PITRIG_DROPMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigupdate="XDB.XDB_PITRIG_PKG_01.PITRIG_UPD_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitrigupdatemetadata="XDB.XDB_PITRIG_PKG_01.PITRIG_UPDMETADATA_WRAP(XDB.RESOURCE_VIEW_LIB)",
    pitsk="PLSQL apps ??",
    piur="PLSQL apps utl_url support",
    piuriesc="SYS.UTL_URL.ESCAPE_I(UTL_URL_LIB)",
    piuriune="SYS.UTL_URL.UNESCAPE_I(UTL_URL_LIB)",
    pk="PLSQL KG interface",
    pkrdi="PLSQL KG interface ??",
    pl="[PL/SQL] ",
    plck="[PL/SQL] ??",
    plio="[PL/SQL] object instantiation",
    pliodl="[PL/SQL] object instantiation delete function",
    plitblm="[PL/SQL] PLSQL apps",
    pls="[PL/SQL] PLSQL PSD standalones",
    plslm="[PL/SQL] PLSQL PSD standalones ncomp processing",
    plsm="[PL/SQL] PLSQL PSD standalones plsql handling collections",
    plsql_run="[PL/SQL] PLSQL PSD standalones single entry point for top level pfrrun and penrun",
    plst="[PL/SQL] PLSQL PSD standalones PLSQL code execution",
    plsw="PL/SQL Wrapper",
    plswa="[PL/SQL] PLSQL PSD standalones Programmatic Interfaces to/from PL/SQL",
    plzsql="SYS.STANDARD.plzsql(c)",
    pmuc="plsql handling collections",
    pmuo="plsql handling collections",
    pmux="plsql handling collections",
    pncutil="[PL/SQL] ",
    pp="[PL/SQL] ",
    pri="PLSQL remote interface",
    pricbr="PLSQL remote interface callback, remote",
    prient="PLSQL remote interface run given (rpc) entrypoint",
    prient2="PLSQL remote interface run given (rpc) entrypoint common code to run given entrypoint, could be rpc or non-rpc",
    prifold="PLSQL remote interface rpc forwarding to older releases",
    priold="PLSQL remote interface rpc forwarding to older releases",
    prior="SYS.PLITBLM.prior(c)",
    prm="parameter handling with sql layer",
    prs="parse",
    prsase="parse initialisation parameter names",
    prsc="PaRSe Create DataBase",
    prscmd="parse SQL command (syntax check)",
    prsctc="parse create table/cluster",
    prsdel="parse delete",
    prsdrv="parse driver (?)",
    prspo_proc_opts="parse (or only validate) PHysical Attribute specification",
    prsrss="parse recursive alter system or session",
    prssz="parse parse context to be saved",
    prsxpl="parse explain statement",
    ps="[PL/SQL] ",
    psd="[PL/SQL] programmatic interfaces to/from",
    psd_asct="[PL/SQL] programmatic interfaces to/from DBMS_SESSION.PSD_ASCT ADD_SQL_CONNECTION_TEST",
    psd_catet="SYS.DBMS_UTILITY.PSD_CATET(C)",
    psd_dct="[PL/SQL] programmatic interfaces to/from DBMS_SESSION.PSD_DCT DISABLE_CONNECTION_TEST",
    psd_dsct="[PL/SQL] programmatic interfaces to/from DBMS_SESSION.PSD_DSCT DELETE_SQL_CONNECTION_TEST",
    psd_ect="[PL/SQL] programmatic interfaces to/from DBMS_SESSION.ECT ENABLE_CONNECTION_TEST",
    psd_expand_sql_text="SYS.DBMS_UTILITY.PSD_EXPAND_SQL_TEXT(C)",
    psd_invalidate="SYS.DBMS_UTILITY.PSD_INVALIDATE(C)",
    psd_package_memory_utilizatio2="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATIO2(C)",
    psd_package_memory_utilization="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATION(C)",
    psd_set_schema_deferred="SYS.DBMS_SESSION.PSD_SET_SCHEMA_DEFERRED(C)",
    psd_validate="SYS.DBMS_UTILITY.PSD_VALIDATE(C)",
    psd_wait_on_pending_dml="SYS.DBMS_UTILITY.PSD_WAIT_ON_PENDING_DML(C)",
    psdanam="SYS.DBMS_UTILITY.PSDANAM(C)",
    psdart="SYS.DBMS_SHARED_POOL.PSDART(C)",
    psdasct="SYS.DBMS_SESSION.PSD_ASCT(C)",
    psdbcomp="SYS.DBMS_ASSERT.PSDBCOMP(C)",
    psdbinstr="SYS.DBMS_ASSERT.PSDBINSTR(C)",
    psdbnd="[PL/SQL] programmatic interfaces to/from manage bind variables",
    psdcatet="SYS.DBMS_UTILITY.PSD_CATET(C)",
    psdcire="SYS.DBMS_SESSION.PSDCIRE(C)",
    psdcln="SYS.DBMS_SNAPSHOT_UTL.PSDCLN(C)",
    psdcnam="SYS.DBMS_UTILITY.PSDCNAM(C)",
    psddbv="SYS.DBMS_UTILITY.PSDDBV(C)",
    psddbvfull="SYS.DBMS_UTILITY.PSDDBVFULL(C)",
    psddct="SYS.DBMS_SESSION.PSD_DCT(C)",
    psdddl="[PL/SQL] programmatic interfaces to/from execute DDL",
    psddin="SYS.DBMS_SESSION.PSDDI(C)",
    psddr0="[PL/SQL] programmatic interfaces to/from Null pointer definitions for ttcdrv callback and context.",
    psddsct="SYS.DBMS_SESSION.PSD_DSCT(C)",
    psddsm="SYS.DBMS_SNAPSHOT_UTL.PSDDSM(C)",
    psdect="SYS.DBMS_SESSION.PSD_ECT(C)",
    psdevn="[PL/SQL] programmatic interfaces to/from plsql debugger",
    psdexpandsqltext="SYS.DBMS_UTILITY.PSD_EXPAND_SQL_TEXT(C)",
    psdfmr="SYS.DBMS_SESSION.PSDFMR(C)",
    psdgbt="[PL/SQL] programmatic interfaces to/from get bind info",
    psdgcscn="SYS.DBMS_TRANSACTION_INTERNAL_SYS.PSDGCSCN(C)",
    psdgtr="SYS.DBMS_UTILITY.PSDGTR(C)",
    psdhot="SYS.DBMS_SHARED_POOL.PSDHOT(C)",
    psdicd="[PL/SQL] programmatic interfaces to/from plsql call c",
    psdinvalidate="SYS.DBMS_UTILITY.PSD_INVALIDATE(C)",
    psdire="SYS.DBMS_SESSION.PSDIRE(C)",
    psdisa="SYS.DBMS_SESSION.PSDISA(C)",
    psdkep="SYS.DBMS_SHARED_POOL.PSDKEP(C)",
    psdkepnew="SYS.DBMS_SHARED_POOL.PSDKEPNEW(C)",
    psdlcv="SYS.DBMS_LOCK.PSDLCV(C)",
    psdlgt="SYS.DBMS_LOCK.PSDLGT(C)",
    psdlrl="SYS.DBMS_LOCK.PSDLRL(C)",
    psdmsc="[PL/SQL] programmatic interfaces to/from system dependent misc functions",
    psdmsu="SYS.DBMS_SNAPSHOT_UTL.PSDMSU(C)",
    psdmwu="SYS.DBMS_SNAPSHOT_UTL.PSDMWU(C)",
    psdnal="[PL/SQL] programmatic interfaces to/from ??",
    psdnohot="SYS.DBMS_SHARED_POOL.PSDNOHOT(C)",
    psdocs="SYS.DBMS_UTILITY.PSDOCS(C)",
    psdocu="SYS.DBMS_UTILITY.PSDOCU(C)",
    psdpackagememoryutilizatio2="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATIO2(C)",
    psdpackagememoryutilization="SYS.DBMS_SESSION.PSD_PACKAGE_MEMORY_UTILIZATION(C)",
    psdpgi="[PL/SQL] programmatic interfaces to/from open and close cursor support",
    psdplg="SYS.DBMS_SNAPSHOT_KKXRCA.PSDPLG(C)",
    psdpor="SYS.DBMS_UTILITY.PSDPOR(C)",
    psdpur="SYS.DBMS_SHARED_POOL.PSDPUR(C)",
    psdpurnew="SYS.DBMS_SHARED_POOL.PSDPURNEW(C)",
    psdrgs="SYS.DBMS_SNAPSHOT_UTL.PSDRGS(C)",
    psdrin="SYS.DBMS_SESSION.PSDRI(C)",
    psdsetschemadeferred="SYS.DBMS_SESSION.PSD_SET_SCHEMA_DEFERRED(C)",
    psdsire="SYS.DBMS_SESSION.PSDSIRE(C)",
    psdstfp="SYS.DBMS_DDL.PSDSTFP(C)",
    psduis="SYS.DBMS_SESSION.PSDUIS(C)",
    psdurs="SYS.DBMS_SNAPSHOT_UTL.PSDURS(C)",
    psdvalidate="SYS.DBMS_UTILITY.PSD_VALIDATE(C)",
    psdwaitonpendingdml="SYS.DBMS_UTILITY.PSD_WAIT_ON_PENDING_DML(C)",
    psdwat="SYS.DBMS_DG.PSDWAT(C)/SYS.DBMS_DRS.PSDWAT(C)/SYS.DBMS_LOCK.PSDWAT(C)/SYS.DBMS_SESSION.PSDWAT(C)",
    psf="[PL/SQL] instantiating plsql in library cache",
    pso="[PL/SQL] PLSQL PSD generic",
    psu="[PL/SQL] PLSQL PSD generic",
    psx="[PL/SQL] PLSQL PSD standalones",
    pt="PLSQL IDL",
    ptdadh="PLSQL IDL ??",
    ptf="PLSQL IDL polymorphic table functions",
    ptkin="PLSQL IDL ??",
    pu="[PL/SQL] ",
    purge_schema="XDB.DBMS_XMLSCHEMA.PURGESCHEMA(XMLSCHEMA_LIB)",
    purgeschema="XDB.DBMS_XMLSCHEMA.PURGESCHEMA(XMLSCHEMA_LIB)",
    put_col="SYS.DBMS_TF.Put_Col(c)",
    putcol="SYS.DBMS_TF.Put_Col(c)",
    q="query",
    qba="query buffer allocation",
    qbadrv="query buffer allocation create control structures",
    qbaopn="query buffer allocation create control structures",
    qc="query compile",
    qccchks="SYS.DBMS_CDC_UTILITY.CHK_SECURITY(DBMS_CDCAPI_LIB)",
    qccdtp_bumpscn="SYS.DBMS_CDC_IMPDPV.BUMP_SCN(DBMS_CDCAPI_LIB)",
    qccdtp_bumpsequence="SYS.DBMS_CDC_IMPDPV.BUMP_SEQUENCE(DBMS_CDCAPI_LIB)",
    qccdtp_geterrortext="SYS.DBMS_CDC_DPUTIL.GET_ERROR_TEXT(DBMS_CDCAPI_LIB)",
    qccdtp_getnewhandle="SYS.DBMS_CDC_IMPDP.GET_NEW_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtp_getsubhandle="SYS.DBMS_CDC_IMPDP.GET_SUB_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtp_gettabviewobjno="SYS.DBMS_CDC_DPUTIL.GET_TABVIEW_OBJNO(DBMS_CDCAPI_LIB)",
    qccdtp_hassynccdctrigger="SYS.DBMS_CDC_IMPDP.HAS_SYNCCDC_TRIGGER(DBMS_CDCAPI_LIB)",
    qccdtpbumpscn="SYS.DBMS_CDC_IMPDPV.BUMP_SCN(DBMS_CDCAPI_LIB)",
    qccdtpbumpsequence="SYS.DBMS_CDC_IMPDPV.BUMP_SEQUENCE(DBMS_CDCAPI_LIB)",
    qccdtpgeterrortext="SYS.DBMS_CDC_DPUTIL.GET_ERROR_TEXT(DBMS_CDCAPI_LIB)",
    qccdtpgetnewhandle="SYS.DBMS_CDC_IMPDP.GET_NEW_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtpgetsubhandle="SYS.DBMS_CDC_IMPDP.GET_SUB_HANDLE(DBMS_CDCAPI_LIB)",
    qccdtpgettabviewobjno="SYS.DBMS_CDC_DPUTIL.GET_TABVIEW_OBJNO(DBMS_CDCAPI_LIB)",
    qccdtphassynccdctrigger="SYS.DBMS_CDC_IMPDP.HAS_SYNCCDC_TRIGGER(DBMS_CDCAPI_LIB)",
    qccgelvl="SYS.DBMS_CDC_UTILITY.QCCGELVL(DBMS_CDCAPI_LIB)",
    qccgetee="SYS.DBMS_CDC_UTILITY.QCCGETEE(DBMS_CDCAPI_LIB)",
    qccgscn="SYS.DBMS_CDC_UTILITY.QCCGSCN(DBMS_CDCAPI_LIB)",
    qccprg_setpurgeboundarysub="SYS.DBMS_CDC_UTILITY.SET_PURGEBOUNDARY(DBMS_CDCAPI_LIB)",
    qccprgsetpurgeboundarysub="SYS.DBMS_CDC_UTILITY.SET_PURGEBOUNDARY(DBMS_CDCAPI_LIB)",
    qccpub_alteralsourceep="SYS.DBMS_CDC_PUBLISH.INT_ALTER_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpub_alterchangesetep="SYS.DBMS_CDC_PUBLISH.INT_ALTER_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_alterhlsourceep="SYS.DBMS_CDC_IPUBLISH.ALTER_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpub_changetablecacheep="SYS.DBMS_CDC_IPUBLISH.CHGTAB_CACHE(DBMS_CDCPUB_LIB)",
    qccpub_checkdisthlcompep="SYS.DBMS_CDC_IPUBLISH.CHECK_10GR2_COMPATIBILITY(DBMS_CDCPUB_LIB)",
    qccpub_checkpubprivep="SYS.DBMS_CDC_IPUBLISH.CHECK_PUBLISHER_REQ(DBMS_CDCPUB_LIB)",
    qccpub_checksubpriv="SYS.DBMS_CDC_ISUBSCRIBE.CHECK_SUB_PRIV(DBMS_CDCPUB_LIB)",
    qccpub_createalsourceep="SYS.DBMS_CDC_PUBLISH.INT_CREATE_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpub_createchangesetep="SYS.DBMS_CDC_PUBLISH.INT_CREATE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_createhlsourceep="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpub_createmaptableep="SYS.DBMS_CDC_IPUBLISH.CREATE_MAP_TABLE(DBMS_CDCPUB_LIB)",
    qccpub_createstreamspropep="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpub_createtablestreamsep="SYS.DBMS_CDC_IPUBLISH.CREATE_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpub_dropchangesetep="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_dropchangesourceep="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SOURCE(DBMS_CDCPUB_LIB)",
    qccpub_drophlcaptureep="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpub_dropstreamspropep="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpub_droptablestreamsep="SYS.DBMS_CDC_IPUBLISH.DROP_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpub_get_cso="SYS.DBMS_CDC_ISUBSCRIBE.GET_CSO_NAME(DBMS_CDCPUB_LIB)",
    qccpub_istabcolencryptedep="SYS.DBMS_CDC_IPUBLISH.IS_COLUMN_ENCRYPTED(DBMS_CDCPUB_LIB)",
    qccpub_purgeep="SYS.DBMS_CDC_PUBLISH.PURGE(DBMS_CDCPUB_LIB)",
    qccpub_purgelogicalsubep="SYS.DBMS_CDC_IPUBLISH.PURGE_LOGICAL_SUB(DBMS_CDCPUB_LIB)",
    qccpub_purgesetep="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpub_purgetableep="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_TABLE(DBMS_CDCPUB_LIB)",
    qccpubalteralsourceep="SYS.DBMS_CDC_PUBLISH.INT_ALTER_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpubalterchangesetep="SYS.DBMS_CDC_PUBLISH.INT_ALTER_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubalterhlsourceep="SYS.DBMS_CDC_IPUBLISH.ALTER_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpubchangetablecacheep="SYS.DBMS_CDC_IPUBLISH.CHGTAB_CACHE(DBMS_CDCPUB_LIB)",
    qccpubcheckdisthlcompep="SYS.DBMS_CDC_IPUBLISH.CHECK_10GR2_COMPATIBILITY(DBMS_CDCPUB_LIB)",
    qccpubcheckpubprivep="SYS.DBMS_CDC_IPUBLISH.CHECK_PUBLISHER_REQ(DBMS_CDCPUB_LIB)",
    qccpubchecksubpriv="SYS.DBMS_CDC_ISUBSCRIBE.CHECK_SUB_PRIV(DBMS_CDCPUB_LIB)",
    qccpubcreatealsourceep="SYS.DBMS_CDC_PUBLISH.INT_CREATE_AUTOLOG_CSRC(DBMS_CDCPUB_LIB)",
    qccpubcreatechangesetep="SYS.DBMS_CDC_PUBLISH.INT_CREATE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubcreatehlsourceep="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpubcreatemaptableep="SYS.DBMS_CDC_IPUBLISH.CREATE_MAP_TABLE(DBMS_CDCPUB_LIB)",
    qccpubcreatestreamspropep="SYS.DBMS_CDC_IPUBLISH.CREATE_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpubcreatetablestreamsep="SYS.DBMS_CDC_IPUBLISH.CREATE_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpubdropchangesetep="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubdropchangesourceep="SYS.DBMS_CDC_PUBLISH.INT_DROP_CHANGE_SOURCE(DBMS_CDCPUB_LIB)",
    qccpubdrophlcaptureep="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_CSOURCE(DBMS_CDCPUB_LIB)",
    qccpubdropstreamspropep="SYS.DBMS_CDC_IPUBLISH.DROP_HOTLOG_INTERNAL_PROP(DBMS_CDCPUB_LIB)",
    qccpubdroptablestreamsep="SYS.DBMS_CDC_IPUBLISH.DROP_CHGTAB_STRUCT(DBMS_CDCPUB_LIB)",
    qccpubgetcso="SYS.DBMS_CDC_ISUBSCRIBE.GET_CSO_NAME(DBMS_CDCPUB_LIB)",
    qccpubistabcolencryptedep="SYS.DBMS_CDC_IPUBLISH.IS_COLUMN_ENCRYPTED(DBMS_CDCPUB_LIB)",
    qccpubpurgeep="SYS.DBMS_CDC_PUBLISH.PURGE(DBMS_CDCPUB_LIB)",
    qccpubpurgelogicalsubep="SYS.DBMS_CDC_IPUBLISH.PURGE_LOGICAL_SUB(DBMS_CDCPUB_LIB)",
    qccpubpurgesetep="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_SET(DBMS_CDCPUB_LIB)",
    qccpubpurgetableep="SYS.DBMS_CDC_PUBLISH.INT_PURGE_CHANGE_TABLE(DBMS_CDCPUB_LIB)",
    qccsgnbs="SYS.DBMS_CDC_UTILITY.QCCSGNBS(DBMS_CDCAPI_LIB)",
    qccsicst="SYS.DBMS_CDC_UTILITY.CLEANUP_SYNC_TABLE(DBMS_CDCAPI_LIB)",
    qccsiero="SYS.DBMS_CDC_UTILITY.EXTEND_WINDOW_LIST(DBMS_CDCAPI_LIB)",
    qccsifst="SYS.DBMS_CDC_UTILITY.FIXUP_SYNC_TABLE(DBMS_CDCAPI_LIB)",
    qccsisst="SYS.DBMS_CDC_UTILITY.SETUP_SYNC_TABLE(DBMS_CDCAPI_LIB)",
    qcdl="query compile dictionary lookup",
    qcdldtin="query compile dictionary lookup dependency table insert",
    qcdlgui="query compile dictionary lookup get user id",
    qcdlsynonymtranslation="query compile dictionary lookup translate synonym to object",
    qcdo="query compile dictionary support for objects",
    qcdoloi="query compile dictionary support for objects load object specific information",
    qci="query compile language parser and semantic analyser",
    qcisetplsqlctx="query compile language parser and semantic analyser set plsql context during a compile",
    qcop="query compile parse",
    qcp="query compile parse",
    qcpi="query compile parse interim",
    qcpia="query compile parse interim arithmetic",
    qcpiaex="query compile parse interim arithmetic expression",
    qcpib="query compile parse interim boolean",
    qcpibex="query compile parse interim boolean expression",
    qcpibfa="query compile parse interim boolean factor",
    qcpibte="query compile parse interim boolean term",
    qcpicmd="query compile parse interim command",
    qcpiere="query compile parse interim expression relop expression",
    qcpierr="query compile parse interim raise error",
    qcpiidn="query compile parse interim identifier",
    qcpilcl="query compile parse interim logical clause",
    qcpilcl0="query compile parse interim logical clause (private)",
    qcpiltb="query compile parse interim lock table command",
    qcpiq="query compile parse interim query(?)",
    qcpisqt="query compile parse interim sql text",
    qcpitnam="query compile parse interim table name",
    qcpitnm="query compile parse interim table name",
    qcpl="query compile parse lexer",
    qcplgnt="query compile parse lexer get next token",
    qcplgte="query compile parse lexer group SQL text (?)",
    qcs="query compile semantic analysis (parser)",
    qcsbxl="query compile semantic analysis (parser) first round of privilege checking",
    qcscheckpriv="query compile semantic analysis (parser) check privileges",
    qcse="query compile semantic analysis (parser) expand",
    qcsevw="query compile semantic analysis (parser) expand view",
    qcsfccc="query compile semantic analysis ??",
    qcsiscolinfro="query compile semantic analysis ??",
    qcsj="query compile semantic analysis (parser) java(?)",
    qcso="query compile semantic analysis (parser) OBJECTS",
    qcsp="query compile semantic analysis (parser) process",
    qcspafq="query compile semantic analysis (parser) process all frodefs in query block",
    qcsphnt="query compile semantic analysis (parser) process hint?",
    qcspqb="query compile semantic analysis (parser) process query blocks",
    qcspqbdescendents="query compile semantic analysis (parser) process query blocks and descendents (this processes qbc and its inner qbc's, but not its sibling (qbcnxt) query blocks)",
    qcsprfro="query compile semantic analysis (parser) process frodef",
    qcsprfro_tree="query compile semantic analysis (parser) process frodef tree (handles ANSI join frodefs)",
    qcsraic="query compile semantic analysis ??",
    qcsridn="query compile semantic analysis ??",
    qcsrslvcolwithinqbc="query compile semantic analysis ??",
    qcsrslvname="query compile semantic analysis ??",
    qcsweakcolrslv="query compile semantic analysis ??",
    qct="query compile type check operations",
    qctcopn="query compile type check operations typechecks the query block and its descendant",
    qcterr932="query compile type check operations raise ORA 932 (inconsistent data types)",
    qcterrconvertdatatype="query compile type check operations error routine for data type conversions",
    qcto="query compile type check operations operators",
    qctopls="query compile type check operations operators typecheck OPTPLS operator",
    qcu="query compile utility",
    qcuerr="query compile utility error",
    qcuerroep="query compile utility error oracle error position",
    qcusigerr="query compile utility error raised by signal",
    qe="query execute",
    qeae="query execute aggregate (order by) elimination (?)",
    qeaecn1serial="query execute aggregate (order by) elimination (?) count function",
    qec="query execute (edit) checks",
    qecdrv="query execute (edit) checks driver",
    qecgoc="query execute (edit) checks group operand check",
    qecrlssub="query execute (edit) checks release resources subroutine",
    qecsel="query execute (edit) checks select list",
    qecvdm="query execute (edit) checks view dml",
    qee="query execute SQL execution",
    qer="query execute rowsource",
    qerae="query execute rowsource and equal",
    qeraemax="query execute rowsource and equal max",
    qeraeminmax="query execute rowsource and equal min/max",
    qerandv="query execute rowsource approximate NDV",
    qerandvfetch="query execute rowsource approximate NDV fetch",
    qerandvrop="query execute rowsource approximate NDV row procedure callback",
    qerba="query execute rowsource bitmap index and",
    qerbc="query execute rowsource bitmap index compaction",
    qerbi="query execute rowsource bitmap index creation",
    qerbl="query execute rowsource Bloom Filter",
    qerbm="query execute rowsource minus",
    qerbo="query execute rowsource bitmap index or",
    qerbu="query execute rowsource bitmap index unlimited or",
    qerbx="query execute rowsource bitmap index access",
    qercb="query execute rowsource connect by",
    qercbi="query execute rowsource connect by support functions",
    qerco="query execute rowsource count",
    qercofetch="query execute rowsource count fetch",
    qerdl="query execute rowsource delete",
    qerep="query execute rowsource explosion",
    qerf="query execute rowsource first row",
    qerff="query execute rowsource first row fifo buffer",
    qerfl="query execute rowsource first row filter definition",
    qerflfetchoutside="query execute rowsource first row filter definition fetch row from a row source",
    qerfu="query execute rowsource first row update",
    qerfx="query execute rowsource first row fixed table",
    qerfxarraymaxsize="query execute rowsource first row fixed table array max size",
    qerfxfetch="query execute rowsource first row fixed table fetch",
    qerfxgcol="query execute rowsource first row fixed table get column",
    qerfxgconid="query execute rowsource first row fixed table get container id",
    qergh="query execute rowsource hash group by",
    qerghstart="query execute rowsource hash group by start",
    qergi="query execute rowsource granule iterator (partitioning? or PX granules?)",
    qergifetch="query execute rowsource granule iterator (partitioning? or PX granules?) Fetch procedure of PX granule Iterator Row source Rowid",
    qergr="query execute rowsource group by rollup",
    qergs="query execute rowsource group by sort",
    qergsfetch="group by sort row source fetch",
    qergv="query execute rowsource vector aggregate",
    qerhc="query execute rowsource hash clusters",
    qerhj="query execute rowsource hash join",
    qerhjadf="query execute rowsource hash join ??",
    qerhjallocate="query execute rowsource hash join allocate",
    qerhjfetch="query execute rowsource hash join fetch",
    qerhjinnerprobehashtable="query execute rowsource hash join inner probe hash table",
    qerhjwalkhashbucket="query execute rowsource hash join walk a list of pointers in a hash bucket and check for a match",
    qeril="query execute rowsource in list",
    qerim="query execute rowsource index maintenance",
    qerix="query execute rowsource index",
    qerixfetchfastfullscan="query execute rowsource index index fast full scan",
    qerixfetchskipscan="query execute rowsource index index skip scan",
    qerixtfetch="query execute rowsource index fetch operation for index range scan",
    qerjo="query execute rowsource nested loop outer",
    qerjofetch="query execute rowsource nested loop outer fetch from join rowsource",
    qerjot="query execute rowsource nested loop outer join tunneling",
    qerjotfetch="query execute rowsource nested loop outer join tunneling fetch",
    qerjotrowproc="query execute rowsource nested loop outer join tunneling ??",
    qerle="query execute rowsource linear execution implementation",
    qerli="query execute rowsource parallel create index",
    qerlt="query execute rowsource load table",
    qerlt_olev="query execute rowsource load table out-of-line columns, evaluate and stash away",
    qerlt_snv="query execute rowsource load table stash away and new values",
    qerltc="query execute rowsource load table conventional",
    qerltcfetch="query execute rowsource load table conventional main processing function",
    qerltcfreememory="query execute rowsource load table conventional free memory",
    qerltcpostinsertprocessing="query execute rowsource load table conventional post single row load processing",
    qerltcsinglerowload="query execute rowsource load table conventional main single row insertion function",
    qerltcstart="query execute rowsource load table conventional initialising function",
    qerltfetch="query execute rowsource load table fetch",
    qerltrop="query execute rowsource load table row procedure callback",
    qerns="query execute rowsource group by nosort",
    qeroc="query execute rowsource object collection iterator",
    qerocstart="query execute rowsource object collection iterator create a collection iterator row-source to iterate",
    qeroi="query execute rowsource extensibel indexing query component",
    qeroifcc="query execute rowsource extensibel indexing query component fast call close",
    qeroifcsu="query execute rowsource extensibel indexing query component fast call switch user",
    qeroiirc="query execute rowsource extensibel indexing query component invoke rowsource close",
    qerpa="query execute rowsource partition",
    qerpf="query execute rowsource query execution prefetch",
    qerpffetch="query execute rowsource query execution prefetch fetch",
    qerpsel="query execute rowsource parallel execution PX selector",
    qerptf="query execute rowsource polymorphic table function execution",
    qerpx="query execute rowsource parallel execution",
    qerpxfetch="query execute rowsource parallel execution fetch method for parallelizer row source",
    qerpxslavefetch="query execute rowsource parallel execution fetch method row source",
    qerpxstart="query execute rowsource parallel execution start",
    qerrc="query execute rowsource vector translate",
    qerrm="query execute rowsource remote",
    qersc="query execute rowsource AQP",
    qerse="query execute rowsource set implementation",
    qerso="query execute rowsource sort",
    qersofetch="query execute rowsource sort fetch from from a sort row source",
    qersoprocessuls="query execute rowsource sort process underlying row source",
    qersq="query execute rowsource sequence number",
    qerst="query execute rowsource statistics",
    qerstfetch="query execute rowsource statistics row source fetch",
    qertb="query execute rowsource table access",
    qertbfetch="query execute rowsource table access fetch",
    qertbfetchbyrowid="query execute rowsource table access fetch using inderlying row source fetch by rowid or cluster key",
    qertbitopen="query execute rowsource table access ??",
    qertbsavemethod="query execute rowsource table access save IO request for batching(?)",
    qertbstart="query execute rowsource table access ??",
    qertq="query execute rowsource table queue (px)",
    qertqofetch="query execute rowsource table queue (px) output table queue fetch method",
    qertqoinitrowdesc="query execute rowsource table queue (px) use tqo row vector to determine the partitioning columns",
    qerua="query execute rowsource union all",
    qeruafetch="query execute rowsource union all fetch",
    qeruastart="query execute rowsource union all start",
    qerup="query execute rowsource update",
    qerupfetch="query execute rowsource update fetch",
    qerus="query execute rowsource upsert",
    qerusallocatex="query execute rowsource upsert allocate row source",
    qervw="query execute rowsource view",
    qervwfetch="query execute rowsource view fetch",
    qervwrowprocedure="query execute rowsource view row procedure",
    qerwn="query execute rowsource window",
    qerwnfetch="query execute rowsource window fetch",
    qerxj="query execute rowsource json",
    qerxl="query execute rowsource vector translate",
    qerxp="query execute rowsource XDB query",
    qerxt="query execute rowsource external table",
    qerxtallocate="query execute rowsource external table row source allocate",
    qes="query execute services",
    qesaaggnondist="query execute services create/compute non-distinct aggregates",
    qesapackcols="query execute services pack columns into queue buffer",
    qesbl="query execute services bloom filter",
    qesblalo="query execute services bloom filter allocate memory",
    qesblgetfilter="query execute services bloom filter get filter",
    qesblstart="query execute services bloom filter start",
    qesdp="query execute services adaptive features?",
    qesdpi="query execute services adaptive features? internationalisation (timezones)?",
    qesdpibeginprepare="SYS.DBMS_DST.BEGIN_PREPARE_KERNEL(DBMS_DST_LIB)",
    qesdpibeginupgrade="SYS.DBMS_DST.BEGIN_UPGRADE_KERNEL(DBMS_DST_LIB)",
    qesdpichkprivs="SYS.DBMS_DST.CHECK_PRIVILEGES(DBMS_DST_LIB)",
    qesdpichktzver="SYS.DBMS_DST.CHECK_TZ_VERSION(DBMS_DST_LIB)",
    qesdpiendprepare="SYS.DBMS_DST.END_PREPARE_KERNEL(DBMS_DST_LIB)",
    qesdpiendupgrade="SYS.DBMS_DST.END_UPGRADE_KERNEL(DBMS_DST_LIB)",
    qesdpifindafftabs="SYS.DBMS_DST.FIND_AFFECTED_TABLES_KERNEL(DBMS_DST_LIB)",
    qesdpigetandlockdstprop="SYS.DBMS_DST.GET_AND_LOCK_DST_PROPERTY(DBMS_DST_LIB)",
    qesdpigetlatesttzver="SYS.DBMS_DST.GET_LATEST_TIMEZONE_VERSION(DBMS_DST_LIB)",
    qesdpigetsgaupstatetyp="SYS.DBMS_DST.SGA_UPGRADE_STATE(DBMS_DST_LIB)",
    qesdpiloadsectz="SYS.DBMS_DST.LOAD_SECONDARY_KERNEL(DBMS_DST_LIB)",
    qesdpiunloadsectz="SYS.DBMS_DST.UNLOAD_SECONDARY_KERNEL(DBMS_DST_LIB)",
    qesdpiupgradetable="SYS.DBMS_DST.UPGRADE_TABLE_KERNEL(DBMS_DST_LIB)",
    qesgv="query execute services vector aggregate",
    qesltc="query execute services load table conventional",
    qesma="query execute services partitioning",
    qesmaisinterval="query execute services partitioning ??",
    qesmm="query execute services memory manager (pga)",
    qesmmcgetcursize="query execute services memory manager (pga) ??",
    qesmmipgafreecb="query execute services memory manager (pga) pga free callback",
    qespc="query execute services partitioning",
    qesrc="query execute services result cache",
    qesrccm="query execute services result cache commit?",
    qesrcps_bkdrv="SYS.DBMS_RESULT_CACHE.BK_DRV(DBMS_RC_LIB)",
    qesrcps_bklst="SYS.DBMS_RESULT_CACHE.BK_LST(DBMS_RC_LIB)",
    qesrcps_byp="SYS.DBMS_RESULT_CACHE.BYPASS_(DBMS_RC_LIB)",
    qesrcps_del="SYS.DBMS_RESULT_CACHE.DELETE_DEPENDENCY_(DBMS_RC_LIB)",
    qesrcps_flush="SYS.DBMS_RESULT_CACHE.FLUSH_(DBMS_RC_LIB)",
    qesrcps_inv="SYS.DBMS_RESULT_CACHE.INVALIDATE_(DBMS_RC_LIB)",
    qesrcps_invobj0="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT0(DBMS_RC_LIB)",
    qesrcps_invobj1="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT1(DBMS_RC_LIB)",
    qesrcps_memsta="SYS.DBMS_RESULT_CACHE.MEMSTA(DBMS_RC_LIB)",
    qesrcps_memsum="SYS.DBMS_RESULT_CACHE.MEMSUMMARY(DBMS_RC_LIB)",
    qesrcps_nspcnt="SYS.DBMS_RESULT_CACHE.NAMESPACES(DBMS_RC_LIB)",
    qesrcps_relieson="SYS.DBMS_RESULT_CACHE_INTERNAL.RELIES_ON(DBMS_RC_LIB)",
    qesrcps_status="SYS.DBMS_RESULT_CACHE.STATUS_(DBMS_RC_LIB)",
    qesrcpsbkdrv="SYS.DBMS_RESULT_CACHE.BK_DRV(DBMS_RC_LIB)",
    qesrcpsbklst="SYS.DBMS_RESULT_CACHE.BK_LST(DBMS_RC_LIB)",
    qesrcpsbyp="SYS.DBMS_RESULT_CACHE.BYPASS_(DBMS_RC_LIB)",
    qesrcpsdel="SYS.DBMS_RESULT_CACHE.DELETE_DEPENDENCY_(DBMS_RC_LIB)",
    qesrcpsflush="SYS.DBMS_RESULT_CACHE.FLUSH_(DBMS_RC_LIB)",
    qesrcpsinv="SYS.DBMS_RESULT_CACHE.INVALIDATE_(DBMS_RC_LIB)",
    qesrcpsinvobj0="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT0(DBMS_RC_LIB)",
    qesrcpsinvobj1="SYS.DBMS_RESULT_CACHE.INVALIDATE_OBJECT1(DBMS_RC_LIB)",
    qesrcpsmemsta="SYS.DBMS_RESULT_CACHE.MEMSTA(DBMS_RC_LIB)",
    qesrcpsmemsum="SYS.DBMS_RESULT_CACHE.MEMSUMMARY(DBMS_RC_LIB)",
    qesrcpsnspcnt="SYS.DBMS_RESULT_CACHE.NAMESPACES(DBMS_RC_LIB)",
    qesrcpsrelieson="SYS.DBMS_RESULT_CACHE_INTERNAL.RELIES_ON(DBMS_RC_LIB)",
    qesrcpsstatus="SYS.DBMS_RESULT_CACHE.STATUS_(DBMS_RC_LIB)",
    qessageenabled="query execute services test if exadata storage servers are used",
    qesst="query execute services statistic functions",
    qesstpincbeta="SYS.DBMS_STAT_FUNCS_AUX.INC_BETA_CALLOUT(DBMS_STAT_FUNCS_AUX_LIB)",
    qesstpincgamma="SYS.DBMS_STAT_FUNCS.INC_GAMMA_CALLOUT(DBMS_STAT_FUNCS_LIB)",
    qesstpincgammac="SYS.DBMS_STAT_FUNCS_AUX.INC_GAMMA_C_CALLOUT(DBMS_STAT_FUNCS_AUX_LIB)",
    qesstpkssig="SYS.DBMS_STAT_FUNCS.SIG_KS_CALLOUT(DBMS_STAT_FUNCS_LIB)",
    qesxl="query execute services vector translate",
    qesxlp="query execute services vector translate PX",
    qjsn="query json",
    qk="[Query Kernel] ",
    qka="[Query Kernel buffer Allocation] ",
    qkadrv="[Query Kernel buffer Allocate DRiVer] ",
    qkadrv2="[Query Kernel buffer Allocate DRiVer] ",
    qkadrv2post="[Query Kernel buffer Allocate DRiVer] post processing",
    qkaffsindex="[Query Kernel buffer Allocation] fast full scan index",
    qkagby="[Query Kernel buffer Allocation] group by",
    qkajoi="[Query Kernel buffer Allocation] join processing",
    qkanindex="[Query Kernel buffer Allocation] analyzes the usage of the argument non-clustered index",
    qkaqkn="[Query Kernel buffer Allocation] row source allocation",
    qkaset="[Query Kernel buffer Allocation] set expression",
    qkatab="[Query Kernel buffer Allocation] runtime allocation for base table row sources",
    qkatrv="[Query Kernel buffer Allocation] traverse set expression tree",
    qkauna="[Query Kernel buffer Allocation] union or union all",
    qke="[Query Kernel] expressions",
    qkexl="[Query Kernel] expressions vector translate",
    qkk="[Query Kernel] allocate",
    qkn="[Query Kernel] allocate",
    qknr="[Query Kernel] allocate rowsets setup",
    qks="[Query Kernel SQL]",
    qks3t="[Query Kernel SQL] temp table transformation",
    qksan="[Query Kernel SQL] analyze",
    qksbg="[Query Kernel SQL] bind (variable) management(?)",
    qksbggetdefault_callout="[Query Kernel] SYS.DBMS_FIX_CONTROL_PERSISTENCE.GET_DEFAULT(DBMS_FCP_LIB)",
    qksbggetdefaultcallout="[Query Kernel] SYS.DBMS_FIX_CONTROL_PERSISTENCE.GET_DEFAULT(DBMS_FCP_LIB)",
    qksce="[Query Kernel SQL] cursor evaluation",
    qksctx="[Query Kernel SQL] MPGE",
    qksds="[Query Kernel SQL] Dynamic Sampling Services (ADS)",
    qksdscheckpreds="[Query Kernel SQL] Dynamic Sampling Services (ADS) check and find usable predicates",
    qksdsdumpresult="[Query Kernel SQL] Dynamic Sampling Services (ADS) dump results (to trace file); trace[ADS] ",
    qksdsexecute="[Query Kernel SQL] Dynamic Sampling Services (ADS) execute",
    qksdsexestmt="[Query Kernel SQL] Dynamic Sampling Services (ADS) execute sql for actual sampling",
    qksdsfindsampletable="[Query Kernel SQL] Dynamic Sampling Services (ADS) find tables to sample",
    qksdsinitctx="[Query Kernel SQL] Dynamic Sampling Services (ADS) start and initialize ADS",
    qksfroisfastdual="[Query Kernel SQL] frolist is fast dual",
    qksht="[Query Kernel SQL] hints",
    qksmm="[Query Kernel SQL] compiler memory management",
    qksmms="[Query Kernel SQL] compiler memory management simulation",
    qksop="[Query Kernel SQL] compilter operand processing",
    qkspm="[Query Kernel SQL] plan management",
    qksptf="[Query Kernel SQL] polymorphic table functions compilation",
    qksqb="[Query Kernel SQL] Query compilation for query blocks",
    qksqbapplytoqbc="[Query Kernel SQL] Query compilation for query blocks apply to QB",
    qksqbapplytoqbcloc="[Query Kernel SQL] Query compilation for query blocks apply to QB local implementation",
    qksqbcreatename="[Query Kernel SQL] Query compilation for query blocks create name",
    qksqbgeneratename="[Query Kernel SQL] Query compilation for query blocks generate name",
    qksqbregister="[Query Kernel SQL] Query compilation for query blocks register",
    qksrc="[Query Kernel SQL] result cache",
    qkssa="[Query Kernel SQL] sampling",
    qkssage="[Query Kernel SQL] exadata",
    qkssm="[Query Kernel SQL] string mapping",
    qksvc="[Query Kernel SQL] Virtual Column",
    qkswc="[Query Kernel SQL] with clause",
    qkswcdriver="[Query Kernel SQL] with clause Recursively traverse through all query blocks",
    qkx="[Query Kernel SQL] code generator",
    qkxa="[Query Kernel SQL] code generator annotations",
    qm="[Query XDB] ",
    qmcx="[Query XDB] CSX",
    qmcxd="[Query XDB] CSX DECODING",
    qmcxe="[Query XDB] CSX ENCODING",
    qmcxm="[Query XDB] CSX ENCODING",
    qme="[Query XDB] repository",
    qmevscheckin="[Query XDB] XDB.DBMS_XDB_VERSION.checkin_int(XDB.DBMS_XDB_VERSION_LIB)",
    qmevscheckout="[Query XDB] XDB.DBMS_XDB_VERSION.checkout(XDB.DBMS_XDB_VERSION_LIB)",
    qmevscreatebranch="[Query XDB] XDB.DBMS_XDB_VERSION.CreateBranch(XDB.DBMS_XDB_VERSION_LIB)",
    qmevscreaterealws="[Query XDB] XDB.DBMS_XDB_VERSION.CreateRealWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevscreatevcr="[Query XDB] XDB.DBMS_XDB_VERSION.CreateVCR(XDB.DBMS_XDB_VERSION_LIB)",
    qmevscreatevirtualws="[Query XDB] XDB.DBMS_XDB_VERSION.CreateVirtualWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsdeleteverhist="[Query XDB] XDB.DBMS_XDB_VERSION.DeleteVersionHistory(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsdeletews="[Query XDB] XDB.DBMS_XDB_VERSION.DeleteWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsdelversion="[Query XDB] XDB.DBMS_XDB_VERSION.DeleteVersion(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetctsblobbyresid="[Query XDB] XDB.DBMS_XDB_VERSION.GetContentsBlobByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetctsclobbyresid="[Query XDB] XDB.DBMS_XDB_VERSION.GetContentsClobByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetctsxmlbyresid="[Query XDB] XDB.DBMS_XDB_VERSION.GetContentsXmlByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetpredsbyresid="[Query XDB] XDB.DBMS_XDB_VERSION.GetPredsByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetresbyresid="[Query XDB] XDB.DBMS_XDB_VERSION.GetResourceByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetresid="[Query XDB] XDB.DBMS_XDB_VERSION.getresid(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetsuccsbyresid="[Query XDB] XDB.DBMS_XDB_VERSION.GetSuccsByResId(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetverhist="[Query XDB] XDB.DBMS_XDB_VERSION.GetVersionHistory(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetverhistid="[Query XDB] XDB.DBMS_XDB_VERSION.GetVersionHistoryID(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetverhistroot="[Query XDB] XDB.DBMS_XDB_VERSION.GetVersionHistoryRoot(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsgetws="[Query XDB] XDB.DBMS_XDB_VERSION.GetWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsisrescheckedout="[Query XDB] XDB.DBMS_XDB_VERSION.ischeckedout(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsmakeshared="[Query XDB] XDB.DBMS_XDB_VERSION.MakeShared(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsmakeversioned="[Query XDB] XDB.DBMS_XDB_VERSION.makeversioned_int(XDB.DBMS_XDB_VERSION_LIB)",
    qmevspublishws="[Query XDB] XDB.DBMS_XDB_VERSION.PublishWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevssetws="[Query XDB] XDB.DBMS_XDB_VERSION.SetWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsuncheckout="[Query XDB] XDB.DBMS_XDB_VERSION.uncheckout_int(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsunpublishws="[Query XDB] XDB.DBMS_XDB_VERSION.UnPublishWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsupdatevcr="[Query XDB] XDB.DBMS_XDB_VERSION.UpdateVCRVersion(XDB.DBMS_XDB_VERSION_LIB)",
    qmevsupdatews="[Query XDB] XDB.DBMS_XDB_VERSION.UpdateWorkspace(XDB.DBMS_XDB_VERSION_LIB)",
    qmf="[Query XDB] ftp server",
    qmh="[Query XDB] protocols",
    qmix="[Query XDB Index] ",
    qmix_dateindex="[Query XDB Index] XDB.DBMS_XMLINDEX0.CREATEDATEINDEX(XDB.XMLINDEX_LIB)",
    qmix_drop_param="[Query XDB Index] XDB.DBMS_XMLINDEX.DROPPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_get_param="[Query XDB Index] XDB.DBMS_XMLINDEX.GETPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_get_paramname="[Query XDB Index] XDB.DBMS_XMLINDEX0.GETPARAMETERNAME(XDB.XMLINDEX_LIB)",
    qmix_gettabnames="[Query XDB Index] XDB.XMLINDEXMETHODS.ODCIGetInterfaces(XDB.XMLINDEX_LIB)",
    qmix_loadclose="[Query XDB Index] XDB.XMLINDEXLOAD_IMP_T.ODCITableStart(XDB.XMLINDEX_LIB)",
    qmix_modify_param="[Query XDB Index] XDB.DBMS_XMLINDEX.MODIFYPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_numberindex="[Query XDB Index] XDB.DBMS_XMLINDEX0.CREATENUMBERINDEX(XDB.XMLINDEX_LIB)",
    qmix_process_pending="[Query XDB Index] XDB.DBMS_XMLINDEX.PROCESS_PENDING_INT(XDB.XMLINDEX_LIB)",
    qmix_register_param="[Query XDB Index] XDB.DBMS_XMLINDEX.REGISTERPARAMETER(XDB.XMLINDEX_LIB)",
    qmix_reload_sxi_leaf="[Query XDB Index] XDB.DBMS_XMLINDEX0.RELOAD_SXI_LEAF(XDB.XMLINDEX_LIB)",
    qmix_sync_index="[Query XDB Index] XDB.DBMS_XMLINDEX.SYNCINDEX(XDB.XMLINDEX_LIB)",
    qmix_tableutils="[Query XDB Index] XDB.XIMETADATA_PKG.utlgettablenames(XDB.XMLINDEX_LIB)",
    qmix_upd_partmeta="[Query XDB Index] XDB.XMLINDEXMETHODS.ODCIIndexUpdPartMetadata(XDB.XMLINDEX_LIB)",
    qmix_upd_partstats="[Query XDB Index] XDB.XMLIDXSTATSMETHODS.cost(XDB.XMLINDEX_LIB)",
    qmix_xmetadata="[Query XDB Index] XDB.XIMETADATA_PKG.getIndexMetadataCallback(XDB.XMLINDEX_LIB)",
    qmixdateindex="[Query XDB Index] XDB.DBMS_XMLINDEX0.CREATEDATEINDEX(XDB.XMLINDEX_LIB)",
    qmixdropparam="[Query XDB Index] XDB.DBMS_XMLINDEX.DROPPARAMETER(XDB.XMLINDEX_LIB)",
    qmixgetparam="[Query XDB Index] XDB.DBMS_XMLINDEX.GETPARAMETER(XDB.XMLINDEX_LIB)",
    qmixgetparamname="[Query XDB Index] XDB.DBMS_XMLINDEX0.GETPARAMETERNAME(XDB.XMLINDEX_LIB)",
    qmixgettabnames="[Query XDB Index] XDB.XMLINDEXMETHODS.ODCIGetInterfaces(XDB.XMLINDEX_LIB)",
    qmixloadclose="[Query XDB Index] XDB.XMLINDEXLOAD_IMP_T.ODCITableStart(XDB.XMLINDEX_LIB)",
    qmixmodifyparam="[Query XDB Index] XDB.DBMS_XMLINDEX.MODIFYPARAMETER(XDB.XMLINDEX_LIB)",
    qmixnumberindex="[Query XDB Index] XDB.DBMS_XMLINDEX0.CREATENUMBERINDEX(XDB.XMLINDEX_LIB)",
    qmixprocesspending="[Query XDB Index] XDB.DBMS_XMLINDEX.PROCESS_PENDING_INT(XDB.XMLINDEX_LIB)",
    qmixq="[Query XDB Index] XMLIndex",
    qmixregisterparam="[Query XDB Index] XDB.DBMS_XMLINDEX.REGISTERPARAMETER(XDB.XMLINDEX_LIB)",
    qmixreloadsxileaf="[Query XDB Index] XDB.DBMS_XMLINDEX0.RELOAD_SXI_LEAF(XDB.XMLINDEX_LIB)",
    qmixsyncindex="[Query XDB Index] XDB.DBMS_XMLINDEX.SYNCINDEX(XDB.XMLINDEX_LIB)",
    qmixtableutils="[Query XDB Index] XDB.XIMETADATA_PKG.utlgettablenames(XDB.XMLINDEX_LIB)",
    qmixupdpartmeta="[Query XDB Index] XDB.XMLINDEXMETHODS.ODCIIndexUpdPartMetadata(XDB.XMLINDEX_LIB)",
    qmixupdpartstats="[Query XDB Index] XDB.XMLIDXSTATSMETHODS.cost(XDB.XMLINDEX_LIB)",
    qmixxmetadata="[Query XDB Index] XDB.XIMETADATA_PKG.getIndexMetadataCallback(XDB.XMLINDEX_LIB)",
    qmn="[Query XDB] protocols",
    qmpxcreatecrossconfldr="[Query XDB] XDB.DBMS_XDBUTIL_INT.CREATECROSSCONFOLDER(DBMS_XDB_LIB)",
    qmpxgetwalletosdpathext="[Query XDB] XDB.DBMS_XDB_ADMIN.GETWALLETDEFAULTOSDPATH(DBMS_XDB_LIB)",
    qmpxinstallwalletext="[Query XDB] XDB.DBMS_XDB_ADMIN.INSTALLDEFAULTWALLETEXT(DBMS_XDB_LIB)",
    qmr="[Query XDB] hierarchical resolver",
    qms="[Query XDB] XOB storage and retrieval",
    qmtm="[Query XDB] CSX tokenmgr",
    qmudxclearbindvalues="[Query XDB] SYS.DBMS_XMLGEN.CLEARBINDVALUES(DBMS_XMLGEN_LIB)",
    qmudxclose="[Query XDB] SYS.DBMS_XMLGEN.CLOSECONTEXT(DBMS_XMLGEN_LIB)",
    qmudxconvert_clob="[Query XDB] SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxconvert_varchar2="[Query XDB] SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxconvertclob="[Query XDB] SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxconvertvarchar2="[Query XDB] SYS.DBMS_XMLGEN.CONVERTWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxgetctx="[Query XDB] SYS.DBMS_XMLGEN.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    qmudxgetctxfromhq="[Query XDB] SYS.DBMS_XMLGEN.NEWCONTEXTFROMHIERARCHY(DBMS_XMLGEN_LIB)",
    qmudxgetcursorctx="[Query XDB] SYS.DBMS_XMLGEN.NEWCONTEXT(DBMS_XMLGEN_LIB)",
    qmudxgetnumrowsprocessed="[Query XDB] SYS.DBMS_XMLGEN.GETNUMROWSPROCESSED(DBMS_XMLGEN_LIB)",
    qmudxgetxmlclob="[Query XDB] SYS.DBMS_XMLGEN.GETXMLWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxgetxmltype="[Query XDB] SYS.DBMS_XMLGEN.GETXMLTYPEWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxgetxmltypepro="[Query XDB] SYS.DBMS_XMLGEN.GETXMLTYPEPROWRAPPED(DBMS_XMLGEN_LIB)",
    qmudxindwidth="[Query XDB] SYS.DBMS_XMLGEN.SETINDENTATIONWIDTH(DBMS_XMLGEN_LIB)",
    qmudxprettyprint="[Query XDB] SYS.DBMS_XMLGEN.SETPRETTYPRINTING(DBMS_XMLGEN_LIB)",
    qmudxremovexsltparam="[Query XDB] SYS.DBMS_XMLGEN.REMOVEXSLTPARAM(DBMS_XMLGEN_LIB)",
    qmudxrestartquery="[Query XDB] SYS.DBMS_XMLGEN.RESTARTQUERY(DBMS_XMLGEN_LIB)",
    qmudxsetbindvalue="[Query XDB] SYS.DBMS_XMLGEN.SETBINDVALUE(DBMS_XMLGEN_LIB)",
    qmudxsetchkinvdchrs="[Query XDB] SYS.DBMS_XMLGEN.SETCHECKINVALIDCHARS(DBMS_XMLGEN_LIB)",
    qmudxsetmaxrows="[Query XDB] SYS.DBMS_XMLGEN.SETMAXROWS(DBMS_XMLGEN_LIB)",
    qmudxsetnullhandling="[Query XDB] SYS.DBMS_XMLGEN.SETNULLHANDLING(DBMS_XMLGEN_LIB)",
    qmudxsetreplsplchars="[Query XDB] SYS.DBMS_XMLGEN.SETCONVERTSPECIALCHARS(DBMS_XMLGEN_LIB)",
    qmudxsetrowsettagname="[Query XDB] SYS.DBMS_XMLGEN.SETROWSETTAG(DBMS_XMLGEN_LIB)",
    qmudxsetrowtagname="[Query XDB] SYS.DBMS_XMLGEN.SETROWTAG(DBMS_XMLGEN_LIB)",
    qmudxsetskiprows="[Query XDB] SYS.DBMS_XMLGEN.SETSKIPROWS(DBMS_XMLGEN_LIB)",
    qmudxsetxslt="[Query XDB] SYS.DBMS_XMLGEN.SETXSLT(DBMS_XMLGEN_LIB)",
    qmudxsetxsltparam="[Query XDB] SYS.DBMS_XMLGEN.SETXSLTPARAM(DBMS_XMLGEN_LIB)",
    qmudxuseitemtagsforcoll="[Query XDB] SYS.DBMS_XMLGEN.USEITEMTAGSFORCOLL(DBMS_XMLGEN_LIB)",
    qmurdgetblob="[Query XDB] SYS.DBURITYPE.GETBLOB(DBURI_LIB)",
    qmurdgetclob="[Query XDB] SYS.DBURITYPE.GETCLOB(DBURI_LIB)",
    qmurdxdbgetblob="[Query XDB] SYS.XDBURITYPE.GETBLOB(DBURI_LIB)",
    qmurdxdbgetclob="[Query XDB] SYS.XDBURITYPE.GETCLOB(DBURI_LIB)",
    qmurdxdbgetcontenttype="[Query XDB] SYS.XDBURITYPE.GETCONTENTTYPE(DBURI_LIB)",
    qmurdxdbgetresource="[Query XDB] SYS.XDBURITYPE.GETRESOURCE(DBURI_LIB)",
    qmurdxdbgetxmltype="[Query XDB] SYS.XDBURITYPE.GETXML(DBURI_LIB)",
    qmurs="[Query XDB] handling URIs",
    qmx="[Query XDB] XML Objects",
    qmximanifestvarray="[Query XDB] xml support ??",
    qmxp="[Query XDB] XML Objects CSX print",
    qmxq="[Query XDB] XML Objects XML",
    qmxrs="[Query XDB] XML Objects CSX print",
    qmxsax="[Query XDB] XML Objects SAX processing",
    qmxt="[Query XDB] XML Objects XML",
    qmxtc="[Query XDB] XML Objects XML ddl and other operator support sql XML support",
    qmxtcdxsclearkeycols="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.CLEARKEYCOLUMNLIST",
    qmxtcdxsclearupdcols="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.CLEARUPDATECOLUMNLIST",
    qmxtcdxsclose="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.CLOSECONTEXT",
    qmxtcdxsdeletec="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.DELETEXML",
    qmxtcdxsdeletev="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.DELETEXML",
    qmxtcdxsgetctx="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.NEWCONTEXT",
    qmxtcdxsinsertc="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.INSERTXML",
    qmxtcdxsinsertv="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.INSERTXML",
    qmxtcdxssetkeycol="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETKEYCOLUMN",
    qmxtcdxssetpreservews="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETPRESERVEWHITESPACE",
    qmxtcdxssetrowtagname="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETROWTAG",
    qmxtcdxssetupdcol="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.SETUPDATECOLUMN",
    qmxtcdxsupdatec="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.UPDATEXML",
    qmxtcdxsupdatev="[Query XDB] XML Objects XML ddl and other operator support sql XML support DBMS_XMLSTORE.UPDATEXML",
    qmxtgx="[Query XDB] XML Objects XML ADT to XML transformation",
    qmxtra="[Query XDB] XML Objects XML query",
    qmxtri="[Query XDB] XML Objects XML schema/XMLindex",
    qmxtsk="[Query XDB] XML Objects XML xmltype support functions",
    qo="[Query Optimizer] ",
    qolclrevu="[Query Optimizer] SYS.OUTLN_PKG.CLEAR_USED(DBMS_OUTLN_LIB)",
    qolgenol="[Query Optimizer] SYS.OUTLN_PKG_INTERNAL.I_CREATE_OUTLINE_CALLOUT(DBMS_OUTLN_LIB)",
    qolgensig="[Query Optimizer] SYS.DBMS_SQLTCB_INTERNAL.I_TCB_GENERATE_SIGNATURE(DBMS_OUTLN_LIB)",
    qolrfcache="[Query Optimizer] SYS.OUTLN_PKG.REFRESH_OUTLINE_CACHE(DBMS_OUTLN_LIB)",
    qolsigupd="[Query Optimizer] SYS.OUTLN_PKG.UPDATE_SIGNATURES(DBMS_OUTLN_LIB)",
    qolsigxct="[Query Optimizer] SYS.OUTLN_PKG.EXACT_TEXT_SIGNATURES(DBMS_OUTLN_LIB)",
    qos="[Query Optimizer] statistics",
    qosadv="[Query Optimizer] statistics SQL optimizer statistics advisor",
    qosadvexecutetaskdrv="[Query Optimizer] SYS.DBMS_STATS_ADVISOR.I_EXECUTE_TASK_CALLOUT(DBMS_STATS_LIB)",
    qosd="[Query Optimizer] statistics sql plan directive",
    qosdalterspd="[Query Optimizer] SYS.DBMS_SPD_INTERNAL.ALTER_SPD_CALLOUT(DBMS_SPD_LIB)",
    qosdcheckwindowmode="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.CHECK_WINDOW_CAPTURE_MODE(DBMS_STATS_LIB)",
    qosddelexprstats="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.DELETE_EXPR_STATS_CALLOUT(DBMS_STATS_LIB)",
    qosddsresexternal="[Query Optimizer] SYS.DBMS_SPD_INTERNAL.DS_RES_EXTERNAL(DBMS_SPD_LIB)",
    qosdflushspd="[Query Optimizer] SYS.DBMS_SPD_INTERNAL.FLUSH_SPD_CALLOUT(DBMS_SPD_LIB)",
    qosdgelc="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.GET_EXP_LIST_CALLOUT(DBMS_STATS_LIB)",
    qosdgetfobjkeyfromstmt="[Query Optimizer] statistics sql plan directive get stat/DS(?) results using sql text (stmt)?",
    qosdimportspd="[Query Optimizer] SYS.DBMS_SPD_INTERNAL.IMPORT_SPD_CALLOUT(DBMS_SPD_LIB)",
    qosdinitdirctx="[Query Optimizer] statistics sql plan directive initialize directives context",
    qosdub8tosqlid="[Query Optimizer] SYS.DBMS_SPD_INTERNAL.UB8_TO_SQLID(DBMS_SPD_LIB)",
    qosdvecbit="[Query Optimizer] SYS.DBMS_SPD_INTERNAL.VECBIT(DBMS_SPD_LIB)",
    qoshgshrc="[Query Optimizer] SYS.DBMS_STATS.GET_STATS_RETENTION_CALLOUT(DBMS_STATS_LIB)",
    qoshposc="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.PURGE_OLD_STATS_CALLOUT(DBMS_STATS_LIB)",
    qoshrsoc="[Query Optimizer] SYS.DBMS_STATS.REPORTING_MAN_LOG_OP(DBMS_STATS_LIB)",
    qoshrstc="[Query Optimizer] SYS.DBMS_STATS.REPORTING_MAN_LOG_TASK_CALLOUT(DBMS_STATS_LIB)",
    qoshsavsys="[Query Optimizer] SYS.DBMS_STATS.SAVE_SYSTEM_STATS(DBMS_STATS_LIB)",
    qoshsshrc="[Query Optimizer] SYS.DBMS_STATS.SET_STATS_RETENTION_CALLOUT(DBMS_STATS_LIB)",
    qosp_odci_inprogress="[Query Optimizer] SYS.DBMS_STATS.ODCI_INPROGRESS(DBMS_STATS_LIB)",
    qosp_odci_reset_ugafsc="[Query Optimizer] SYS.DBMS_STATS.ODCI_RESET_UGAFSC(DBMS_STATS_LIB)",
    qosp_odci_set_privs="[Query Optimizer] SYS.DBMS_STATS.ODCI_SET_PRIVS(DBMS_STATS_LIB)",
    qosp_odci_set_ugafsc="[Query Optimizer] SYS.DBMS_STATS.ODCI_SET_UGAFSC(DBMS_STATS_LIB)",
    qosp_odci_set_ugaqxob="[Query Optimizer] SYS.DBMS_STATS.ODCI_SET_UGAQXOB(DBMS_STATS_LIB)",
    qospaggregateindexstats="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.AGG_IND_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospcheckmmonpolicyviolation="[Query Optimizer] SYS.DBMS_STATS_ADVISOR.I_CHKMPOLICY_VIOLATION_CALLOUT(DBMS_STATS_LIB)",
    qospclearmonmodinfo="[Query Optimizer] SYS.DBMS_STATS.CLEARMONMODINFO(DBMS_STATS_LIB)",
    qospclearststatus="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.CLEAR_ST_STATUS_CALLOUT(DBMS_STATS_LIB)",
    qospcolnormalconv2raw="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.NORM_AND_CONV(DBMS_STATS_LIB)",
    qospdefdop="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.GET_DEFAULT_DOP(DBMS_STATS_LIB)",
    qospdelrealtimecolst="[Query Optimizer] SYS.DBMS_STATS.DELETE_REALTIME_COLSTATS(DBMS_STATS_LIB)",
    qospdelrealtimetabst="[Query Optimizer] SYS.DBMS_STATS.DELETE_REALTIME_TABSTATS(DBMS_STATS_LIB)",
    qospdvexempt="[Query Optimizer] SYS.DBMS_STATS_INTERNAL_AGG.SET_DVSECURITY_MODE(DBMS_STATS_LIB)/SYS.DBMS_STATS_INTERNAL.SET_DVSECURITY_MODE(DBMS_STATS_LIB)/SYS.DBMS_STATS.SET_DVSECURITY_MODE(DBMS_STATS_LIB)",
    qospfcl="[Query Optimizer] SYS.DBMS_STATS.FIXED_COL_LENGTHS_CALLOUT(DBMS_STATS_LIB)",
    qospflushmonmodinfo="[Query Optimizer] SYS.DBMS_STATS.FLUSHMONMODINFO(DBMS_STATS_LIB)",
    qospfreq="[Query Optimizer] SYS.DBMS_STATS.GET_CPU_FREQUENCY_CALLOUT(DBMS_STATS_LIB)",
    qospgetcurrows="[Query Optimizer] SYS.DBMS_STATS_ADVISOR.I_GET_CURRENT_ROWS_CALLOUT(DBMS_STATS_LIB)",
    qospgetextnname="[Query Optimizer] SYS.DBMS_STATS.GET_EXTENSION_NAME_CALLOUT(DBMS_STATS_LIB)",
    qospgetnoworkstat="[Query Optimizer] SYS.DBMS_STATS.GET_NOWORK_CALLOUT(DBMS_STATS_LIB)",
    qospgetscn="[Query Optimizer] SYS.DBMS_STATS.GET_CURRENT_SCN_CALLOUT(DBMS_STATS_LIB)",
    qospgetthr="[Query Optimizer] SYS.DBMS_STATS.GET_THROUGHPUT_CALLOUT(DBMS_STATS_LIB)",
    qospgev="[Query Optimizer] SYS.DBMS_STATS.GET_EVENT_LEVEL(DBMS_STATS_LIB)",
    qospgflg="[Query Optimizer] SYS.DBMS_STATS.QOSPSETGFLG(DBMS_STATS_LIB)",
    qospgibc="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.GET_INDEX_BLOCK_COUNT_CALLOUT(DBMS_STATS_LIB)",
    qospgmveqcallback="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.GET_MV_ENQUE(DBMS_STATS_LIB)",
    qospgtbc="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.GET_TABLE_BLOCK_COUNT_CALLOUT(DBMS_STATS_LIB)",
    qosphnc="[Query Optimizer] SYS.DBMS_STATS.NORM_AND_CONV_HISTOGRAMS(DBMS_STATS_LIB)",
    qospmfal="[Query Optimizer] SYS.DBMS_STATS.FLUSH_ALL_MON_INFO(DBMS_STATS_LIB)",
    qospmfcuo="[Query Optimizer] SYS.DBMS_STATS.FLUSH_OBJ_COLU_INFO(DBMS_STATS_LIB)",
    qospminmaxpartcol="[Query Optimizer] SYS.DBMS_STATS.GET_PART_MINMAX(DBMS_STATS_LIB)",
    qospnormalizedensity="[Query Optimizer] SYS.DBMS_STATS.NORMALIZE_DENSITY_CALLOUT(DBMS_STATS_LIB)",
    qospodciinprogress="[Query Optimizer] SYS.DBMS_STATS.ODCI_INPROGRESS(DBMS_STATS_LIB)",
    qospodciresetugafsc="[Query Optimizer] SYS.DBMS_STATS.ODCI_RESET_UGAFSC(DBMS_STATS_LIB)",
    qospodcisetprivs="[Query Optimizer] SYS.DBMS_STATS.ODCI_SET_PRIVS(DBMS_STATS_LIB)",
    qospodcisetugafsc="[Query Optimizer] SYS.DBMS_STATS.ODCI_SET_UGAFSC(DBMS_STATS_LIB)",
    qospodcisetugaqxob="[Query Optimizer] SYS.DBMS_STATS.ODCI_SET_UGAQXOB(DBMS_STATS_LIB)",
    qosppgaflg="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.QOSPSETPGAFLG(DBMS_STATS_LIB)",
    qospprv="[Query Optimizer] SYS.DBMS_STATS_ADVISOR.I_CHECK_PRIVS_CALLOUT(DBMS_STATS_LIB)/SYS.DBMS_STATS.CHECK_PRIVS_CALLOUT(DBMS_STATS_LIB)",
    qospreccolusage="[Query Optimizer] SYS.DBMS_STATS.REC_COLU_INFO(DBMS_STATS_LIB)",
    qospresetthr="[Query Optimizer] SYS.DBMS_STATS.RESET_THROUGHPUT_INFO(DBMS_STATS_LIB)",
    qospscs="[Query Optimizer] SYS.DBMS_STATS.SET_COLUMN_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospsec="[Query Optimizer] SYS.DBMS_STATS.SET_SECURITY_MODE(DBMS_STATS_LIB)",
    qospsetrealtimecolst="[Query Optimizer] SYS.DBMS_STATS.SET_REALTIME_COLSTATS(DBMS_STATS_LIB)",
    qospsetrealtimetabst="[Query Optimizer] SYS.DBMS_STATS.SET_REALTIME_TABSTATS(DBMS_STATS_LIB)",
    qospsgaflg="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.QOSPSETSGAFLG(DBMS_STATS_LIB)",
    qospsis="[Query Optimizer] SYS.DBMS_STATS.SET_INDEX_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospslck="[Query Optimizer] SYS.DBMS_STATS.SET_LOCK_MODE_CALLOUT(DBMS_STATS_LIB)",
    qospsts="[Query Optimizer] SYS.DBMS_STATS.SET_TABLE_STATS_CALLOUT(DBMS_STATS_LIB)",
    qospsys="[Query Optimizer] SYS.DBMS_STATS.SET_SYSTEM_STATS_CALLOUT(DBMS_STATS_LIB)",
    qosptestmmon="[Query Optimizer] SYS.DBMS_STATS_INTERNAL.TEST_MMON_AUTOJOB(DBMS_STATS_LIB)",
    qosptrc="[Query Optimizer] SYS.DBMS_AUTO_INDEX_INTERNAL.KSD_TRACE(DBMS_STATS_LIB)/SYS.DBMS_SPM_INTERNAL.I_NON_TERM_DUMP(DBMS_STATS_LIB)/SYS.DBMS_STATS_INTERNAL.KSD_TRACE(DBMS_STATS_LIB)",
    qs="query system",
    qsfcalterext1="SYS.DBMS_SQLCONTROL_INTERNAL.I_ALTER_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcalterext2="SYS.DBMS_SQLCONTROL_INTERNAL.I_ALTER_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfccreateext="SYS.DBMS_SQLCONTROL_INTERNAL.I_CREATE_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcdropext1="SYS.DBMS_SQLCONTROL_INTERNAL.I_DROP_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcdropext2="SYS.DBMS_SQLCONTROL_INTERNAL.I_DROP_OBJECT(DBMS_SQLCONTROL_LIB)",
    qsfcflushquarantineext="SYS.DBMS_SQLQ_INTERNAL.I_FLUSH_QUARANTINE(DBMS_SQLCONTROL_LIB)",
    qsm="query system management",
    qsme="query system management expression processing",
    qsmg_generate_checksum="SYS.PRVT_TUNE_MVIEW.GENERATE_CHECKSUM(DBMS_TUNEMV_LIB)",
    qsmg_mvlog_advisor="SYS.PRVT_SYS_TUNE_MVIEW.ANALYZE_MVLOGS(DBMS_TUNEMV_LIB)",
    qsmg_rewrite_query="SYS.PRVT_TUNE_MVIEW.REWRITE_QUERY_INTERNAL(DBMS_TUNEMV_LIB)",
    qsmggeneratechecksum="SYS.PRVT_TUNE_MVIEW.GENERATE_CHECKSUM(DBMS_TUNEMV_LIB)",
    qsmgmvlogadvisor="SYS.PRVT_SYS_TUNE_MVIEW.ANALYZE_MVLOGS(DBMS_TUNEMV_LIB)",
    qsmgrewritequery="SYS.PRVT_TUNE_MVIEW.REWRITE_QUERY_INTERNAL(DBMS_TUNEMV_LIB)",
    qsmka="query system management determine if summary would be useful",
    qsmkz="query system management create/alter summary semantic analysis",
    qsmmcd="query system management access advisor",
    qsmmcdgettaskscript="SYS.PRVT_ACCESS_ADVISOR.GET_TASK_SCRIPT(DBMS_SUMA_LIB)",
    qsmmcdimplementtask="SYS.PRVT_ACCESS_ADVISOR.X_IMPLEMENT_TASK(DBMS_SUMA_LIB)",
    qsmmcdmain="SYS.PRVT_ACCESS_ADVISOR.AA_MAIN(DBMS_SUMA_LIB)",
    qsmmcdparamvalidate="SYS.PRVT_ACCESS_ADVISOR.PARAM_VALIDATE_EXT(DBMS_SUMA_LIB)/SYS.PRVT_WORKLOAD.PARAM_VALIDATE_EXT(DBMS_SUMA_LIB)",
    qsmmhwghw="SYS.PRVT_WORKLOAD.GEN_HYP_WKD(DBMS_SUMA_LIB)",
    qsmmutlgetnewname="SYS.PRVT_ACCESS_ADVISOR.GET_NEW_NAME(DBMS_SUMA_LIB)",
    qsmmwrkdeletestatement="SYS.PRVT_WORKLOAD.DELETE_ST(DBMS_SUMA_LIB)",
    qsmmwrkimportsqlcache="SYS.PRVT_WORKLOAD.IMPORT_SQLCACHE(DBMS_SUMA_LIB)",
    qsmmwrkimportsqltuningset="SYS.PRVT_WORKLOAD.IMPORT_STS(DBMS_SUMA_LIB)",
    qsmmwrkimportsumadv="SYS.PRVT_WORKLOAD.IMPORT_SUMADV(DBMS_SUMA_LIB)",
    qsmmwrkimportuser="SYS.PRVT_WORKLOAD.IMPORT_USER(DBMS_SUMA_LIB)",
    qsmmwrkinsertstatement="SYS.PRVT_WORKLOAD.SQLW_INSERT(DBMS_SUMA_LIB)",
    qsmmwrkrecordjournal="SYS.PRVT_WORKLOAD.RECORD_JNL_ENTRY(DBMS_SUMA_LIB)",
    qsmmwrkresetworkload="SYS.PRVT_WORKLOAD.X_RESET_WORKLOAD(DBMS_SUMA_LIB)",
    qsmmwrkupdatestatement="SYS.PRVT_WORKLOAD.UPDATE_ST(DBMS_SUMA_LIB)",
    qsmo="query system management optimizer",
    qsmoacceptadaptiveplanext="SYS.DBMS_SPM_INTERNAL.I_ACCEPT_ADAPTIVE_PLAN(DBMS_SPM_LIB)",
    qsmoalterplans="query system management optimizer alter plans driver",
    qsmoalterplansext="SYS.DBMS_SPM.I_ALTER_SQL_PLAN_BASELINE(DBMS_SPM_LIB)",
    qsmoautocapnotifierext="SYS.DBMS_SPM_INTERNAL.I_NOTIFY_SMB_CONFIG_UPDATE(DBMS_SPM_LIB)",
    qsmocreateplanbaselineext="SYS.DBMS_SPM_INTERNAL.I_CREATE_SQL_PLAN_BASELINE(DBMS_SPM_LIB)",
    qsmodropplansext="SYS.DBMS_SPM.I_DROP_SQL_PLAN_BASELINE(DBMS_SPM_LIB)",
    qsmogensqlhandleext="SYS.DBMS_SPM_INTERNAL.I_GENERATE_SQL_HANDLE_FROM_SIG(DBMS_SPM_LIB)/SYS.DBMS_SPM.I_GENERATE_SQL_HANDLE_FROM_SIG(DBMS_SPM_LIB)",
    qsmoloadplansext="SYS.DBMS_SPM_INTERNAL.LOAD_PLANS_SET(DBMS_SPM_LIB)",
    qsmomigrateoutlnsext="SYS.DBMS_SPM.I_MIGRATE_STORED_OUTLINE(DBMS_SPM_LIB)",
    qsmospmallowedext="SYS.DBMS_SPM_INTERNAL.CHECK_SPM_ALLOWED(DBMS_SPM_LIB)",
    qsmounmigrateoutlnsext="SYS.DBMS_SPM_INTERNAL.I_UNMIGRATE_STORED_OUTLINE(DBMS_SPM_LIB)",
    qsmoverifyplanext="SYS.DBMS_SPM.I_EVOLVE_PLAN_VERIFY_CALLOUT(DBMS_SPM_LIB)",
    qsmp="query system management partition processing",
    qsmq="query system management dictionary access",
    qsmqcsm="query system management dictionary access create/drop/alter summary",
    qsmqutl="query system management dictionary access support",
    qsms="query system management advisor",
    qsmssql="SYS.PRVT_WORKLOAD.ANALYZE_SQL(DBMS_SUMAPI_LIB)",
    qsoda="query system DBMS_SODA",
    qsodaplscreatecoll="query system DBMS_SODA DBMS_SODA.CREATE_COLLECTION",
    qsodaplsdropcoll="query system DBMS_SODA DBMS_SODA.DROP_COLLECTION",
    qsodaplsopencoll="query system DBMS_SODA DBMS_SODA.OPEN_COLLECTION",
    qx="query query execution",
    qxdid="query query execution domain index ddl operations",
    qxdid_odci_check_privs="SYS.DBMS_ODCI.ODCI_CHECK_PRIVS(ODCI_EXTOPT_LIB)",
    qxdid_odci_get_impltype_num="SYS.DBMS_ODCI.GET_IMPLTYPE_NUM(ODCI_INDEX_LIB)",
    qxdid_odci_set_privs="SYS.DBMS_ODCI.ODCI_SET_PRIVS(ODCI_INDEX_LIB)",
    qxdidodcicheckprivs="SYS.DBMS_ODCI.ODCI_CHECK_PRIVS(ODCI_EXTOPT_LIB)",
    qxdidodcigetimpltypenum="SYS.DBMS_ODCI.GET_IMPLTYPE_NUM(ODCI_INDEX_LIB)",
    qxdidodcisetprivs="SYS.DBMS_ODCI.ODCI_SET_PRIVS(ODCI_INDEX_LIB)",
    qxidm="query query execution extensible index dml operations",
    qxidp="query query execution domain index ddl partition operations",
    qxim="query query execution support for objects",
    qximcom="query query execution support for objects create operator for type method",
    qximeop="query query execution support for objects evaluate operand",
    qxitex="query query execution support for create/drop indextype",
    qxopc="query query execution time operator callbacks",
    qxope="query query execution support for operator ddl",
    qxopq="query query execution support for user-defined operators",
    qxuag="query query execution support for user-defined aggragate processing",
    qxxm="query query execution support external tables",
    qxxq_close="SYS.ORACLE_BIGDATA.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLECLOSE(QXXQLIB)",
    qxxq_fetch="SYS.ORACLE_BIGDATA.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEFETCH(QXXQLIB)",
    qxxq_open="SYS.ORACLE_BIGDATA.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEOPEN(QXXQLIB)",
    qxxq_populate="SYS.ORACLE_BIGDATA.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEPOPULATE(QXXQLIB)",
    qxxqclose="SYS.ORACLE_BIGDATA.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLECLOSE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLECLOSE(QXXQLIB)",
    qxxqfetch="SYS.ORACLE_BIGDATA.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEFETCH(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEFETCH(QXXQLIB)",
    qxxqopen="SYS.ORACLE_BIGDATA.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEOPEN(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEOPEN(QXXQLIB)",
    qxxqpopulate="SYS.ORACLE_BIGDATA.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HDFS.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_DATAPUMP.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_LOADER.ODCIEXTTABLEPOPULATE(QXXQLIB)/SYS.ORACLE_HIVE.ODCIEXTTABLEPOPULATE(QXXQLIB)",
    rae="[Row source (And-Equal)] ",
    raise_application_error="SYS.DBMS_STANDARD.raise_application_error(C)",
    raiseapplicationerror="SYS.DBMS_STANDARD.raise_application_error(C)",
    rbfima="Row source: BuFfer IMPlementation ",
    rcoima="Row source: COunting IMPlementation A",
    read_ev_icd="SYS.DBMS_SYSTEM.READ_EV_ICD(C)",
    readevicd="SYS.DBMS_SYSTEM.READ_EV_ICD(C)",
    receivepipe="SYS.DBMS_PIPE.RECEIVEPIPE(C)",
    reg_gen_schema_bean="XDB.DBMS_XMLSCHEMA_INT.GENERATEBEAN(XMLSCHEMA_LIB)",
    reg_schema_blob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_BLOB(DBMSXSCHLSB_LIB)",
    reg_schema_clob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_CLOB(DBMSXSCHLSB_LIB)",
    reg_schema_oid="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_OID(DBMSXSCHLSB_LIB)",
    reg_schema_str="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_STR(DBMSXSCHLSB_LIB)",
    reg_schema_xml="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_XML(DBMSXSCHLSB_LIB)",
    reggenschemabean="XDB.DBMS_XMLSCHEMA_INT.GENERATEBEAN(XMLSCHEMA_LIB)",
    regschemablob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_BLOB(DBMSXSCHLSB_LIB)",
    regschemaclob="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_CLOB(DBMSXSCHLSB_LIB)",
    regschemaoid="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_OID(DBMSXSCHLSB_LIB)",
    regschemastr="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_STR(DBMSXSCHLSB_LIB)",
    regschemaxml="XDB.DBMS_XMLSCHEMA_INT.REGISTERSCHEMA(XMLSCHEMA_LIB)/XDB.DBMS_XMLSCHEMA_LSB.REGISTERSCHEMA_XML(DBMSXSCHLSB_LIB)",
    remove="SYS.SODA_OPERATION_T.REMOVE(DBMS_SODAOPR_LIB)",
    remove_arr="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    remove_obj="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    removearr="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    removeobj="SYS.JDOM_T.remove(DBMS_JDOM_LIB)",
    removepipe="SYS.DBMS_PIPE.REMOVEPIPE(C)",
    renamekey_obj="SYS.JDOM_T.rename_Key(DBMS_JDOM_LIB)",
    renamekeyobj="SYS.JDOM_T.rename_Key(DBMS_JDOM_LIB)",
    replaceoneandget="SYS.SODA_COLLECTION_T.REPLACE_ONE_AND_GET(DBMS_SODACOLL_LIB)",
    rfa="data guard (?)",
    rfmon="data guard broker monitor",
    rfra="data guard broker monitor",
    rfrdb="data guard broker monitor",
    rfrla="data guard broker monitor",
    rfrm="data guard broker monitor",
    rfrxpt="data guard broker monitor",
    rfs_add_database="SYS.DBMS_DG.RFS_ADD_DATABASE(C)/SYS.DBMS_DRS.RFS_ADD_DATABASE(C)",
    rfs_add_far_sync="SYS.DBMS_DG.RFS_ADD_FAR_SYNC(C)/SYS.DBMS_DRS.RFS_ADD_FAR_SYNC(C)",
    rfs_check_connect="SYS.DBMS_DG.RFS_CHECK_CONNECT(C)/SYS.DBMS_DRS.RFS_CHECK_CONNECT(C)",
    rfs_create_configuration="SYS.DBMS_DG.RFS_CREATE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_CREATE_CONFIGURATION(C)",
    rfs_disable_fsfo="SYS.DBMS_DG.RFS_DISABLE_FSFO(C)/SYS.DBMS_DRS.RFS_DISABLE_FSFO(C)",
    rfs_do_observe="SYS.DBMS_DG.RFS_DO_OBSERVE(C)/SYS.DBMS_DRS.RFS_DO_OBSERVE(C)",
    rfs_dump_broker="SYS.DBMS_DG.RFS_DUMP_BROKER(C)/SYS.DBMS_DRS.RFS_DUMP_BROKER(C)",
    rfs_dump_observer="SYS.DBMS_DG.RFS_DUMP_OBSERVER(C)/SYS.DBMS_DRS.RFS_DUMP_OBSERVER(C)",
    rfs_enable_configuration="SYS.DBMS_DG.RFS_ENABLE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_ENABLE_CONFIGURATION(C)",
    rfs_enable_fsfo="SYS.DBMS_DG.RFS_ENABLE_FSFO(C)/SYS.DBMS_DRS.RFS_ENABLE_FSFO(C)",
    rfs_enable_member="SYS.DBMS_DG.RFS_ENABLE_MEMBER(C)/SYS.DBMS_DRS.RFS_ENABLE_MEMBER(C)",
    rfs_fs_failover_for_hc_cond="SYS.DBMS_DG.RFS_FS_FAILOVER_FOR_HC_COND(C)/SYS.DBMS_DRS.RFS_FS_FAILOVER_FOR_HC_COND(C)",
    rfs_initiate_fs_failover="SYS.DBMS_DG.RFS_INITIATE_FS_FAILOVER(C)/SYS.DBMS_DRS.RFS_INITIATE_FS_FAILOVER(C)",
    rfs_metadata_file="SYS.DBMS_DG.RFS_METADATA_FILE(C)/SYS.DBMS_DRS.RFS_METADATA_FILE(C)",
    rfs_remove_configuration="SYS.DBMS_DG.RFS_REMOVE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_REMOVE_CONFIGURATION(C)",
    rfs_remove_member="SYS.DBMS_DG.RFS_REMOVE_MEMBER(C)/SYS.DBMS_DRS.RFS_REMOVE_MEMBER(C)",
    rfs_replace_name_in_props="SYS.DBMS_DG.RFS_REPLACE_NAME_IN_PROPS(C)/SYS.DBMS_DRS.RFS_REPLACE_NAME_IN_PROPS(C)",
    rfs_reset_config_property="SYS.DBMS_DG.RFS_RESET_CONFIG_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_CONFIG_PROPERTY(C)",
    rfs_reset_member_property="SYS.DBMS_DG.RFS_RESET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_MEMBER_PROPERTY(C)",
    rfs_set_configuration_property="SYS.DBMS_DG.RFS_SET_CONFIGURATION_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_CONFIGURATION_PROPERTY(C)",
    rfs_set_member_property="SYS.DBMS_DG.RFS_SET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_MEMBER_PROPERTY(C)",
    rfs_set_protection_mode="SYS.DBMS_DG.RFS_SET_PROTECTION_MODE(C)/SYS.DBMS_DRS.RFS_SET_PROTECTION_MODE(C)",
    rfs_startup_for_relocate="SYS.DBMS_DG.RFS_STARTUP_FOR_RELOCAT(C)/SYS.DBMS_DRS.RFS_STARTUP_FOR_RELOCAT(C)",
    rfs_stop_observer="SYS.DBMS_DG.RFS_STOP_OBSERVER(C)/SYS.DBMS_DRS.RFS_STOP_OBSERVER(C)",
    rfs_wait="SYS.DBMS_DG.RFS_WAIT(C)/SYS.DBMS_DRS.RFS_WAIT(C)",
    rfs_wait_sync="SYS.DBMS_DG.RFS_WAIT_SYNC(C)/SYS.DBMS_DRS.RFS_WAIT_SYNC(C)",
    rfsadddatabase="SYS.DBMS_DG.RFS_ADD_DATABASE(C)/SYS.DBMS_DRS.RFS_ADD_DATABASE(C)",
    rfsaddfarsync="SYS.DBMS_DG.RFS_ADD_FAR_SYNC(C)/SYS.DBMS_DRS.RFS_ADD_FAR_SYNC(C)",
    rfsafping="SYS.DBMS_DG.RFSAFPING(C)/SYS.DBMS_DRS.RFSAFPING(C)",
    rfsafreadytofailover="SYS.DBMS_DG.RFSAFREADYTOFAILOVER(C)/SYS.DBMS_DRS.RFSAFREADYTOFAILOVER(C)",
    rfsafstatechangerecorded="SYS.DBMS_DG.RFSAFSTATECHANGERECORDED(C)/SYS.DBMS_DRS.RFSAFSTATECHANGERECORDED(C)",
    rfsbrq="SYS.DBMS_DG.RFSBRQ(C)/SYS.DBMS_DRS.RFSBRQ(C)",
    rfsc2r="SYS.DBMS_DG.RFSC2R(C)/SYS.DBMS_DRS.RFSC2R(C)",
    rfscheckconnect="SYS.DBMS_DG.RFS_CHECK_CONNECT(C)/SYS.DBMS_DRS.RFS_CHECK_CONNECT(C)",
    rfscnl="SYS.DBMS_DG.RFSCNL(C)/SYS.DBMS_DRS.RFSCNL(C)",
    rfscreateconfiguration="SYS.DBMS_DG.RFS_CREATE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_CREATE_CONFIGURATION(C)",
    rfsdel="SYS.DBMS_DG.RFSDEL(C)/SYS.DBMS_DRS.RFSDEL(C)",
    rfsdisablefsfo="SYS.DBMS_DG.RFS_DISABLE_FSFO(C)/SYS.DBMS_DRS.RFS_DISABLE_FSFO(C)",
    rfsdoobserve="SYS.DBMS_DG.RFS_DO_OBSERVE(C)/SYS.DBMS_DRS.RFS_DO_OBSERVE(C)",
    rfsdumpbroker="SYS.DBMS_DG.RFS_DUMP_BROKER(C)/SYS.DBMS_DRS.RFS_DUMP_BROKER(C)",
    rfsdumpobserver="SYS.DBMS_DG.RFS_DUMP_OBSERVER(C)/SYS.DBMS_DRS.RFS_DUMP_OBSERVER(C)",
    rfsenableconfiguration="SYS.DBMS_DG.RFS_ENABLE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_ENABLE_CONFIGURATION(C)",
    rfsenablefsfo="SYS.DBMS_DG.RFS_ENABLE_FSFO(C)/SYS.DBMS_DRS.RFS_ENABLE_FSFO(C)",
    rfsenablemember="SYS.DBMS_DG.RFS_ENABLE_MEMBER(C)/SYS.DBMS_DRS.RFS_ENABLE_MEMBER(C)",
    rfsfsfailoverforhccond="SYS.DBMS_DG.RFS_FS_FAILOVER_FOR_HC_COND(C)/SYS.DBMS_DRS.RFS_FS_FAILOVER_FOR_HC_COND(C)",
    rfsgprp="SYS.DBMS_DG.RFSGPRP(C)/SYS.DBMS_DRS.RFSGPRP(C)",
    rfsinfo="SYS.DBMS_DG.RFSINFO(C)/SYS.DBMS_DRS.RFSINFO(C)",
    rfsinitiatefsfailover="SYS.DBMS_DG.RFS_INITIATE_FS_FAILOVER(C)/SYS.DBMS_DRS.RFS_INITIATE_FS_FAILOVER(C)",
    rfsmetadatafile="SYS.DBMS_DG.RFS_METADATA_FILE(C)/SYS.DBMS_DRS.RFS_METADATA_FILE(C)",
    rfspmeta="SYS.DBMS_DG.RFSPMETA(C)/SYS.DBMS_DRS.RFSPMETA(C)",
    rfsr2c="SYS.DBMS_DG.RFSR2C(C)/SYS.DBMS_DRS.RFSR2C(C)",
    rfsremoveconfiguration="SYS.DBMS_DG.RFS_REMOVE_CONFIGURATION(C)/SYS.DBMS_DRS.RFS_REMOVE_CONFIGURATION(C)",
    rfsremovemember="SYS.DBMS_DG.RFS_REMOVE_MEMBER(C)/SYS.DBMS_DRS.RFS_REMOVE_MEMBER(C)",
    rfsreplacenameinprops="SYS.DBMS_DG.RFS_REPLACE_NAME_IN_PROPS(C)/SYS.DBMS_DRS.RFS_REPLACE_NAME_IN_PROPS(C)",
    rfsreq="SYS.DBMS_DG.RFSREQ(C)/SYS.DBMS_DRS.RFSREQ(C)",
    rfsresetconfigproperty="SYS.DBMS_DG.RFS_RESET_CONFIG_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_CONFIG_PROPERTY(C)",
    rfsresetmemberproperty="SYS.DBMS_DG.RFS_RESET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_RESET_MEMBER_PROPERTY(C)",
    rfsrsp="SYS.DBMS_DG.RFSRSP(C)/SYS.DBMS_DRS.RFSRSP(C)",
    rfssetconfigurationproperty="SYS.DBMS_DG.RFS_SET_CONFIGURATION_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_CONFIGURATION_PROPERTY(C)",
    rfssetmemberproperty="SYS.DBMS_DG.RFS_SET_MEMBER_PROPERTY(C)/SYS.DBMS_DRS.RFS_SET_MEMBER_PROPERTY(C)",
    rfssetprotectionmode="SYS.DBMS_DG.RFS_SET_PROTECTION_MODE(C)/SYS.DBMS_DRS.RFS_SET_PROTECTION_MODE(C)",
    rfsstartupforrelocate="SYS.DBMS_DG.RFS_STARTUP_FOR_RELOCAT(C)/SYS.DBMS_DRS.RFS_STARTUP_FOR_RELOCAT(C)",
    rfsstopobserver="SYS.DBMS_DG.RFS_STOP_OBSERVER(C)/SYS.DBMS_DRS.RFS_STOP_OBSERVER(C)",
    rfswait="SYS.DBMS_DG.RFS_WAIT(C)/SYS.DBMS_DRS.RFS_WAIT(C)",
    rfswaitsync="SYS.DBMS_DG.RFS_WAIT_SYNC(C)/SYS.DBMS_DRS.RFS_WAIT_SYNC(C)",
    rfuima="Row source: For Update IMPlementation A",
    rixima="Row source (IndeX) IMplementation A",
    rnm="rename statement operation",
    rollback="SYS.DBMS_TRANSACTION.rollbac(C)",
    rollback_nr="SYS.DBMS_STANDARD.rollback_n(C)",
    rollback_savepoint="SYS.DBMS_TRANSACTION.rollback_savepoint(C)",
    rollback_sv="SYS.DBMS_STANDARD.rollback_sv(C)",
    rollbacknr="SYS.DBMS_STANDARD.rollback_n(C)",
    rollbacksavepoint="SYS.DBMS_TRANSACTION.rollback_savepoint(C)",
    rollbacksv="SYS.DBMS_STANDARD.rollback_sv(C)",
    rowidafn="SYS.DBMS_ROWID.ROWIDAFN(C)",
    rowidbuild="SYS.DBMS_ROWID.ROWIDBUILD(C)",
    rowidcnvte="SYS.DBMS_ROWID.ROWIDCNVTE(C)",
    rowidcnvtr="SYS.DBMS_ROWID.ROWIDCNVTR(C)",
    rowidinfo="SYS.DBMS_ROWID.ROWIDINFO(C)",
    rpi="recursive program interface",
    rpibnn="recursive program interface bind by number",
    rpicls="recursive program interface close",
    rpidec="recursive program interface describe with callback",
    rpidrr="recursive program interface error handler for setup memory for the recursive session (dru)",
    rpidru="recursive program interface setup memory for recursive session",
    rpidrus="recursive program interface setup memory for recursive session recursive program handling",
    rpidrv="recursive program interface recursive program interface driver",
    rpiexe="recursive program interface execute",
    rpispl="recursive program interface switch user and parse",
    rpiswu2="recursive program interface switch user in recursive sql",
    rsoima="Kernel Row source SOrt IMplementation A",
    rtb="Row source TaBle",
    rtree_analyze="MDSYS.SDO_RTREE_ADMIN.RTREE_ANALYZE(ORDMD_RTREE_LIBS)",
    rtree_childmbrs="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDMBRS(ORDMD_RTREE_LIBS)",
    rtree_childrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDRIDS(ORDMD_RTREE_LIBS)",
    rtree_count="MDSYS.SDO_RTREE_ADMIN.DATA_COUNT(ORDMD_RTREE_LIBS)",
    rtree_descrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_DESCRIDS(ORDMD_RTREE_LIBS)",
    rtree_ndextent="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_NDEXTENT(ORDMD_RTREE_LIBS)",
    rtree_qltydeg="MDSYS.SDO_TUNE.QUALITY_DEGRADATION(ORDMD_RTREE_LIBS)",
    rtree_quality="MDSYS.SDO_TUNE.RTREE_QUALITY(ORDMD_RTREE_LIBS)",
    rtreeanalyze="MDSYS.SDO_RTREE_ADMIN.RTREE_ANALYZE(ORDMD_RTREE_LIBS)",
    rtreechildmbrs="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDMBRS(ORDMD_RTREE_LIBS)",
    rtreechildrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_CHILDRIDS(ORDMD_RTREE_LIBS)",
    rtreecount="MDSYS.SDO_RTREE_ADMIN.DATA_COUNT(ORDMD_RTREE_LIBS)",
    rtreedescrids="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_DESCRIDS(ORDMD_RTREE_LIBS)",
    rtreendextent="MDSYS.SDO_RTREE_ADMIN.SDO_RTREE_NDEXTENT(ORDMD_RTREE_LIBS)",
    rtreeqltydeg="MDSYS.SDO_TUNE.QUALITY_DEGRADATION(ORDMD_RTREE_LIBS)",
    rtreequality="MDSYS.SDO_TUNE.RTREE_QUALITY(ORDMD_RTREE_LIBS)",
    ruleclose="CTXSYS.RULEINDEXMETHODS.ODCIGetInterfaces(dr$lib)",
    rulematches="CTXSYS.CTX_MATCHES.matches(dr$lib)/CTXSYS.DRISCORR.RuleScore(dr$lib)",
    rw="row",
    rw_equivalence_cleanup="SYS.DBMS_ADVANCED_REWRITE.CLEANUP_CONTEXT(DBMS_RWEQUIV_LIB)",
    rwequivalencecleanup="SYS.DBMS_ADVANCED_REWRITE.CLEANUP_CONTEXT(DBMS_RWEQUIV_LIB)",
    rwo="row operand",
    rwoima="row operand vector implementation a",
    rwoupo="row operand unpack row from buffer queue (px)",
    rws="row source",
    rwsaid="row source allocate new identity source",
    rwsdef="RoW Source DEFinitions",
    rwsfcd="row source fetch from rowsource",
    rwsima="row source retrieval according to defining query",
    rwsstd="row source start row source",
    sage="exadata specific",
    sagebkcomp="exadata specific block(or backup?) compression",
    sagebxfer="exadata specific block transfer",
    sagecache="exadata specific cache layer",
    sagecell="exadata specific cell",
    sagedata="exadata specific data layer",
    sageindex="exadata specific index layer",
    sagesql="exadata specific sql",
    sagetxn="exadata specific transaction layer",
    savepoint="SYS.DBMS_STANDARD.savepoint(C)/SYS.DBMS_TRANSACTION.savepoint(C)",
    scg="System-dependent Concurrency - Global locks",
    schemavalidate="SYS.XMLTYPE.SCHEMAVALIDATE(XMLTYPE_LIB)",
    scl="latches",
    sclfr="latches free",
    sclgtf="latches fast get with no spin",
    sclgts="latches slow get with spin (if CPU greater than 1)",
    scls="latches operating system dependent clusterware integration",
    scm="PLSQL apps",
    scu="operating system concurrency unique(?)",
    scuinst="operating system concurrency unique(?) instance",
    sculkget="operating system concurrency unique(?) lockfile (lk DB_UNIQUE_NAME )",
    scumnt="operating system concurrency unique(?) mount",
    scurls="operating system concurrency unique(?) release",
    sdataupd="CTXSYS.DRVDML.TRUSTED_SDATA_CC(DR$LIB)/CTXSYS.DRVDDL.TRUSTED_SDATA_CC(DR$LIB)",
    sdbgrf="Diagnostic directory and file services",
    sdbgrfwf_write_file="Diagnostic directory and file services write to tracefile",
    sdbima="sort operation",
    security_get_acloid="XDB.DBMS_XDBZ.GET_ACLOID(SECURITY_LIB)",
    security_get_table_oid="XDB.DBMS_XDBZ0.GET_TABLE_OID(SECURITY_LIB)",
    security_get_userid="XDB.DBMS_XDBZ.GET_USERID(SECURITY_LIB)",
    security_get_username="XDB.DBMS_XDBZ0.GET_USERNAME(SECURITY_LIB)",
    security_get_valid_acl="XDB.DBMS_XDBZ0.GET_VALID_ACL(SECURITY_LIB)",
    security_init="XDB.DBMS_XDBZ0.INITXDBSECURITY(SECURITY_LIB)",
    security_purgeldapcache="XDB.DBMS_XDBZ.PURGELDAPCACHE(SECURITY_LIB)",
    security_raise_error="XDB.DBMS_XDBZ0.RAISE_ERROR(SECURITY_LIB)",
    security_validate_fusion_acl="XDB.DBMS_XDBZ.VALIDATEFUSIONACL(SECURITY_LIB)",
    security_validateacl="XDB.DBMS_XDBZ.VALIDATEACL(SECURITY_LIB)",
    securitygetacloid="XDB.DBMS_XDBZ.GET_ACLOID(SECURITY_LIB)",
    securitygettableoid="XDB.DBMS_XDBZ0.GET_TABLE_OID(SECURITY_LIB)",
    securitygetuserid="XDB.DBMS_XDBZ.GET_USERID(SECURITY_LIB)",
    securitygetusername="XDB.DBMS_XDBZ0.GET_USERNAME(SECURITY_LIB)",
    securitygetvalidacl="XDB.DBMS_XDBZ0.GET_VALID_ACL(SECURITY_LIB)",
    securityinit="XDB.DBMS_XDBZ0.INITXDBSECURITY(SECURITY_LIB)",
    securitypurgeldapcache="XDB.DBMS_XDBZ.PURGELDAPCACHE(SECURITY_LIB)",
    securityraiseerror="XDB.DBMS_XDBZ0.RAISE_ERROR(SECURITY_LIB)",
    securityvalidateacl="XDB.DBMS_XDBZ.VALIDATEACL(SECURITY_LIB)",
    securityvalidatefusionacl="XDB.DBMS_XDBZ.VALIDATEFUSIONACL(SECURITY_LIB)",
    sel="select",
    select="select ??",
    selectpls="SYS.JDOM_T.redact(DBMS_JDOM_LIB)",
    selectstr="SYS.JDOM_T.redact(DBMS_JDOM_LIB)",
    selexe="select execute: prepare area for fetch",
    semtimedop="Linux: perform atomically an array of semaphore operations",
    sendpipe="SYS.DBMS_PIPE.SENDPIPE(C)",
    seq="sequence numbers",
    set="SYS.DBMS_RESULT_CACHE_API.Set(C)",
    set_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    set_ev_icd="SYS.DBMS_SYSTEM.SET_EV_ICD(C)",
    set_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    set_sesspar_icd="SYS.DBMS_SYSTEM.SET_SESSPAR_ICD(C)",
    set_transaction_use="SYS.DBMS_STANDARD.set_transaction_use(C)",
    set_warning_setting_string="SYS.DBMS_WARNING.SET_WARNING_SETTING_STRING()",
    setarr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setblob_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setblob_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setblobarr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setblobobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setboolean_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setboolean_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setbooleanarr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setbooleanobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setc="SYS.DBMS_RESULT_CACHE_API.SetC(C)",
    setclob_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setclob_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setclobarr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setclobobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setdate_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setdateobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setevicd="SYS.DBMS_SYSTEM.SET_EV_ICD(C)",
    setnull_arr="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setnull_obj="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setnullarr="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setnullobj="SYS.JDOM_T.put_Null(DBMS_JDOM_LIB)",
    setnumber_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setnumber_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setnumberarr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setnumberobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setschemavalidated="SYS.XMLTYPE.SETSCHEMAVALIDATED(XMLTYPE_LIB)",
    setsessparicd="SYS.DBMS_SYSTEM.SET_SESSPAR_ICD(C)",
    setstring_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setstring_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setstringarr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setstringobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    settransactionuse="SYS.DBMS_STANDARD.set_transaction_use(C)",
    settstamp_arr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    settstamp_obj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    settstamparr="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    settstampobj="SYS.JDOM_T.put(DBMS_JDOM_LIB)",
    setwarningsettingstring="SYS.DBMS_WARNING.SET_WARNING_SETTING_STRING()",
    sgipc="operatign system dependent grid inter process calls",
    sk="[OS Dependent Kernel]",
    skdstdst="[OS Dependent Kernel] dump a stack trace",
    skg="[OS Dependent Kernel] generic",
    skgf="[OS Dependent Kernel] generic file",
    skgfalo="[OS Dependent Kernel] generic file allocate sequential device",
    skgfcls="[OS Dependent Kernel] generic file close device",
    skgfgiod="[OS Dependent Kernel] generic file get IO done (?)",
    skgfnxtio="[OS Dependent Kernel] generic file next IO",
    skgfofi="[OS Dependent Kernel] generic file open file",
    skgfospo="[OS Dependent Kernel] generic file operating system poll for IO completion",
    skgfqio="[OS Dependent Kernel] generic file queue I/O request(s)",
    skgfr="[OS Dependent Kernel] generic file requests",
    skgfr_error64="[OS Dependent Kernel] generic file requests check for errors",
    skgfr_lio_listio64="[OS Dependent Kernel] generic file requests perform listio (AIO) 64 bits",
    skgfr_open64="[OS Dependent Kernel] generic file requests open file 64 bits",
    skgfrciohdlr="[OS Dependent Kernel] generic file requests concurrent IO handler",
    skgfrdup="[OS Dependent Kernel] generic file requests duplicate file handle",
    skgfrgsz="[OS Dependent Kernel] generic file requests get size",
    skgfrliopo="[OS Dependent Kernel] generic file requests listio (AIO) poll",
    skgfrls="[OS Dependent Kernel] generic file requests release a sequential device previously allocated",
    skgfrvldtrq="[OS Dependent Kernel] generic file requests validate requests",
    skgfrwat="[OS Dependent Kernel] generic file requests wait for IO to complete",
    skgm="[OS Dependent Kernel] generic memory (os dependent)",
    skgmattach="[OS Dependent Kernel] generic memory (os dependent) attach to shared memory realm",
    skgmlocate="[OS Dependent Kernel] generic memory (os dependent) locate a primary segment from a realm",
    skgmrf="[OS Dependent Kernel] generic memory (os dependent) real free heap",
    skgmrf_alloc="[OS Dependent Kernel] generic memory (os dependent) real free heap allocate memory",
    skgmrf_blknotoaddr="[OS Dependent Kernel] generic memory (os dependent) real free heap calculate memory address for mmap",
    skgmrf_free="[OS Dependent Kernel] generic memory (os dependent) real free heap calculate memory ranges to be freed",
    skgmrf_release="[OS Dependent Kernel] generic memory (os dependent) real free heap release memory",
    skgmstack="[OS Dependent Kernel] generic memory (os dependent) call specified function with extra stack space",
    skgnfs="[OS Dependent Kernel] generic network file system",
    skgnfs_poll_channels="[OS Dependent Kernel] generic network file system poll network paths",
    skgpnumcpu="[OS Dependent Kernel] generic return number of cpus in system",
    skgptalive="[OS Dependent Kernel] generic thread alive (check if process or thread is alive)",
    skgpw="[OS Dependent Kernel] generic post/wait",
    skgpwinit="[OS Dependent Kernel] generic post/wait initialization",
    skgpwpost="[OS Dependent Kernel] generic post/wait post",
    skgpwwait="[OS Dependent Kernel] generic post/wait wait",
    skgs="[OS Dependent Kernel] generic service",
    skgsl="[OS Dependent Kernel] generic service latches",
    skgslcas="[OS Dependent Kernel] generic service latches get latch fast with no spin (SPARC 11g)",
    skgslgf="[OS Dependent Kernel] generic service latches get latch fast with no spin (SPARC 8i-10g)",
    skgslgts="[OS Dependent Kernel] generic service latches 8i-10g spin get of exclusive latch (SPARC)",
    skgstm="[OS Dependent Kernel] generic service time",
    skgstmgetepochts="[OS Dependent Kernel] generic service time get epoch timestamp (gettimeofday)",
    skgvm="[OS Dependent Kernel] generic virtual machine",
    skgvm_cpuid="[OS Dependent Kernel] generic virtual machine detect cpuid",
    skgvm_detect_vmware="[OS Dependent Kernel] generic virtual machine detect vmware",
    skgvm_detect_xen="[OS Dependent Kernel] generic virtual machine detect xen",
    skgx="[OS Dependent Kernel] generic communication",
    skgxn="[OS Dependent Kernel] generic communication node monitor",
    skgxncin="[OS Dependent Kernel] generic communication node monitor defines an OSD context and returns a handle",
    skgxnpstat="[OS Dependent Kernel] generic communication node monitor polls/waits for process group status",
    skgxnreg="[OS Dependent Kernel] generic communication node monitor registers with process group as primary member (LMON)",
    skgxnsrg="[OS Dependent Kernel] generic communication node monitor registers with process group as slave member",
    skgxp="[OS Dependent Kernel] generic communication IPC",
    skgxpdmpmem="[OS Dependent Kernel] generic IPC communication ??",
    skgxpfragsnd="[OS Dependent Kernel] generic IPC communication ??",
    skgxpimcpy="[OS Dependent Kernel] generic IPC communication ??",
    skgxpiwait="[OS Dependent Kernel] generic IPC communication ??",
    skgxpmcpy="[OS Dependent Kernel] generic IPC communication ??",
    skgxppost="[OS Dependent Kernel] generic communication IPC post the owner of a contact out of a blocking call",
    skgxpprcrcv="[OS Dependent Kernel] generic IPC communication ??",
    skgxprusr="[OS Dependent Kernel] generic IPC communication ??",
    skgxpsegsnda="[OS Dependent Kernel] generic IPC communication ??",
    skgxpwait="[OS Dependent Kernel] generic IPC communication ??",
    skgxpwaiti="[OS Dependent Kernel] generic IPC communication ??",
    skgxpxmit="[OS Dependent Kernel] generic IPC communication ??",
    skip="SYS.SODA_OPERATION_T.SKIP(DBMS_SODAOPR_LIB)",
    skip_acl_11g_compatible_check="SYS.DBMS_NETWORK_ACL_ADMIN.SKIP_ACL_11G_COMPATIBLE_CHECK(C)",
    skipacl11gcompatiblecheck="SYS.DBMS_NETWORK_ACL_ADMIN.SKIP_ACL_11G_COMPATIBLE_CHECK(C)",
    skofs="[OS Dependent Kernel] OFS file system implementation",
    skuz="[OS Dependent Kernel] security (orapwd)",
    skuzfbs="[OS Dependent Kernel] security (orapwd) determine orapw file block size",
    sl="operating system (dependent) library",
    slave="operating system dependent call ??",
    slcpu="operating system (dependent) library get cpu usage",
    slcpums="operating system (dependent) library get cpu usage measurement (for getrusage)",
    slcra="operating system (dependent) library we trip here if someone else other than ssexhd() calls us",
    slgei="operating system (dependent) library call function with the oracle error code and arguments",
    slgts="operating system (dependent) library get time stamp (for gettimeofday)",
    slmecpy="operating system dependent call ??",
    slmsrd="operating system (dependent) library message file read, reads .msb file",
    slrac="operating system (dependent) library verify (memory) read access",
    sltrgatime64="operating system (dependent) library arbitrary time lookup",
    sltrgftime64="operating system (dependent) library time lookup main (for clock_gettime)",
    sltrgftime64_cgt="operating system (dependent) library time lookup main (for clock_gettime) clock_gettime",
    sltrusleep="operating system (dependent) library true (?) sleep (calls nanosleep)",
    slts="[OS (dependent) library threading services]",
    sltsm="[OS (dependent) library threading services mutex]",
    sltsmda="[OS (dependent) library threading services mutex] directed acquire. wrapper for ssOswPthread_mutex_lock",
    sltsmdi="[OS (dependent) library threading services mutex] directed insert memory? calls ssMemAlloc",
    sltsmdr="[OS (dependent) library threading services mutex] directed release. wrapper for ssOswPthread_mutex_unlock",
    sltsmdt="[OS (dependent) library threading services mutex] directed try. wrapper for ssOswPthread_mutex_trylock",
    sltsmdta="[OS (dependent) library threading services mutex] directed try. wrapper for ssOswPthread_mutex_trylock directed timed acquire. calls sltsmnta",
    sltsmna="[OS (dependent) library threading services mutex] named acquire. wrapper for ssOswPthread_mutex_lock",
    sltsmnr="[OS (dependent) library threading services mutex] named release. wrapper for ssOswPthread_mutex_unlock",
    sltsmnt="[OS (dependent) library threading services mutex] named try. wrapper for ssOswPthread_mutex_trylock",
    sltsmnta="[OS (dependent) library threading services mutex] named try. wrapper for ssOswPthread_mutex_trylock named timed acquire. calls pthread_mutex_timedlock",
    sltsmxd="[OS (dependent) library threading services mutex] 'exchange' destroy. destroy a mutex",
    sltsmxi="[OS (dependent) library threading services mutex] 'exchange' insert. insert a mutex",
    slz="operating system (dependent) library zoned (NLS)",
    slzgetevar="operating system (dependent) library zoned (NLS) get environment variable",
    slzsetevar="operating system (dependent) library zoned (NLS) set environment variable",
    sm="operating system dependent memory",
    smb="operating system dependent memory buffer",
    smbalo="operating system dependent memory buffer allocate an smkdef from specified storage bin",
    smbeod="operating system dependent memory buffer signal end of data for memory buffer",
    smbockagetpivot="operating system dependent memory buffer ??",
    smbput="operating system dependent memory buffer put a record into the memory buffer",
    sn="[OS Dependent Network]",
    sndmsg="[OS Dependent Network] ??",
    snltmdf="[OS Dependent Network] timer driver: called by SIGALRM",
    snt="[OS Dependent Network] transport",
    sntp="[OS Dependent Network] transport ipc",
    sntpread="[OS Dependent Network] transport ipc issue read",
    sntpwrite="[OS Dependent Network] transport ipc issue write",
    sntt="[OS Dependent Network] transport tcp/ip",
    snttread="[OS Dependent Network] transport tcp/ip read data on a socket",
    snttwrite="[OS Dependent Network] transport tcp/ip write data to a socket",
    sor="sort operation",
    soreod="sort operation end of data: close data input for sort",
    sorputqb="sort operation insert record into sort",
    sou2o="main oracle executable entry point",
    sp="operating system dependent process functions",
    sp_sigset_raise_signal="operating system dependent process functions obtain process ID and send signal",
    spefcmpa="operating system dependent process functions marshall procedure arguments",
    spefmccallstd="operating system dependent process functions c calling standard",
    sqn="SeQueNce reference",
    sqnprs="sequence reference parsing",
    sr="sort operation",
    ss="[OS Dependent System] ",
    ssexhd="[OS Dependent System] dump routine",
    ssk="[OS Dependent System Kernel] ",
    sskg="[OS Dependent System Kernel Generic] ",
    sskgm="[OS Dependent System Kernel Memory] ",
    sskgmrf="[OS Dependent System Kernel Memory] real free heap",
    sskgmrf_unmaprange="[OS Dependent System Kernel Memory] real free heap unmap memory range",
    sskgmrf_validaterange="[OS Dependent System Kernel Memory] real free heap mmap memory range",
    sskgp="[OS Dependent System Kernel Process] ",
    sskgp_gettid="[OS Dependent System Kernel Process] get thread id",
    sskgp_tgkill="[OS Dependent System Kernel Process] thread get and kill. send a signal to a process/thread",
    sskgpw="[OS Dependent System Kernel Process] post/wait",
    sskgpwidcmp="[OS Dependent System Kernel Process] post/wait compare semid of semaphores to be posted",
    sskgpwpost="[OS Dependent System Kernel Process] post/wait post a single semaphore",
    sskgpwvectorpost="[OS Dependent System Kernel Process] post/wait post multiple semaphores",
    sskgpwwait="[OS Dependent System Kernel Process] post/wait wait",
    sskgslgf="[OS Dependent System Kernel Generic] immediate latch get (X86, 8i-10g)",
    sskgslspin="[OS Dependent System Kernel Generic] spin for a latch",
    sskgxp="[OS Dependent System Kernel Generic] ipc communication",
    sskgxp_select="[OS Dependent System Kernel Generic] ipc communication waits \"timeout\" microseconds for an asynchronous request/event associated with context. if zero, return immediately",
    sskgxph="[OS Dependent System Kernel Generic] ipc communication hmp implementation (hpux)",
    sskgxpu="[OS Dependent System Kernel Generic] ipc communication udp",
    sslnx="[OS Dependent System] LnxLib - Math",
    sslsshandler="[OS Dependent System] SSLS signal handler for all signals",
    sslsssynchhdlr="[OS Dependent System] SSLS signal handler for synch. signals",
    ssmem="[OS Dependent System Memory] ",
    ssmemcalloc="[OS Dependent System Memory] calls ksmem_calloc or calloc",
    ssmemcalloc_shared="[OS Dependent System Memory] calls ksmem_calloc or calloc calls calloc",
    ssmemfree="[OS Dependent System Memory] calls ksmem_free or free",
    ssmemfree_shared="[OS Dependent System Memory] calls ksmem_free or free calls free",
    ssmemmalloc="[OS Dependent System Memory] calls ksmem_malloc or malloc",
    ssmemmalloc_shared="[OS Dependent System Memory] calls ksmem_malloc or malloc calls malloc",
    ssmemrealloc="[OS Dependent System Memory] calls ksmem_realloc or realloc",
    ssmemrealloc_shared="[OS Dependent System Memory] calls ksmem_realloc or realloc calls realloc",
    ssmemstrdup="[OS Dependent System Memory] calls ksmem_strdup or __intel_sse2_strdup",
    ssmemstrdup_shared="[OS Dependent System Memory] calls ksmem_strdup or __intel_sse2_strdup calls __intel_sse2_strdup",
    ssosw="[OS Dependent System (call) Wrapper] ",
    ssoswclose="[OS Dependent System (call) Wrapper] close. close a file descriptor",
    ssoswcreat="[OS Dependent System (call) Wrapper] creat. open and possibly create a file or device",
    ssoswdlclose="[OS Dependent System (call) Wrapper] dlclose. decrements dynamic library file handle count, on zero is unloaded",
    ssoswdlopen="[OS Dependent System (call) Wrapper] dlopen. load dynamic library file",
    ssoswdup="[OS Dependent System (call) Wrapper] dup. duplicate a file descriptor",
    ssoswdup2="[OS Dependent System (call) Wrapper] dup. duplicate a file descriptor dup2. duplicate a file descriptor",
    ssoswfclose="[OS Dependent System (call) Wrapper] fclose. close file",
    ssoswfdopen="[OS Dependent System (call) Wrapper] fdopen. associate a stream with a file descriptor",
    ssoswfopen="[OS Dependent System (call) Wrapper] fopen. open file",
    ssoswfreopen="[OS Dependent System (call) Wrapper] freopen. open file and associate stream with it",
    ssoswopen="[OS Dependent System (call) Wrapper] open64. open a file",
    ssoswpclose="[OS Dependent System (call) Wrapper] pclose. close pipe",
    ssoswpipe="[OS Dependent System (call) Wrapper] pipe. create pipe",
    ssoswpopen="[OS Dependent System (call) Wrapper] popen. pipe stream to process",
    ssoswpthread_mutex_lock="[OS Dependent System (call) Wrapper] pthread_mutex_lock",
    ssoswpthread_mutex_trylock="[OS Dependent System (call) Wrapper] pthread_mutex_trylock",
    ssoswpthread_mutex_unlock="[OS Dependent System (call) Wrapper] pthread_mutex_unlock",
    ssoswsocket="[OS Dependent System (call) Wrapper] socket. create an endpoint for communication",
    sspuser="[OS Dependent System] handle SIGUSR2 for Oracle",
    ssthrdmain="[OS Dependent System] main for every thread in a threaded oracle",
    st_icost_clob="CTXSYS.TEXTOPTSTATS.ODCIGetInterfaces(dr$lib)",
    stack="sort operation ??",
    start="(non oracle)c program entry point",
    statssel1_xdbhi="XDB.FUNCSTATS.cost(XDB.RESOURCE_VIEW_LIB)",
    statssel1xdbhi="XDB.FUNCSTATS.cost(XDB.RESOURCE_VIEW_LIB)",
    std="PLSQL apps",
    step_icd="SYS.DBMS_TRANSACTION.STEP_ICD(C)",
    stepicd="SYS.DBMS_TRANSACTION.STEP_ICD(C)",
    sticostclob="CTXSYS.TEXTOPTSTATS.ODCIGetInterfaces(dr$lib)",
    stragg_terminate="SYS.STRING_AGG_TYPE.ODCIAggregateInitialize(xmltype_lib)",
    straggterminate="SYS.STRING_AGG_TYPE.ODCIAggregateInitialize(xmltype_lib)",
    stringify="SYS.JDOM_T.stringify(DBMS_JDOM_LIB)",
    stsima="sort support implementation",
    subex1="evaluate subquery; exists subquery method 1",
    subsr1="evaluate subquery; single row subquery method 1",
    subsr3="evaluate subquery; single row subquery method 3",
    swap_bootstrap_icd="SYS.DBMS_DDL_INTERNAL.SWAP_BOOTSTRAP_ICD(C)",
    swapbootstrapicd="SYS.DBMS_DDL_INTERNAL.SWAP_BOOTSTRAP_ICD(C)",
    sxorchk="system xor check",
    sys_gettriggerstate="SYS.DBMS_STANDARD.sys_GetTriggerState(C)",
    sysgettriggerstate="SYS.DBMS_STANDARD.sys_GetTriggerState(C)",
    tablefunc="CTXSYS.DRVDISP.TRUSTED_TABLEFUNC(DR$LIB)",
    tbl_contains_adt="MDSYS.TBLCONTAINSADT.TblContainsAdt(ORDMD_UTL_LIBS)",
    tblcontainsadt="MDSYS.TBLCONTAINSADT.TblContainsAdt(ORDMD_UTL_LIBS)",
    tbsdrv="create/alter/drop tablespace function support",
    to_geojson_int="MDSYS.SDO_UTIL.TO_GEOJSON_INT(ORDMD_UTL_LIBS)",
    toblob="SYS.JDOM_T.to_Blob(DBMS_JDOM_LIB)",
    toboolean="SYS.JDOM_T.to_Boolean(DBMS_JDOM_LIB)",
    toclob="SYS.JDOM_T.to_Clob(DBMS_JDOM_LIB)",
    todate="SYS.JDOM_T.to_Date(DBMS_JDOM_LIB)",
    togeojsonint="MDSYS.SDO_UTIL.TO_GEOJSON_INT(ORDMD_UTL_LIBS)",
    tonumber="SYS.JDOM_T.to_Number(DBMS_JDOM_LIB)",
    toobject="SYS.XMLTYPE.TOOBJECT(XMLTYPE_LIB)",
    tostring="SYS.JDOM_T.to_String(DBMS_JDOM_LIB)",
    totstamp="SYS.JDOM_T.to_Timestamp(DBMS_JDOM_LIB)",
    transform_xmltype="SYS.XMLTYPE.TRANSFORM(XMLTYPE_LIB)",
    transformxmltype="SYS.XMLTYPE.TRANSFORM(XMLTYPE_LIB)",
    tre="[PL/SQL] ",
    trim="SYS.PLITBLM.trim(c)",
    ttc="two task common",
    ttcacr="two task common read into a user data area",
    ttcbur="two task common burst record",
    ttcc2u="two task common convert type x to type y",
    ttcclr="two task common send/receive without conversion",
    ttcdrv="two task common called when message received",
    ttcgcshnd="two task common get character set handle(?): oracle is checking that the remote character set id is valid to do type conversions with different character sets",
    ttci2u="two task common integer type to universal representation",
    ttcpip="two task common pipe read/write",
    ttcrd2r="two task common rowid descriptor to rowid conversion routine",
    ttcrs2c="two task common result set to cursor conversion routine",
    ttp="Database Audit Next Generation",
    ub8_to_kscn_impl="convert ub8 to kernel SCN",
    uixexe="index maintenance operations",
    ul="SQLLDR Load",
    unique_session_id="SYS.DBMS_PIPE.UNIQUE_SESSION_ID(C)",
    uniquesessionid="SYS.DBMS_PIPE.UNIQUE_SESSION_ID(C)",
    upd="update",
    updafterrowtrigger="update ??",
    update="CTXSYS.DRVDDL.ContextOldUpdate(dr$lib)/CTXSYS.RULEINDEXMETHODS.TRUSTED_UPDATE(DR$LIB)/CTXSYS.XPATHINDEXMETHODS.TRUSTED_UPDATE(DR$LIB)",
    update_endian="MDSYS.SDO_UTIL.UPDATE_ENDIAN(ORDMD_UTL_LIBS)",
    update_xdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_upd(xdb.PATH_VIEW_LIB)",
    update_xdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    updateendian="MDSYS.SDO_UTIL.UPDATE_ENDIAN(ORDMD_UTL_LIBS)",
    updateraster="MDSYS.SDO_GEOR_INT.UPDATERASTER(ORDMD_GEOR_LIBS)",
    updatexdbpv="XDB.XDB_PVTRIG_PKG.pvtrig_upd(xdb.PATH_VIEW_LIB)",
    updatexdbrv="XDB.XDB_RVTRIG_PKG.RVTRIG_UPD(XDB.RESOURCE_VIEW_LIB)",
    updating="SYS.DBMS_STANDARD.updating(C)",
    updaul="update Attempt Update of all rows or Lock all rows",
    updauw="update get the values of the update columns",
    upderh="update evaluate right hand side expressions in order to get values",
    updexe="update update execute",
    updgrh="update ??",
    updpcr="update perform constraint operations for each row updated",
    updrow="update Row Procedure used by KXRD to update or lock a row",
    updthreephaseexe="update ??",
    upduaw="update ??",
    upi="user program interface",
    upirtrc="user program interface router with callback",
    ups="upsert",
    upseq="upsert ??",
    upsexe="upsert execute",
    utl_dispatch="CTXSYS.DRIUTL.TRUSTED_CALLOUT(DR$LIB)",
    utldispatch="CTXSYS.DRIUTL.TRUSTED_CALLOUT(DR$LIB)",
    valid_ip_address="SYS.DBMS_NETWORK_ACL_ADMIN.VALID_IP_ADDRESS(C)",
    validate_rw_equivalence="SYS.DBMS_ADVANCED_REWRITE.VALIDATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    validaterwequivalence="SYS.DBMS_ADVANCED_REWRITE.VALIDATE_REWRITE_EQUIVALENCE(DBMS_RWEQUIV_LIB)",
    validipaddress="SYS.DBMS_NETWORK_ACL_ADMIN.VALID_IP_ADDRESS(C)",
    variable_value="SYS.DBMS_SQL.variable_value(c)",
    variable_value_pkg="SYS.DBMS_SQL.variable_value_pkg(c)/SYS.DBMS_SYS_SQL.VARIABLE_VALUE_PKG(C)",
    variablevalue="SYS.DBMS_SQL.variable_value(c)",
    variablevaluepkg="SYS.DBMS_SQL.variable_value_pkg(c)/SYS.DBMS_SYS_SQL.VARIABLE_VALUE_PKG(C)",
    version="SYS.SODA_OPERATION_T.VERSION(DBMS_SODAOPR_LIB)",
    vop="view optimisation",
    vopdrv="view optimisation driver",
    vopqbc="view optimisation query block",
    vsn="version (?)",
    wait_for_event_icd="SYS.DBMS_SYSTEM.WAIT_FOR_EVENT_ICD(C)",
    waitforeventicd="SYS.DBMS_SYSTEM.WAIT_FOR_EVENT_ICD(C)",
    wpezauth="SYS.DBMS_EPG.WPEZAUTH(C)",
    wpezdeauth="SYS.DBMS_EPG.WPEZDEAUTH(C)",
    wpiu="PLSQL apps",
    wrap_coll="SYS.DBMS_DDL.WRAP_COLL(C)",
    wrap_vc2="SYS.DBMS_DDL.WRAP_VC2(C)",
    wrapcoll="SYS.DBMS_DDL.WRAP_COLL(C)",
    wrapvc2="SYS.DBMS_DDL.WRAP_VC2(C)",
    xct="transaction management",
    xctcom="transaction management commit: commit the current tranaction of the current session",
    xctctl="transaction management commit top level transaction in a transaction tree",
    xctend="transaction management end",
    xctrol="transaction management rollback: rollback current transaction of the current session",
    xmlseqcurfetchstub="SYS.XMLSEQCUR_IMP_T.ODCITableStart(XMLtype_lib)/SYS.XMLSEQCUR2_IMP_T.ODCITableStart(XMLtype_lib)",
    xmlseqfetchstub="SYS.XMLSEQ_IMP_T.ODCITableStart(XMLtype_lib)",
    xpl="SQL explain plan",
    xplcomparequeryplansext="SYS.DBMS_SQLTUNE_INTERNAL.TEST_COMPARE_QUERY_PLANS(DBMS_XPLAN_LIB)",
    xplcomputeplanhashext="SYS.DBMS_SPM_INTERNAL.I_COMPUTE_PLAN_HASH_VALUE(DBMS_XPLAN_LIB)/SYS.DBMS_SPM.I_COMPUTE_PLAN_HASH_VALUE(DBMS_XPLAN_LIB)",
    xpldumpsqltrace="SQL explain plan produce STAT lines in sql trace",
    xplfetchrow="SQL explain plan ??",
    xplgenxpl="SQL explain plan generate explain plan",
    xplgetpredicates="SQL explain plan ??",
    xplmakerow="SQL explain plan ??",
    xplnmv_cleanup="SYS.DBMS_XRWMV.CLEANUP_3GL(DBMS_XMV_LIB)",
    xplnmv_clob_array="SYS.DBMS_XRWMV.XPLNMV_3GLCA(DBMS_XMV_LIB)",
    xplnmv_clob_table="SYS.DBMS_XRWMV.XPLNMV_3GLCT(DBMS_XMV_LIB)",
    xplnmv_with_array="SYS.DBMS_XRWMV.XPLNMV_3GLA(DBMS_XMV_LIB)",
    xplnmv_with_table="SYS.DBMS_XRWMV.XPLNMV_3GLTI(DBMS_XMV_LIB)",
    xplnmvcleanup="SYS.DBMS_XRWMV.CLEANUP_3GL(DBMS_XMV_LIB)",
    xplnmvclobarray="SYS.DBMS_XRWMV.XPLNMV_3GLCA(DBMS_XMV_LIB)",
    xplnmvclobtable="SYS.DBMS_XRWMV.XPLNMV_3GLCT(DBMS_XMV_LIB)",
    xplnmvwitharray="SYS.DBMS_XRWMV.XPLNMV_3GLA(DBMS_XMV_LIB)",
    xplnmvwithtable="SYS.DBMS_XRWMV.XPLNMV_3GLTI(DBMS_XMV_LIB)",
    xplnrw_clob_array="SYS.DBMS_XRWMV.XPLNRW_3GLCA(DBMS_XRW_LIB)",
    xplnrw_clob_table="SYS.DBMS_XRWMV.XPLNRW_3GLCT(DBMS_XRW_LIB)",
    xplnrw_table_em="SYS.DBMS_XRWMV.XPLNRW_EM_3GLT(DBMS_XRW_LIB)",
    xplnrw_with_array="SYS.DBMS_XRWMV.XPLNRW_3GLA(DBMS_XRW_LIB)",
    xplnrw_with_table="SYS.DBMS_XRWMV.XPLNRW_3GLT(DBMS_XRW_LIB)",
    xplnrwclobarray="SYS.DBMS_XRWMV.XPLNRW_3GLCA(DBMS_XRW_LIB)",
    xplnrwclobtable="SYS.DBMS_XRWMV.XPLNRW_3GLCT(DBMS_XRW_LIB)",
    xplnrwtableem="SYS.DBMS_XRWMV.XPLNRW_EM_3GLT(DBMS_XRW_LIB)",
    xplnrwwitharray="SYS.DBMS_XRWMV.XPLNRW_3GLA(DBMS_XRW_LIB)",
    xplnrwwithtable="SYS.DBMS_XRWMV.XPLNRW_3GLT(DBMS_XRW_LIB)",
    xplpredtotext="SQL explain plan ??",
    xplprocesspeekedbind="SYS.DBMS_XPLAN.PROCESS_PEEKED_BIND_DATA(DBMS_XPLAN_LIB)",
    xqaggavgwrap="SYS.AGGXQAVGIMP.ODCIAggregateInitialize(xmltype_lib)",
    xqaggsumwrap="SYS.AGGXQSUMIMP.ODCIAggregateInitialize(xmltype_lib)",
    xqaggwrap="SYS.AGGXQIMP.ODCIAggregateInitialize(xmltype_lib)",
    xqseqfetchstub="SYS.XQSEQ_IMP_T.ODCITableStart(XMLtype_lib)",
    xqwindowseqfetchstub="SYS.XQWINDOWSEQ_IMP_T.ODCITableStart(XMLtype_lib)",
    xs="olap analytic workspace",
    xsadvsparse="SYS.DBMS_AW.XSADVSPARSE(DBMS_AW_LIB)",
    xsagadvcube="SYS.DBMS_AW.ADVISE_CUBE(DBMS_AW_LIB)",
    xsagadvrel="SYS.DBMS_AW.ADVISE_REL(DBMS_AW_LIB)",
    xsanalyze="SYS.DBMS_AW_STATS.XSANALYZE(DBMS_AW_LIB)",
    xsawnameok="SYS.DBMS_AW.XSAWNAMEOK(DBMS_AW_LIB)",
    xsawolapbit="SYS.DBMS_AW_INTERNAL.XSAWOLAPBIT(DBMS_AW_LIB)",
    xsawrename="SYS.DBMS_AW.INT_AW_RENAME(DBMS_AW_LIB)",
    xsawupgrade="SYS.DBMS_AW.XSAWUPGRADE(DBMS_AW_LIB)",
    xscatclean="SYS.DBMS_AW.CLEAN_ACCESS_TRACKING(DBMS_AW_LIB)",
    xscatdisable="SYS.DBMS_AW.DISABLE_ACCESS_TRACKING(DBMS_AW_LIB)",
    xscatenable="SYS.DBMS_AW.ENABLE_ACCESS_TRACKING(DBMS_AW_LIB)",
    xsclearstats="SYS.DBMS_AW_STATS.XSCLEARSTATS(DBMS_AW_LIB)",
    xscmdexckl="SYS.DBMS_AW.XSCMDEXCKL(DBMS_AW_LIB)",
    xscmdexckn="SYS.DBMS_AW.XSCMDEXCKN(DBMS_AW_LIB)",
    xscmdexcll="SYS.DBMS_AW.XSCMDEXCLL(DBMS_AW_LIB)",
    xscoadgetatrexpr="SYS.DBMS_CUBE_ADVISE.GETATREXPRTCO(DBMS_AW_LIB)",
    xscoadgetlvlname="SYS.DBMS_CUBE_ADVISE.GETLVLNAMETCO(DBMS_AW_LIB)",
    xscoadgetmvobjname="SYS.DBMS_CUBE_ADVISE.GETMVOBJNAMETCO(DBMS_AW_LIB)/SYS.DBMS_CUBE.GETMVOBJNAMETCO(DBMS_AW_LIB)",
    xscoadismdclass="SYS.DBMS_CUBE_ADVISE.IS_MD_CLASSTCO(DBMS_AW_LIB)",
    xscu_get_dflt_msr="SYS.DBMS_CUBE_UTIL.GET_DFLT_MSR(DBMS_AW_LIB)",
    xscu_get_ext_md="SYS.DBMS_CUBE_UTIL.GET_EXT_MD(DBMS_AW_LIB)",
    xscugetdfltmsr="SYS.DBMS_CUBE_UTIL.GET_DFLT_MSR(DBMS_AW_LIB)",
    xscugetextmd="SYS.DBMS_CUBE_UTIL.GET_EXT_MD(DBMS_AW_LIB)",
    xsdb="olap analytic workspace paging manager",
    xseifexportblob="SYS.DBMS_AW.INT_EIF_BLOB_OUT(DBMS_AW_LIB)",
    xseifexporttable="SYS.DBMS_AW.INT_EIF_TABLE_OUT(DBMS_AW_LIB)",
    xseifimportblob="SYS.DBMS_AW.INT_EIF_BLOB_IN(DBMS_AW_LIB)",
    xseifimporttable="SYS.DBMS_AW.INT_EIF_TABLE_IN(DBMS_AW_LIB)",
    xsevalnum="SYS.DBMS_AW.XSEVALNUM(DBMS_AW_LIB)",
    xsevaltxt="SYS.DBMS_AW.EVAL_TEXT(DBMS_AW_LIB)",
    xsfilenameok="SYS.DBMS_AW.XSFILENAMEOK(DBMS_AW_LIB)",
    xsgetcompat="SYS.DBMS_AW.XSGETCOMPAT(DBMS_AW_LIB)",
    xsiculog_disable="[CUBE] SYS.DBMS_CUBE_LOG.DISABLE(DBMS_AW_LIB)",
    xsiculog_enable_loc="[CUBE] SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculog_enable_text="[CUBE] SYS.DBMS_CUBE_LOG.ENABLE_TEXT(DBMS_AW_LIB)",
    xsiculog_enable_txt="[CUBE] SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculog_flush="[CUBE] SYS.DBMS_CUBE_LOG.FLUSH(DBMS_AW_LIB)",
    xsiculog_get_log="[CUBE] SYS.DBMS_CUBE_LOG.GET_LOG(DBMS_AW_LIB)",
    xsiculog_get_log_spec="[CUBE] SYS.DBMS_CUBE_LOG.GET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculog_get_param="[CUBE] SYS.DBMS_CUBE_LOG.GET_PARAMETER(DBMS_AW_LIB)",
    xsiculog_set_log_spec="[CUBE] SYS.DBMS_CUBE_LOG.SET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculog_set_param="[CUBE] SYS.DBMS_CUBE_LOG.SET_PARAMETER(DBMS_AW_LIB)",
    xsiculogdisable="[CUBE] SYS.DBMS_CUBE_LOG.DISABLE(DBMS_AW_LIB)",
    xsiculogenableloc="[CUBE] SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculogenabletext="[CUBE] SYS.DBMS_CUBE_LOG.ENABLE_TEXT(DBMS_AW_LIB)",
    xsiculogenabletxt="[CUBE] SYS.DBMS_CUBE_LOG.ENABLE(DBMS_AW_LIB)",
    xsiculogflush="[CUBE] SYS.DBMS_CUBE_LOG.FLUSH(DBMS_AW_LIB)",
    xsiculoggetlog="[CUBE] SYS.DBMS_CUBE_LOG.GET_LOG(DBMS_AW_LIB)",
    xsiculoggetlogspec="[CUBE] SYS.DBMS_CUBE_LOG.GET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculoggetparam="[CUBE] SYS.DBMS_CUBE_LOG.GET_PARAMETER(DBMS_AW_LIB)",
    xsiculogsetlogspec="[CUBE] SYS.DBMS_CUBE_LOG.SET_LOG_SPEC(DBMS_AW_LIB)",
    xsiculogsetparam="[CUBE] SYS.DBMS_CUBE_LOG.SET_PARAMETER(DBMS_AW_LIB)",
    xsinawcleanup="SYS.DBMS_AW.IN_AW_CLEANUP(DBMS_AW_LIB)",
    xsinitdriver="SYS.DBMS_AW.STARTUP(DBMS_AW_LIB)",
    xsinitdrv="olap analytic workspace DBMS_AW.STARTUP",
    xsisactive="SYS.DBMS_AW.OLAP_ACTIVE(DBMS_AW_LIB)",
    xskditalp="(xs)kditalp - olap analytic workspace ??",
    xskilldriver="SYS.DBMS_AW.SHUTDOWN(DBMS_AW_LIB)",
    xskilldrv="olap analytic workspace DBMS_AW.SHUTDOWN",
    xslobvwrite="SYS.DBMS_AW_EXP.LOB_WRITE(DBMS_AW_LIB)",
    xsociclean="SYS.DBMS_AW.OCI_CLEAN(DBMS_AW_LIB)",
    xsoplog_complete_tco="SYS.DBMS_CUBE_LOG.COMPLETEOPLOGTCO(DBMS_AW_LIB)",
    xsoplog_start_tco="SYS.DBMS_CUBE_LOG.STARTOPLOGTCO(DBMS_AW_LIB)",
    xsoplog_write_tco="SYS.DBMS_CUBE_LOG.WRITEOPLOGTCO(DBMS_AW_LIB)",
    xsoplogcompletetco="SYS.DBMS_CUBE_LOG.COMPLETEOPLOGTCO(DBMS_AW_LIB)",
    xsoplogstarttco="SYS.DBMS_CUBE_LOG.STARTOPLOGTCO(DBMS_AW_LIB)",
    xsoplogwritetco="SYS.DBMS_CUBE_LOG.WRITEOPLOGTCO(DBMS_AW_LIB)",
    xspg="olap analytic workspace paging manager",
    xspgpvalclob="SYS.DBMS_AW.XSPVALCLOB(DBMS_AW_LIB)",
    xspgpvalget="SYS.DBMS_AW.PROP_VAL(DBMS_AW_LIB)",
    xspgpvallen="SYS.DBMS_AW.XSPGPVALLEN(DBMS_AW_LIB)",
    xsrunkk="SYS.DBMS_AW.XSRUNKK(DBMS_AW_LIB)",
    xsrunkl="SYS.DBMS_AW.XSRUNKL(DBMS_AW_LIB)",
    xsrunkn="SYS.DBMS_AW.XSRUNKN(DBMS_AW_LIB)",
    xsrunlk="SYS.DBMS_AW.XSRUNLK(DBMS_AW_LIB)",
    xsrunll="SYS.DBMS_AW.XSRUNLL(DBMS_AW_LIB)",
    xsrunln="SYS.DBMS_AW.XSRUNLN(DBMS_AW_LIB)",
    xsrunning="SYS.DBMS_AW.OLAP_RUNNING(DBMS_AW_LIB)",
    xssamgetmvfilterexpr="SYS.DBMS_CUBE.GETMVFILTEREXPRTCO(DBMS_AW_LIB)",
    xssamgetmvinfoflags="SYS.DBMS_CUBE.GETMVINFOFLAGSTCO(DBMS_AW_LIB)",
    xssamgetmvjoincheck="SYS.DBMS_CUBE.GETMVJOINCHECKTCO(DBMS_AW_LIB)",
    xssamgetmvmeasrel="SYS.DBMS_CUBE.GETMVMEASRELSTCO(DBMS_AW_LIB)",
    xssamgetmvmeasures="SYS.DBMS_CUBE.GETMVMEASURESTCO(DBMS_AW_LIB)",
    xssamgetmvrelalias="SYS.DBMS_CUBE.GETMVRELALIASTCO(DBMS_AW_LIB)",
    xssmplgetobjprotect="SYS.DBMS_AW.GET_OBJ_PROTECT(DBMS_AW_LIB)",
    xssmplsetobjprotect="SYS.DBMS_AW_EXP.SET_OBJ_PROTECT(DBMS_AW_LIB)",
    xssrfbool="SYS.OLAP_BOOL_SRF.OLAP_BOOL_SRF(DBMS_AW_LIB)",
    xssrfdat="SYS.OLAP_DATE_SRF.OLAP_DATE_SRF(DBMS_AW_LIB)",
    xssrfnum="SYS.OLAP_NUMBER_SRF.OLAP_NUMBER_SRF(DBMS_AW_LIB)",
    xssrftxt="SYS.OLAP_TEXT_SRF.OLAP_TEXT_SRF(DBMS_AW_LIB)",
    xstco_check_olap="SYS.DBMS_CUBE_LOG.CHECK_OLAP(DBMS_AW_LIB)",
    xstcocheckolap="SYS.DBMS_CUBE_LOG.CHECK_OLAP(DBMS_AW_LIB)",
    xstfrcfetch="SYS.OLAPRANCURIMPL_T.ODCITABLEDESCRIBE(DBMS_AW_LIB)",
    xsttsfreeze="SYS.DBMS_AW_EXP.TTS_AW_FREEZE(DBMS_AW_LIB)",
    xsttsthaw="SYS.DBMS_AW_EXP.TTS_AW_THAW(DBMS_AW_LIB)",
    xty="expression type check",
    xtydrv="expression type check driver",
    xtyginf="expression type check get character set id and form",
    xtyinpr="expression type check insert numeric precision operator",
    xtyopn="expression type check operand",
    xtypls="expression type check check plsql functions",
    z="security",
    zlke="security label error handling",
    zlkere0="LBACSYS.LBAC_STANDARD.RAISE_FACILITY_ERROR(LBACSYS.LBAC$STD_LIBT)",
    zlkere1="LBACSYS.LBAC_STANDARD.RAISE_FACILITY_ERROR(LBACSYS.LBAC$STD_LIBT)",
    zlkere2="LBACSYS.LBAC_STANDARD.RAISE_FACILITY_ERROR(LBACSYS.LBAC$STD_LIBT)",
    zlkertp="LBACSYS.LBAC_STANDARD.RESET_TRUSTED_PROG(LBACSYS.LBAC$STD_LIBT)",
    zlkestp="LBACSYS.LBAC_STANDARD.SET_TRUSTED_PROG(LBACSYS.LBAC$STD_LIBT)",
    zll="security label security",
    zllalgeel="LBACSYS.LBAC_LABEL_LIST.GET(LBACSYS.LBAC$LABLT_LIBT)",
    zllalinit="LBACSYS.LBAC_LABEL_LIST.NEW_LBAC_LABEL_LIST(LBACSYS.LBAC$LABLT_LIBT)",
    zllalpuel="LBACSYS.LBAC_LABEL_LIST.PUT(LBACSYS.LBAC$LABLT_LIBT)",
    zllaltt="LBACSYS.LBAC_LABEL.TO_TAG(LBACSYS.LBAC$LABEL_LIBT)",
    zllanlab="LBACSYS.LBAC_LABEL.NEW_LBAC_LABEL(LBACSYS.LBAC$LABEL_LIBT)",
    zllanprv="LBACSYS.LBAC_PRIVS.NEW_LBAC_PRIVS(LBACSYS.LBAC$PRIVS_LIBT)",
    zllappid="LBACSYS.LBAC_PRIVS.POLICY_ID(LBACSYS.LBAC$PRIVS_LIBT)",
    zllapset="LBACSYS.LBAC_PRIVS.SET_PRIV(LBACSYS.LBAC$PRIVS_LIBT)",
    zllaptst="LBACSYS.LBAC_PRIVS.TEST_PRIV(LBACSYS.LBAC$PRIVS_LIBT)",
    zllaudaa="LBACSYS.LBAC_SERVICES.AUDIT_ACTION(LBACSYS.LBAC$USER_LIBT)",
    zllaudalt="LBACSYS.SA_AUDIT_ADMIN.PDB_EXEC_SQL(LBACSYS.LBAC$USER_LIBT)",
    zllaudchk="LBACSYS.LBAC_SERVICES.CHECK_AUDIT(LBACSYS.LBAC$USER_LIBT)",
    zllaudgeterrnum="LBACSYS.SA_COMPONENTS.GET_ERROR_NUMBER(LBACSYS.LBAC$USER_LIBT)",
    zllaudsetugang="LBACSYS.LBAC_SERVICES.SET_UGA(LBACSYS.LBAC$USER_LIBT)",
    zllcba="LBACSYS.LBAC_CACHE.BYPASSALL(LBACSYS.LBAC$CACHE_LIBT)",
    zllcbr="LBACSYS.LBAC_CACHE.BYPASSREAD(LBACSYS.LBAC$CACHE_LIBT)",
    zllcccinv="LBACSYS.LBAC_CACHE.CACHE_TAGS_INV(LBACSYS.LBAC$CACHE_LIBT)",
    zllccctags="LBACSYS.LBAC_CACHE.CACHE_TAGS(LBACSYS.LBAC$CACHE_LIBT)",
    zllccol="LBACSYS.LBAC_CACHE.COLUMN_NAME(LBACSYS.LBAC$CACHE_LIBT)",
    zllccpa="LBACSYS.LBAC_CACHE.CHECK_POLICYADMIN(LBACSYS.LBAC$CACHE_LIBT)",
    zllccpr="LBACSYS.LBAC_CACHE.CHECK_POLICYROLE(LBACSYS.LBAC$CACHE_LIBT)",
    zllccps="LBACSYS.LBAC_CACHE.CHECK_POLICYSUBSCRIBED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcgui="LBACSYS.LBAC_CACHE.GET_UNIQUE_ID(LBACSYS.LBAC$CACHE_LIBT)",
    zllcidip="LBACSYS.LBAC_CACHE.IS_DIP_SET(LBACSYS.LBAC$CACHE_LIBT)",
    zllcifo="LBACSYS.LBAC_CACHE.IS_FAILOVER(LBACSYS.LBAC$CACHE_LIBT)",
    zllcing="LBACSYS.LBAC_CACHE.INVERSE_GROUP(LBACSYS.LBAC$CACHE_LIBT)",
    zllcire="LBACSYS.LBAC_CACHE.IS_RAC_ENABLED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcisolsenabled="LBACSYS.LBAC_CACHE.IS_OLS_ENABLED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcisopallowed="LBACSYS.LBAC_CACHE.IS_OP_ALLOWED_LOGICAL(LBACSYS.LBAC$CACHE_LIBT)",
    zllcisrootoidconf="LBACSYS.LBAC_CACHE.IS_OID_CONFIGURED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcmspi="LBACSYS.LBAC_CACHE.MAX_SES_POLICY_ID(LBACSYS.LBAC$CACHE_LIBT)",
    zllcoide="LBACSYS.LBAC_CACHE.OID_ENABLED(LBACSYS.LBAC$CACHE_LIBT)",
    zllcon="LBACSYS.LBAC_CACHE.OPTION_NUMBER(LBACSYS.LBAC$CACHE_LIBT)",
    zllcos="LBACSYS.LBAC_CACHE.OPTION_STRING(LBACSYS.LBAC$CACHE_LIBT)",
    zllcosi="LBACSYS.LBAC_CACHE.OPTION_STRING_IMP(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpe="LBACSYS.LBAC_CACHE.POLICYEXISTS(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpkg="LBACSYS.LBAC_CACHE.PACKAGE(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpn="LBACSYS.LBAC_CACHE.POLICY_NAME(LBACSYS.LBAC$CACHE_LIBT)",
    zllcpon="LBACSYS.LBAC_CACHE.POL_NUMBER(LBACSYS.LBAC$CACHE_LIBT)",
    zllcsdip="LBACSYS.LBAC_CACHE.SET_DIP_FLAG(LBACSYS.LBAC$CACHE_LIBT)",
    zllcsdo="LBACSYS.LBAC_CACHE.STORE_DEFAULT_OPTIONS(LBACSYS.LBAC$CACHE_LIBT)",
    zllcsoid="LBACSYS.LBAC_CACHE.OID_SUBSCRIBE(LBACSYS.LBAC$CACHE_LIBT)",
    zllcstpf="LBACSYS.LBAC_CACHE.FAILEDSTARTUP(LBACSYS.LBAC$CACHE_LIBT)",
    zllcuoid="LBACSYS.LBAC_CACHE.OID_UNSUBSCRIBE(LBACSYS.LBAC$CACHE_LIBT)",
    zllcupt="LBACSYS.LBAC_CACHE.UPDATE_PROPS_TABLE(LBACSYS.LBAC$CACHE_LIBT)",
    zlleacc="LBACSYS.LBAC_EVENTS.ALTER_COLUMN_CHECK(LBACSYS.LBAC$EVENT_LIBT)",
    zlleacr="LBACSYS.LBAC_EVENTS.AFTER_CREATE(LBACSYS.LBAC$EVENT_LIBT)",
    zllebat="LBACSYS.LBAC_EVENTS.BEFORE_ALTER(LBACSYS.LBAC$EVENT_LIBT)",
    zlleconfigureols="LBACSYS.LBAC_LGSTNDBY_UTIL.CONFIGURE_OLS(LBACSYS.LBAC$USER_LIBT)",
    zlledisableols="LBACSYS.LBAC_LGSTNDBY_UTIL.DISABLE_INT(LBACSYS.LBAC$USER_LIBT)",
    zlleenableols="LBACSYS.LBAC_LGSTNDBY_UTIL.ENABLE_INT(LBACSYS.LBAC$USER_LIBT)",
    zllegetdvenforcestatus="SYS.OLS_ENFORCEMENT.GET_DV_ENFORCE_STATUS(LBACSYS.LBAC$EVENT_LIBT)",
    zlleins="LBACSYS.LBAC_EVENTS.COMP_INSTALL(LBACSYS.LBAC$EVENT_LIBT)",
    zlleisolssupported="SYS.IS_OLS_SUPPORTED.is_ols_supported(LBACSYS.LBAC$EVENT_LIBT)",
    zlliccn="LBACSYS.LBAC_SYSDBA.CHECK_COLUMN_NAME(LBACSYS.LBAC$USER_LIBT)",
    zlllaballt="LBACSYS.SA_LABEL_ADMIN.ALTER_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllaballv="LBACSYS.SA_LABEL_ADMIN.ALTER_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabaltgrppar="LBACSYS.SA_COMPONENTS.ALTER_GROUP_PARENT_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabcrtgrp="LBACSYS.SA_COMPONENTS.CREATE_GROUP_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabcrtilbl="LBACSYS.CREATE_OR_FETCH_ILABEL.create_or_fetch_ilabel(LBACSYS.OLS$LAB_LIBT)",
    zlllabcrtlbl="LBACSYS.SA_LABEL_ADMIN.CREATE_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabcutd="LBACSYS.LBAC_LGSTNDBY_UTIL.CONVERT_USER_TO_DATA_LABEL(LBACSYS.OLS$LAB_LIBT)",
    zlllabdrlt="LBACSYS.SA_LABEL_ADMIN.DROP_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabdrlv="LBACSYS.SA_LABEL_ADMIN.DROP_LABEL_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabdrpgrp="LBACSYS.SA_COMPONENTS.DROP_GROUP_INTERNAL(LBACSYS.OLS$LAB_LIBT)",
    zlllabfetilbl="LBACSYS.FETCH_ILABEL.fetch_ilabel(LBACSYS.OLS$LAB_LIBT)",
    zlllabgen="LBACSYS.SA_UTL.DOMINATES(LBACSYS.OLS$LAB_LIBT)",
    zlllabgtn="LBACSYS.SA_UTL.STRICTLY_DOMINATES(LBACSYS.OLS$LAB_LIBT)",
    zlllabinsli="LBACSYS.LBAC_LGSTNDBY_UTIL.INSERT_LABEL(LBACSYS.OLS$LAB_LIBT)",
    zlllablcinv="LBACSYS.SA_COMPONENTS.INV_COMPONENT_IN(LBACSYS.OLS$LAB_LIBT)",
    zlllabtdl="LBACSYS.TO_LBAC_DATA_LABEL_INTERNAL.to_lbac_data_label_internal(LBACSYS.OLS$LAB_LIBT)",
    zlllabtll="LBACSYS.TO_LBAC_LABEL_INTERNAL.to_lbac_label_internal(LBACSYS.OLS$LAB_LIBT)",
    zlllabtnl="LBACSYS.TO_NUMERIC_LABEL_INTERNAL.to_numeric_label_internal(LBACSYS.OLS$LAB_LIBT)",
    zlllabtsl="LBACSYS.NUMERIC_LABEL_TO_CHAR.numeric_label_to_char(LBACSYS.OLS$LAB_LIBT)",
    zllrclearht="LBACSYS.LBAC_RLS.CLEARHT(LBACSYS.LBAC$RLS_LIBT)",
    zllrinvkzscoforpol="LBACSYS.LBAC_RLS.INVKZSCO(LBACSYS.LBAC$RLS_LIBT)",
    zllses_check_ksys_login="LBACSYS.SA_SESSION.CHECK_KSYS_LOGIN(LBACSYS.OLS$SESSION_LIBT)",
    zllses_comp_read="LBACSYS.SA_SESSION.COMP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllses_comp_write="LBACSYS.SA_SESSION.COMP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllses_enflblupd="LBACSYS.LBAC$SA.ENFORCE_LABEL_UPDATE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_enforce_read="LBACSYS.LBAC$SA.ENFORCE_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllses_enforce_write="LBACSYS.LBAC$SA.WRITE_ALLOWED(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_cached_bypass="LBACSYS.LBAC$SA.GET_CACHED_BYPASS(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_cached_privileges="LBACSYS.LBAC$SA.GET_CACHED_PRIVILEGES(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_label="LBACSYS.SA_SESSION.GET_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_read_nlabel="LBACSYS.SA_UTL.NUMERIC_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_row_nlabel="LBACSYS.LBAC$SA.GET_ROW_NLABEL(LBACSYS.OLS$SESSION_LIBT)/LBACSYS.SA_UTL.NUMERIC_ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_unexpanded_seslabel="LBACSYS.SA_SESSION.GET_UNEXPANDED_SESLABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_get_write_nlabel="LBACSYS.SA_UTL.NUMERIC_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_group_read="LBACSYS.SA_SESSION.GROUP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllses_group_write="LBACSYS.SA_SESSION.GROUP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllses_is_policy_cached="LBACSYS.LBAC$SA.IS_POLICY_CACHED(LBACSYS.OLS$SESSION_LIBT)",
    zllses_label="LBACSYS.SA_SESSION.LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_max_level="LBACSYS.SA_SESSION.MAX_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_max_read_label="LBACSYS.SA_SESSION.MAX_READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_max_write_label="LBACSYS.SA_SESSION.MAX_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_min_level="LBACSYS.SA_SESSION.MIN_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_privs="LBACSYS.SA_SESSION.PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllses_read_label="LBACSYS.SA_SESSION.READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_restore_default_labels="LBACSYS.SA_SESSION.RESTORE_DEFAULT_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_row_label="LBACSYS.SA_SESSION.ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_sa_user_name="LBACSYS.SA_SESSION.SA_USER_NAME(LBACSYS.OLS$SESSION_LIBT)",
    zllses_set_access_profile="LBACSYS.SA_SESSION.SET_ACCESS_PROFILE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_set_label="LBACSYS.SA_SESSION.SET_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_set_row_label="LBACSYS.SA_SESSION.SET_ROW_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllses_store_union_privs="LBACSYS.LBAC$SA.STORE_UNION_PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllses_write_label="LBACSYS.SA_SESSION.WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsescheckksyslogin="LBACSYS.SA_SESSION.CHECK_KSYS_LOGIN(LBACSYS.OLS$SESSION_LIBT)",
    zllsescompread="LBACSYS.SA_SESSION.COMP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllsescompwrite="LBACSYS.SA_SESSION.COMP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllsesenflblupd="LBACSYS.LBAC$SA.ENFORCE_LABEL_UPDATE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesenforceread="LBACSYS.LBAC$SA.ENFORCE_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllsesenforcewrite="LBACSYS.LBAC$SA.WRITE_ALLOWED(LBACSYS.OLS$SESSION_LIBT)",
    zllsesfedchk="LBACSYS.SA_USER_ADMIN.CHECK_COMMON(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetcachedbypass="LBACSYS.LBAC$SA.GET_CACHED_BYPASS(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetcachedprivileges="LBACSYS.LBAC$SA.GET_CACHED_PRIVILEGES(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetlabel="LBACSYS.SA_SESSION.GET_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetreadnlabel="LBACSYS.SA_UTL.NUMERIC_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetrownlabel="LBACSYS.LBAC$SA.GET_ROW_NLABEL(LBACSYS.OLS$SESSION_LIBT)/LBACSYS.SA_UTL.NUMERIC_ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetunexpandedseslabel="LBACSYS.SA_SESSION.GET_UNEXPANDED_SESLABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgetwritenlabel="LBACSYS.SA_UTL.NUMERIC_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgroupread="LBACSYS.SA_SESSION.GROUP_READ(LBACSYS.OLS$SESSION_LIBT)",
    zllsesgroupwrite="LBACSYS.SA_SESSION.GROUP_WRITE(LBACSYS.OLS$SESSION_LIBT)",
    zllsesispolicycached="LBACSYS.LBAC$SA.IS_POLICY_CACHED(LBACSYS.OLS$SESSION_LIBT)",
    zllseslabel="LBACSYS.SA_SESSION.LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesmaxlevel="LBACSYS.SA_SESSION.MAX_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesmaxreadlabel="LBACSYS.SA_SESSION.MAX_READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesmaxwritelabel="LBACSYS.SA_SESSION.MAX_WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesminlevel="LBACSYS.SA_SESSION.MIN_LEVEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesprivs="LBACSYS.SA_SESSION.PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllsesreadlabel="LBACSYS.SA_SESSION.READ_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesrestoredefaultlabels="LBACSYS.SA_SESSION.RESTORE_DEFAULT_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesrowlabel="LBACSYS.SA_SESSION.ROW_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllsessausername="LBACSYS.SA_SESSION.SA_USER_NAME(LBACSYS.OLS$SESSION_LIBT)",
    zllsessetaccessprofile="LBACSYS.SA_SESSION.SET_ACCESS_PROFILE_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsessetlabel="LBACSYS.SA_SESSION.SET_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsessetrowlabel="LBACSYS.SA_SESSION.SET_ROW_LABEL_INTERNAL(LBACSYS.OLS$SESSION_LIBT)",
    zllsesstoreunionprivs="LBACSYS.LBAC$SA.STORE_UNION_PRIVS(LBACSYS.OLS$SESSION_LIBT)",
    zllseswritelabel="LBACSYS.SA_SESSION.WRITE_LABEL(LBACSYS.OLS$SESSION_LIBT)",
    zllualtpolint="LBACSYS.LBAC_SYSDBA.ALTER_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluasp="LBACSYS.LBAC_POLICY_ADMIN.APPLY_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluatp="LBACSYS.LBAC_POLICY_ADMIN.APPLY_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)/LBACSYS.LBAC_POLICY_ADMIN.IN(LBACSYS.LBAC$USER_LIBT)",
    zlluaud="LBACSYS.SA_AUDIT_ADMIN.AUDIT_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluchkcdbroot="LBACSYS.LBAC_SYSDBA.CHECK_CDB_ROOT(LBACSYS.LBAC$USER_LIBT)",
    zlluchklbacrole="LBACSYS.LBAC_SYSDBA.CHECK_LBACROLE(LBACSYS.LBAC$USER_LIBT)",
    zllucrp="LBACSYS.LBAC_SYSDBA.CREATE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludip="LBACSYS.LBAC_SYSDBA.DISABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludrp="LBACSYS.LBAC_SYSDBA.DROP_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludsp="LBACSYS.LBAC_POLICY_ADMIN.DISABLE_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlludtp="LBACSYS.LBAC_POLICY_ADMIN.DISABLE_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluenp="LBACSYS.LBAC_SYSDBA.ENABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluesa="LBACSYS.LBAC_SERVICES.EXECUTE_SYS_ACTION_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluesp="LBACSYS.LBAC_POLICY_ADMIN.ENABLE_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zlluetp="LBACSYS.LBAC_POLICY_ADMIN.ENABLE_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllunau="LBACSYS.SA_AUDIT_ADMIN.NOAUDIT_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllunsb="LBACSYS.LBAC_UTL.NLS_SUBSTRB(LBACSYS.LBAC$USER_LIBT)",
    zllunvn="LBACSYS.LBAC_UTL.NLS_VALIDNAME(LBACSYS.LBAC$USER_LIBT)",
    zllupd="LBACSYS.LBAC_SESSION.POLICY_DISABLED(LBACSYS.LBAC$USER_LIBT)",
    zllurcrt_ugd="LBACSYS.LBAC_SERVICES.RECREATE_TRIGGERS_UPGRADE(LBACSYS.LBAC$USER_LIBT)",
    zllurcrtugd="LBACSYS.LBAC_SERVICES.RECREATE_TRIGGERS_UPGRADE(LBACSYS.LBAC$USER_LIBT)",
    zllursp="LBACSYS.LBAC_POLICY_ADMIN.REMOVE_SCHEMA_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllurtp="LBACSYS.LBAC_POLICY_ADMIN.REMOVE_TABLE_POLICY_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusr_invusr="LBACSYS.LBAC_EVENTS.INV_USR(LBACSYS.LBAC$EVENT_LIBT)",
    zllusr_store_usr="LBACSYS.LBAC$SA_LABELS.STORE_USER(LBACSYS.LBAC$USER_LIBT)",
    zllusr_sul="LBACSYS.LBAC$SA_LABELS.SET_USER_LABELS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusr_sup="LBACSYS.SA_USER_ADMIN.SET_USER_PRIVS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusrinvusr="LBACSYS.LBAC_EVENTS.INV_USR(LBACSYS.LBAC$EVENT_LIBT)",
    zllusrstoreusr="LBACSYS.LBAC$SA_LABELS.STORE_USER(LBACSYS.LBAC$USER_LIBT)",
    zllusrsul="LBACSYS.LBAC$SA_LABELS.SET_USER_LABELS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zllusrsup="LBACSYS.SA_USER_ADMIN.SET_USER_PRIVS_INTERNAL(LBACSYS.LBAC$USER_LIBT)",
    zt="security encryption",
}