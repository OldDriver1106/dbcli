/*[[Generate delta values based on gv$event_histogram. Usage: @@NAME <options> [0|inst_id] [-lgwr|-io|-gc|-w"<event|wait_class>"|-f"<filter>"] [-c|-n]

    -lgwr: show only the events relative to LGWR
    -io  : show only the events belong to User/System I/O
    -gc  : show only the events belong to Cluster waits
    -w   : show only the events belong to specific event/wait class
    -c   : the percentages of the histogram is based on wait count, instead of wait time
    -n   : the value of the histogram is the number of waits, instead of percentage
  --[[
      @tab: 12.1={gv$event_histogram_micro} 11.1={gv$event_histogram}
      @micro: 12.1={wait_time_micro} 11.1={wait_time_milli*1024}
      @flds : 12.1={} default={--}
      &u : t={log(2,slot_time*2)} c={1}
      &calc: default={[total]} n={100}
      &filter: {
          all={1=1}
          lgwr={event IN ('log file sync',
                         'log file parallel write',
                         'LGWR any worker group',
                         'LGWR all worker groups',
                         'LGWR wait for redo copy',
                         'LGWR worker group ordering',
                         'latch: redo allocation',
                         'latch: redo writing',
                         'ASM IO for non-blocking poll',
                         'gcs log flush sync',
                         'log file switch completion',
                         'log file switch (checkpoint incomplete)',
                         'log file switch (private strand flush incomplete)')},
          io={wait_class in('System I/O','User I/O')},
          gc={wait_class='Cluster' or event like 'gc%'},
          w={lower('&0') in (lower(event),lower(wait_class))},
          f={}
      }
  --]]
]]*/
{
    sql={[[
        SELECT /*grid={topic='Event Histogram(based on wait_count*&u)'}*/ *
        FROM   (SELECT /*+ordered use_nl(timer stat) no_merge(stat) no_expand*/
                       nullif(inst,0) inst,nvl(event,'- Wait Class: '||nvl(wait_class,'All')) event,
                       grouping_id(wait_class,event) g,
                       CASE
                           WHEN slot_time <= 512 THEN
                            '<' || slot_time || 'us'
                           WHEN slot_time <= 524288 THEN
                            '<' || round(slot_time / 1024) || 'ms'
                           WHEN slot_time <= 33554432 THEN
                            '<' || round(slot_time / 1024 / 1024) || 's'
                           WHEN slot_time <= 67108864 THEN
                            '<' || round(slot_time / 1024 / 1024 / 64) || 'm'
                           ELSE
                            '>=1m'
                       END unit,
                       MAX(SUM(TIME_WAITED_MICRO)) over(PARTITION BY inst,wait_class,event) Time,
                       0 avg_time,
                       '|' "|",
                       MAX(SUM(total_waits)) over(PARTITION BY inst,wait_class,event) Waits,
                       SUM(SUM(svalue*&u)) OVER(partition by inst,wait_class,event) total,
                       nullif(SUM(svalue*&u), 0) pct
                FROM   (SELECT /*+ordered use_hash(a b)*/
                               decode(lower(nvl('&v1','a')),'a',0,inst_id)  inst,
                               event, a.total_waits, a.time_waited_micro, b.&micro slot_time, b.wait_count svalue,
                               a.wait_class
                        FROM   gv$system_event a
                        JOIN   &tab b
                        USING  (inst_id, event)
                        WHERE  a.wait_class != 'Idle'
                        AND    lower(nvl('&v1','a')) in('a','0',to_char(inst_id))
                        AND    (&filter)) stat
                GROUP  BY inst,rollup(wait_class,event),
                          CASE
                              WHEN slot_time <= 512 THEN
                               '<' || slot_time || 'us'
                              WHEN slot_time <= 524288 THEN
                               '<' || round(slot_time / 1024) || 'ms'
                              WHEN slot_time <= 33554432 THEN
                               '<' || round(slot_time / 1024 / 1024) || 's'
                              WHEN slot_time <= 67108864 THEN
                               '<' || round(slot_time / 1024 / 1024 / 64) || 'm'
                              ELSE
                               '>=1m'
                          END
                HAVING (:filter!='1=1' OR SUM(total_waits)>0)
                )
        PIVOT(MAX(pct)
        FOR    unit IN(
                       &flds '<1us' "<1us",'<2us' "<2us",'<4us' "<4us",'<8us' "<8us",'<16us' "<16us",'<32us' "<32us",'<64us' "<64us",'<128us' "<128us",'<256us' "<256us",'<512us' "<512us",
                       '<1ms' "<1ms",
                       '<2ms' "<2ms",
                       '<4ms' "<4ms",
                       '<8ms' "<8ms",
                       '<16ms' "<16ms",
                       '<32ms' "<32ms",
                       '<64ms' "<64ms",
                       '<128ms' "<128ms",
                       '<256ms' "<256ms",
                       '<512ms' "<512ms",
                       '<1s' "<1s",
                       '<2s' "<2s",
                       '<4s' "<4s",
                       '<8s' "<8s",
                       '<16s' "<16s",
                       '<32s' "<32s",
                       '<1m' "<1m",
                       '>=1m' ">1m"))
    ]],'-'},
    delta_by="TIME,AVG_TIME,WAITS,TOTAL,<1us,<2us,<4us,<8us,<16us,<32us,<64us,<128us,<256us,<512us,<1ms,<2ms,<4ms,<8ms,<16ms,<32ms,<64ms,<128ms,<256ms,<512ms,<1s,<2s,<4s,<8s,<16s,<32s,<1m,>1m",
    group_by="inst,event,g",
    include_zero=false,
    fixed_title=true,
    order_by="-g,-time",
    column_formatter={
        noprint='total',
        USMHD2="time,avg_time",
        k='WAITS,<1us,<2us,<4us,<8us,<16us,<32us,<64us,<128us,<256us,<512us,<1ms,<2ms,<4ms,<8ms,<16ms,<32ms,<64ms,<128ms,<256ms,<512ms,<1s,<2s,<4s,<8s,<16s,<32s,<1m,>1m'
    },
    calc_rules={
        avg_time='[Time]/[waits]',["<1us"]="100*[<1us]/&calc",
        ["<2us"]="100*[<2us]/&calc",
        ["<4us"]="100*[<4us]/&calc",
        ["<8us"]="100*[<8us]/&calc",
        ["<16us"]="100*[<16us]/&calc",
        ["<32us"]="100*[<32us]/&calc",
        ["<64us"]="100*[<64us]/&calc",
        ["<128us"]="100*[<128us]/&calc",
        ["<256us"]="100*[<256us]/&calc",
        ["<512us"]="100*[<512us]/&calc",
        ["<1ms"]="100*[<1ms]/&calc",
        ["<2ms"]="100*[<2ms]/&calc",
        ["<4ms"]="100*[<4ms]/&calc",
        ["<8ms"]="100*[<8ms]/&calc",
        ["<16ms"]="100*[<16ms]/&calc",
        ["<32ms"]="100*[<32ms]/&calc",
        ["<64ms"]="100*[<64ms]/&calc",
        ["<128ms"]="100*[<128ms]/&calc",
        ["<256ms"]="100*[<256ms]/&calc",
        ["<512ms"]="100*[<512ms]/&calc",
        ["<1s"]="100*[<1s]/&calc",
        ["<2s"]="100*[<2s]/&calc",
        ["<4s"]="100*[<4s]/&calc",
        ["<8s"]="100*[<8s]/&calc",
        ["<16s"]="100*[<16s]/&calc",
        ["<32s"]="100*[<32s]/&calc",
        ["<1m"]="100*[<1m]/&calc",
        [">1m"]="100*[>1m]/&calc"
    }
}