/*[[Generate session stats. Usage: @@NAME [options] {[0|<sid>|<sql_id>|-f"<filter>"] [<inst_id>] } [-a]
    -a: Aggregate across all matched sessions

    --[[
    @CHECK_ACCESS_ALL: gv$session/gv$px_session/gv$sesstat/gv$sess_time_model/gv$statname/gv$session_event/gv$active_session_history={true}
    &base: {default={
              WITH s1 AS (
                  SELECT inst_id, SID, &session_info sid#
                  FROM  gv$session 
                  where (&filter)),
              ses AS (select /*+no_merge*/ * from
                (SELECT sid#,inst_id, SID
                FROM   s1
                UNION
                SELECT sid#, s2.inst_id, s2.sid
                FROM   s1, gv$px_session s2
                WHERE  s1.inst_id = s2.inst_id
                AND    s1.SID = s2.sid))}}
        &filter: {
             default={(:V1 IS NULL AND SID=USERENV('SID') or :V1 in(''||sid,sql_id)) and (:V2 IS NULL AND (:snap_cmd is null or inst_id=userenv('instance')) OR :V2=INST_ID OR :V2='0')}
             u={SCHEMANAME=nvl('&0',sys_context('userenv','current_schema'))}
             f={}
        }

    &session_info: default={sid||',@'||inst_id}, a={'A'}

    &stats: {default={
       (SELECT sid#, extractvalue(b.column_value, '/ROW/N') n, 0+extractvalue(b.column_value, '/ROW/V') v
        FROM  (&base select * from ses) ses,
        TABLE (XMLSEQUENCE(EXTRACT(dbms_xmlgen.getxmltype('
        select name n,sum(value) v FROM   gv$sesstat join  v$statname USING (statistic#) 
        WHERE  inst_id=' || ses.inst_id || ' and sid=' || ses.sid || '
        AND    value>0 GROUP BY name'),'/ROWSET/ROW'))) b)
    }}
    --]]
]]*/
{
    sql={
      [[SELECT A.* FROM ( /*grid={topic='Session Stats',height=0}*/
            SELECT /*+no_expand*/
                   sid#,
                   substr(n,1,40) name,
                   sum(v) value
            FROM   &stats
            WHERE  n not in ('DB time',
                        'user logons cumulative',
                        'user calls',
                        'execute count',
                        'user commits',
                        'parse count (total)',
                        'parse count (hard)',
                        'session cursor cache hits',
                        'cell flash cache read hits',
                        'session logical reads',
                        'physical read total bytes',
                        'physical write total bytes',
                        'redo size','undo change vector size',
                        'physical read total bytes optimized',
                        'cell physical IO bytes eligible for predicate offload',
                        'physical read total bytes',
                        'cell physical IO interconnect bytes returned by smart scan',
                        'physical write total bytes optimized',
                        'cell physical IO bytes saved by storage index',
                        'physical read total IO requests',
                        'cell IO uncompressed bytes',
                        'cell physical IO interconnect bytes',
                        'IM scan bytes uncompressed',
                        'IM scan bytes in-memory',
                        'IM populate bytes from storage',
                        'IM repopulate (trickle) bytes from storage',
                        'IM scan rows',
                        'IM scan rows valid',
                        'IM scan rows cache',
                        'IM scan rows projected',
                        'IM populate rows',
                        'IM repopulate (trickle incremental) total rows',
                        'IM scan rows pcode aggregated','session logical reads - IM',
                        'table scan disk non-IMC rows gotten',
                        'table scan rows gotten',
                        'recursive calls',
                        'temp space allocated (bytes)','sorts (rows)','rows fetched via callback',
                        'cell physical IO bytes eligible for smart IOs',
                        'physical reads direct', 'physical writes direct','cell physical write IO bytes eligible for offload',
                        'cell physical IO bytes saved by columnar cache',
                        'session uga memory','session pga memory')
            GROUP BY sid#,n) A
            ORDER BY name]],
        '|', {[[&base /*grid={topic='Session Time Model', fixed_title=true,max_rows=10}*/
                SELECT sid#,
                       substr(stat_name,1,35) name,
                       sum((select value*1e-6 from gv$sess_time_model b 
                        where  a.inst_id=b.inst_id
                        and    a.sid=b.sid
                        and    b.stat_name=case when a.stat_name like 'background%' then 'background elapsed time' else 'DB time' end)) "Pct(%)",
                        sum(VALUE * 1e-6) "Time"
                FROM   gv$sess_time_model a join ses on a.sid=ses.sid and a.inst_id=ses.inst_id
                WHERE  stat_name not in('DB time','background elapsed time')
                AND    value>0
                group by sid#,stat_name]],
              '|',
              [[/*grid={topic='Session Rows',fixed_title=true, include_zero=true,order_by="sid#"}*/
                SELECT sid#, 
                       SUM(DECODE(n, 'table scan rows gotten', v)) "Scan",
                       SUM(DECODE(n, 'IM scan rows', v)) "IM(%)",
                       SUM(DECODE(n, 'HCC scan rdbms rows', v,'EHCC Total Rows for Decompression',v)) "HCC(%)",
                       SUM(DECODE(n, 'sorts (rows)', v)) "Sort",
                       SUM(DECODE(n, 'rows fetched via callback', v)) "Fetch",
                       SUM(DECODE(n, 'undo change vector size', v)) "Undo"
                FROM   &stats
                GROUP  BY sid#]],
              '-',
              [[/*grid={topic='Session Profiles',fixed_title=true,include_zero=true, order_by="sid#"}*/
                with bs as(select value from v$parameter where name='db_block_size')
                SELECT sid#, 
                    SUM(DECODE(n, 'user calls', v)) "Call",
                    SUM(DECODE(n, 'recursive calls', v)) "rCall",
                    SUM(DECODE(n, 'execute count', v)) "Exec",
                    SUM(DECODE(n, 'user commits', v)) "Commit",
                    SUM(DECODE(n, 'parse count (total)', v)) "Parse",
                    SUM(DECODE(n, 'parse count (hard)', v)) "hParse",
                    SUM(DECODE(n, 'session cursor cache hits', v)) "CcHit",
                    SUM(DECODE(n, 'session logical reads',v))*(select * from bs) "LogRead",
                    SUM(DECODE(n, 'physical read total bytes', v)) "PhyRead",
                    SUM(DECODE(n, 'physical write total bytes', v)) "PhyWrite",
                    SUM(DECODE(n, 'physical reads direct', v))*(select * from bs) "dxr(%)",
                    SUM(DECODE(n, 'physical writes direct', v))*(select * from bs) "dxw(%)",
                    SUM(DECODE(n, 'redo size', v)) "Redo",
                    SUM(DECODE(n, 'temp space allocated (bytes)', v)) "Temp",
                    SUM(case when n like 'byte%SQL*Net%' then v end) "SQL*Net"
                FROM   &stats
                GROUP  BY sid#]],
            '-',
            [[/*grid={topic='Exadata Profiles',fixed_title=true,bypassemptyrs=true, order_by="sid#"}*/
              SELECT sid#, 
                     SUM(DECODE(n, 'cell physical IO interconnect bytes', v)) "BandWidth",
                     SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflOut(%)",
                     SUM(DECODE(n, 'cell physical IO bytes eligible for predicate offload', v,'cell physical write IO bytes eligible for offload',v)) "Offload",
                     SUM(DECODE(n, 'physical read total bytes', v, 'physical write total bytes', v)) "OflIn(%)",
                     SUM(DECODE(n, 'cell IO uncompressed bytes', v)) "Unzip",
                     SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflEff",
                     SUM(DECODE(n, 'physical read total bytes optimized', v)) "OptRead",
                     SUM(DECODE(n, 'physical write total bytes optimized', v)) "OptWrite",
                     SUM(DECODE(n, 'cell physical IO bytes saved by storage index', v)) "SISave",
                     SUM(DECODE(n, 'cell flash cache read hits', v)) "FcHit",
                     SUM(DECODE(n, 'physical read total IO requests',v)) "Fc(%)",
                     SUM(DECODE(n, 'cell physical IO bytes saved by columnar cache',v)) "FCC(%)"
              FROM   &stats
              WHERE  EXISTS(select 1 from v$sysstat where value>0 and name like '%offload%')
              GROUP  BY sid#]],
            '-',
            [[/*grid={topic='In-Memory Stats',fixed_title=true,bypassemptyrs=true, order_by="sid#"}*/
              with bs as(select value from v$parameter where name='db_block_size')
              SELECT sid#,
                     SUM(DECODE(n, 'session logical reads - IM', v,0))*(select * from bs) "IM-LIO",
                     SUM(DECODE(n, 'session logical reads', v,0))*(select * from bs) "LIO(%)",
                     SUM(DECODE(n, 'IM scan bytes in-memory', v,0)) "Bytes",
                     SUM(DECODE(n, 'IM scan bytes uncompressed', v,0)) "Unzip",
                     SUM(DECODE(n, 'IM populate bytes from storage', v,0)) "Pops",
                     SUM(DECODE(n, 'IM repopulate (trickle) bytes from storage', v,0)) "re-Pops",
                     SUM(DECODE(n, 'IM scan CUs invalid or missing revert to on disk extent', v,0)) "missCU",
                     '|' "*",
                     SUM(DECODE(n, 'IM scan rows', v,0)) "Rows",
                     SUM(DECODE(n, 'IM scan rows projected', v,0)) "Proj",
                     SUM(DECODE(n, 'IM scan rows pcode aggregated',v)) "pcode",
                     SUM(DECODE(n, 'table scan disk non-IMC rows gotten', v,0)) "Disk",
                     SUM(DECODE(n, 'IM scan rows valid', v,0)) "Valid(%)",
                     SUM(DECODE(n, 'IM scan rows cache', v,0)) "Cache",
                     SUM(DECODE(n, 'IM populate rows', v,0)) "Popr",
                     SUM(DECODE(n, 'IM repopulate (trickle incremental) total rows', v,0)) "re-Popr"
              FROM   &stats
              GROUP  BY sid#]],
            '-',
            [[&base,ASH as(/*grid={topic='Session Events',order_by="-ms",max_rows=20}*/
                SELECT /*+materialize*/ sid#,event,count(1) aas, MAX(w) max_ms, 
                       MAX(sql_id) keep(dense_rank LAST ORDER BY cnt) top_sql,
                       count(distinct sql_id) sqls
                FROM   (SELECT sid#,SQL_ID, SQL_PLAN_HASH_VALUE, EVENT, time_waited / 1000 w, 
                               COUNT(1) OVER(PARTITION BY sid#,event) cnt
                        FROM   gv$active_session_history ash join ses on (ash.inst_id=ses.inst_id and ash.session_id=ses.sid)
                        WHERE  sample_time >= SYSDATE - :snap_interval/ 86400
                        AND    event IS NOT NULL)
                GROUP  BY sid#,event)
              SELECT sid#,
                     wait_class, 
                     substr(event,1,35) NAME,
                     top_sql,
                     lpad(SQLS,4) "SQLs",
                     aas,
                     waits "Waits",
                     ms*1e-3 "ms",
                     max_ms "max_ms",
                     null "avg_ms"
              FROM  (SELECT sid#,
                            extractvalue(b.column_value, '/ROW/EVENT') event,
                            max(extractvalue(b.column_value, '/ROW/WAIT_CLASS')) wait_class,
                            SUM(0+extractvalue(b.column_value, '/ROW/WAITS')) waits, 
                            SUM(0+extractvalue(b.column_value, '/ROW/MS')) ms
                     FROM  ses,
                     TABLE (XMLSEQUENCE(EXTRACT(dbms_xmlgen.getxmltype('
                     select EVENT,wait_class,total_waits WAITS,TIME_WAITED_MICRO MS FROM gv$session_event
                     WHERE  inst_id=' || ses.inst_id || ' and sid=' || ses.sid || '
                     AND    total_waits>0
                     AND    wait_class!=''Idle'''),'/ROWSET/ROW'))) b
                     GROUP  BY SID#,extractvalue(b.column_value, '/ROW/EVENT'))
              LEFT   JOIN ash using(sid#,event)]]
            }
    },
    delta_by="OflEff,IM-LIO,LIO(%),dxr(%),dxw(%),offload,BandWidth,SISave,OflIn(%),OflOut(%),FCC(%),OptRead,OptWrite,FcHit,Fc(%),Unzip,scan,IM(%),HCC(%),Sort,Fetch,Undo,missCU,Unzip,bytes,rows,valid(%),Cache,pcode,proj,pops,re-pops,popr,re-popr,Disk,Pct(%),Swap,rCall,Call,Exec,Commit,Parse,hParse,CcHit,LogRead,PhyRead,PhyWrite,Redo,SQL*Net,value,Time,waits,GETS,MISSES,SLEEPS,IMGETS,IMMISSES,SPINS,MS,Busy,User,Sys,Idle,Nice",
    group_by="sid#,name",
    calc_rules={avg_ms='[ms]/[waits]',
                ['Pct(%)']='[ms]*100/[Pct(%)]',
                ['LIO(%)']='[IM-LIO]*100/[LIO(%)]',
                ['valid(%)']='[valid(%)]*100/[rows]',
                ['IM(%)']='[IM(%)]*100/[scan]',
                ['HCC(%)']='[HCC(%)]*100/[scan]',
                ['dxr(%)']='100*[dxr(%)]/[PhyRead]',
                ['dxw(%)']='100*[dxw(%)]/[PhyWrite]',
                ['Fc(%)']='[FcHit]*100/[Fc(%)]',
                ['OflIn(%)']='[offload]*100/[OflIn(%)]',
                ['OflOut(%)']='[OflOut(%)]*100/[BandWidth]',
                ['OflEff']='100-[OflEff]*100/([Unzip]+[SISave])',
                ['FCC(%)']='[FCC(%)]*100/[offload]'},
    column_formatter={KMG='SISave,IM-LIO,pops,re-pops,phyMem,freeMem,Swap,LogRead,PhyRead,PhyWrite,Redo,Temp,SQL*Net,OptRead,OptWrite,offload,BandWidth,Unzip,bytes',
                     TMB='FcHit,scan,Sort,Fetch,Undo,popr,re-popr,rows,valid,proj,Disk,Cache,pcode,missCU',
                     smhd2='Time',
                     ['#,##0']='value'}
}