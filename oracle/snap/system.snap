/*[[Show System statistics summary. Usage: @@NAME <options> {[<inst_id>] [keyword]} [-iostat|-latch] [-filestat] [-f"<event_filter>"]
    <inst_id>     : Specify the instance number, default to aggregrate all instances' stats. When '0' means don't aggregrate across all instances
    <keyword>     : The keyword to filter gv$sysstat
    <event_filter>: The predicate to filter gv$system_event
    -latch        : Show latch stats instead of active sessions
    -iostat       : Show I/O stats instead of active sessions
    -filestat     : Show Tablespace and file stats instead of system global stats
    --[[
        @CHECK_ACCESS_ALL: gv$px_session/gv$session/gv$latch/gv$osstat/gv$sysstat/gv$sys_time_model/gv$system_event/gv$active_session_history/gv$sqlstats={true}
        @ash_cost: 11={tm_delta_db_time*1e-6} default={1}
        @ver     : 11={} default={--}
        @gv      : 11={TABLE(gv$(cursor(} 10={(((}
        @sysstat : {12.1={json_table(sysstat,'$[*]' columns
                              inst_id number path '$[0]',
                              name    varchar2(100) path '$[1]',
                              value number path '$[2]')} default={gv$sysstat}}
        @sysevent :{12.1={json_table(sysevent,'$[*]' columns
                              inst_id number path '$[0]',
                              WAIT_CLASS    varchar2(30) path '$[1]',
                              EVENT varchar2(300) path '$[2]',
                              TOTAL_WAITS number path '$[3]',
                              TIME_WAITED_MICRO number path '$[4]')} default={gv$system_event}}
        @check_access_celldb: {v$cell_db={(
                  SELECT SUM(decode(METRIC_NAME,'Per Db Number of IOs',METRIC_VALUE,'Per Db Number of IOs for Flash',METRIC_VALUE)) IOPS,
                         SUM(decode(METRIC_NAME,'Per Db Bytes of IO',METRIC_VALUE,'Per Db Bytes of IO for Flash',METRIC_VALUE)) MBPS,
                         SUM(decode(METRIC_NAME,'Per Db Number of IOs for Flash',METRIC_VALUE)) FLASH,
                         SUM(decode(METRIC_NAME,'Per Db Number of small IOs',METRIC_VALUE,'Per Db Number of small IOs for Flash',METRIC_VALUE)) SMALL
                  FROM   V$CELL_DB
                ),}, default={}}

        &global_stats:{
          default={[[/*grid={topic='System Stats(Excluding Profiles)',include_zero=true,height=0}*/
              SELECT inst,name,sum(value) value 
              FROM ( 
                SELECT /*+no_expand*/ &inst1  inst, 
                       substr(NAME,1,45) name, 
                       value
                FROM   &sysstat
                WHERE (:V2 IS NOT NULL OR value>0)
                AND   (:V2 IS NOT NULL and regexp_like(name,:v2,'i') OR
                      (:V2 IS NULL AND NAME not like '%SQL*Net%' AND NAME not like 'OS%' AND NAME not in (
                            'DB time',
                            'logical read bytes from cache',
                            'physical read bytes',
                            'physical write bytes',
                            'user logons cumulative',
                            'user calls',
                            'execute count',
                            'user commits','user rollbacks',
                            'parse count (total)',
                            'parse count (hard)',
                            'session cursor cache hits',
                            'cell flash cache read hits',
                            'session logical reads',
                            'physical read total bytes',
                            'physical write total bytes',
                            'redo size',
                            'physical read total bytes optimized',
                            'cell physical IO bytes eligible for predicate offload',
                            'physical read total bytes',
                            'cell physical IO interconnect bytes returned by smart scan',
                            'physical write total bytes optimized',
                            'cell physical IO bytes saved by storage index',
                            'physical read total IO requests',
                            'cell IO uncompressed bytes',
                            'cell physical IO interconnect bytes',
                            'IM scan bytes uncompressed',
                            'IM scan bytes in-memory',
                            'IM populate bytes from storage',
                            'IM repopulate (trickle) bytes from storage',
                            'IM scan rows',
                            'IM scan rows valid',
                            'IM scan rows optimized',
                            'IM scan rows excluded',
                            'IM scan rows projected',
                            'IM populate rows',
                            'IM populate rows',
                            'cell physical IO interconnect bytes', 
                            'IM repopulate (trickle incremental) total rows',
                            'IM prepopulate bytes from storage',
                            'IM scan rows pcode aggregated','session logical reads - IM',
                            'table scan disk non-IMC rows gotten',
                            'IM scan CUs invalid or missing revert to on disk extent',
                            'temp space allocated (bytes)',
                            'cell physical IO bytes saved by columnar cache',
                            'cell physical IO bytes eligible for smart IOs',
                            'physical reads direct', 'physical writes direct','cell physical write IO bytes eligible for offload',
                            'session uga memory','session pga memory','session uga memory max','session pga memory max')))
                AND    &inst_filter)
              GROUP BY inst,name]]},

          filestat={[[/*grid={topic='File I/O Stats',height=-1,order_by='-bytes,-tablespace_or_file',fixed_title='on'}*/ 
                WITH stat AS
                     (SELECT inst,
                             TABLESPACE_NAME,
                             regexp_substr(file_name, '[^\\/]+$') file_name,
                             PHYRDS + PHYWRTS IOPS,
                             BYTES / BLOCKS * (PHYBLKRD + PHYBLKWRT) bytes,
                             PHYRDS READS,
                             (READTIM + WRITETIM) * 10000 AVG_WAIT
                      FROM   DBA_DATA_FILES a
                      JOIN   (SELECT &inst1 inst, a.*
                             FROM    gv$filestat a
                             WHERE  (:V2 IS NOT NULL OR PHYRDS + PHYWRTS > 0)
                             AND    (&inst_filter)) b
                      ON     b.file# = a.file_id
                      UNION ALL
                      SELECT inst,
                             TABLESPACE_NAME,
                             regexp_substr(file_name, '[^\\/]+$') file_name,
                             PHYRDS + PHYWRTS IOPS,
                             BYTES / BLOCKS * (PHYBLKRD + PHYBLKWRT) bytes,
                             PHYRDS READS,
                             (READTIM + WRITETIM) * 10000 AVG_WAIT
                      FROM   DBA_TEMP_FILES a
                      JOIN   (SELECT &inst1 inst, a.*
                             FROM    gv$tempstat a
                             WHERE  (:V2 IS NOT NULL OR PHYRDS + PHYWRTS > 0)
                             AND    (&inst_filter)) b
                      ON     b.file# = a.file_id)
                SELECT * FROM (  
                    SELECT inst,
                           NVL2(file_name, 
                            '[F]'||case when upper(file_name) like TABLESPACE_NAME||'%' then file_name else SUBSTR(TABLESPACE_NAME, 1, 20) || '->' || file_name end, 
                            '[T]'||substr(tablespace_name,1,30)) tablespace_or_file,
                           SUM(iops) iops,
                           SUM(bytes) bytes,
                           SUM(READS) READS,
                           SUM(avg_Wait) avg_wait
                    FROM   stat
                    GROUP  BY inst, tablespace_name, ROLLUP(file_name))  
                WHERE UPPER(tablespace_or_file) LIKE upper(q'{%&V2%}')]]}
        }
        &filter: default={} f={AND (&0)}
        &inst1: default={decode(:V1,'0',''||inst_id,decode(count(distinct inst_id) over(),1,''||inst_id,'*'))}
        &inst_filter: default={(:V1 IS NULL AND (:snap_cmd is null or inst_id=userenv('instance')) OR :V1=''||INST_ID OR :V1='0')}
        &sql1: {sql={[[ SELECT * /*+ignore_me no_merge(sq) no_merge(ash) grid={topic='Active SQLs',height=0,include_zero=true,order_by='-aas,-ela',per_second='off'}*/
                        FROM   (SELECT inst,sql_id,ela,round(aas/:snap_interval,2) aas,cpu,
                                       substr(TRIM(regexp_replace(REPLACE(sql_text, chr(0)), '[' || chr(10) || chr(13) || chr(9) || ' ]+', ' ')), 1, 80) sql_text
                                FROM   (select inst,sql_id,sql_text,sum(busy)*1e-6 ela 
                                        from (SELECT &inst1 inst, sql_id, sql_text,
                                                     CPU_TIME+USER_IO_WAIT_TIME busy 
                                              FROM gv$sql 
                                              WHERE (users_executing>0 or users_opening>0 or last_active_time > SYSDATE - :snap_interval*2/86400) 
                                              AND &inst_filter)
                                        group by inst,sql_id,sql_text) sq
                                LEFT   JOIN (SELECT inst,sql_id,
                                                first_value(substr(event,1,25)) OVER(PARTITION BY inst, sql_id ORDER BY COUNT(1) DESC) top_event,
                                                SUM(cost) aas,
                                                SUM(NVL2(event, 0, cost)) CPU
                                        FROM   (SELECT &inst1 inst,&ash_cost cost, a.*
                                                FROM   gv$active_Session_history a
                                                WHERE  sql_id IS NOT NULL AND &inst_filter
                                                AND    sample_time > SYSDATE - :snap_interval / 86400)
                                        GROUP  BY inst, sql_id, event) ash
                                USING  (inst, sql_id)
                                WHERE  sql_text NOT LIKE '%ignore_me%'
                                ORDER  BY aas DESC nulls last, ela desc nulls last)
                        WHERE  ROWNUM <= 30]]},
                latch={[[
                        SELECT inst,name,
                               sum(ms) "ms",
                               sum(gets) "Gets",
                               sum(misses) "Misses",
                               sum(sleeps) "Sleeps",
                               sum(IMGETS) "ImGets",
                               sum(IMMISSES) "ImMisses",
                               sum(SPINS) "Spins"
                        FROM ( /*grid={topic='System Latch',fixed_title=true,height=0,order_by="-ms"}*/
                            SELECT &inst1 inst, 
                                    substr(NAME,1,40) name,
                                    WAIT_TIME/1000 ms,
                                    GETS,
                                    MISSES,
                                    SLEEPS,
                                    IMMEDIATE_GETS IMGETS,
                                    IMMEDIATE_MISSES IMMISSES,
                                    SPIN_GETS SPINS
                            FROM   gv$latch
                            WHERE  (GETS+IMMEDIATE_GETS+MISSES+IMMEDIATE_MISSES+SLEEPS+SPIN_GETS>0)
                            AND    &inst_filter
                        ) GROUP BY inst,name]]},
                iostat={[[/*grid={topic='System I/O Stats (S=Single-Block L=Multi-Block R=Read W=Write)',fixed_title=true,height=0,order_by='-bytes'}*/
                        SELECT nvl(inst,'*') inst,
                               nvl(func,'-TOTAL-') "Func",
                               --SUM(SUM(mbs)) OVER(PARTITION BY inst, func) "F_Bytes",
                               --SUM(SUM(reqs)) OVER(PARTITION BY inst, func) "F_IOPS",
                               fname "File",
                               SUM(reqs) "IOPS",
                               SUM(mbs) "Bytes",
                               SUM(SMALL_READ_MEGABYTES+LARGE_READ_MEGABYTES)  * 1024 * 1024 read,
                               SUM(SMALL_WRITE_MEGABYTES+LARGE_WRITE_MEGABYTES)  * 1024 * 1024 write,
                               '|' "|",
                               SUM(SMALL_READ_REQS + SMALL_WRITE_REQS) s_iops,
                               SUM(SMALL_READ_MEGABYTES) * 1024 * 1024 s_r,
                               SUM(SMALL_WRITE_MEGABYTES) * 1024 * 1024 s_w,
                               '|' "|",
                               SUM(LARGE_READ_REQS + LARGE_WRITE_REQS) l_iops,
                               SUM(LARGE_READ_MEGABYTES) * 1024 * 1024 l_r,
                               SUM(LARGE_WRITE_MEGABYTES) * 1024 * 1024 l_w
                        FROM   (SELECT &inst1 inst,
                                       regexp_substr(FUNCTION_NAME,'\S+') func,
                                       regexp_substr(FILETYPE_NAME,'\S+') fname,
                                       (SMALL_READ_MEGABYTES + SMALL_WRITE_MEGABYTES + LARGE_READ_MEGABYTES + LARGE_WRITE_MEGABYTES)*1024*1024 mbs,
                                       SMALL_READ_REQS + SMALL_WRITE_REQS + LARGE_READ_REQS + LARGE_WRITE_REQS reqs,
                                       a.*
                                FROM   gv$iostat_function_detail a 
                                WHERE  &inst_filter)
                        WHERE   reqs > 0
                        GROUP  BY rollup((inst, func, fname))
                        ORDER  BY "Bytes" DESC
                ]]}}
    --]]
]]*/
{
    sql={
        declare=[[sysstat CLOB;sysevent CLOB;bs PLS_INTEGER;]],
      [[
         $IF DBMS_DB_VERSION.VERSION>11 $THEN
            select (select json_arrayagg(json_array(inst_id,name,value) returning clob) 
                    from gv$sysstat where value>0),
                   (select json_arrayagg(json_array(inst_id,WAIT_CLASS,EVENT,TOTAL_WAITS,TIME_WAITED_MICRO) returning clob) 
                    from gv$system_event where TOTAL_WAITS>0)
            into sysstat,sysevent
            from dual;
         $END
         select value into bs from v$parameter where name='db_block_size';
      ]],  
      [[/*grid={topic='DB Servers'}*/
        q'!with time as(
          SELECT * FROM &gv
            SELECT logon_time current_time,sid,USERENV('instance') inst_id FROM v$session a JOIN v$mystat using(sid) WHERE ROWNUM<2
        ))) WHERE NOT(inst_id=userenv('instance') and sid=userenv('sid')))
        SELECT inst_id "#",
                (select to_char(nvl(max(current_time),sysdate),'HH24:MI:SS') 
                 from time b
                 where b.inst_id=c.inst_id) "OS Time",
                nullif(MAX(DECODE(stat_name, 'NUM_CPU_SOCKETS', VALUE))||'/', '/')
                || nullif(MAX(DECODE(stat_name, 'NUM_CPU_CORES', VALUE))||'/', '/') --
                || MAX(DECODE(stat_name, 'NUM_CPUS', VALUE)) --
                || '|'||MAX(DECODE(stat_name, 'LOAD', round(VALUE,1))) "CPU & Load",
                MAX(DECODE(stat_name, 'PHYSICAL_MEMORY_BYTES', value)) "PhyMem"
        FROM   gv$osstat c
        GROUP  BY inst_id
        ORDER  BY 1!']],
      '+',
      [[/*grid={topic='System Time Model',max_rows=10,fixed_title=true}*/
        SELECT name,max(pct) "Pct",sum(time) "Time"
        FROM (
            WITH model as(select * from gv$sys_time_model WHERE &inst_filter)
            SELECT substr(stat_name,1,25) name,
                    VALUE * 1e-6 time,
                   (select sum(b.value)*1e-6 from model b 
                    where  b.stat_name in('background elapsed time','DB time')) pct
            FROM   model a
            WHERE  stat_name not in('DB time','background elapsed time'))
        GROUP BY name]],
      '-',
      [[/*grid={topic='CPU/Memory/Perf',fixed_title=true,include_zero=true,order_by=1,per_second='on'}*/
        SELECT * 
        FROM(
            SELECT ''||inst_id "#", 
                SUM(DECODE(stat_name, 'BUSY_TIME', v/cpus)) "Busy",
                SUM(DECODE(stat_name, 'BUSY_TIME', v/cpus, 'IDLE_TIME', v/cpus)) idle,
                MAX(db/cpus) "DB",
                SUM(DECODE(stat_name, 'USER_TIME', v/cpus)) "User",
                SUM(DECODE(stat_name, 'SYS_TIME', v/cpus)) "Sys",
                '|' "|",
                MAX(DECODE(stat_name, 'FREE_MEMORY_BYTES', value)) "FreeMem",
                SUM(DECODE(stat_name, 'VM_IN_BYTES', value,'VM_OUT_BYTES',value)) "Swap"
            FROM  (SELECT inst_id,stat_name,VALUE,
                          (SELECT min(VALUE) FROM gv$osstat a WHERE a.inst_id = b.inst_id AND a.STAT_NAME in ('NUM_CPUS')) CPUS,
                          (select sum(value)/1e4 FROM gv$sys_time_model a WHERE a.inst_id = b.inst_id and a.stat_name in('DB CPU','background cpu time')) db,
                          VALUE v
                   FROM   gv$osstat b
                   WHERE  &inst_filter) a 
            GROUP  BY inst_id)
        JOIN (select inst_id "#", '|' "|", sum(TIME_WAITED_MICRO) "IO Wait",sum(total_waits) total_waits from &sysevent where wait_class like '%I/O%' group by inst_id)  using("#")
        JOIN (SELECT inst_id "#",
                     sum(CASE WHEN NAME IN('physical write total IO requests','physical read total IO requests') THEN VALUE END) IOPs,
                     SUM(DECODE(NAME, 'user commits', VALUE,'user rollbacks',VALUE)) "TPS",
                     sum(CASE WHEN NAME IN('user calls') THEN VALUE END) calls
               FROM  &sysstat b
               WHERE &inst_filter
               GROUP BY inst_id) using("#")
        JOIN (select inst_id "#",value "Resp" from gv$sys_time_model where stat_name='sql execute elapsed time') using("#")
        ]],
      '|', &sql1,
      '_',{
          &global_stats,
          '|', {
            [[
            SELECT inst, /*grid={topic='System Profiles',fixed_title=true,order_by=1}*/
                   SUM(DECODE(n, 'user logons cumulative', v)) "Logon",
                   SUM(DECODE(n, 'user calls', v)) "Call",
                   SUM(DECODE(n, 'execute count', v)) "Exec",
                   SUM(DECODE(n, 'parse count (total)', v)) "Parse",
                   SUM(DECODE(n, 'parse count (hard)', v)) "Hard",
                   '|' "|",
                   SUM(DECODE(n, 'session logical reads', v))*bs "Buffer",
                   SUM(DECODE(n, 'physical read total bytes', v)) "PhyRead",
                   SUM(DECODE(n, 'physical write total bytes', v)) "PhyWrite",
                   SUM(DECODE(n, 'physical reads direct', v))*bs "dxr",
                   SUM(DECODE(n, 'physical writes direct', v))*bs "dxw",
                   SUM(DECODE(n, 'redo size', v)) "Redo",
                   SUM(decode(n,'DBWR undo block writes',v))*bs "Undo",
            &ver   (select sum(w)*1024*1024 from (select &inst1 inst,SMALL_READ_MEGABYTES+SMALL_WRITE_MEGABYTES+LARGE_READ_MEGABYTES+LARGE_WRITE_MEGABYTES w from GV$IOSTAT_FUNCTION WHERE FUNCTION_NAME='DBWR' and &inst_filter) b where b.inst=a.inst) dbwr,
            &ver   (select sum(w)*1024*1024 from (select &inst1 inst,SMALL_READ_MEGABYTES+SMALL_WRITE_MEGABYTES+LARGE_READ_MEGABYTES+LARGE_WRITE_MEGABYTES w from GV$IOSTAT_FUNCTION WHERE FUNCTION_NAME='LGWR' and &inst_filter) b where b.inst=a.inst) lgwr,
                   (select sum(w) from (select &inst1 inst,PHYBLKRD+PHYBLKWRT w from GV$TEMPSTAT WHERE &inst_filter) b where b.inst=a.inst)*bs"Temp",
                   SUM(case when n like 'byte%SQL*Net%' then v end) "SQL*Net"
            FROM   (SELECT &inst1 inst, NAME n, VALUE v FROM &sysstat WHERE &inst_filter AND value>0) a
            GROUP  BY inst]],
            '-',
            [[SELECT * FROM &check_access_celldb
                 (SELECT inst_id inst,/*grid={topic='Exadata Profiles',fixed_title=true,order_by=1,bypassemptyrs=true}*/
                         SUM(DECODE(n, 'cell physical IO interconnect bytes', v)) "BandWidth",
                         SUM(DECODE(n, 'cell physical IO bytes eligible for predicate offload', v,'cell physical write IO bytes eligible for offload',v)) "Offload",
                         SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflOut",
                         SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflEff",
                         SUM(DECODE(n, 'cell IO uncompressed bytes', v)) "Unzip",
                         SUM(DECODE(n, 'HCC scan cell bytes compressed', v,'HCC scan rdbms bytes compressed',v)) "zip",
                         SUM(DECODE(n, 'physical read total bytes optimized', v)) "OptRead",
                         SUM(DECODE(n, 'physical write total bytes optimized', v)) "OptWrite",
                         SUM(DECODE(n, 'cell physical IO bytes processed for IM capacity', v)) "CellIM",
                         SUM(DECODE(n, 'cell physical IO bytes saved by storage index', v)) "SISave",
                         SUM(DECODE(n, 'cell physical IO bytes saved by columnar cache',v)) "CCSave",
                         SUM(DECODE(n, 'cell flash cache read hits', v)) "FcHit"
                  FROM   (SELECT &inst1 inst_id, NAME n, VALUE v,
                                  count(case when NAME like '%bytes optimized%' then 1 end) over() offl
                          FROM &sysstat WHERE &inst_filter  AND value>0)
                  WHERE  offl>0
                  GROUP  BY inst_id)]],
            '-',
            [[SELECT inst_id inst,/*grid={topic='In-Memory Stats',fixed_title=true,order_by=1,bypassemptyrs=true}*/
                     SUM(DECODE(n, 'session logical reads - IM', v,0))*bs "IM-LIO",
                     SUM(DECODE(n, 'session logical reads', v,0))*bs "LIO(%)",
                     SUM(DECODE(n, 'IM scan bytes in-memory', v,0)) "Bytes",
                     SUM(DECODE(n, 'IM scan bytes uncompressed', v,0)) "Unzip",
                     SUM(DECODE(n, 'IM populate bytes from storage', v,0)) "Pops",
                     SUM(DECODE(n, 'IM repopulate (trickle) bytes from storage',v,'IM prepopulate bytes from storage', v,0)) "re-Pops",
                     SUM(DECODE(n, 'IM scan CUs invalid or missing revert to on disk extent', v,0)) "missCU",
                     '|' "|",
                     SUM(DECODE(n, 'IM scan rows', v,0)) "Rows",
                     SUM(DECODE(n, 'IM scan rows valid', v,0)) "Valid",
                     SUM(DECODE(n, 'IM scan rows optimized', v,0)) "Skip",
                     SUM(DECODE(n, 'IM scan rows excluded', v,0)) "Exclude",
                     SUM(DECODE(n, 'IM scan rows projected', v,0)) "Proj",
                     SUM(DECODE(n, 'IM scan rows pcode aggregated',v)) "pcode",
                     SUM(DECODE(n, 'IM populate rows', v,0)) "Popr",
                     SUM(DECODE(n, 'IM repopulate (trickle incremental) total rows', v,'IM repopulate rows',v,0)) "re-Popr"
              FROM   (SELECT &inst1 inst_id, NAME n, VALUE v FROM &sysstat WHERE &inst_filter  AND value>0)
              GROUP  BY inst_id]],
            '-',
            [[/*grid={topic='RAC Profiles',fixed_title=true,order_by=1,bypassemptyrs=true}*/
                SELECT inst,
                       SUM(DECODE(n,
                                  'gc cr blocks received',bs * v,
                                  'gc cr blocks served',bs * v,
                                  'gc current blocks received',bs * v,
                                  'gc current blocks served',bs * v,
                                  'ges msgs received',v * 200,
                                  'gcs msgs received',v * 200,
                                  'gcs messages sent',v * 200,
                                  'ges msgs sent',v * 200,
                                  'gc status messages sent',v * 200,
                                  'gc status messages received',v * 200,
                                  'ka messages sent',v * 200,
                                  'ka grants received',v * 200)) traffic,
                       SUM(bs * DECODE(n, 'gc blocks lost', v)) lost,
                       (select sum(w) from (select &inst1 inst,TOTAL_WAITS w from &sysevent WHERE event='gc cr failure' and &inst_filter) b where b.inst=a.inst) fail,
                        '|' "|",
                       SUM(bs * DECODE(n, 'gc cr blocks served', v, 'gc cr blocks received', v)) cr,
                       SUM(bs * DECODE(n, 'gc cr blocks received', v)) cr_rec,
                       SUM(bs * DECODE(n, 'gc cr block receive time', v*10000)) cr_rec_avg,
                       SUM(bs * DECODE(n, 'gc cr blocks flushed', v)) cr_flush,
                       SUM(bs * DECODE(n, 'gc cr block flush time', v*10000)) cr_fl_avg,
                        '|' "|",
                       SUM(bs * DECODE(n, 'gc current blocks received', v, 'gc current blocks served', v)) cu,
                       SUM(bs * DECODE(n, 'gc current blocks received', v)) cu_rec,
                       SUM(bs * DECODE(n, 'gc current block receive time', v*10000)) cu_rec_avg,
                       SUM(bs * DECODE(n, 'gc current blocks flushed', v)) cu_flush,
                       SUM(bs * DECODE(n, 'gc current block flush time', v*10000)) cu_fl_avg,
                        '|' "|",
                       SUM(DECODE(n, 'global enqueue get time',v*10000)) enqs
                FROM   (SELECT  &inst1  inst, NAME n, VALUE v FROM &sysstat WHERE &inst_filter) a
                GROUP  BY inst]],
            '-',
            [[WITH ASH as(/*grid={topic='System Events',fixed_title=true,max_rows=40,order_by="-cost"}*/
                SELECT inst,event,round(SUM(cost)/:snap_interval,2) aas, MAX(w) max_ms, 
                       MAX(sql_id) keep(dense_rank LAST ORDER BY cnt) top_sql,
                       round(count(distinct sql_id)/:snap_interval,1) sqls
                FROM   (SELECT &inst1 inst, SQL_ID, SQL_PLAN_HASH_VALUE, EVENT, time_waited w,
                               &ash_cost cost,
                               SUM(&ash_cost) OVER(PARTITION BY inst_id, event) cnt
                        FROM   gv$active_session_history
                        WHERE  sample_time >= SYSDATE - :snap_interval/86400
                        AND    &inst_filter
                        AND    event IS NOT NULL)
                GROUP  BY inst,event)
              SELECT inst,
                     wait_class, 
                     substr(event,1,35) name,
                     top_sql,
                     lpad(SQLS,4) "SQLs",
                     aas,
                     waits "Waits",
                     '|' "|",
                     micro "Cost",
                     0 "AVG",
                     max_ms "Max"
              FROM   (SELECT inst,wait_class,event,
                             sum(total_waits) waits,sum(TIME_WAITED_MICRO) micro
                      FROM  (select &inst1 inst, a.* 
                             from   &sysevent a 
                             WHERE (:filter is not null or total_waits>0) 
                             AND &inst_filter &filter)
                      GROUP  BY inst,wait_class,event)
              LEFT   JOIN ash using(inst,event)
              WHERE  (wait_class!='Idle')]]
            }
        }
    },
    delta_by=[[IOPS,MBPS,SMALL,IO Wait,Calls,Resp,OflEff,OflIn,IM-LIO,LIO(%),dxr,dxw,dbwr,lgwr,temp,offload,BandWidth,
               SISave,OflOut,OptRead,OptWrite,CellIM,CCSave,FcHit,Fc(%),Unzip,zip,ela,missCU,bytes,rows,Valid,skip,
               exclude,pcode,proj,pops,re-pops,popr,re-popr,Disk,Pct,Swap,Logon,Call,Exec,TPS,Parse,Hard,CcHit,Buffer,
               PhyRead,PhyWrite,Redo,Undo,SQL*Net,value,cost,waits,GETS,MISSES,SLEEPS,IMGETS,IMMISSES,SPINS,time,Busy,idle,db,
               User,Sys,I/O,Nice,traffic,flash,cr,cu,cr_rec,cu_rec,cr_rec_avg,cu_rec_avg,cr_flush,cu_flush,cr_fl_avg,
               cu_fl_avg,lost,fail,enqs,read,write,s_r,l_r,s_w,l_w,F_IOPS,s_iops,l_iops,reads,avg_wait,total_waits]],
    group_by="inst,sql_id,name,LOCATION,addr,#,func,file,tablespace_or_file",
    calc_rules={avg='[Cost]/[waits]',
                ['Pct']='[time]*100/[Pct]',
                ['LIO(%)']='[IM-LIO]*100/[LIO(%)]',
                ['Valid']='[Valid]*100/[rows]',
                ['Skip']='[Skip]*100/[rows]',
                ['Exclude']='[Exclude]*100/[rows]',
                ['hard']='[hard]*100/[parse]',
                ['dxr']='[dxr]*100/[PhyRead]',
                ['dxw']='[dxw]*100/[PhyWrite]',
                ['Fc(%)']='[FcHit]*100/[Fc(%)]',
                FLASH='[FLASH]*100/[IOPS]',
                SMALL='[SMALL]*100/[IOPS]',
                ['OflIn']='[offload]*100/[OflIn]',
                ['OflOut']='[OflOut]*100/[BandWidth]',
                ['OflEff']='100-[OflEff]*100/([Unzip]+[SISave])',
                ['Resp']='[Resp]/[Calls]',
                ['IO Wait']='[IO Wait]/[total_waits]',
                busy='[busy]*100/[idle]',
                user='[user]*100/[idle]',
                sys='[sys]*100/[idle]',
                db='[db]*100/[idle]',
                cr_rec_avg='[cr_rec_avg]/[cr_rec]',
                cu_rec_avg='[cu_rec_avg]/[cu_rec]',
                cr_fl_avg='[cr_fl_avg]/[cr_flush]',
                cu_fl_avg='[cu_fl_avg]/[cu_flush]',
                avg_wait='[avg_wait]/[iops]',
                reads='[reads]*100/[iops]'},
    column_formatter={KMG1=[[MBPS,SISave,IM-LIO,Unzip,zip,pops,re-pops,phyMem,freeMem,Swap,Buffer,PhyRead,
                            PhyWrite,Redo,Undo,Temp,SQL*Net,OptRead,OptWrite,CellIM,CCSave,offload,BandWidth,bytes,
                            traffic,cr,cu,cr_rec,cu_rec,cr_flush,cu_flush,cr_fl_avg,cu_fl_avg,lost,dbwr,lgwr,
                            read,write,s_r,l_r,s_w,l_w]],
                     TMB1='waits,IOPS,call,exec,TPS,parse,cchit,FcHit,popr,re-popr,rows,proj,Disk,Cache,pcode,missCU,fail,,F_IOPS,s_iops,l_iops',
                     noprint='calls,ela,time,idle,total_waits',
                     USMHD1='cr_rec_avg,cu_rec_avg,cr_fl_avg,cu_fl_avg,IO Wait,resp,cost,max,avg,enqs,avg_wait',
                     ['%.1f%%']='reads,Hard,Pct,dxr,dxw,OflIn,OflOut,valid,Skip,Exclude,OflEff,FLASH,SMALL',
                     ['HEADING #']='INST',
                     ['ADDRATIO PCT1']="cost",
                     ['#,##0']='value'}
}